
SolarBoatCockpitButtons.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fc0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005150  08005150  00006150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051dc  080051dc  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  080051dc  080051dc  000061dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051e4  080051e4  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051e4  080051e4  000061e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051e8  080051e8  000061e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080051ec  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  2000005c  08005248  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08005248  00007348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e2d  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002969  00000000  00000000  00019eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  0001c828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cec  00000000  00000000  0001d8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000219e5  00000000  00000000  0001e5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013fe3  00000000  00000000  0003ffa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc26b  00000000  00000000  00053f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001201f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a54  00000000  00000000  0012023c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00124c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005138 	.word	0x08005138

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005138 	.word	0x08005138

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000566:	4b34      	ldr	r3, [pc, #208]	@ (8000638 <MX_CAN1_Init+0xd8>)
 8000568:	4a34      	ldr	r2, [pc, #208]	@ (800063c <MX_CAN1_Init+0xdc>)
 800056a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 800056c:	4b32      	ldr	r3, [pc, #200]	@ (8000638 <MX_CAN1_Init+0xd8>)
 800056e:	2208      	movs	r2, #8
 8000570:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000572:	4b31      	ldr	r3, [pc, #196]	@ (8000638 <MX_CAN1_Init+0xd8>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000578:	4b2f      	ldr	r3, [pc, #188]	@ (8000638 <MX_CAN1_Init+0xd8>)
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800057e:	4b2e      	ldr	r3, [pc, #184]	@ (8000638 <MX_CAN1_Init+0xd8>)
 8000580:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000584:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 8000586:	4b2c      	ldr	r3, [pc, #176]	@ (8000638 <MX_CAN1_Init+0xd8>)
 8000588:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 800058c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800058e:	4b2a      	ldr	r3, [pc, #168]	@ (8000638 <MX_CAN1_Init+0xd8>)
 8000590:	2200      	movs	r2, #0
 8000592:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000594:	4b28      	ldr	r3, [pc, #160]	@ (8000638 <MX_CAN1_Init+0xd8>)
 8000596:	2200      	movs	r2, #0
 8000598:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800059a:	4b27      	ldr	r3, [pc, #156]	@ (8000638 <MX_CAN1_Init+0xd8>)
 800059c:	2200      	movs	r2, #0
 800059e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005a0:	4b25      	ldr	r3, [pc, #148]	@ (8000638 <MX_CAN1_Init+0xd8>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005a6:	4b24      	ldr	r3, [pc, #144]	@ (8000638 <MX_CAN1_Init+0xd8>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005ac:	4b22      	ldr	r3, [pc, #136]	@ (8000638 <MX_CAN1_Init+0xd8>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005b2:	4821      	ldr	r0, [pc, #132]	@ (8000638 <MX_CAN1_Init+0xd8>)
 80005b4:	f000 fd22 	bl	8000ffc <HAL_CAN_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80005be:	f000 faaf 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	2014      	movs	r0, #20
 80005c8:	f001 fc4f 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80005cc:	2014      	movs	r0, #20
 80005ce:	f001 fc68 	bl	8001ea2 <HAL_NVIC_EnableIRQ>

    CAN_FilterTypeDef sFilterConfig;

    sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterIdHigh = 0x360<<5;
 80005d6:	f44f 43d8 	mov.w	r3, #27648	@ 0x6c00
 80005da:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x360<<5;
 80005dc:	f44f 43d8 	mov.w	r3, #27648	@ 0x6c00
 80005e0:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = 0xff<<5;
 80005e2:	f44f 53ff 	mov.w	r3, #8160	@ 0x1fe0
 80005e6:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0xff<<5;
 80005e8:	f44f 53ff 	mov.w	r3, #8160	@ 0x1fe0
 80005ec:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005ee:	2301      	movs	r3, #1
 80005f0:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterActivation = ENABLE;
 80005f2:	2301      	movs	r3, #1
 80005f4:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterBank = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61bb      	str	r3, [r7, #24]
    sFilterConfig.SlaveStartFilterBank = 14;
 80005fe:	230e      	movs	r3, #14
 8000600:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000602:	463b      	mov	r3, r7
 8000604:	4619      	mov	r1, r3
 8000606:	480c      	ldr	r0, [pc, #48]	@ (8000638 <MX_CAN1_Init+0xd8>)
 8000608:	f000 fdf3 	bl	80011f2 <HAL_CAN_ConfigFilter>


  	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800060c:	480a      	ldr	r0, [pc, #40]	@ (8000638 <MX_CAN1_Init+0xd8>)
 800060e:	f000 feba 	bl	8001386 <HAL_CAN_Start>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_CAN1_Init+0xbc>
  		Error_Handler();
 8000618:	f000 fa82 	bl	8000b20 <Error_Handler>
  	}

  	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800061c:	2102      	movs	r1, #2
 800061e:	4806      	ldr	r0, [pc, #24]	@ (8000638 <MX_CAN1_Init+0xd8>)
 8000620:	f001 f8e7 	bl	80017f2 <HAL_CAN_ActivateNotification>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_CAN1_Init+0xce>
  	{
  		Error_Handler();
 800062a:	f000 fa79 	bl	8000b20 <Error_Handler>
  	}

  /* USER CODE END CAN1_Init 2 */

}
 800062e:	bf00      	nop
 8000630:	3728      	adds	r7, #40	@ 0x28
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200000c0 	.word	0x200000c0
 800063c:	40006400 	.word	0x40006400

08000640 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	@ 0x28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a1c      	ldr	r2, [pc, #112]	@ (80006d0 <HAL_CAN_MspInit+0x90>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d131      	bne.n	80006c6 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000662:	4b1c      	ldr	r3, [pc, #112]	@ (80006d4 <HAL_CAN_MspInit+0x94>)
 8000664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000666:	4a1b      	ldr	r2, [pc, #108]	@ (80006d4 <HAL_CAN_MspInit+0x94>)
 8000668:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800066c:	6593      	str	r3, [r2, #88]	@ 0x58
 800066e:	4b19      	ldr	r3, [pc, #100]	@ (80006d4 <HAL_CAN_MspInit+0x94>)
 8000670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <HAL_CAN_MspInit+0x94>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067e:	4a15      	ldr	r2, [pc, #84]	@ (80006d4 <HAL_CAN_MspInit+0x94>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000686:	4b13      	ldr	r3, [pc, #76]	@ (80006d4 <HAL_CAN_MspInit+0x94>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000692:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000698:	2302      	movs	r3, #2
 800069a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a0:	2303      	movs	r3, #3
 80006a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006a4:	2309      	movs	r3, #9
 80006a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b2:	f001 fc11 	bl	8001ed8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	2014      	movs	r0, #20
 80006bc:	f001 fbd5 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006c0:	2014      	movs	r0, #20
 80006c2:	f001 fbee 	bl	8001ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006c6:	bf00      	nop
 80006c8:	3728      	adds	r7, #40	@ 0x28
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40006400 	.word	0x40006400
 80006d4:	40021000 	.word	0x40021000

080006d8 <CAN_TX_filter_init>:
}

/* USER CODE BEGIN 1 */

void CAN_TX_filter_init(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
	TxHeader.StdId = 0x360;
 80006dc:	4b0b      	ldr	r3, [pc, #44]	@ (800070c <CAN_TX_filter_init+0x34>)
 80006de:	f44f 7258 	mov.w	r2, #864	@ 0x360
 80006e2:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0;
 80006e4:	4b09      	ldr	r3, [pc, #36]	@ (800070c <CAN_TX_filter_init+0x34>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 80006ea:	4b08      	ldr	r3, [pc, #32]	@ (800070c <CAN_TX_filter_init+0x34>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80006f0:	4b06      	ldr	r3, [pc, #24]	@ (800070c <CAN_TX_filter_init+0x34>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 8;
 80006f6:	4b05      	ldr	r3, [pc, #20]	@ (800070c <CAN_TX_filter_init+0x34>)
 80006f8:	2208      	movs	r2, #8
 80006fa:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80006fc:	4b03      	ldr	r3, [pc, #12]	@ (800070c <CAN_TX_filter_init+0x34>)
 80006fe:	2200      	movs	r2, #0
 8000700:	751a      	strb	r2, [r3, #20]
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	2000009c 	.word	0x2000009c

08000710 <CAN_SendState>:


void CAN_SendState(int state)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
    TxData[0] = (state & 0xFF00) >> 8;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	121b      	asrs	r3, r3, #8
 800071c:	b2da      	uxtb	r2, r3
 800071e:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <CAN_SendState+0x64>)
 8000720:	701a      	strb	r2, [r3, #0]
    TxData[1] = state & 0x00FF;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4b13      	ldr	r3, [pc, #76]	@ (8000774 <CAN_SendState+0x64>)
 8000728:	705a      	strb	r2, [r3, #1]
    TxData[2] = 0;
 800072a:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <CAN_SendState+0x64>)
 800072c:	2200      	movs	r2, #0
 800072e:	709a      	strb	r2, [r3, #2]
    TxData[3] = 0;
 8000730:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <CAN_SendState+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	70da      	strb	r2, [r3, #3]
    TxData[4] = 0;
 8000736:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <CAN_SendState+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	711a      	strb	r2, [r3, #4]
    TxData[5] = 0;
 800073c:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <CAN_SendState+0x64>)
 800073e:	2200      	movs	r2, #0
 8000740:	715a      	strb	r2, [r3, #5]
    TxData[6] = 0;
 8000742:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <CAN_SendState+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	719a      	strb	r2, [r3, #6]
    TxData[7] = 0;
 8000748:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <CAN_SendState+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	71da      	strb	r2, [r3, #7]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, (uint8_t*)TxData, &TxMailbox) != HAL_OK)
 800074e:	4b0a      	ldr	r3, [pc, #40]	@ (8000778 <CAN_SendState+0x68>)
 8000750:	4a08      	ldr	r2, [pc, #32]	@ (8000774 <CAN_SendState+0x64>)
 8000752:	490a      	ldr	r1, [pc, #40]	@ (800077c <CAN_SendState+0x6c>)
 8000754:	480a      	ldr	r0, [pc, #40]	@ (8000780 <CAN_SendState+0x70>)
 8000756:	f000 fe5a 	bl	800140e <HAL_CAN_AddTxMessage>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d005      	beq.n	800076c <CAN_SendState+0x5c>
    {
        uint32_t error = HAL_CAN_GetError(&hcan1);
 8000760:	4807      	ldr	r0, [pc, #28]	@ (8000780 <CAN_SendState+0x70>)
 8000762:	f001 fa9b 	bl	8001c9c <HAL_CAN_GetError>
 8000766:	60f8      	str	r0, [r7, #12]
        Error_Handler();
 8000768:	f000 f9da 	bl	8000b20 <Error_Handler>
    }
}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	200000b4 	.word	0x200000b4
 8000778:	200000bc 	.word	0x200000bc
 800077c:	2000009c 	.word	0x2000009c
 8000780:	200000c0 	.word	0x200000c0

08000784 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800078c:	4b07      	ldr	r3, [pc, #28]	@ (80007ac <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800078e:	4a08      	ldr	r2, [pc, #32]	@ (80007b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000790:	2100      	movs	r1, #0
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f000 ff0b 	bl	80015ae <HAL_CAN_GetRxMessage>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 800079e:	f000 f9bf 	bl	8000b20 <Error_Handler>

  if ((RxHeader.StdId == 0x360))
  {

  }
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000094 	.word	0x20000094
 80007b0:	20000078 	.word	0x20000078

080007b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	4b37      	ldr	r3, [pc, #220]	@ (80008a8 <MX_GPIO_Init+0xf4>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ce:	4a36      	ldr	r2, [pc, #216]	@ (80008a8 <MX_GPIO_Init+0xf4>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007d6:	4b34      	ldr	r3, [pc, #208]	@ (80008a8 <MX_GPIO_Init+0xf4>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b31      	ldr	r3, [pc, #196]	@ (80008a8 <MX_GPIO_Init+0xf4>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e6:	4a30      	ldr	r2, [pc, #192]	@ (80008a8 <MX_GPIO_Init+0xf4>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ee:	4b2e      	ldr	r3, [pc, #184]	@ (80008a8 <MX_GPIO_Init+0xf4>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	4b2b      	ldr	r3, [pc, #172]	@ (80008a8 <MX_GPIO_Init+0xf4>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fe:	4a2a      	ldr	r2, [pc, #168]	@ (80008a8 <MX_GPIO_Init+0xf4>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000806:	4b28      	ldr	r3, [pc, #160]	@ (80008a8 <MX_GPIO_Init+0xf4>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2101      	movs	r1, #1
 8000816:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800081a:	f001 fcc7 	bl	80021ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RedLed_Pin|LD3_Pin|GreenLed_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2129      	movs	r1, #41	@ 0x29
 8000822:	4822      	ldr	r0, [pc, #136]	@ (80008ac <MX_GPIO_Init+0xf8>)
 8000824:	f001 fcc2 	bl	80021ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8000828:	2301      	movs	r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	4619      	mov	r1, r3
 800083e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000842:	f001 fb49 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ButtonDown_Pin|ButtonUp_Pin;
 8000846:	2328      	movs	r3, #40	@ 0x28
 8000848:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800084a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800084e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	4619      	mov	r1, r3
 800085a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800085e:	f001 fb3b 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RedLed_Pin|LD3_Pin|GreenLed_Pin;
 8000862:	2329      	movs	r3, #41	@ 0x29
 8000864:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	4619      	mov	r1, r3
 8000878:	480c      	ldr	r0, [pc, #48]	@ (80008ac <MX_GPIO_Init+0xf8>)
 800087a:	f001 fb2d 	bl	8001ed8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	2009      	movs	r0, #9
 8000884:	f001 faf1 	bl	8001e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000888:	2009      	movs	r0, #9
 800088a:	f001 fb0a 	bl	8001ea2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	2017      	movs	r0, #23
 8000894:	f001 fae9 	bl	8001e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000898:	2017      	movs	r0, #23
 800089a:	f001 fb02 	bl	8001ea2 <HAL_NVIC_EnableIRQ>

}
 800089e:	bf00      	nop
 80008a0:	3720      	adds	r7, #32
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000
 80008ac:	48000400 	.word	0x48000400

080008b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	db0a      	blt.n	80008da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	490c      	ldr	r1, [pc, #48]	@ (80008fc <__NVIC_SetPriority+0x4c>)
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	0112      	lsls	r2, r2, #4
 80008d0:	b2d2      	uxtb	r2, r2
 80008d2:	440b      	add	r3, r1
 80008d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d8:	e00a      	b.n	80008f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4908      	ldr	r1, [pc, #32]	@ (8000900 <__NVIC_SetPriority+0x50>)
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	f003 030f 	and.w	r3, r3, #15
 80008e6:	3b04      	subs	r3, #4
 80008e8:	0112      	lsls	r2, r2, #4
 80008ea:	b2d2      	uxtb	r2, r2
 80008ec:	440b      	add	r3, r1
 80008ee:	761a      	strb	r2, [r3, #24]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	e000e100 	.word	0xe000e100
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3b01      	subs	r3, #1
 8000910:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000914:	d301      	bcc.n	800091a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000916:	2301      	movs	r3, #1
 8000918:	e00f      	b.n	800093a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091a:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <SysTick_Config+0x40>)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3b01      	subs	r3, #1
 8000920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000922:	210f      	movs	r1, #15
 8000924:	f04f 30ff 	mov.w	r0, #4294967295
 8000928:	f7ff ffc2 	bl	80008b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800092c:	4b05      	ldr	r3, [pc, #20]	@ (8000944 <SysTick_Config+0x40>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000932:	4b04      	ldr	r3, [pc, #16]	@ (8000944 <SysTick_Config+0x40>)
 8000934:	2207      	movs	r2, #7
 8000936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	e000e010 	.word	0xe000e010

08000948 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800094c:	f000 fae1 	bl	8000f12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000950:	f000 f82e 	bl	80009b0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */


  SysTick_Config(SystemCoreClock / 1000);
 8000954:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <main+0x58>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a12      	ldr	r2, [pc, #72]	@ (80009a4 <main+0x5c>)
 800095a:	fba2 2303 	umull	r2, r3, r2, r3
 800095e:	099b      	lsrs	r3, r3, #6
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ffcf 	bl	8000904 <SysTick_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000966:	f7ff ff25 	bl	80007b4 <MX_GPIO_Init>
  MX_CAN1_Init();
 800096a:	f7ff fdf9 	bl	8000560 <MX_CAN1_Init>
  MX_TIM2_Init();
 800096e:	f000 f99b 	bl	8000ca8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000972:	f000 fa0b 	bl	8000d8c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  CAN_TX_filter_init();
 8000976:	f7ff feaf 	bl	80006d8 <CAN_TX_filter_init>
  state = 8;
 800097a:	4b0b      	ldr	r3, [pc, #44]	@ (80009a8 <main+0x60>)
 800097c:	2208      	movs	r2, #8
 800097e:	601a      	str	r2, [r3, #0]
  CAN_SendState(state);
 8000980:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <main+0x60>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fec3 	bl	8000710 <CAN_SendState>

  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 800098a:	4808      	ldr	r0, [pc, #32]	@ (80009ac <main+0x64>)
 800098c:	f002 fe3a 	bl	8003604 <HAL_TIM_Base_Start_IT>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d002      	beq.n	800099c <main+0x54>
  {
	  Error_Handler();
 8000996:	f000 f8c3 	bl	8000b20 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800099a:	bf00      	nop
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <main+0x54>
 80009a0:	20000000 	.word	0x20000000
 80009a4:	10624dd3 	.word	0x10624dd3
 80009a8:	20000120 	.word	0x20000120
 80009ac:	20000128 	.word	0x20000128

080009b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b096      	sub	sp, #88	@ 0x58
 80009b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	2244      	movs	r2, #68	@ 0x44
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f003 ff3a 	bl	8004838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c4:	463b      	mov	r3, r7
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009d2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009d6:	f001 fc37 	bl	8002248 <HAL_PWREx_ControlVoltageScaling>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009e0:	f000 f89e 	bl	8000b20 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009e4:	f001 fc12 	bl	800220c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80009e8:	4b21      	ldr	r3, [pc, #132]	@ (8000a70 <SystemClock_Config+0xc0>)
 80009ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009ee:	4a20      	ldr	r2, [pc, #128]	@ (8000a70 <SystemClock_Config+0xc0>)
 80009f0:	f023 0318 	bic.w	r3, r3, #24
 80009f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80009f8:	2314      	movs	r3, #20
 80009fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009fc:	2301      	movs	r3, #1
 80009fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a00:	2301      	movs	r3, #1
 8000a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a08:	2360      	movs	r3, #96	@ 0x60
 8000a0a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a10:	2301      	movs	r3, #1
 8000a12:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a14:	2301      	movs	r3, #1
 8000a16:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000a18:	2310      	movs	r3, #16
 8000a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a1c:	2307      	movs	r3, #7
 8000a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a20:	2302      	movs	r3, #2
 8000a22:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a24:	2302      	movs	r3, #2
 8000a26:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f001 fc61 	bl	80022f4 <HAL_RCC_OscConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a38:	f000 f872 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3c:	230f      	movs	r3, #15
 8000a3e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a40:	2303      	movs	r3, #3
 8000a42:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a50:	463b      	mov	r3, r7
 8000a52:	2101      	movs	r1, #1
 8000a54:	4618      	mov	r0, r3
 8000a56:	f002 f861 	bl	8002b1c <HAL_RCC_ClockConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a60:	f000 f85e 	bl	8000b20 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a64:	f002 fc74 	bl	8003350 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a68:	bf00      	nop
 8000a6a:	3758      	adds	r7, #88	@ 0x58
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40021000 	.word	0x40021000

08000a74 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
    CAN_SendState(state);
 8000a7c:	4b04      	ldr	r3, [pc, #16]	@ (8000a90 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fe45 	bl	8000710 <CAN_SendState>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000120 	.word	0x20000120

08000a94 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	80fb      	strh	r3, [r7, #6]

    if(GPIO_Pin == ButtonDown_Pin)
 8000a9e:	88fb      	ldrh	r3, [r7, #6]
 8000aa0:	2b08      	cmp	r3, #8
 8000aa2:	d109      	bne.n	8000ab8 <HAL_GPIO_EXTI_Callback+0x24>
    {
        if(state > minState)
 8000aa4:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <HAL_GPIO_EXTI_Callback+0x78>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	dd13      	ble.n	8000ad4 <HAL_GPIO_EXTI_Callback+0x40>
        {
            state = state - 1;
 8000aac:	4b17      	ldr	r3, [pc, #92]	@ (8000b0c <HAL_GPIO_EXTI_Callback+0x78>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	4a16      	ldr	r2, [pc, #88]	@ (8000b0c <HAL_GPIO_EXTI_Callback+0x78>)
 8000ab4:	6013      	str	r3, [r2, #0]
 8000ab6:	e00d      	b.n	8000ad4 <HAL_GPIO_EXTI_Callback+0x40>
        }
    }
    else if(GPIO_Pin == ButtonUp_Pin) {
 8000ab8:	88fb      	ldrh	r3, [r7, #6]
 8000aba:	2b20      	cmp	r3, #32
 8000abc:	d109      	bne.n	8000ad2 <HAL_GPIO_EXTI_Callback+0x3e>
        if(state < maxState)
 8000abe:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <HAL_GPIO_EXTI_Callback+0x78>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2b0b      	cmp	r3, #11
 8000ac4:	dc06      	bgt.n	8000ad4 <HAL_GPIO_EXTI_Callback+0x40>
        {
            state = state + 1;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <HAL_GPIO_EXTI_Callback+0x78>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	3301      	adds	r3, #1
 8000acc:	4a0f      	ldr	r2, [pc, #60]	@ (8000b0c <HAL_GPIO_EXTI_Callback+0x78>)
 8000ace:	6013      	str	r3, [r2, #0]
 8000ad0:	e000      	b.n	8000ad4 <HAL_GPIO_EXTI_Callback+0x40>
        }
    } else {
        __NOP();
 8000ad2:	bf00      	nop
    }

    uart_buf_len = sprintf(uart_buf, "state : %lu\n", state);
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8000b0c <HAL_GPIO_EXTI_Callback+0x78>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	490d      	ldr	r1, [pc, #52]	@ (8000b10 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000adc:	480d      	ldr	r0, [pc, #52]	@ (8000b14 <HAL_GPIO_EXTI_Callback+0x80>)
 8000ade:	f003 fe8b 	bl	80047f8 <siprintf>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	4a0c      	ldr	r2, [pc, #48]	@ (8000b18 <HAL_GPIO_EXTI_Callback+0x84>)
 8000ae6:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b18 <HAL_GPIO_EXTI_Callback+0x84>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	2364      	movs	r3, #100	@ 0x64
 8000af0:	4908      	ldr	r1, [pc, #32]	@ (8000b14 <HAL_GPIO_EXTI_Callback+0x80>)
 8000af2:	480a      	ldr	r0, [pc, #40]	@ (8000b1c <HAL_GPIO_EXTI_Callback+0x88>)
 8000af4:	f003 f9ae 	bl	8003e54 <HAL_UART_Transmit>
    CAN_SendState(state);
 8000af8:	4b04      	ldr	r3, [pc, #16]	@ (8000b0c <HAL_GPIO_EXTI_Callback+0x78>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fe07 	bl	8000710 <CAN_SendState>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000120 	.word	0x20000120
 8000b10:	08005150 	.word	0x08005150
 8000b14:	200000e8 	.word	0x200000e8
 8000b18:	2000011c 	.word	0x2000011c
 8000b1c:	20000174 	.word	0x20000174

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <Error_Handler+0x8>

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b36:	4a0e      	ldr	r2, [pc, #56]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b4e:	4a08      	ldr	r2, [pc, #32]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b54:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b56:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40021000 	.word	0x40021000

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <NMI_Handler+0x4>

08000b7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <BusFault_Handler+0x4>

08000b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <UsageFault_Handler+0x4>

08000b9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bca:	f000 f9f7 	bl	8000fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ButtonDown_Pin);
 8000bd6:	2008      	movs	r0, #8
 8000bd8:	f001 fb00 	bl	80021dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000be4:	4802      	ldr	r0, [pc, #8]	@ (8000bf0 <CAN1_RX0_IRQHandler+0x10>)
 8000be6:	f000 fe2a 	bl	800183e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200000c0 	.word	0x200000c0

08000bf4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ButtonUp_Pin);
 8000bf8:	2020      	movs	r0, #32
 8000bfa:	f001 faef 	bl	80021dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c08:	4802      	ldr	r0, [pc, #8]	@ (8000c14 <TIM2_IRQHandler+0x10>)
 8000c0a:	f002 fd4f 	bl	80036ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000128 	.word	0x20000128

08000c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c20:	4a14      	ldr	r2, [pc, #80]	@ (8000c74 <_sbrk+0x5c>)
 8000c22:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <_sbrk+0x60>)
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c2c:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c34:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <_sbrk+0x64>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	@ (8000c80 <_sbrk+0x68>)
 8000c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3a:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d207      	bcs.n	8000c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c48:	f003 fdfe 	bl	8004848 <__errno>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	220c      	movs	r2, #12
 8000c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	e009      	b.n	8000c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c58:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	@ (8000c7c <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	4a05      	ldr	r2, [pc, #20]	@ (8000c7c <_sbrk+0x64>)
 8000c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20010000 	.word	0x20010000
 8000c78:	00000400 	.word	0x00000400
 8000c7c:	20000124 	.word	0x20000124
 8000c80:	20000348 	.word	0x20000348

08000c84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c88:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <SystemInit+0x20>)
 8000c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ca4 <SystemInit+0x20>)
 8000c90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cae:	f107 0310 	add.w	r3, r7, #16
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d40 <MX_TIM2_Init+0x98>)
 8000cc8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ccc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000 - 1;
 8000cce:	4b1c      	ldr	r3, [pc, #112]	@ (8000d40 <MX_TIM2_Init+0x98>)
 8000cd0:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8000cd4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d40 <MX_TIM2_Init+0x98>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000cdc:	4b18      	ldr	r3, [pc, #96]	@ (8000d40 <MX_TIM2_Init+0x98>)
 8000cde:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000ce2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce4:	4b16      	ldr	r3, [pc, #88]	@ (8000d40 <MX_TIM2_Init+0x98>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <MX_TIM2_Init+0x98>)
 8000cec:	2280      	movs	r2, #128	@ 0x80
 8000cee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cf0:	4813      	ldr	r0, [pc, #76]	@ (8000d40 <MX_TIM2_Init+0x98>)
 8000cf2:	f002 fc2f 	bl	8003554 <HAL_TIM_Base_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000cfc:	f7ff ff10 	bl	8000b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d06:	f107 0310 	add.w	r3, r7, #16
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480c      	ldr	r0, [pc, #48]	@ (8000d40 <MX_TIM2_Init+0x98>)
 8000d0e:	f002 fdd4 	bl	80038ba <HAL_TIM_ConfigClockSource>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000d18:	f7ff ff02 	bl	8000b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	4619      	mov	r1, r3
 8000d28:	4805      	ldr	r0, [pc, #20]	@ (8000d40 <MX_TIM2_Init+0x98>)
 8000d2a:	f002 ffc1 	bl	8003cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000d34:	f7ff fef4 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	3720      	adds	r7, #32
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000128 	.word	0x20000128

08000d44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d54:	d113      	bne.n	8000d7e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d56:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <HAL_TIM_Base_MspInit+0x44>)
 8000d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	@ (8000d88 <HAL_TIM_Base_MspInit+0x44>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d62:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <HAL_TIM_Base_MspInit+0x44>)
 8000d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	201c      	movs	r0, #28
 8000d74:	f001 f879 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d78:	201c      	movs	r0, #28
 8000d7a:	f001 f892 	bl	8001ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000

08000d8c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d90:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <MX_USART2_UART_Init+0x58>)
 8000d92:	4a15      	ldr	r2, [pc, #84]	@ (8000de8 <MX_USART2_UART_Init+0x5c>)
 8000d94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d96:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <MX_USART2_UART_Init+0x58>)
 8000d98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <MX_USART2_UART_Init+0x58>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <MX_USART2_UART_Init+0x58>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	@ (8000de4 <MX_USART2_UART_Init+0x58>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <MX_USART2_UART_Init+0x58>)
 8000db2:	220c      	movs	r2, #12
 8000db4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	@ (8000de4 <MX_USART2_UART_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <MX_USART2_UART_Init+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <MX_USART2_UART_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <MX_USART2_UART_Init+0x58>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dce:	4805      	ldr	r0, [pc, #20]	@ (8000de4 <MX_USART2_UART_Init+0x58>)
 8000dd0:	f002 fff2 	bl	8003db8 <HAL_UART_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000dda:	f7ff fea1 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000174 	.word	0x20000174
 8000de8:	40004400 	.word	0x40004400

08000dec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b09e      	sub	sp, #120	@ 0x78
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	2254      	movs	r2, #84	@ 0x54
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f003 fd13 	bl	8004838 <memset>
  if(uartHandle->Instance==USART2)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a28      	ldr	r2, [pc, #160]	@ (8000eb8 <HAL_UART_MspInit+0xcc>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d148      	bne.n	8000eae <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f002 f89b 	bl	8002f64 <HAL_RCCEx_PeriphCLKConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e34:	f7ff fe74 	bl	8000b20 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e38:	4b20      	ldr	r3, [pc, #128]	@ (8000ebc <HAL_UART_MspInit+0xd0>)
 8000e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e3c:	4a1f      	ldr	r2, [pc, #124]	@ (8000ebc <HAL_UART_MspInit+0xd0>)
 8000e3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e42:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e44:	4b1d      	ldr	r3, [pc, #116]	@ (8000ebc <HAL_UART_MspInit+0xd0>)
 8000e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	4b1a      	ldr	r3, [pc, #104]	@ (8000ebc <HAL_UART_MspInit+0xd0>)
 8000e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e54:	4a19      	ldr	r2, [pc, #100]	@ (8000ebc <HAL_UART_MspInit+0xd0>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e5c:	4b17      	ldr	r3, [pc, #92]	@ (8000ebc <HAL_UART_MspInit+0xd0>)
 8000e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000e68:	2304      	movs	r3, #4
 8000e6a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e78:	2307      	movs	r3, #7
 8000e7a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e80:	4619      	mov	r1, r3
 8000e82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e86:	f001 f827 	bl	8001ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000e8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e8e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eaa:	f001 f815 	bl	8001ed8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000eae:	bf00      	nop
 8000eb0:	3778      	adds	r7, #120	@ 0x78
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40004400 	.word	0x40004400
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ec0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ef8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ec4:	f7ff fede 	bl	8000c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec8:	480c      	ldr	r0, [pc, #48]	@ (8000efc <LoopForever+0x6>)
  ldr r1, =_edata
 8000eca:	490d      	ldr	r1, [pc, #52]	@ (8000f00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f04 <LoopForever+0xe>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0a      	ldr	r2, [pc, #40]	@ (8000f08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee0:	4c0a      	ldr	r4, [pc, #40]	@ (8000f0c <LoopForever+0x16>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eee:	f003 fcb1 	bl	8004854 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ef2:	f7ff fd29 	bl	8000948 <main>

08000ef6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ef6:	e7fe      	b.n	8000ef6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ef8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f00:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f04:	080051ec 	.word	0x080051ec
  ldr r2, =_sbss
 8000f08:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f0c:	20000348 	.word	0x20000348

08000f10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <ADC1_IRQHandler>

08000f12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f000 ff99 	bl	8001e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f22:	2000      	movs	r0, #0
 8000f24:	f000 f80e 	bl	8000f44 <HAL_InitTick>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d002      	beq.n	8000f34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	71fb      	strb	r3, [r7, #7]
 8000f32:	e001      	b.n	8000f38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f34:	f7ff fdfa 	bl	8000b2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f38:	79fb      	ldrb	r3, [r7, #7]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f50:	4b17      	ldr	r3, [pc, #92]	@ (8000fb0 <HAL_InitTick+0x6c>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d023      	beq.n	8000fa0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f58:	4b16      	ldr	r3, [pc, #88]	@ (8000fb4 <HAL_InitTick+0x70>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <HAL_InitTick+0x6c>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 ffa5 	bl	8001ebe <HAL_SYSTICK_Config>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10f      	bne.n	8000f9a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b0f      	cmp	r3, #15
 8000f7e:	d809      	bhi.n	8000f94 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f80:	2200      	movs	r2, #0
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295
 8000f88:	f000 ff6f 	bl	8001e6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <HAL_InitTick+0x74>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	e007      	b.n	8000fa4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	73fb      	strb	r3, [r7, #15]
 8000f98:	e004      	b.n	8000fa4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	73fb      	strb	r3, [r7, #15]
 8000f9e:	e001      	b.n	8000fa4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20000004 	.word	0x20000004

08000fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <HAL_IncTick+0x20>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <HAL_IncTick+0x24>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a04      	ldr	r2, [pc, #16]	@ (8000fe0 <HAL_IncTick+0x24>)
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	200001fc 	.word	0x200001fc

08000fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	@ (8000ff8 <HAL_GetTick+0x14>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	200001fc 	.word	0x200001fc

08000ffc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e0ed      	b.n	80011ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d102      	bne.n	8001020 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff fb10 	bl	8000640 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f042 0201 	orr.w	r2, r2, #1
 800102e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001030:	f7ff ffd8 	bl	8000fe4 <HAL_GetTick>
 8001034:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001036:	e012      	b.n	800105e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001038:	f7ff ffd4 	bl	8000fe4 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b0a      	cmp	r3, #10
 8001044:	d90b      	bls.n	800105e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800104a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2205      	movs	r2, #5
 8001056:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e0c5      	b.n	80011ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0e5      	beq.n	8001038 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 0202 	bic.w	r2, r2, #2
 800107a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800107c:	f7ff ffb2 	bl	8000fe4 <HAL_GetTick>
 8001080:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001082:	e012      	b.n	80010aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001084:	f7ff ffae 	bl	8000fe4 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b0a      	cmp	r3, #10
 8001090:	d90b      	bls.n	80010aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001096:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2205      	movs	r2, #5
 80010a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e09f      	b.n	80011ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1e5      	bne.n	8001084 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7e1b      	ldrb	r3, [r3, #24]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d108      	bne.n	80010d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	e007      	b.n	80010e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	7e5b      	ldrb	r3, [r3, #25]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d108      	bne.n	80010fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	e007      	b.n	800110c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800110a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7e9b      	ldrb	r3, [r3, #26]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d108      	bne.n	8001126 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f042 0220 	orr.w	r2, r2, #32
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	e007      	b.n	8001136 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 0220 	bic.w	r2, r2, #32
 8001134:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7edb      	ldrb	r3, [r3, #27]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d108      	bne.n	8001150 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 0210 	bic.w	r2, r2, #16
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	e007      	b.n	8001160 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0210 	orr.w	r2, r2, #16
 800115e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7f1b      	ldrb	r3, [r3, #28]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d108      	bne.n	800117a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 0208 	orr.w	r2, r2, #8
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	e007      	b.n	800118a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0208 	bic.w	r2, r2, #8
 8001188:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	7f5b      	ldrb	r3, [r3, #29]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d108      	bne.n	80011a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f042 0204 	orr.w	r2, r2, #4
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	e007      	b.n	80011b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 0204 	bic.w	r2, r2, #4
 80011b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	431a      	orrs	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	431a      	orrs	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	ea42 0103 	orr.w	r1, r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	1e5a      	subs	r2, r3, #1
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	430a      	orrs	r2, r1
 80011d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b087      	sub	sp, #28
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001208:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800120a:	7cfb      	ldrb	r3, [r7, #19]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d003      	beq.n	8001218 <HAL_CAN_ConfigFilter+0x26>
 8001210:	7cfb      	ldrb	r3, [r7, #19]
 8001212:	2b02      	cmp	r3, #2
 8001214:	f040 80aa 	bne.w	800136c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800121e:	f043 0201 	orr.w	r2, r3, #1
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	f003 031f 	and.w	r3, r3, #31
 8001230:	2201      	movs	r2, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	43db      	mvns	r3, r3
 8001242:	401a      	ands	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d123      	bne.n	800129a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	43db      	mvns	r3, r3
 800125c:	401a      	ands	r2, r3
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001274:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3248      	adds	r2, #72	@ 0x48
 800127a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800128e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001290:	6979      	ldr	r1, [r7, #20]
 8001292:	3348      	adds	r3, #72	@ 0x48
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	440b      	add	r3, r1
 8001298:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d122      	bne.n	80012e8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	431a      	orrs	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012c2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	3248      	adds	r2, #72	@ 0x48
 80012c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012de:	6979      	ldr	r1, [r7, #20]
 80012e0:	3348      	adds	r3, #72	@ 0x48
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	440b      	add	r3, r1
 80012e6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d109      	bne.n	8001304 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	401a      	ands	r2, r3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001302:	e007      	b.n	8001314 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	431a      	orrs	r2, r3
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d109      	bne.n	8001330 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	43db      	mvns	r3, r3
 8001326:	401a      	ands	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800132e:	e007      	b.n	8001340 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	431a      	orrs	r2, r3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d107      	bne.n	8001358 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	431a      	orrs	r2, r3
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800135e:	f023 0201 	bic.w	r2, r3, #1
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001368:	2300      	movs	r3, #0
 800136a:	e006      	b.n	800137a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001370:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
  }
}
 800137a:	4618      	mov	r0, r3
 800137c:	371c      	adds	r7, #28
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b084      	sub	sp, #16
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b01      	cmp	r3, #1
 8001398:	d12e      	bne.n	80013f8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2202      	movs	r2, #2
 800139e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 0201 	bic.w	r2, r2, #1
 80013b0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013b2:	f7ff fe17 	bl	8000fe4 <HAL_GetTick>
 80013b6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013b8:	e012      	b.n	80013e0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013ba:	f7ff fe13 	bl	8000fe4 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b0a      	cmp	r3, #10
 80013c6:	d90b      	bls.n	80013e0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013cc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2205      	movs	r2, #5
 80013d8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e012      	b.n	8001406 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1e5      	bne.n	80013ba <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	e006      	b.n	8001406 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013fc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
  }
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800140e:	b480      	push	{r7}
 8001410:	b089      	sub	sp, #36	@ 0x24
 8001412:	af00      	add	r7, sp, #0
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001422:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800142c:	7ffb      	ldrb	r3, [r7, #31]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d003      	beq.n	800143a <HAL_CAN_AddTxMessage+0x2c>
 8001432:	7ffb      	ldrb	r3, [r7, #31]
 8001434:	2b02      	cmp	r3, #2
 8001436:	f040 80ad 	bne.w	8001594 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10a      	bne.n	800145a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800144a:	2b00      	cmp	r3, #0
 800144c:	d105      	bne.n	800145a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 8095 	beq.w	8001584 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	0e1b      	lsrs	r3, r3, #24
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001464:	2201      	movs	r2, #1
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	409a      	lsls	r2, r3
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10d      	bne.n	8001492 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001480:	68f9      	ldr	r1, [r7, #12]
 8001482:	6809      	ldr	r1, [r1, #0]
 8001484:	431a      	orrs	r2, r3
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	3318      	adds	r3, #24
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	440b      	add	r3, r1
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	e00f      	b.n	80014b2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800149c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014a2:	68f9      	ldr	r1, [r7, #12]
 80014a4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80014a6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	3318      	adds	r3, #24
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	440b      	add	r3, r1
 80014b0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6819      	ldr	r1, [r3, #0]
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	691a      	ldr	r2, [r3, #16]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3318      	adds	r3, #24
 80014be:	011b      	lsls	r3, r3, #4
 80014c0:	440b      	add	r3, r1
 80014c2:	3304      	adds	r3, #4
 80014c4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	7d1b      	ldrb	r3, [r3, #20]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d111      	bne.n	80014f2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	3318      	adds	r3, #24
 80014d6:	011b      	lsls	r3, r3, #4
 80014d8:	4413      	add	r3, r2
 80014da:	3304      	adds	r3, #4
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	6811      	ldr	r1, [r2, #0]
 80014e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3318      	adds	r3, #24
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	440b      	add	r3, r1
 80014ee:	3304      	adds	r3, #4
 80014f0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3307      	adds	r3, #7
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	061a      	lsls	r2, r3, #24
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3306      	adds	r3, #6
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	041b      	lsls	r3, r3, #16
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3305      	adds	r3, #5
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	4313      	orrs	r3, r2
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	3204      	adds	r2, #4
 8001512:	7812      	ldrb	r2, [r2, #0]
 8001514:	4610      	mov	r0, r2
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	6811      	ldr	r1, [r2, #0]
 800151a:	ea43 0200 	orr.w	r2, r3, r0
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	440b      	add	r3, r1
 8001524:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001528:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3303      	adds	r3, #3
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	061a      	lsls	r2, r3, #24
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3302      	adds	r3, #2
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	041b      	lsls	r3, r3, #16
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3301      	adds	r3, #1
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	4313      	orrs	r3, r2
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	7812      	ldrb	r2, [r2, #0]
 800154a:	4610      	mov	r0, r2
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	6811      	ldr	r1, [r2, #0]
 8001550:	ea43 0200 	orr.w	r2, r3, r0
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	440b      	add	r3, r1
 800155a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800155e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	3318      	adds	r3, #24
 8001568:	011b      	lsls	r3, r3, #4
 800156a:	4413      	add	r3, r2
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	6811      	ldr	r1, [r2, #0]
 8001572:	f043 0201 	orr.w	r2, r3, #1
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	3318      	adds	r3, #24
 800157a:	011b      	lsls	r3, r3, #4
 800157c:	440b      	add	r3, r1
 800157e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001580:	2300      	movs	r3, #0
 8001582:	e00e      	b.n	80015a2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001588:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e006      	b.n	80015a2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001598:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
  }
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3724      	adds	r7, #36	@ 0x24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80015ae:	b480      	push	{r7}
 80015b0:	b087      	sub	sp, #28
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015c2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80015c4:	7dfb      	ldrb	r3, [r7, #23]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d003      	beq.n	80015d2 <HAL_CAN_GetRxMessage+0x24>
 80015ca:	7dfb      	ldrb	r3, [r7, #23]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	f040 8103 	bne.w	80017d8 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10e      	bne.n	80015f6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d116      	bne.n	8001614 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e0f7      	b.n	80017e6 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b00      	cmp	r3, #0
 8001602:	d107      	bne.n	8001614 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001608:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e0e8      	b.n	80017e6 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	331b      	adds	r3, #27
 800161c:	011b      	lsls	r3, r3, #4
 800161e:	4413      	add	r3, r2
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0204 	and.w	r2, r3, #4
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10c      	bne.n	800164c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	331b      	adds	r3, #27
 800163a:	011b      	lsls	r3, r3, #4
 800163c:	4413      	add	r3, r2
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	0d5b      	lsrs	r3, r3, #21
 8001642:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	e00b      	b.n	8001664 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	331b      	adds	r3, #27
 8001654:	011b      	lsls	r3, r3, #4
 8001656:	4413      	add	r3, r2
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	08db      	lsrs	r3, r3, #3
 800165c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	331b      	adds	r3, #27
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	4413      	add	r3, r2
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0202 	and.w	r2, r3, #2
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	331b      	adds	r3, #27
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	4413      	add	r3, r2
 8001686:	3304      	adds	r3, #4
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2208      	movs	r2, #8
 8001696:	611a      	str	r2, [r3, #16]
 8001698:	e00b      	b.n	80016b2 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	331b      	adds	r3, #27
 80016a2:	011b      	lsls	r3, r3, #4
 80016a4:	4413      	add	r3, r2
 80016a6:	3304      	adds	r3, #4
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 020f 	and.w	r2, r3, #15
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	331b      	adds	r3, #27
 80016ba:	011b      	lsls	r3, r3, #4
 80016bc:	4413      	add	r3, r2
 80016be:	3304      	adds	r3, #4
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	0a1b      	lsrs	r3, r3, #8
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	331b      	adds	r3, #27
 80016d2:	011b      	lsls	r3, r3, #4
 80016d4:	4413      	add	r3, r2
 80016d6:	3304      	adds	r3, #4
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	0c1b      	lsrs	r3, r3, #16
 80016dc:	b29a      	uxth	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	4413      	add	r3, r2
 80016ec:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	011b      	lsls	r3, r3, #4
 8001700:	4413      	add	r3, r2
 8001702:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	0a1a      	lsrs	r2, r3, #8
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	3301      	adds	r3, #1
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	4413      	add	r3, r2
 800171c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	0c1a      	lsrs	r2, r3, #16
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	3302      	adds	r3, #2
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	4413      	add	r3, r2
 8001736:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	0e1a      	lsrs	r2, r3, #24
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	3303      	adds	r3, #3
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	011b      	lsls	r3, r3, #4
 800174e:	4413      	add	r3, r2
 8001750:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	3304      	adds	r3, #4
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	011b      	lsls	r3, r3, #4
 8001766:	4413      	add	r3, r2
 8001768:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	0a1a      	lsrs	r2, r3, #8
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	3305      	adds	r3, #5
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	011b      	lsls	r3, r3, #4
 8001780:	4413      	add	r3, r2
 8001782:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	0c1a      	lsrs	r2, r3, #16
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	3306      	adds	r3, #6
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	4413      	add	r3, r2
 800179c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	0e1a      	lsrs	r2, r3, #24
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	3307      	adds	r3, #7
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d108      	bne.n	80017c4 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f042 0220 	orr.w	r2, r2, #32
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	e007      	b.n	80017d4 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	691a      	ldr	r2, [r3, #16]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f042 0220 	orr.w	r2, r2, #32
 80017d2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	e006      	b.n	80017e6 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017dc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
  }
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	371c      	adds	r7, #28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b085      	sub	sp, #20
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001802:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d002      	beq.n	8001810 <HAL_CAN_ActivateNotification+0x1e>
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d109      	bne.n	8001824 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6959      	ldr	r1, [r3, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	e006      	b.n	8001832 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001828:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
  }
}
 8001832:	4618      	mov	r0, r3
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b08a      	sub	sp, #40	@ 0x28
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001846:	2300      	movs	r3, #0
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800187a:	6a3b      	ldr	r3, [r7, #32]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b00      	cmp	r3, #0
 8001882:	d07c      	beq.n	800197e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d023      	beq.n	80018d6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2201      	movs	r2, #1
 8001894:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f983 	bl	8001bac <HAL_CAN_TxMailbox0CompleteCallback>
 80018a6:	e016      	b.n	80018d6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d004      	beq.n	80018bc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80018b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ba:	e00c      	b.n	80018d6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d004      	beq.n	80018d0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80018c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ce:	e002      	b.n	80018d6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 f989 	bl	8001be8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d024      	beq.n	800192a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 f963 	bl	8001bc0 <HAL_CAN_TxMailbox1CompleteCallback>
 80018fa:	e016      	b.n	800192a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001902:	2b00      	cmp	r3, #0
 8001904:	d004      	beq.n	8001910 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001908:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800190c:	627b      	str	r3, [r7, #36]	@ 0x24
 800190e:	e00c      	b.n	800192a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001916:	2b00      	cmp	r3, #0
 8001918:	d004      	beq.n	8001924 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800191a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001920:	627b      	str	r3, [r7, #36]	@ 0x24
 8001922:	e002      	b.n	800192a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 f969 	bl	8001bfc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d024      	beq.n	800197e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800193c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 f943 	bl	8001bd4 <HAL_CAN_TxMailbox2CompleteCallback>
 800194e:	e016      	b.n	800197e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d004      	beq.n	8001964 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800195a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001960:	627b      	str	r3, [r7, #36]	@ 0x24
 8001962:	e00c      	b.n	800197e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d004      	beq.n	8001978 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001970:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001974:	627b      	str	r3, [r7, #36]	@ 0x24
 8001976:	e002      	b.n	800197e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 f949 	bl	8001c10 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00c      	beq.n	80019a2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f003 0310 	and.w	r3, r3, #16
 800198e:	2b00      	cmp	r3, #0
 8001990:	d007      	beq.n	80019a2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001994:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001998:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2210      	movs	r2, #16
 80019a0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00b      	beq.n	80019c4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d006      	beq.n	80019c4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2208      	movs	r2, #8
 80019bc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f930 	bl	8001c24 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80019c4:	6a3b      	ldr	r3, [r7, #32]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d009      	beq.n	80019e2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d002      	beq.n	80019e2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7fe fed1 	bl	8000784 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00c      	beq.n	8001a06 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d007      	beq.n	8001a06 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80019f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019fc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2210      	movs	r2, #16
 8001a04:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	f003 0320 	and.w	r3, r3, #32
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00b      	beq.n	8001a28 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d006      	beq.n	8001a28 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2208      	movs	r2, #8
 8001a20:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f912 	bl	8001c4c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	f003 0310 	and.w	r3, r3, #16
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d009      	beq.n	8001a46 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d002      	beq.n	8001a46 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f8f9 	bl	8001c38 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00b      	beq.n	8001a68 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f003 0310 	and.w	r3, r3, #16
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d006      	beq.n	8001a68 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2210      	movs	r2, #16
 8001a60:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f8fc 	bl	8001c60 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001a68:	6a3b      	ldr	r3, [r7, #32]
 8001a6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00b      	beq.n	8001a8a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d006      	beq.n	8001a8a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2208      	movs	r2, #8
 8001a82:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f8f5 	bl	8001c74 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d07b      	beq.n	8001b8c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d072      	beq.n	8001b84 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d008      	beq.n	8001aba <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d008      	beq.n	8001ad6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
 8001ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d008      	beq.n	8001af2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	f043 0304 	orr.w	r3, r3, #4
 8001af0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d043      	beq.n	8001b84 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d03e      	beq.n	8001b84 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b0c:	2b60      	cmp	r3, #96	@ 0x60
 8001b0e:	d02b      	beq.n	8001b68 <HAL_CAN_IRQHandler+0x32a>
 8001b10:	2b60      	cmp	r3, #96	@ 0x60
 8001b12:	d82e      	bhi.n	8001b72 <HAL_CAN_IRQHandler+0x334>
 8001b14:	2b50      	cmp	r3, #80	@ 0x50
 8001b16:	d022      	beq.n	8001b5e <HAL_CAN_IRQHandler+0x320>
 8001b18:	2b50      	cmp	r3, #80	@ 0x50
 8001b1a:	d82a      	bhi.n	8001b72 <HAL_CAN_IRQHandler+0x334>
 8001b1c:	2b40      	cmp	r3, #64	@ 0x40
 8001b1e:	d019      	beq.n	8001b54 <HAL_CAN_IRQHandler+0x316>
 8001b20:	2b40      	cmp	r3, #64	@ 0x40
 8001b22:	d826      	bhi.n	8001b72 <HAL_CAN_IRQHandler+0x334>
 8001b24:	2b30      	cmp	r3, #48	@ 0x30
 8001b26:	d010      	beq.n	8001b4a <HAL_CAN_IRQHandler+0x30c>
 8001b28:	2b30      	cmp	r3, #48	@ 0x30
 8001b2a:	d822      	bhi.n	8001b72 <HAL_CAN_IRQHandler+0x334>
 8001b2c:	2b10      	cmp	r3, #16
 8001b2e:	d002      	beq.n	8001b36 <HAL_CAN_IRQHandler+0x2f8>
 8001b30:	2b20      	cmp	r3, #32
 8001b32:	d005      	beq.n	8001b40 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001b34:	e01d      	b.n	8001b72 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b38:	f043 0308 	orr.w	r3, r3, #8
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b3e:	e019      	b.n	8001b74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b42:	f043 0310 	orr.w	r3, r3, #16
 8001b46:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b48:	e014      	b.n	8001b74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4c:	f043 0320 	orr.w	r3, r3, #32
 8001b50:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b52:	e00f      	b.n	8001b74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b5a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b5c:	e00a      	b.n	8001b74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b64:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b66:	e005      	b.n	8001b74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b70:	e000      	b.n	8001b74 <HAL_CAN_IRQHandler+0x336>
            break;
 8001b72:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	699a      	ldr	r2, [r3, #24]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001b82:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2204      	movs	r2, #4
 8001b8a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d008      	beq.n	8001ba4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f872 	bl	8001c88 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	3728      	adds	r7, #40	@ 0x28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <__NVIC_SetPriorityGrouping>:
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce6:	4a04      	ldr	r2, [pc, #16]	@ (8001cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	60d3      	str	r3, [r2, #12]
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_GetPriorityGrouping>:
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d00:	4b04      	ldr	r3, [pc, #16]	@ (8001d14 <__NVIC_GetPriorityGrouping+0x18>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	0a1b      	lsrs	r3, r3, #8
 8001d06:	f003 0307 	and.w	r3, r3, #7
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <__NVIC_EnableIRQ>:
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	db0b      	blt.n	8001d42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	f003 021f 	and.w	r2, r3, #31
 8001d30:	4907      	ldr	r1, [pc, #28]	@ (8001d50 <__NVIC_EnableIRQ+0x38>)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	095b      	lsrs	r3, r3, #5
 8001d38:	2001      	movs	r0, #1
 8001d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000e100 	.word	0xe000e100

08001d54 <__NVIC_SetPriority>:
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	6039      	str	r1, [r7, #0]
 8001d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	db0a      	blt.n	8001d7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	490c      	ldr	r1, [pc, #48]	@ (8001da0 <__NVIC_SetPriority+0x4c>)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	0112      	lsls	r2, r2, #4
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	440b      	add	r3, r1
 8001d78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001d7c:	e00a      	b.n	8001d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	4908      	ldr	r1, [pc, #32]	@ (8001da4 <__NVIC_SetPriority+0x50>)
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	3b04      	subs	r3, #4
 8001d8c:	0112      	lsls	r2, r2, #4
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	440b      	add	r3, r1
 8001d92:	761a      	strb	r2, [r3, #24]
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000e100 	.word	0xe000e100
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <NVIC_EncodePriority>:
{
 8001da8:	b480      	push	{r7}
 8001daa:	b089      	sub	sp, #36	@ 0x24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f1c3 0307 	rsb	r3, r3, #7
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	bf28      	it	cs
 8001dc6:	2304      	movcs	r3, #4
 8001dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	2b06      	cmp	r3, #6
 8001dd0:	d902      	bls.n	8001dd8 <NVIC_EncodePriority+0x30>
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3b03      	subs	r3, #3
 8001dd6:	e000      	b.n	8001dda <NVIC_EncodePriority+0x32>
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43da      	mvns	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	401a      	ands	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df0:	f04f 31ff 	mov.w	r1, #4294967295
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfa:	43d9      	mvns	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	4313      	orrs	r3, r2
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3724      	adds	r7, #36	@ 0x24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <SysTick_Config>:
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e20:	d301      	bcc.n	8001e26 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00f      	b.n	8001e46 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e26:	4a0a      	ldr	r2, [pc, #40]	@ (8001e50 <SysTick_Config+0x40>)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e2e:	210f      	movs	r1, #15
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295
 8001e34:	f7ff ff8e 	bl	8001d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e38:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <SysTick_Config+0x40>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3e:	4b04      	ldr	r3, [pc, #16]	@ (8001e50 <SysTick_Config+0x40>)
 8001e40:	2207      	movs	r2, #7
 8001e42:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	e000e010 	.word	0xe000e010

08001e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff ff29 	bl	8001cb4 <__NVIC_SetPriorityGrouping>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e7c:	f7ff ff3e 	bl	8001cfc <__NVIC_GetPriorityGrouping>
 8001e80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	6978      	ldr	r0, [r7, #20]
 8001e88:	f7ff ff8e 	bl	8001da8 <NVIC_EncodePriority>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff5d 	bl	8001d54 <__NVIC_SetPriority>
}
 8001e9a:	bf00      	nop
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff31 	bl	8001d18 <__NVIC_EnableIRQ>
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ffa2 	bl	8001e10 <SysTick_Config>
 8001ecc:	4603      	mov	r3, r0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b087      	sub	sp, #28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee6:	e148      	b.n	800217a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	2101      	movs	r1, #1
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 813a 	beq.w	8002174 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d005      	beq.n	8001f18 <HAL_GPIO_Init+0x40>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d130      	bne.n	8001f7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	2203      	movs	r2, #3
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f4e:	2201      	movs	r2, #1
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	091b      	lsrs	r3, r3, #4
 8001f64:	f003 0201 	and.w	r2, r3, #1
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d017      	beq.n	8001fb6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	2203      	movs	r2, #3
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43db      	mvns	r3, r3
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d123      	bne.n	800200a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	08da      	lsrs	r2, r3, #3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3208      	adds	r2, #8
 8001fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	220f      	movs	r2, #15
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	691a      	ldr	r2, [r3, #16]
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	08da      	lsrs	r2, r3, #3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3208      	adds	r2, #8
 8002004:	6939      	ldr	r1, [r7, #16]
 8002006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	2203      	movs	r2, #3
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4013      	ands	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 0203 	and.w	r2, r3, #3
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 8094 	beq.w	8002174 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204c:	4b52      	ldr	r3, [pc, #328]	@ (8002198 <HAL_GPIO_Init+0x2c0>)
 800204e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002050:	4a51      	ldr	r2, [pc, #324]	@ (8002198 <HAL_GPIO_Init+0x2c0>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6613      	str	r3, [r2, #96]	@ 0x60
 8002058:	4b4f      	ldr	r3, [pc, #316]	@ (8002198 <HAL_GPIO_Init+0x2c0>)
 800205a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002064:	4a4d      	ldr	r2, [pc, #308]	@ (800219c <HAL_GPIO_Init+0x2c4>)
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	089b      	lsrs	r3, r3, #2
 800206a:	3302      	adds	r3, #2
 800206c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002070:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	220f      	movs	r2, #15
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4013      	ands	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800208e:	d00d      	beq.n	80020ac <HAL_GPIO_Init+0x1d4>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a43      	ldr	r2, [pc, #268]	@ (80021a0 <HAL_GPIO_Init+0x2c8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d007      	beq.n	80020a8 <HAL_GPIO_Init+0x1d0>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a42      	ldr	r2, [pc, #264]	@ (80021a4 <HAL_GPIO_Init+0x2cc>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d101      	bne.n	80020a4 <HAL_GPIO_Init+0x1cc>
 80020a0:	2302      	movs	r3, #2
 80020a2:	e004      	b.n	80020ae <HAL_GPIO_Init+0x1d6>
 80020a4:	2307      	movs	r3, #7
 80020a6:	e002      	b.n	80020ae <HAL_GPIO_Init+0x1d6>
 80020a8:	2301      	movs	r3, #1
 80020aa:	e000      	b.n	80020ae <HAL_GPIO_Init+0x1d6>
 80020ac:	2300      	movs	r3, #0
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	f002 0203 	and.w	r2, r2, #3
 80020b4:	0092      	lsls	r2, r2, #2
 80020b6:	4093      	lsls	r3, r2
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020be:	4937      	ldr	r1, [pc, #220]	@ (800219c <HAL_GPIO_Init+0x2c4>)
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	089b      	lsrs	r3, r3, #2
 80020c4:	3302      	adds	r3, #2
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020cc:	4b36      	ldr	r3, [pc, #216]	@ (80021a8 <HAL_GPIO_Init+0x2d0>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020f0:	4a2d      	ldr	r2, [pc, #180]	@ (80021a8 <HAL_GPIO_Init+0x2d0>)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020f6:	4b2c      	ldr	r3, [pc, #176]	@ (80021a8 <HAL_GPIO_Init+0x2d0>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	43db      	mvns	r3, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4313      	orrs	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800211a:	4a23      	ldr	r2, [pc, #140]	@ (80021a8 <HAL_GPIO_Init+0x2d0>)
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002120:	4b21      	ldr	r3, [pc, #132]	@ (80021a8 <HAL_GPIO_Init+0x2d0>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	43db      	mvns	r3, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002144:	4a18      	ldr	r2, [pc, #96]	@ (80021a8 <HAL_GPIO_Init+0x2d0>)
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800214a:	4b17      	ldr	r3, [pc, #92]	@ (80021a8 <HAL_GPIO_Init+0x2d0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	43db      	mvns	r3, r3
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4013      	ands	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4313      	orrs	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800216e:	4a0e      	ldr	r2, [pc, #56]	@ (80021a8 <HAL_GPIO_Init+0x2d0>)
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	3301      	adds	r3, #1
 8002178:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	f47f aeaf 	bne.w	8001ee8 <HAL_GPIO_Init+0x10>
  }
}
 800218a:	bf00      	nop
 800218c:	bf00      	nop
 800218e:	371c      	adds	r7, #28
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	40021000 	.word	0x40021000
 800219c:	40010000 	.word	0x40010000
 80021a0:	48000400 	.word	0x48000400
 80021a4:	48000800 	.word	0x48000800
 80021a8:	40010400 	.word	0x40010400

080021ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	807b      	strh	r3, [r7, #2]
 80021b8:	4613      	mov	r3, r2
 80021ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021bc:	787b      	ldrb	r3, [r7, #1]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021c2:	887a      	ldrh	r2, [r7, #2]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021c8:	e002      	b.n	80021d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021ca:	887a      	ldrh	r2, [r7, #2]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021e6:	4b08      	ldr	r3, [pc, #32]	@ (8002208 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021e8:	695a      	ldr	r2, [r3, #20]
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d006      	beq.n	8002200 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021f2:	4a05      	ldr	r2, [pc, #20]	@ (8002208 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021f4:	88fb      	ldrh	r3, [r7, #6]
 80021f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021f8:	88fb      	ldrh	r3, [r7, #6]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe fc4a 	bl	8000a94 <HAL_GPIO_EXTI_Callback>
  }
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40010400 	.word	0x40010400

0800220c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002210:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a04      	ldr	r2, [pc, #16]	@ (8002228 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002216:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800221a:	6013      	str	r3, [r2, #0]
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40007000 	.word	0x40007000

0800222c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002230:	4b04      	ldr	r3, [pc, #16]	@ (8002244 <HAL_PWREx_GetVoltageRange+0x18>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40007000 	.word	0x40007000

08002248 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002256:	d130      	bne.n	80022ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002258:	4b23      	ldr	r3, [pc, #140]	@ (80022e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002264:	d038      	beq.n	80022d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002266:	4b20      	ldr	r3, [pc, #128]	@ (80022e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800226e:	4a1e      	ldr	r2, [pc, #120]	@ (80022e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002270:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002274:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002276:	4b1d      	ldr	r3, [pc, #116]	@ (80022ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2232      	movs	r2, #50	@ 0x32
 800227c:	fb02 f303 	mul.w	r3, r2, r3
 8002280:	4a1b      	ldr	r2, [pc, #108]	@ (80022f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	0c9b      	lsrs	r3, r3, #18
 8002288:	3301      	adds	r3, #1
 800228a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800228c:	e002      	b.n	8002294 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	3b01      	subs	r3, #1
 8002292:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002294:	4b14      	ldr	r3, [pc, #80]	@ (80022e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800229c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022a0:	d102      	bne.n	80022a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1f2      	bne.n	800228e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022a8:	4b0f      	ldr	r3, [pc, #60]	@ (80022e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022b4:	d110      	bne.n	80022d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e00f      	b.n	80022da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022ba:	4b0b      	ldr	r3, [pc, #44]	@ (80022e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022c6:	d007      	beq.n	80022d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022c8:	4b07      	ldr	r3, [pc, #28]	@ (80022e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022d0:	4a05      	ldr	r2, [pc, #20]	@ (80022e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40007000 	.word	0x40007000
 80022ec:	20000000 	.word	0x20000000
 80022f0:	431bde83 	.word	0x431bde83

080022f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d102      	bne.n	8002308 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	f000 bc02 	b.w	8002b0c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002308:	4b96      	ldr	r3, [pc, #600]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 030c 	and.w	r3, r3, #12
 8002310:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002312:	4b94      	ldr	r3, [pc, #592]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0310 	and.w	r3, r3, #16
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 80e4 	beq.w	80024f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d007      	beq.n	8002340 <HAL_RCC_OscConfig+0x4c>
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2b0c      	cmp	r3, #12
 8002334:	f040 808b 	bne.w	800244e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2b01      	cmp	r3, #1
 800233c:	f040 8087 	bne.w	800244e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002340:	4b88      	ldr	r3, [pc, #544]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <HAL_RCC_OscConfig+0x64>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e3d9      	b.n	8002b0c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1a      	ldr	r2, [r3, #32]
 800235c:	4b81      	ldr	r3, [pc, #516]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	2b00      	cmp	r3, #0
 8002366:	d004      	beq.n	8002372 <HAL_RCC_OscConfig+0x7e>
 8002368:	4b7e      	ldr	r3, [pc, #504]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002370:	e005      	b.n	800237e <HAL_RCC_OscConfig+0x8a>
 8002372:	4b7c      	ldr	r3, [pc, #496]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 8002374:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800237e:	4293      	cmp	r3, r2
 8002380:	d223      	bcs.n	80023ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	4618      	mov	r0, r3
 8002388:	f000 fd8c 	bl	8002ea4 <RCC_SetFlashLatencyFromMSIRange>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e3ba      	b.n	8002b0c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002396:	4b73      	ldr	r3, [pc, #460]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a72      	ldr	r2, [pc, #456]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 800239c:	f043 0308 	orr.w	r3, r3, #8
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	4b70      	ldr	r3, [pc, #448]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	496d      	ldr	r1, [pc, #436]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023b4:	4b6b      	ldr	r3, [pc, #428]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	021b      	lsls	r3, r3, #8
 80023c2:	4968      	ldr	r1, [pc, #416]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]
 80023c8:	e025      	b.n	8002416 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023ca:	4b66      	ldr	r3, [pc, #408]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a65      	ldr	r2, [pc, #404]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 80023d0:	f043 0308 	orr.w	r3, r3, #8
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	4b63      	ldr	r3, [pc, #396]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	4960      	ldr	r1, [pc, #384]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023e8:	4b5e      	ldr	r3, [pc, #376]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	021b      	lsls	r3, r3, #8
 80023f6:	495b      	ldr	r1, [pc, #364]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d109      	bne.n	8002416 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	4618      	mov	r0, r3
 8002408:	f000 fd4c 	bl	8002ea4 <RCC_SetFlashLatencyFromMSIRange>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e37a      	b.n	8002b0c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002416:	f000 fc81 	bl	8002d1c <HAL_RCC_GetSysClockFreq>
 800241a:	4602      	mov	r2, r0
 800241c:	4b51      	ldr	r3, [pc, #324]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	091b      	lsrs	r3, r3, #4
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	4950      	ldr	r1, [pc, #320]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 8002428:	5ccb      	ldrb	r3, [r1, r3]
 800242a:	f003 031f 	and.w	r3, r3, #31
 800242e:	fa22 f303 	lsr.w	r3, r2, r3
 8002432:	4a4e      	ldr	r2, [pc, #312]	@ (800256c <HAL_RCC_OscConfig+0x278>)
 8002434:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002436:	4b4e      	ldr	r3, [pc, #312]	@ (8002570 <HAL_RCC_OscConfig+0x27c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe fd82 	bl	8000f44 <HAL_InitTick>
 8002440:	4603      	mov	r3, r0
 8002442:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d052      	beq.n	80024f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	e35e      	b.n	8002b0c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d032      	beq.n	80024bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002456:	4b43      	ldr	r3, [pc, #268]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a42      	ldr	r2, [pc, #264]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002462:	f7fe fdbf 	bl	8000fe4 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800246a:	f7fe fdbb 	bl	8000fe4 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e347      	b.n	8002b0c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800247c:	4b39      	ldr	r3, [pc, #228]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002488:	4b36      	ldr	r3, [pc, #216]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a35      	ldr	r2, [pc, #212]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 800248e:	f043 0308 	orr.w	r3, r3, #8
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	4b33      	ldr	r3, [pc, #204]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	4930      	ldr	r1, [pc, #192]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	021b      	lsls	r3, r3, #8
 80024b4:	492b      	ldr	r1, [pc, #172]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	604b      	str	r3, [r1, #4]
 80024ba:	e01a      	b.n	80024f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024bc:	4b29      	ldr	r3, [pc, #164]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a28      	ldr	r2, [pc, #160]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 80024c2:	f023 0301 	bic.w	r3, r3, #1
 80024c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024c8:	f7fe fd8c 	bl	8000fe4 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024d0:	f7fe fd88 	bl	8000fe4 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e314      	b.n	8002b0c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024e2:	4b20      	ldr	r3, [pc, #128]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0x1dc>
 80024ee:	e000      	b.n	80024f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d073      	beq.n	80025e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	2b08      	cmp	r3, #8
 8002502:	d005      	beq.n	8002510 <HAL_RCC_OscConfig+0x21c>
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	2b0c      	cmp	r3, #12
 8002508:	d10e      	bne.n	8002528 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	2b03      	cmp	r3, #3
 800250e:	d10b      	bne.n	8002528 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002510:	4b14      	ldr	r3, [pc, #80]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d063      	beq.n	80025e4 <HAL_RCC_OscConfig+0x2f0>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d15f      	bne.n	80025e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e2f1      	b.n	8002b0c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002530:	d106      	bne.n	8002540 <HAL_RCC_OscConfig+0x24c>
 8002532:	4b0c      	ldr	r3, [pc, #48]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a0b      	ldr	r2, [pc, #44]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e025      	b.n	800258c <HAL_RCC_OscConfig+0x298>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002548:	d114      	bne.n	8002574 <HAL_RCC_OscConfig+0x280>
 800254a:	4b06      	ldr	r3, [pc, #24]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a05      	ldr	r2, [pc, #20]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 8002550:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	4b03      	ldr	r3, [pc, #12]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a02      	ldr	r2, [pc, #8]	@ (8002564 <HAL_RCC_OscConfig+0x270>)
 800255c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e013      	b.n	800258c <HAL_RCC_OscConfig+0x298>
 8002564:	40021000 	.word	0x40021000
 8002568:	08005160 	.word	0x08005160
 800256c:	20000000 	.word	0x20000000
 8002570:	20000004 	.word	0x20000004
 8002574:	4ba0      	ldr	r3, [pc, #640]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a9f      	ldr	r2, [pc, #636]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 800257a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	4b9d      	ldr	r3, [pc, #628]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a9c      	ldr	r2, [pc, #624]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 8002586:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800258a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d013      	beq.n	80025bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002594:	f7fe fd26 	bl	8000fe4 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800259c:	f7fe fd22 	bl	8000fe4 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	@ 0x64
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e2ae      	b.n	8002b0c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ae:	4b92      	ldr	r3, [pc, #584]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0x2a8>
 80025ba:	e014      	b.n	80025e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025bc:	f7fe fd12 	bl	8000fe4 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c4:	f7fe fd0e 	bl	8000fe4 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	@ 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e29a      	b.n	8002b0c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025d6:	4b88      	ldr	r3, [pc, #544]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0x2d0>
 80025e2:	e000      	b.n	80025e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d060      	beq.n	80026b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d005      	beq.n	8002604 <HAL_RCC_OscConfig+0x310>
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	2b0c      	cmp	r3, #12
 80025fc:	d119      	bne.n	8002632 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2b02      	cmp	r3, #2
 8002602:	d116      	bne.n	8002632 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002604:	4b7c      	ldr	r3, [pc, #496]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_RCC_OscConfig+0x328>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e277      	b.n	8002b0c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261c:	4b76      	ldr	r3, [pc, #472]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	061b      	lsls	r3, r3, #24
 800262a:	4973      	ldr	r1, [pc, #460]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 800262c:	4313      	orrs	r3, r2
 800262e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002630:	e040      	b.n	80026b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d023      	beq.n	8002682 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800263a:	4b6f      	ldr	r3, [pc, #444]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a6e      	ldr	r2, [pc, #440]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 8002640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002646:	f7fe fccd 	bl	8000fe4 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800264e:	f7fe fcc9 	bl	8000fe4 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e255      	b.n	8002b0c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002660:	4b65      	ldr	r3, [pc, #404]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f0      	beq.n	800264e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266c:	4b62      	ldr	r3, [pc, #392]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	061b      	lsls	r3, r3, #24
 800267a:	495f      	ldr	r1, [pc, #380]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 800267c:	4313      	orrs	r3, r2
 800267e:	604b      	str	r3, [r1, #4]
 8002680:	e018      	b.n	80026b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002682:	4b5d      	ldr	r3, [pc, #372]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a5c      	ldr	r2, [pc, #368]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 8002688:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800268c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268e:	f7fe fca9 	bl	8000fe4 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002696:	f7fe fca5 	bl	8000fe4 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e231      	b.n	8002b0c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026a8:	4b53      	ldr	r3, [pc, #332]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f0      	bne.n	8002696 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0308 	and.w	r3, r3, #8
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d03c      	beq.n	800273a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d01c      	beq.n	8002702 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c8:	4b4b      	ldr	r3, [pc, #300]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 80026ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026ce:	4a4a      	ldr	r2, [pc, #296]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d8:	f7fe fc84 	bl	8000fe4 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e0:	f7fe fc80 	bl	8000fe4 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e20c      	b.n	8002b0c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026f2:	4b41      	ldr	r3, [pc, #260]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 80026f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0ef      	beq.n	80026e0 <HAL_RCC_OscConfig+0x3ec>
 8002700:	e01b      	b.n	800273a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002702:	4b3d      	ldr	r3, [pc, #244]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 8002704:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002708:	4a3b      	ldr	r2, [pc, #236]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 800270a:	f023 0301 	bic.w	r3, r3, #1
 800270e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002712:	f7fe fc67 	bl	8000fe4 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800271a:	f7fe fc63 	bl	8000fe4 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e1ef      	b.n	8002b0c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800272c:	4b32      	ldr	r3, [pc, #200]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 800272e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1ef      	bne.n	800271a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0304 	and.w	r3, r3, #4
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 80a6 	beq.w	8002894 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002748:	2300      	movs	r3, #0
 800274a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800274c:	4b2a      	ldr	r3, [pc, #168]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 800274e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10d      	bne.n	8002774 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002758:	4b27      	ldr	r3, [pc, #156]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 800275a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275c:	4a26      	ldr	r2, [pc, #152]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 800275e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002762:	6593      	str	r3, [r2, #88]	@ 0x58
 8002764:	4b24      	ldr	r3, [pc, #144]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 8002766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002770:	2301      	movs	r3, #1
 8002772:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002774:	4b21      	ldr	r3, [pc, #132]	@ (80027fc <HAL_RCC_OscConfig+0x508>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d118      	bne.n	80027b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002780:	4b1e      	ldr	r3, [pc, #120]	@ (80027fc <HAL_RCC_OscConfig+0x508>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a1d      	ldr	r2, [pc, #116]	@ (80027fc <HAL_RCC_OscConfig+0x508>)
 8002786:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800278a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800278c:	f7fe fc2a 	bl	8000fe4 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002794:	f7fe fc26 	bl	8000fe4 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e1b2      	b.n	8002b0c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027a6:	4b15      	ldr	r3, [pc, #84]	@ (80027fc <HAL_RCC_OscConfig+0x508>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0f0      	beq.n	8002794 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d108      	bne.n	80027cc <HAL_RCC_OscConfig+0x4d8>
 80027ba:	4b0f      	ldr	r3, [pc, #60]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 80027bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c0:	4a0d      	ldr	r2, [pc, #52]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027ca:	e029      	b.n	8002820 <HAL_RCC_OscConfig+0x52c>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b05      	cmp	r3, #5
 80027d2:	d115      	bne.n	8002800 <HAL_RCC_OscConfig+0x50c>
 80027d4:	4b08      	ldr	r3, [pc, #32]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 80027d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027da:	4a07      	ldr	r2, [pc, #28]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 80027dc:	f043 0304 	orr.w	r3, r3, #4
 80027e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027e4:	4b04      	ldr	r3, [pc, #16]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 80027e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ea:	4a03      	ldr	r2, [pc, #12]	@ (80027f8 <HAL_RCC_OscConfig+0x504>)
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027f4:	e014      	b.n	8002820 <HAL_RCC_OscConfig+0x52c>
 80027f6:	bf00      	nop
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40007000 	.word	0x40007000
 8002800:	4b9a      	ldr	r3, [pc, #616]	@ (8002a6c <HAL_RCC_OscConfig+0x778>)
 8002802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002806:	4a99      	ldr	r2, [pc, #612]	@ (8002a6c <HAL_RCC_OscConfig+0x778>)
 8002808:	f023 0301 	bic.w	r3, r3, #1
 800280c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002810:	4b96      	ldr	r3, [pc, #600]	@ (8002a6c <HAL_RCC_OscConfig+0x778>)
 8002812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002816:	4a95      	ldr	r2, [pc, #596]	@ (8002a6c <HAL_RCC_OscConfig+0x778>)
 8002818:	f023 0304 	bic.w	r3, r3, #4
 800281c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d016      	beq.n	8002856 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002828:	f7fe fbdc 	bl	8000fe4 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800282e:	e00a      	b.n	8002846 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002830:	f7fe fbd8 	bl	8000fe4 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800283e:	4293      	cmp	r3, r2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e162      	b.n	8002b0c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002846:	4b89      	ldr	r3, [pc, #548]	@ (8002a6c <HAL_RCC_OscConfig+0x778>)
 8002848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0ed      	beq.n	8002830 <HAL_RCC_OscConfig+0x53c>
 8002854:	e015      	b.n	8002882 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002856:	f7fe fbc5 	bl	8000fe4 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800285c:	e00a      	b.n	8002874 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285e:	f7fe fbc1 	bl	8000fe4 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286c:	4293      	cmp	r3, r2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e14b      	b.n	8002b0c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002874:	4b7d      	ldr	r3, [pc, #500]	@ (8002a6c <HAL_RCC_OscConfig+0x778>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1ed      	bne.n	800285e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002882:	7ffb      	ldrb	r3, [r7, #31]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d105      	bne.n	8002894 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002888:	4b78      	ldr	r3, [pc, #480]	@ (8002a6c <HAL_RCC_OscConfig+0x778>)
 800288a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288c:	4a77      	ldr	r2, [pc, #476]	@ (8002a6c <HAL_RCC_OscConfig+0x778>)
 800288e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002892:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0320 	and.w	r3, r3, #32
 800289c:	2b00      	cmp	r3, #0
 800289e:	d03c      	beq.n	800291a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d01c      	beq.n	80028e2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028a8:	4b70      	ldr	r3, [pc, #448]	@ (8002a6c <HAL_RCC_OscConfig+0x778>)
 80028aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028ae:	4a6f      	ldr	r2, [pc, #444]	@ (8002a6c <HAL_RCC_OscConfig+0x778>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b8:	f7fe fb94 	bl	8000fe4 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028c0:	f7fe fb90 	bl	8000fe4 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e11c      	b.n	8002b0c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028d2:	4b66      	ldr	r3, [pc, #408]	@ (8002a6c <HAL_RCC_OscConfig+0x778>)
 80028d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0ef      	beq.n	80028c0 <HAL_RCC_OscConfig+0x5cc>
 80028e0:	e01b      	b.n	800291a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028e2:	4b62      	ldr	r3, [pc, #392]	@ (8002a6c <HAL_RCC_OscConfig+0x778>)
 80028e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028e8:	4a60      	ldr	r2, [pc, #384]	@ (8002a6c <HAL_RCC_OscConfig+0x778>)
 80028ea:	f023 0301 	bic.w	r3, r3, #1
 80028ee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f2:	f7fe fb77 	bl	8000fe4 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028fa:	f7fe fb73 	bl	8000fe4 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e0ff      	b.n	8002b0c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800290c:	4b57      	ldr	r3, [pc, #348]	@ (8002a6c <HAL_RCC_OscConfig+0x778>)
 800290e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1ef      	bne.n	80028fa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 80f3 	beq.w	8002b0a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002928:	2b02      	cmp	r3, #2
 800292a:	f040 80c9 	bne.w	8002ac0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800292e:	4b4f      	ldr	r3, [pc, #316]	@ (8002a6c <HAL_RCC_OscConfig+0x778>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f003 0203 	and.w	r2, r3, #3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293e:	429a      	cmp	r2, r3
 8002940:	d12c      	bne.n	800299c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294c:	3b01      	subs	r3, #1
 800294e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002950:	429a      	cmp	r2, r3
 8002952:	d123      	bne.n	800299c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800295e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002960:	429a      	cmp	r2, r3
 8002962:	d11b      	bne.n	800299c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800296e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d113      	bne.n	800299c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800297e:	085b      	lsrs	r3, r3, #1
 8002980:	3b01      	subs	r3, #1
 8002982:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002984:	429a      	cmp	r2, r3
 8002986:	d109      	bne.n	800299c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	085b      	lsrs	r3, r3, #1
 8002994:	3b01      	subs	r3, #1
 8002996:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002998:	429a      	cmp	r2, r3
 800299a:	d06b      	beq.n	8002a74 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	2b0c      	cmp	r3, #12
 80029a0:	d062      	beq.n	8002a68 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029a2:	4b32      	ldr	r3, [pc, #200]	@ (8002a6c <HAL_RCC_OscConfig+0x778>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e0ac      	b.n	8002b0c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029b2:	4b2e      	ldr	r3, [pc, #184]	@ (8002a6c <HAL_RCC_OscConfig+0x778>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a2d      	ldr	r2, [pc, #180]	@ (8002a6c <HAL_RCC_OscConfig+0x778>)
 80029b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029bc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029be:	f7fe fb11 	bl	8000fe4 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c6:	f7fe fb0d 	bl	8000fe4 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e099      	b.n	8002b0c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d8:	4b24      	ldr	r3, [pc, #144]	@ (8002a6c <HAL_RCC_OscConfig+0x778>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1f0      	bne.n	80029c6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029e4:	4b21      	ldr	r3, [pc, #132]	@ (8002a6c <HAL_RCC_OscConfig+0x778>)
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	4b21      	ldr	r3, [pc, #132]	@ (8002a70 <HAL_RCC_OscConfig+0x77c>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80029f4:	3a01      	subs	r2, #1
 80029f6:	0112      	lsls	r2, r2, #4
 80029f8:	4311      	orrs	r1, r2
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80029fe:	0212      	lsls	r2, r2, #8
 8002a00:	4311      	orrs	r1, r2
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a06:	0852      	lsrs	r2, r2, #1
 8002a08:	3a01      	subs	r2, #1
 8002a0a:	0552      	lsls	r2, r2, #21
 8002a0c:	4311      	orrs	r1, r2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002a12:	0852      	lsrs	r2, r2, #1
 8002a14:	3a01      	subs	r2, #1
 8002a16:	0652      	lsls	r2, r2, #25
 8002a18:	4311      	orrs	r1, r2
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a1e:	06d2      	lsls	r2, r2, #27
 8002a20:	430a      	orrs	r2, r1
 8002a22:	4912      	ldr	r1, [pc, #72]	@ (8002a6c <HAL_RCC_OscConfig+0x778>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a28:	4b10      	ldr	r3, [pc, #64]	@ (8002a6c <HAL_RCC_OscConfig+0x778>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a0f      	ldr	r2, [pc, #60]	@ (8002a6c <HAL_RCC_OscConfig+0x778>)
 8002a2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a32:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a34:	4b0d      	ldr	r3, [pc, #52]	@ (8002a6c <HAL_RCC_OscConfig+0x778>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4a0c      	ldr	r2, [pc, #48]	@ (8002a6c <HAL_RCC_OscConfig+0x778>)
 8002a3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a40:	f7fe fad0 	bl	8000fe4 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a48:	f7fe facc 	bl	8000fe4 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e058      	b.n	8002b0c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a5a:	4b04      	ldr	r3, [pc, #16]	@ (8002a6c <HAL_RCC_OscConfig+0x778>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a66:	e050      	b.n	8002b0a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e04f      	b.n	8002b0c <HAL_RCC_OscConfig+0x818>
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a74:	4b27      	ldr	r3, [pc, #156]	@ (8002b14 <HAL_RCC_OscConfig+0x820>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d144      	bne.n	8002b0a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a80:	4b24      	ldr	r3, [pc, #144]	@ (8002b14 <HAL_RCC_OscConfig+0x820>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a23      	ldr	r2, [pc, #140]	@ (8002b14 <HAL_RCC_OscConfig+0x820>)
 8002a86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a8c:	4b21      	ldr	r3, [pc, #132]	@ (8002b14 <HAL_RCC_OscConfig+0x820>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4a20      	ldr	r2, [pc, #128]	@ (8002b14 <HAL_RCC_OscConfig+0x820>)
 8002a92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a98:	f7fe faa4 	bl	8000fe4 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa0:	f7fe faa0 	bl	8000fe4 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e02c      	b.n	8002b0c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab2:	4b18      	ldr	r3, [pc, #96]	@ (8002b14 <HAL_RCC_OscConfig+0x820>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x7ac>
 8002abe:	e024      	b.n	8002b0a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	2b0c      	cmp	r3, #12
 8002ac4:	d01f      	beq.n	8002b06 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac6:	4b13      	ldr	r3, [pc, #76]	@ (8002b14 <HAL_RCC_OscConfig+0x820>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a12      	ldr	r2, [pc, #72]	@ (8002b14 <HAL_RCC_OscConfig+0x820>)
 8002acc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad2:	f7fe fa87 	bl	8000fe4 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ada:	f7fe fa83 	bl	8000fe4 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e00f      	b.n	8002b0c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aec:	4b09      	ldr	r3, [pc, #36]	@ (8002b14 <HAL_RCC_OscConfig+0x820>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1f0      	bne.n	8002ada <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002af8:	4b06      	ldr	r3, [pc, #24]	@ (8002b14 <HAL_RCC_OscConfig+0x820>)
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	4905      	ldr	r1, [pc, #20]	@ (8002b14 <HAL_RCC_OscConfig+0x820>)
 8002afe:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <HAL_RCC_OscConfig+0x824>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	60cb      	str	r3, [r1, #12]
 8002b04:	e001      	b.n	8002b0a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3720      	adds	r7, #32
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40021000 	.word	0x40021000
 8002b18:	feeefffc 	.word	0xfeeefffc

08002b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0e7      	b.n	8002d00 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b30:	4b75      	ldr	r3, [pc, #468]	@ (8002d08 <HAL_RCC_ClockConfig+0x1ec>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d910      	bls.n	8002b60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3e:	4b72      	ldr	r3, [pc, #456]	@ (8002d08 <HAL_RCC_ClockConfig+0x1ec>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 0207 	bic.w	r2, r3, #7
 8002b46:	4970      	ldr	r1, [pc, #448]	@ (8002d08 <HAL_RCC_ClockConfig+0x1ec>)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	4b6e      	ldr	r3, [pc, #440]	@ (8002d08 <HAL_RCC_ClockConfig+0x1ec>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0cf      	b.n	8002d00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d010      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	4b66      	ldr	r3, [pc, #408]	@ (8002d0c <HAL_RCC_ClockConfig+0x1f0>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d908      	bls.n	8002b8e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b7c:	4b63      	ldr	r3, [pc, #396]	@ (8002d0c <HAL_RCC_ClockConfig+0x1f0>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	4960      	ldr	r1, [pc, #384]	@ (8002d0c <HAL_RCC_ClockConfig+0x1f0>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d04c      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d107      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba2:	4b5a      	ldr	r3, [pc, #360]	@ (8002d0c <HAL_RCC_ClockConfig+0x1f0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d121      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e0a6      	b.n	8002d00 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d107      	bne.n	8002bca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bba:	4b54      	ldr	r3, [pc, #336]	@ (8002d0c <HAL_RCC_ClockConfig+0x1f0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d115      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e09a      	b.n	8002d00 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d107      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bd2:	4b4e      	ldr	r3, [pc, #312]	@ (8002d0c <HAL_RCC_ClockConfig+0x1f0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d109      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e08e      	b.n	8002d00 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002be2:	4b4a      	ldr	r3, [pc, #296]	@ (8002d0c <HAL_RCC_ClockConfig+0x1f0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e086      	b.n	8002d00 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bf2:	4b46      	ldr	r3, [pc, #280]	@ (8002d0c <HAL_RCC_ClockConfig+0x1f0>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f023 0203 	bic.w	r2, r3, #3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	4943      	ldr	r1, [pc, #268]	@ (8002d0c <HAL_RCC_ClockConfig+0x1f0>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c04:	f7fe f9ee 	bl	8000fe4 <HAL_GetTick>
 8002c08:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0a:	e00a      	b.n	8002c22 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c0c:	f7fe f9ea 	bl	8000fe4 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e06e      	b.n	8002d00 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c22:	4b3a      	ldr	r3, [pc, #232]	@ (8002d0c <HAL_RCC_ClockConfig+0x1f0>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 020c 	and.w	r2, r3, #12
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d1eb      	bne.n	8002c0c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d010      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	4b31      	ldr	r3, [pc, #196]	@ (8002d0c <HAL_RCC_ClockConfig+0x1f0>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d208      	bcs.n	8002c62 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c50:	4b2e      	ldr	r3, [pc, #184]	@ (8002d0c <HAL_RCC_ClockConfig+0x1f0>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	492b      	ldr	r1, [pc, #172]	@ (8002d0c <HAL_RCC_ClockConfig+0x1f0>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c62:	4b29      	ldr	r3, [pc, #164]	@ (8002d08 <HAL_RCC_ClockConfig+0x1ec>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d210      	bcs.n	8002c92 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c70:	4b25      	ldr	r3, [pc, #148]	@ (8002d08 <HAL_RCC_ClockConfig+0x1ec>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f023 0207 	bic.w	r2, r3, #7
 8002c78:	4923      	ldr	r1, [pc, #140]	@ (8002d08 <HAL_RCC_ClockConfig+0x1ec>)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c80:	4b21      	ldr	r3, [pc, #132]	@ (8002d08 <HAL_RCC_ClockConfig+0x1ec>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d001      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e036      	b.n	8002d00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d008      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002d0c <HAL_RCC_ClockConfig+0x1f0>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	4918      	ldr	r1, [pc, #96]	@ (8002d0c <HAL_RCC_ClockConfig+0x1f0>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d009      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cbc:	4b13      	ldr	r3, [pc, #76]	@ (8002d0c <HAL_RCC_ClockConfig+0x1f0>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	4910      	ldr	r1, [pc, #64]	@ (8002d0c <HAL_RCC_ClockConfig+0x1f0>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cd0:	f000 f824 	bl	8002d1c <HAL_RCC_GetSysClockFreq>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002d0c <HAL_RCC_ClockConfig+0x1f0>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	091b      	lsrs	r3, r3, #4
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	490b      	ldr	r1, [pc, #44]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f4>)
 8002ce2:	5ccb      	ldrb	r3, [r1, r3]
 8002ce4:	f003 031f 	and.w	r3, r3, #31
 8002ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cec:	4a09      	ldr	r2, [pc, #36]	@ (8002d14 <HAL_RCC_ClockConfig+0x1f8>)
 8002cee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cf0:	4b09      	ldr	r3, [pc, #36]	@ (8002d18 <HAL_RCC_ClockConfig+0x1fc>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fe f925 	bl	8000f44 <HAL_InitTick>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	72fb      	strb	r3, [r7, #11]

  return status;
 8002cfe:	7afb      	ldrb	r3, [r7, #11]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40022000 	.word	0x40022000
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	08005160 	.word	0x08005160
 8002d14:	20000000 	.word	0x20000000
 8002d18:	20000004 	.word	0x20000004

08002d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b089      	sub	sp, #36	@ 0x24
 8002d20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61fb      	str	r3, [r7, #28]
 8002d26:	2300      	movs	r3, #0
 8002d28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
 8002d32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d34:	4b3b      	ldr	r3, [pc, #236]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0303 	and.w	r3, r3, #3
 8002d3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d005      	beq.n	8002d50 <HAL_RCC_GetSysClockFreq+0x34>
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	2b0c      	cmp	r3, #12
 8002d48:	d121      	bne.n	8002d8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d11e      	bne.n	8002d8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d50:	4b34      	ldr	r3, [pc, #208]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d107      	bne.n	8002d6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d5c:	4b31      	ldr	r3, [pc, #196]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d62:	0a1b      	lsrs	r3, r3, #8
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	61fb      	str	r3, [r7, #28]
 8002d6a:	e005      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d6c:	4b2d      	ldr	r3, [pc, #180]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d78:	4a2b      	ldr	r2, [pc, #172]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10d      	bne.n	8002da4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d8c:	e00a      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d102      	bne.n	8002d9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d94:	4b25      	ldr	r3, [pc, #148]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x110>)
 8002d96:	61bb      	str	r3, [r7, #24]
 8002d98:	e004      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d101      	bne.n	8002da4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002da0:	4b23      	ldr	r3, [pc, #140]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x114>)
 8002da2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	2b0c      	cmp	r3, #12
 8002da8:	d134      	bne.n	8002e14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002daa:	4b1e      	ldr	r3, [pc, #120]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d003      	beq.n	8002dc2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d003      	beq.n	8002dc8 <HAL_RCC_GetSysClockFreq+0xac>
 8002dc0:	e005      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x110>)
 8002dc4:	617b      	str	r3, [r7, #20]
      break;
 8002dc6:	e005      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002dc8:	4b19      	ldr	r3, [pc, #100]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dca:	617b      	str	r3, [r7, #20]
      break;
 8002dcc:	e002      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	617b      	str	r3, [r7, #20]
      break;
 8002dd2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dd4:	4b13      	ldr	r3, [pc, #76]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	091b      	lsrs	r3, r3, #4
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	3301      	adds	r3, #1
 8002de0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002de2:	4b10      	ldr	r3, [pc, #64]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	0a1b      	lsrs	r3, r3, #8
 8002de8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	fb03 f202 	mul.w	r2, r3, r2
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	0e5b      	lsrs	r3, r3, #25
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	3301      	adds	r3, #1
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e14:	69bb      	ldr	r3, [r7, #24]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3724      	adds	r7, #36	@ 0x24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000
 8002e28:	08005178 	.word	0x08005178
 8002e2c:	00f42400 	.word	0x00f42400
 8002e30:	007a1200 	.word	0x007a1200

08002e34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e38:	4b03      	ldr	r3, [pc, #12]	@ (8002e48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	20000000 	.word	0x20000000

08002e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e50:	f7ff fff0 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8002e54:	4602      	mov	r2, r0
 8002e56:	4b06      	ldr	r3, [pc, #24]	@ (8002e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	0a1b      	lsrs	r3, r3, #8
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	4904      	ldr	r1, [pc, #16]	@ (8002e74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e62:	5ccb      	ldrb	r3, [r1, r3]
 8002e64:	f003 031f 	and.w	r3, r3, #31
 8002e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40021000 	.word	0x40021000
 8002e74:	08005170 	.word	0x08005170

08002e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e7c:	f7ff ffda 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8002e80:	4602      	mov	r2, r0
 8002e82:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	0adb      	lsrs	r3, r3, #11
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	4904      	ldr	r1, [pc, #16]	@ (8002ea0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e8e:	5ccb      	ldrb	r3, [r1, r3]
 8002e90:	f003 031f 	and.w	r3, r3, #31
 8002e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	08005170 	.word	0x08005170

08002ea4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002eac:	2300      	movs	r3, #0
 8002eae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8002f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ebc:	f7ff f9b6 	bl	800222c <HAL_PWREx_GetVoltageRange>
 8002ec0:	6178      	str	r0, [r7, #20]
 8002ec2:	e014      	b.n	8002eee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ec4:	4b25      	ldr	r3, [pc, #148]	@ (8002f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec8:	4a24      	ldr	r2, [pc, #144]	@ (8002f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ece:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ed0:	4b22      	ldr	r3, [pc, #136]	@ (8002f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002edc:	f7ff f9a6 	bl	800222c <HAL_PWREx_GetVoltageRange>
 8002ee0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee6:	4a1d      	ldr	r2, [pc, #116]	@ (8002f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ee8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eec:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ef4:	d10b      	bne.n	8002f0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b80      	cmp	r3, #128	@ 0x80
 8002efa:	d919      	bls.n	8002f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f00:	d902      	bls.n	8002f08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f02:	2302      	movs	r3, #2
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	e013      	b.n	8002f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f08:	2301      	movs	r3, #1
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	e010      	b.n	8002f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b80      	cmp	r3, #128	@ 0x80
 8002f12:	d902      	bls.n	8002f1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f14:	2303      	movs	r3, #3
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	e00a      	b.n	8002f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b80      	cmp	r3, #128	@ 0x80
 8002f1e:	d102      	bne.n	8002f26 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f20:	2302      	movs	r3, #2
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	e004      	b.n	8002f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b70      	cmp	r3, #112	@ 0x70
 8002f2a:	d101      	bne.n	8002f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f30:	4b0b      	ldr	r3, [pc, #44]	@ (8002f60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f023 0207 	bic.w	r2, r3, #7
 8002f38:	4909      	ldr	r1, [pc, #36]	@ (8002f60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f40:	4b07      	ldr	r3, [pc, #28]	@ (8002f60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d001      	beq.n	8002f52 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	40022000 	.word	0x40022000

08002f64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f70:	2300      	movs	r3, #0
 8002f72:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d031      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f84:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f88:	d01a      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002f8a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f8e:	d814      	bhi.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d009      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f98:	d10f      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002f9a:	4b5d      	ldr	r3, [pc, #372]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	4a5c      	ldr	r2, [pc, #368]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fa4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fa6:	e00c      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3304      	adds	r3, #4
 8002fac:	2100      	movs	r1, #0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 f9de 	bl	8003370 <RCCEx_PLLSAI1_Config>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fb8:	e003      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	74fb      	strb	r3, [r7, #19]
      break;
 8002fbe:	e000      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002fc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fc2:	7cfb      	ldrb	r3, [r7, #19]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10b      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fc8:	4b51      	ldr	r3, [pc, #324]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd6:	494e      	ldr	r1, [pc, #312]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002fde:	e001      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe0:	7cfb      	ldrb	r3, [r7, #19]
 8002fe2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 809e 	beq.w	800312e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ff6:	4b46      	ldr	r3, [pc, #280]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003006:	2300      	movs	r3, #0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00d      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800300c:	4b40      	ldr	r3, [pc, #256]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800300e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003010:	4a3f      	ldr	r2, [pc, #252]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003012:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003016:	6593      	str	r3, [r2, #88]	@ 0x58
 8003018:	4b3d      	ldr	r3, [pc, #244]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800301a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003024:	2301      	movs	r3, #1
 8003026:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003028:	4b3a      	ldr	r3, [pc, #232]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a39      	ldr	r2, [pc, #228]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800302e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003032:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003034:	f7fd ffd6 	bl	8000fe4 <HAL_GetTick>
 8003038:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800303a:	e009      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303c:	f7fd ffd2 	bl	8000fe4 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d902      	bls.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	74fb      	strb	r3, [r7, #19]
        break;
 800304e:	e005      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003050:	4b30      	ldr	r3, [pc, #192]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0ef      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800305c:	7cfb      	ldrb	r3, [r7, #19]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d15a      	bne.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003062:	4b2b      	ldr	r3, [pc, #172]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003068:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800306c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d01e      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	429a      	cmp	r2, r3
 800307c:	d019      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800307e:	4b24      	ldr	r3, [pc, #144]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003084:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003088:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800308a:	4b21      	ldr	r3, [pc, #132]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800308c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003090:	4a1f      	ldr	r2, [pc, #124]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003092:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003096:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800309a:	4b1d      	ldr	r3, [pc, #116]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800309c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030a0:	4a1b      	ldr	r2, [pc, #108]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030aa:	4a19      	ldr	r2, [pc, #100]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d016      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030bc:	f7fd ff92 	bl	8000fe4 <HAL_GetTick>
 80030c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030c2:	e00b      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c4:	f7fd ff8e 	bl	8000fe4 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d902      	bls.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	74fb      	strb	r3, [r7, #19]
            break;
 80030da:	e006      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0ec      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80030ea:	7cfb      	ldrb	r3, [r7, #19]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10b      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030f0:	4b07      	ldr	r3, [pc, #28]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030f6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030fe:	4904      	ldr	r1, [pc, #16]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003100:	4313      	orrs	r3, r2
 8003102:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003106:	e009      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003108:	7cfb      	ldrb	r3, [r7, #19]
 800310a:	74bb      	strb	r3, [r7, #18]
 800310c:	e006      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800310e:	bf00      	nop
 8003110:	40021000 	.word	0x40021000
 8003114:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003118:	7cfb      	ldrb	r3, [r7, #19]
 800311a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800311c:	7c7b      	ldrb	r3, [r7, #17]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d105      	bne.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003122:	4b8a      	ldr	r3, [pc, #552]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003126:	4a89      	ldr	r2, [pc, #548]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003128:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800312c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800313a:	4b84      	ldr	r3, [pc, #528]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800313c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003140:	f023 0203 	bic.w	r2, r3, #3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	4980      	ldr	r1, [pc, #512]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00a      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800315c:	4b7b      	ldr	r3, [pc, #492]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003162:	f023 020c 	bic.w	r2, r3, #12
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316a:	4978      	ldr	r1, [pc, #480]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0320 	and.w	r3, r3, #32
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800317e:	4b73      	ldr	r3, [pc, #460]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003184:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800318c:	496f      	ldr	r1, [pc, #444]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00a      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031a0:	4b6a      	ldr	r3, [pc, #424]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ae:	4967      	ldr	r1, [pc, #412]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031c2:	4b62      	ldr	r3, [pc, #392]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d0:	495e      	ldr	r1, [pc, #376]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00a      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031e4:	4b59      	ldr	r3, [pc, #356]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f2:	4956      	ldr	r1, [pc, #344]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003206:	4b51      	ldr	r3, [pc, #324]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800320c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003214:	494d      	ldr	r1, [pc, #308]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d028      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003228:	4b48      	ldr	r3, [pc, #288]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003236:	4945      	ldr	r1, [pc, #276]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003242:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003246:	d106      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003248:	4b40      	ldr	r3, [pc, #256]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	4a3f      	ldr	r2, [pc, #252]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800324e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003252:	60d3      	str	r3, [r2, #12]
 8003254:	e011      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800325e:	d10c      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3304      	adds	r3, #4
 8003264:	2101      	movs	r1, #1
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f882 	bl	8003370 <RCCEx_PLLSAI1_Config>
 800326c:	4603      	mov	r3, r0
 800326e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003270:	7cfb      	ldrb	r3, [r7, #19]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003276:	7cfb      	ldrb	r3, [r7, #19]
 8003278:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d028      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003286:	4b31      	ldr	r3, [pc, #196]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800328c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003294:	492d      	ldr	r1, [pc, #180]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032a4:	d106      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032a6:	4b29      	ldr	r3, [pc, #164]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	4a28      	ldr	r2, [pc, #160]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032b0:	60d3      	str	r3, [r2, #12]
 80032b2:	e011      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032bc:	d10c      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3304      	adds	r3, #4
 80032c2:	2101      	movs	r1, #1
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 f853 	bl	8003370 <RCCEx_PLLSAI1_Config>
 80032ca:	4603      	mov	r3, r0
 80032cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032ce:	7cfb      	ldrb	r3, [r7, #19]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80032d4:	7cfb      	ldrb	r3, [r7, #19]
 80032d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d01c      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032e4:	4b19      	ldr	r3, [pc, #100]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032f2:	4916      	ldr	r1, [pc, #88]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003302:	d10c      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3304      	adds	r3, #4
 8003308:	2102      	movs	r1, #2
 800330a:	4618      	mov	r0, r3
 800330c:	f000 f830 	bl	8003370 <RCCEx_PLLSAI1_Config>
 8003310:	4603      	mov	r3, r0
 8003312:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003314:	7cfb      	ldrb	r3, [r7, #19]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800331a:	7cfb      	ldrb	r3, [r7, #19]
 800331c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800332a:	4b08      	ldr	r3, [pc, #32]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800332c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003330:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003338:	4904      	ldr	r1, [pc, #16]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800333a:	4313      	orrs	r3, r2
 800333c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003340:	7cbb      	ldrb	r3, [r7, #18]
}
 8003342:	4618      	mov	r0, r3
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40021000 	.word	0x40021000

08003350 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003354:	4b05      	ldr	r3, [pc, #20]	@ (800336c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a04      	ldr	r2, [pc, #16]	@ (800336c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800335a:	f043 0304 	orr.w	r3, r3, #4
 800335e:	6013      	str	r3, [r2, #0]
}
 8003360:	bf00      	nop
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	40021000 	.word	0x40021000

08003370 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800337e:	4b74      	ldr	r3, [pc, #464]	@ (8003550 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d018      	beq.n	80033bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800338a:	4b71      	ldr	r3, [pc, #452]	@ (8003550 <RCCEx_PLLSAI1_Config+0x1e0>)
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f003 0203 	and.w	r2, r3, #3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d10d      	bne.n	80033b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
       ||
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d009      	beq.n	80033b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033a2:	4b6b      	ldr	r3, [pc, #428]	@ (8003550 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	091b      	lsrs	r3, r3, #4
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
       ||
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d047      	beq.n	8003446 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	73fb      	strb	r3, [r7, #15]
 80033ba:	e044      	b.n	8003446 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b03      	cmp	r3, #3
 80033c2:	d018      	beq.n	80033f6 <RCCEx_PLLSAI1_Config+0x86>
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d825      	bhi.n	8003414 <RCCEx_PLLSAI1_Config+0xa4>
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d002      	beq.n	80033d2 <RCCEx_PLLSAI1_Config+0x62>
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d009      	beq.n	80033e4 <RCCEx_PLLSAI1_Config+0x74>
 80033d0:	e020      	b.n	8003414 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003550 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d11d      	bne.n	800341a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033e2:	e01a      	b.n	800341a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033e4:	4b5a      	ldr	r3, [pc, #360]	@ (8003550 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d116      	bne.n	800341e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033f4:	e013      	b.n	800341e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033f6:	4b56      	ldr	r3, [pc, #344]	@ (8003550 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10f      	bne.n	8003422 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003402:	4b53      	ldr	r3, [pc, #332]	@ (8003550 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d109      	bne.n	8003422 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003412:	e006      	b.n	8003422 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	73fb      	strb	r3, [r7, #15]
      break;
 8003418:	e004      	b.n	8003424 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800341a:	bf00      	nop
 800341c:	e002      	b.n	8003424 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800341e:	bf00      	nop
 8003420:	e000      	b.n	8003424 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003422:	bf00      	nop
    }

    if(status == HAL_OK)
 8003424:	7bfb      	ldrb	r3, [r7, #15]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10d      	bne.n	8003446 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800342a:	4b49      	ldr	r3, [pc, #292]	@ (8003550 <RCCEx_PLLSAI1_Config+0x1e0>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6819      	ldr	r1, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	3b01      	subs	r3, #1
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	430b      	orrs	r3, r1
 8003440:	4943      	ldr	r1, [pc, #268]	@ (8003550 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003442:	4313      	orrs	r3, r2
 8003444:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d17c      	bne.n	8003546 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800344c:	4b40      	ldr	r3, [pc, #256]	@ (8003550 <RCCEx_PLLSAI1_Config+0x1e0>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a3f      	ldr	r2, [pc, #252]	@ (8003550 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003452:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003456:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003458:	f7fd fdc4 	bl	8000fe4 <HAL_GetTick>
 800345c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800345e:	e009      	b.n	8003474 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003460:	f7fd fdc0 	bl	8000fe4 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d902      	bls.n	8003474 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	73fb      	strb	r3, [r7, #15]
        break;
 8003472:	e005      	b.n	8003480 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003474:	4b36      	ldr	r3, [pc, #216]	@ (8003550 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1ef      	bne.n	8003460 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d15f      	bne.n	8003546 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d110      	bne.n	80034ae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800348c:	4b30      	ldr	r3, [pc, #192]	@ (8003550 <RCCEx_PLLSAI1_Config+0x1e0>)
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003494:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6892      	ldr	r2, [r2, #8]
 800349c:	0211      	lsls	r1, r2, #8
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68d2      	ldr	r2, [r2, #12]
 80034a2:	06d2      	lsls	r2, r2, #27
 80034a4:	430a      	orrs	r2, r1
 80034a6:	492a      	ldr	r1, [pc, #168]	@ (8003550 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	610b      	str	r3, [r1, #16]
 80034ac:	e027      	b.n	80034fe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d112      	bne.n	80034da <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034b4:	4b26      	ldr	r3, [pc, #152]	@ (8003550 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80034bc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6892      	ldr	r2, [r2, #8]
 80034c4:	0211      	lsls	r1, r2, #8
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6912      	ldr	r2, [r2, #16]
 80034ca:	0852      	lsrs	r2, r2, #1
 80034cc:	3a01      	subs	r2, #1
 80034ce:	0552      	lsls	r2, r2, #21
 80034d0:	430a      	orrs	r2, r1
 80034d2:	491f      	ldr	r1, [pc, #124]	@ (8003550 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	610b      	str	r3, [r1, #16]
 80034d8:	e011      	b.n	80034fe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034da:	4b1d      	ldr	r3, [pc, #116]	@ (8003550 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80034e2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6892      	ldr	r2, [r2, #8]
 80034ea:	0211      	lsls	r1, r2, #8
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6952      	ldr	r2, [r2, #20]
 80034f0:	0852      	lsrs	r2, r2, #1
 80034f2:	3a01      	subs	r2, #1
 80034f4:	0652      	lsls	r2, r2, #25
 80034f6:	430a      	orrs	r2, r1
 80034f8:	4915      	ldr	r1, [pc, #84]	@ (8003550 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80034fe:	4b14      	ldr	r3, [pc, #80]	@ (8003550 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a13      	ldr	r2, [pc, #76]	@ (8003550 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003504:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003508:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350a:	f7fd fd6b 	bl	8000fe4 <HAL_GetTick>
 800350e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003510:	e009      	b.n	8003526 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003512:	f7fd fd67 	bl	8000fe4 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d902      	bls.n	8003526 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	73fb      	strb	r3, [r7, #15]
          break;
 8003524:	e005      	b.n	8003532 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003526:	4b0a      	ldr	r3, [pc, #40]	@ (8003550 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0ef      	beq.n	8003512 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003532:	7bfb      	ldrb	r3, [r7, #15]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d106      	bne.n	8003546 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003538:	4b05      	ldr	r3, [pc, #20]	@ (8003550 <RCCEx_PLLSAI1_Config+0x1e0>)
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	4903      	ldr	r1, [pc, #12]	@ (8003550 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003542:	4313      	orrs	r3, r2
 8003544:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003546:	7bfb      	ldrb	r3, [r7, #15]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40021000 	.word	0x40021000

08003554 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e049      	b.n	80035fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d106      	bne.n	8003580 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fd fbe2 	bl	8000d44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3304      	adds	r3, #4
 8003590:	4619      	mov	r1, r3
 8003592:	4610      	mov	r0, r2
 8003594:	f000 fa82 	bl	8003a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
	...

08003604 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b01      	cmp	r3, #1
 8003616:	d001      	beq.n	800361c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e03b      	b.n	8003694 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2202      	movs	r2, #2
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a19      	ldr	r2, [pc, #100]	@ (80036a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d009      	beq.n	8003652 <HAL_TIM_Base_Start_IT+0x4e>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003646:	d004      	beq.n	8003652 <HAL_TIM_Base_Start_IT+0x4e>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a15      	ldr	r2, [pc, #84]	@ (80036a4 <HAL_TIM_Base_Start_IT+0xa0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d115      	bne.n	800367e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	4b13      	ldr	r3, [pc, #76]	@ (80036a8 <HAL_TIM_Base_Start_IT+0xa4>)
 800365a:	4013      	ands	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2b06      	cmp	r3, #6
 8003662:	d015      	beq.n	8003690 <HAL_TIM_Base_Start_IT+0x8c>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800366a:	d011      	beq.n	8003690 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0201 	orr.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800367c:	e008      	b.n	8003690 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 0201 	orr.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	e000      	b.n	8003692 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003690:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	40012c00 	.word	0x40012c00
 80036a4:	40014000 	.word	0x40014000
 80036a8:	00010007 	.word	0x00010007

080036ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d020      	beq.n	8003710 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d01b      	beq.n	8003710 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0202 	mvn.w	r2, #2
 80036e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f9b2 	bl	8003a60 <HAL_TIM_IC_CaptureCallback>
 80036fc:	e005      	b.n	800370a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f9a4 	bl	8003a4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f9b5 	bl	8003a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	2b00      	cmp	r3, #0
 8003718:	d020      	beq.n	800375c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01b      	beq.n	800375c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0204 	mvn.w	r2, #4
 800372c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2202      	movs	r2, #2
 8003732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f98c 	bl	8003a60 <HAL_TIM_IC_CaptureCallback>
 8003748:	e005      	b.n	8003756 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f97e 	bl	8003a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f98f 	bl	8003a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d020      	beq.n	80037a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d01b      	beq.n	80037a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f06f 0208 	mvn.w	r2, #8
 8003778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2204      	movs	r2, #4
 800377e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f966 	bl	8003a60 <HAL_TIM_IC_CaptureCallback>
 8003794:	e005      	b.n	80037a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f958 	bl	8003a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f969 	bl	8003a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f003 0310 	and.w	r3, r3, #16
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d020      	beq.n	80037f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d01b      	beq.n	80037f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0210 	mvn.w	r2, #16
 80037c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2208      	movs	r2, #8
 80037ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f940 	bl	8003a60 <HAL_TIM_IC_CaptureCallback>
 80037e0:	e005      	b.n	80037ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f932 	bl	8003a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f943 	bl	8003a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00c      	beq.n	8003818 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	d007      	beq.n	8003818 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0201 	mvn.w	r2, #1
 8003810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7fd f92e 	bl	8000a74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800381e:	2b00      	cmp	r3, #0
 8003820:	d104      	bne.n	800382c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00c      	beq.n	8003846 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003832:	2b00      	cmp	r3, #0
 8003834:	d007      	beq.n	8003846 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800383e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 faa5 	bl	8003d90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00c      	beq.n	800386a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fa9d 	bl	8003da4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00c      	beq.n	800388e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	d007      	beq.n	800388e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f8fd 	bl	8003a88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00c      	beq.n	80038b2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 0320 	and.w	r3, r3, #32
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d007      	beq.n	80038b2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f06f 0220 	mvn.w	r2, #32
 80038aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fa65 	bl	8003d7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038b2:	bf00      	nop
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b084      	sub	sp, #16
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <HAL_TIM_ConfigClockSource+0x1c>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e0b6      	b.n	8003a44 <HAL_TIM_ConfigClockSource+0x18a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2202      	movs	r2, #2
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038f4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80038f8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003900:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003912:	d03e      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0xd8>
 8003914:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003918:	f200 8087 	bhi.w	8003a2a <HAL_TIM_ConfigClockSource+0x170>
 800391c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003920:	f000 8086 	beq.w	8003a30 <HAL_TIM_ConfigClockSource+0x176>
 8003924:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003928:	d87f      	bhi.n	8003a2a <HAL_TIM_ConfigClockSource+0x170>
 800392a:	2b70      	cmp	r3, #112	@ 0x70
 800392c:	d01a      	beq.n	8003964 <HAL_TIM_ConfigClockSource+0xaa>
 800392e:	2b70      	cmp	r3, #112	@ 0x70
 8003930:	d87b      	bhi.n	8003a2a <HAL_TIM_ConfigClockSource+0x170>
 8003932:	2b60      	cmp	r3, #96	@ 0x60
 8003934:	d050      	beq.n	80039d8 <HAL_TIM_ConfigClockSource+0x11e>
 8003936:	2b60      	cmp	r3, #96	@ 0x60
 8003938:	d877      	bhi.n	8003a2a <HAL_TIM_ConfigClockSource+0x170>
 800393a:	2b50      	cmp	r3, #80	@ 0x50
 800393c:	d03c      	beq.n	80039b8 <HAL_TIM_ConfigClockSource+0xfe>
 800393e:	2b50      	cmp	r3, #80	@ 0x50
 8003940:	d873      	bhi.n	8003a2a <HAL_TIM_ConfigClockSource+0x170>
 8003942:	2b40      	cmp	r3, #64	@ 0x40
 8003944:	d058      	beq.n	80039f8 <HAL_TIM_ConfigClockSource+0x13e>
 8003946:	2b40      	cmp	r3, #64	@ 0x40
 8003948:	d86f      	bhi.n	8003a2a <HAL_TIM_ConfigClockSource+0x170>
 800394a:	2b30      	cmp	r3, #48	@ 0x30
 800394c:	d064      	beq.n	8003a18 <HAL_TIM_ConfigClockSource+0x15e>
 800394e:	2b30      	cmp	r3, #48	@ 0x30
 8003950:	d86b      	bhi.n	8003a2a <HAL_TIM_ConfigClockSource+0x170>
 8003952:	2b20      	cmp	r3, #32
 8003954:	d060      	beq.n	8003a18 <HAL_TIM_ConfigClockSource+0x15e>
 8003956:	2b20      	cmp	r3, #32
 8003958:	d867      	bhi.n	8003a2a <HAL_TIM_ConfigClockSource+0x170>
 800395a:	2b00      	cmp	r3, #0
 800395c:	d05c      	beq.n	8003a18 <HAL_TIM_ConfigClockSource+0x15e>
 800395e:	2b10      	cmp	r3, #16
 8003960:	d05a      	beq.n	8003a18 <HAL_TIM_ConfigClockSource+0x15e>
 8003962:	e062      	b.n	8003a2a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003974:	f000 f97c 	bl	8003c70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003986:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	609a      	str	r2, [r3, #8]
      break;
 8003990:	e04f      	b.n	8003a32 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039a2:	f000 f965 	bl	8003c70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039b4:	609a      	str	r2, [r3, #8]
      break;
 80039b6:	e03c      	b.n	8003a32 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039c4:	461a      	mov	r2, r3
 80039c6:	f000 f8d9 	bl	8003b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2150      	movs	r1, #80	@ 0x50
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 f932 	bl	8003c3a <TIM_ITRx_SetConfig>
      break;
 80039d6:	e02c      	b.n	8003a32 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039e4:	461a      	mov	r2, r3
 80039e6:	f000 f8f8 	bl	8003bda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2160      	movs	r1, #96	@ 0x60
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 f922 	bl	8003c3a <TIM_ITRx_SetConfig>
      break;
 80039f6:	e01c      	b.n	8003a32 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a04:	461a      	mov	r2, r3
 8003a06:	f000 f8b9 	bl	8003b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2140      	movs	r1, #64	@ 0x40
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 f912 	bl	8003c3a <TIM_ITRx_SetConfig>
      break;
 8003a16:	e00c      	b.n	8003a32 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4619      	mov	r1, r3
 8003a22:	4610      	mov	r0, r2
 8003a24:	f000 f909 	bl	8003c3a <TIM_ITRx_SetConfig>
      break;
 8003a28:	e003      	b.n	8003a32 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8003a2e:	e000      	b.n	8003a32 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003a30:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a30      	ldr	r2, [pc, #192]	@ (8003b70 <TIM_Base_SetConfig+0xd4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d003      	beq.n	8003abc <TIM_Base_SetConfig+0x20>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aba:	d108      	bne.n	8003ace <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a27      	ldr	r2, [pc, #156]	@ (8003b70 <TIM_Base_SetConfig+0xd4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d00b      	beq.n	8003aee <TIM_Base_SetConfig+0x52>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003adc:	d007      	beq.n	8003aee <TIM_Base_SetConfig+0x52>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a24      	ldr	r2, [pc, #144]	@ (8003b74 <TIM_Base_SetConfig+0xd8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d003      	beq.n	8003aee <TIM_Base_SetConfig+0x52>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a23      	ldr	r2, [pc, #140]	@ (8003b78 <TIM_Base_SetConfig+0xdc>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d108      	bne.n	8003b00 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003af4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a12      	ldr	r2, [pc, #72]	@ (8003b70 <TIM_Base_SetConfig+0xd4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d007      	beq.n	8003b3c <TIM_Base_SetConfig+0xa0>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a11      	ldr	r2, [pc, #68]	@ (8003b74 <TIM_Base_SetConfig+0xd8>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d003      	beq.n	8003b3c <TIM_Base_SetConfig+0xa0>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a10      	ldr	r2, [pc, #64]	@ (8003b78 <TIM_Base_SetConfig+0xdc>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d103      	bne.n	8003b44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d105      	bne.n	8003b62 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f023 0201 	bic.w	r2, r3, #1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	611a      	str	r2, [r3, #16]
  }
}
 8003b62:	bf00      	nop
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	40012c00 	.word	0x40012c00
 8003b74:	40014000 	.word	0x40014000
 8003b78:	40014400 	.word	0x40014400

08003b7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	f023 0201 	bic.w	r2, r3, #1
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f023 030a 	bic.w	r3, r3, #10
 8003bb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	621a      	str	r2, [r3, #32]
}
 8003bce:	bf00      	nop
 8003bd0:	371c      	adds	r7, #28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b087      	sub	sp, #28
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	f023 0210 	bic.w	r2, r3, #16
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	031b      	lsls	r3, r3, #12
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	621a      	str	r2, [r3, #32]
}
 8003c2e:	bf00      	nop
 8003c30:	371c      	adds	r7, #28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b085      	sub	sp, #20
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f043 0307 	orr.w	r3, r3, #7
 8003c5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	609a      	str	r2, [r3, #8]
}
 8003c64:	bf00      	nop
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
 8003c7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	021a      	lsls	r2, r3, #8
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	431a      	orrs	r2, r3
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	609a      	str	r2, [r3, #8]
}
 8003ca4:	bf00      	nop
 8003ca6:	371c      	adds	r7, #28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d101      	bne.n	8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	e04f      	b.n	8003d68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a21      	ldr	r2, [pc, #132]	@ (8003d74 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d108      	bne.n	8003d04 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003cf8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a14      	ldr	r2, [pc, #80]	@ (8003d74 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d009      	beq.n	8003d3c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d30:	d004      	beq.n	8003d3c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a10      	ldr	r2, [pc, #64]	@ (8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d10c      	bne.n	8003d56 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	40012c00 	.word	0x40012c00
 8003d78:	40014000 	.word	0x40014000

08003d7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e040      	b.n	8003e4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d106      	bne.n	8003de0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fd f806 	bl	8000dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2224      	movs	r2, #36	@ 0x24
 8003de4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0201 	bic.w	r2, r2, #1
 8003df4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fade 	bl	80043c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f8af 	bl	8003f68 <UART_SetConfig>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e01b      	b.n	8003e4c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0201 	orr.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 fb5d 	bl	8004504 <UART_CheckIdleState>
 8003e4a:	4603      	mov	r3, r0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b08a      	sub	sp, #40	@ 0x28
 8003e58:	af02      	add	r7, sp, #8
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	603b      	str	r3, [r7, #0]
 8003e60:	4613      	mov	r3, r2
 8003e62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e68:	2b20      	cmp	r3, #32
 8003e6a:	d177      	bne.n	8003f5c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <HAL_UART_Transmit+0x24>
 8003e72:	88fb      	ldrh	r3, [r7, #6]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e070      	b.n	8003f5e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2221      	movs	r2, #33	@ 0x21
 8003e88:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e8a:	f7fd f8ab 	bl	8000fe4 <HAL_GetTick>
 8003e8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	88fa      	ldrh	r2, [r7, #6]
 8003e94:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	88fa      	ldrh	r2, [r7, #6]
 8003e9c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ea8:	d108      	bne.n	8003ebc <HAL_UART_Transmit+0x68>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d104      	bne.n	8003ebc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	61bb      	str	r3, [r7, #24]
 8003eba:	e003      	b.n	8003ec4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ec4:	e02f      	b.n	8003f26 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2180      	movs	r1, #128	@ 0x80
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 fbbf 	bl	8004654 <UART_WaitOnFlagUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d004      	beq.n	8003ee6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e03b      	b.n	8003f5e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10b      	bne.n	8003f04 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	881a      	ldrh	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ef8:	b292      	uxth	r2, r2
 8003efa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	3302      	adds	r3, #2
 8003f00:	61bb      	str	r3, [r7, #24]
 8003f02:	e007      	b.n	8003f14 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	781a      	ldrb	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	3301      	adds	r3, #1
 8003f12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1c9      	bne.n	8003ec6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2140      	movs	r1, #64	@ 0x40
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f000 fb89 	bl	8004654 <UART_WaitOnFlagUntilTimeout>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d004      	beq.n	8003f52 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e005      	b.n	8003f5e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2220      	movs	r2, #32
 8003f56:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	e000      	b.n	8003f5e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003f5c:	2302      	movs	r3, #2
  }
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3720      	adds	r7, #32
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f6c:	b08a      	sub	sp, #40	@ 0x28
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	431a      	orrs	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	431a      	orrs	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	4bb4      	ldr	r3, [pc, #720]	@ (8004268 <UART_SetConfig+0x300>)
 8003f98:	4013      	ands	r3, r2
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fa0:	430b      	orrs	r3, r1
 8003fa2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4aa9      	ldr	r2, [pc, #676]	@ (800426c <UART_SetConfig+0x304>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d004      	beq.n	8003fd4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4aa0      	ldr	r2, [pc, #640]	@ (8004270 <UART_SetConfig+0x308>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d126      	bne.n	8004040 <UART_SetConfig+0xd8>
 8003ff2:	4ba0      	ldr	r3, [pc, #640]	@ (8004274 <UART_SetConfig+0x30c>)
 8003ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff8:	f003 0303 	and.w	r3, r3, #3
 8003ffc:	2b03      	cmp	r3, #3
 8003ffe:	d81b      	bhi.n	8004038 <UART_SetConfig+0xd0>
 8004000:	a201      	add	r2, pc, #4	@ (adr r2, 8004008 <UART_SetConfig+0xa0>)
 8004002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004006:	bf00      	nop
 8004008:	08004019 	.word	0x08004019
 800400c:	08004029 	.word	0x08004029
 8004010:	08004021 	.word	0x08004021
 8004014:	08004031 	.word	0x08004031
 8004018:	2301      	movs	r3, #1
 800401a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800401e:	e080      	b.n	8004122 <UART_SetConfig+0x1ba>
 8004020:	2302      	movs	r3, #2
 8004022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004026:	e07c      	b.n	8004122 <UART_SetConfig+0x1ba>
 8004028:	2304      	movs	r3, #4
 800402a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800402e:	e078      	b.n	8004122 <UART_SetConfig+0x1ba>
 8004030:	2308      	movs	r3, #8
 8004032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004036:	e074      	b.n	8004122 <UART_SetConfig+0x1ba>
 8004038:	2310      	movs	r3, #16
 800403a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800403e:	e070      	b.n	8004122 <UART_SetConfig+0x1ba>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a8c      	ldr	r2, [pc, #560]	@ (8004278 <UART_SetConfig+0x310>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d138      	bne.n	80040bc <UART_SetConfig+0x154>
 800404a:	4b8a      	ldr	r3, [pc, #552]	@ (8004274 <UART_SetConfig+0x30c>)
 800404c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004050:	f003 030c 	and.w	r3, r3, #12
 8004054:	2b0c      	cmp	r3, #12
 8004056:	d82d      	bhi.n	80040b4 <UART_SetConfig+0x14c>
 8004058:	a201      	add	r2, pc, #4	@ (adr r2, 8004060 <UART_SetConfig+0xf8>)
 800405a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405e:	bf00      	nop
 8004060:	08004095 	.word	0x08004095
 8004064:	080040b5 	.word	0x080040b5
 8004068:	080040b5 	.word	0x080040b5
 800406c:	080040b5 	.word	0x080040b5
 8004070:	080040a5 	.word	0x080040a5
 8004074:	080040b5 	.word	0x080040b5
 8004078:	080040b5 	.word	0x080040b5
 800407c:	080040b5 	.word	0x080040b5
 8004080:	0800409d 	.word	0x0800409d
 8004084:	080040b5 	.word	0x080040b5
 8004088:	080040b5 	.word	0x080040b5
 800408c:	080040b5 	.word	0x080040b5
 8004090:	080040ad 	.word	0x080040ad
 8004094:	2300      	movs	r3, #0
 8004096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800409a:	e042      	b.n	8004122 <UART_SetConfig+0x1ba>
 800409c:	2302      	movs	r3, #2
 800409e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040a2:	e03e      	b.n	8004122 <UART_SetConfig+0x1ba>
 80040a4:	2304      	movs	r3, #4
 80040a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040aa:	e03a      	b.n	8004122 <UART_SetConfig+0x1ba>
 80040ac:	2308      	movs	r3, #8
 80040ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040b2:	e036      	b.n	8004122 <UART_SetConfig+0x1ba>
 80040b4:	2310      	movs	r3, #16
 80040b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ba:	e032      	b.n	8004122 <UART_SetConfig+0x1ba>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a6a      	ldr	r2, [pc, #424]	@ (800426c <UART_SetConfig+0x304>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d12a      	bne.n	800411c <UART_SetConfig+0x1b4>
 80040c6:	4b6b      	ldr	r3, [pc, #428]	@ (8004274 <UART_SetConfig+0x30c>)
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80040d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80040d4:	d01a      	beq.n	800410c <UART_SetConfig+0x1a4>
 80040d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80040da:	d81b      	bhi.n	8004114 <UART_SetConfig+0x1ac>
 80040dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040e0:	d00c      	beq.n	80040fc <UART_SetConfig+0x194>
 80040e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040e6:	d815      	bhi.n	8004114 <UART_SetConfig+0x1ac>
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <UART_SetConfig+0x18c>
 80040ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040f0:	d008      	beq.n	8004104 <UART_SetConfig+0x19c>
 80040f2:	e00f      	b.n	8004114 <UART_SetConfig+0x1ac>
 80040f4:	2300      	movs	r3, #0
 80040f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040fa:	e012      	b.n	8004122 <UART_SetConfig+0x1ba>
 80040fc:	2302      	movs	r3, #2
 80040fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004102:	e00e      	b.n	8004122 <UART_SetConfig+0x1ba>
 8004104:	2304      	movs	r3, #4
 8004106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800410a:	e00a      	b.n	8004122 <UART_SetConfig+0x1ba>
 800410c:	2308      	movs	r3, #8
 800410e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004112:	e006      	b.n	8004122 <UART_SetConfig+0x1ba>
 8004114:	2310      	movs	r3, #16
 8004116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800411a:	e002      	b.n	8004122 <UART_SetConfig+0x1ba>
 800411c:	2310      	movs	r3, #16
 800411e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a51      	ldr	r2, [pc, #324]	@ (800426c <UART_SetConfig+0x304>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d17a      	bne.n	8004222 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800412c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004130:	2b08      	cmp	r3, #8
 8004132:	d824      	bhi.n	800417e <UART_SetConfig+0x216>
 8004134:	a201      	add	r2, pc, #4	@ (adr r2, 800413c <UART_SetConfig+0x1d4>)
 8004136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413a:	bf00      	nop
 800413c:	08004161 	.word	0x08004161
 8004140:	0800417f 	.word	0x0800417f
 8004144:	08004169 	.word	0x08004169
 8004148:	0800417f 	.word	0x0800417f
 800414c:	0800416f 	.word	0x0800416f
 8004150:	0800417f 	.word	0x0800417f
 8004154:	0800417f 	.word	0x0800417f
 8004158:	0800417f 	.word	0x0800417f
 800415c:	08004177 	.word	0x08004177
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004160:	f7fe fe74 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 8004164:	61f8      	str	r0, [r7, #28]
        break;
 8004166:	e010      	b.n	800418a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004168:	4b44      	ldr	r3, [pc, #272]	@ (800427c <UART_SetConfig+0x314>)
 800416a:	61fb      	str	r3, [r7, #28]
        break;
 800416c:	e00d      	b.n	800418a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800416e:	f7fe fdd5 	bl	8002d1c <HAL_RCC_GetSysClockFreq>
 8004172:	61f8      	str	r0, [r7, #28]
        break;
 8004174:	e009      	b.n	800418a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004176:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800417a:	61fb      	str	r3, [r7, #28]
        break;
 800417c:	e005      	b.n	800418a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800417e:	2300      	movs	r3, #0
 8004180:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004188:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 8107 	beq.w	80043a0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	4613      	mov	r3, r2
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	4413      	add	r3, r2
 800419c:	69fa      	ldr	r2, [r7, #28]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d305      	bcc.n	80041ae <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d903      	bls.n	80041b6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80041b4:	e0f4      	b.n	80043a0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	2200      	movs	r2, #0
 80041ba:	461c      	mov	r4, r3
 80041bc:	4615      	mov	r5, r2
 80041be:	f04f 0200 	mov.w	r2, #0
 80041c2:	f04f 0300 	mov.w	r3, #0
 80041c6:	022b      	lsls	r3, r5, #8
 80041c8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80041cc:	0222      	lsls	r2, r4, #8
 80041ce:	68f9      	ldr	r1, [r7, #12]
 80041d0:	6849      	ldr	r1, [r1, #4]
 80041d2:	0849      	lsrs	r1, r1, #1
 80041d4:	2000      	movs	r0, #0
 80041d6:	4688      	mov	r8, r1
 80041d8:	4681      	mov	r9, r0
 80041da:	eb12 0a08 	adds.w	sl, r2, r8
 80041de:	eb43 0b09 	adc.w	fp, r3, r9
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	603b      	str	r3, [r7, #0]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041f0:	4650      	mov	r0, sl
 80041f2:	4659      	mov	r1, fp
 80041f4:	f7fc f83c 	bl	8000270 <__aeabi_uldivmod>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4613      	mov	r3, r2
 80041fe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004206:	d308      	bcc.n	800421a <UART_SetConfig+0x2b2>
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800420e:	d204      	bcs.n	800421a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	60da      	str	r2, [r3, #12]
 8004218:	e0c2      	b.n	80043a0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004220:	e0be      	b.n	80043a0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800422a:	d16a      	bne.n	8004302 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800422c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004230:	2b08      	cmp	r3, #8
 8004232:	d834      	bhi.n	800429e <UART_SetConfig+0x336>
 8004234:	a201      	add	r2, pc, #4	@ (adr r2, 800423c <UART_SetConfig+0x2d4>)
 8004236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423a:	bf00      	nop
 800423c:	08004261 	.word	0x08004261
 8004240:	08004281 	.word	0x08004281
 8004244:	08004289 	.word	0x08004289
 8004248:	0800429f 	.word	0x0800429f
 800424c:	0800428f 	.word	0x0800428f
 8004250:	0800429f 	.word	0x0800429f
 8004254:	0800429f 	.word	0x0800429f
 8004258:	0800429f 	.word	0x0800429f
 800425c:	08004297 	.word	0x08004297
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004260:	f7fe fdf4 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 8004264:	61f8      	str	r0, [r7, #28]
        break;
 8004266:	e020      	b.n	80042aa <UART_SetConfig+0x342>
 8004268:	efff69f3 	.word	0xefff69f3
 800426c:	40008000 	.word	0x40008000
 8004270:	40013800 	.word	0x40013800
 8004274:	40021000 	.word	0x40021000
 8004278:	40004400 	.word	0x40004400
 800427c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004280:	f7fe fdfa 	bl	8002e78 <HAL_RCC_GetPCLK2Freq>
 8004284:	61f8      	str	r0, [r7, #28]
        break;
 8004286:	e010      	b.n	80042aa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004288:	4b4c      	ldr	r3, [pc, #304]	@ (80043bc <UART_SetConfig+0x454>)
 800428a:	61fb      	str	r3, [r7, #28]
        break;
 800428c:	e00d      	b.n	80042aa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800428e:	f7fe fd45 	bl	8002d1c <HAL_RCC_GetSysClockFreq>
 8004292:	61f8      	str	r0, [r7, #28]
        break;
 8004294:	e009      	b.n	80042aa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800429a:	61fb      	str	r3, [r7, #28]
        break;
 800429c:	e005      	b.n	80042aa <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80042a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d077      	beq.n	80043a0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	005a      	lsls	r2, r3, #1
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	085b      	lsrs	r3, r3, #1
 80042ba:	441a      	add	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	2b0f      	cmp	r3, #15
 80042ca:	d916      	bls.n	80042fa <UART_SetConfig+0x392>
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042d2:	d212      	bcs.n	80042fa <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	f023 030f 	bic.w	r3, r3, #15
 80042dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	085b      	lsrs	r3, r3, #1
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	8afb      	ldrh	r3, [r7, #22]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	8afa      	ldrh	r2, [r7, #22]
 80042f6:	60da      	str	r2, [r3, #12]
 80042f8:	e052      	b.n	80043a0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004300:	e04e      	b.n	80043a0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004302:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004306:	2b08      	cmp	r3, #8
 8004308:	d827      	bhi.n	800435a <UART_SetConfig+0x3f2>
 800430a:	a201      	add	r2, pc, #4	@ (adr r2, 8004310 <UART_SetConfig+0x3a8>)
 800430c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004310:	08004335 	.word	0x08004335
 8004314:	0800433d 	.word	0x0800433d
 8004318:	08004345 	.word	0x08004345
 800431c:	0800435b 	.word	0x0800435b
 8004320:	0800434b 	.word	0x0800434b
 8004324:	0800435b 	.word	0x0800435b
 8004328:	0800435b 	.word	0x0800435b
 800432c:	0800435b 	.word	0x0800435b
 8004330:	08004353 	.word	0x08004353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004334:	f7fe fd8a 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 8004338:	61f8      	str	r0, [r7, #28]
        break;
 800433a:	e014      	b.n	8004366 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800433c:	f7fe fd9c 	bl	8002e78 <HAL_RCC_GetPCLK2Freq>
 8004340:	61f8      	str	r0, [r7, #28]
        break;
 8004342:	e010      	b.n	8004366 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004344:	4b1d      	ldr	r3, [pc, #116]	@ (80043bc <UART_SetConfig+0x454>)
 8004346:	61fb      	str	r3, [r7, #28]
        break;
 8004348:	e00d      	b.n	8004366 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800434a:	f7fe fce7 	bl	8002d1c <HAL_RCC_GetSysClockFreq>
 800434e:	61f8      	str	r0, [r7, #28]
        break;
 8004350:	e009      	b.n	8004366 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004352:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004356:	61fb      	str	r3, [r7, #28]
        break;
 8004358:	e005      	b.n	8004366 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800435a:	2300      	movs	r3, #0
 800435c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004364:	bf00      	nop
    }

    if (pclk != 0U)
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d019      	beq.n	80043a0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	085a      	lsrs	r2, r3, #1
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	441a      	add	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	fbb2 f3f3 	udiv	r3, r2, r3
 800437e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	2b0f      	cmp	r3, #15
 8004384:	d909      	bls.n	800439a <UART_SetConfig+0x432>
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800438c:	d205      	bcs.n	800439a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	60da      	str	r2, [r3, #12]
 8004398:	e002      	b.n	80043a0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80043ac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3728      	adds	r7, #40	@ 0x28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ba:	bf00      	nop
 80043bc:	00f42400 	.word	0x00f42400

080043c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043cc:	f003 0308 	and.w	r3, r3, #8
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004432:	f003 0304 	and.w	r3, r3, #4
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004454:	f003 0310 	and.w	r3, r3, #16
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004476:	f003 0320 	and.w	r3, r3, #32
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800449c:	2b00      	cmp	r3, #0
 800449e:	d01a      	beq.n	80044d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044be:	d10a      	bne.n	80044d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	605a      	str	r2, [r3, #4]
  }
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b098      	sub	sp, #96	@ 0x60
 8004508:	af02      	add	r7, sp, #8
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004514:	f7fc fd66 	bl	8000fe4 <HAL_GetTick>
 8004518:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0308 	and.w	r3, r3, #8
 8004524:	2b08      	cmp	r3, #8
 8004526:	d12e      	bne.n	8004586 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004528:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004530:	2200      	movs	r2, #0
 8004532:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f88c 	bl	8004654 <UART_WaitOnFlagUntilTimeout>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d021      	beq.n	8004586 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800454a:	e853 3f00 	ldrex	r3, [r3]
 800454e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004552:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004556:	653b      	str	r3, [r7, #80]	@ 0x50
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	461a      	mov	r2, r3
 800455e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004560:	647b      	str	r3, [r7, #68]	@ 0x44
 8004562:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004564:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004566:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004568:	e841 2300 	strex	r3, r2, [r1]
 800456c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800456e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e6      	bne.n	8004542 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2220      	movs	r2, #32
 8004578:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e062      	b.n	800464c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b04      	cmp	r3, #4
 8004592:	d149      	bne.n	8004628 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004594:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800459c:	2200      	movs	r2, #0
 800459e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f856 	bl	8004654 <UART_WaitOnFlagUntilTimeout>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d03c      	beq.n	8004628 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b6:	e853 3f00 	ldrex	r3, [r3]
 80045ba:	623b      	str	r3, [r7, #32]
   return(result);
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	461a      	mov	r2, r3
 80045ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80045ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045d4:	e841 2300 	strex	r3, r2, [r1]
 80045d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e6      	bne.n	80045ae <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3308      	adds	r3, #8
 80045e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	e853 3f00 	ldrex	r3, [r3]
 80045ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f023 0301 	bic.w	r3, r3, #1
 80045f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3308      	adds	r3, #8
 80045fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004600:	61fa      	str	r2, [r7, #28]
 8004602:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004604:	69b9      	ldr	r1, [r7, #24]
 8004606:	69fa      	ldr	r2, [r7, #28]
 8004608:	e841 2300 	strex	r3, r2, [r1]
 800460c:	617b      	str	r3, [r7, #20]
   return(result);
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1e5      	bne.n	80045e0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2220      	movs	r2, #32
 8004618:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e011      	b.n	800464c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2220      	movs	r2, #32
 800462c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2220      	movs	r2, #32
 8004632:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3758      	adds	r7, #88	@ 0x58
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	603b      	str	r3, [r7, #0]
 8004660:	4613      	mov	r3, r2
 8004662:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004664:	e04f      	b.n	8004706 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466c:	d04b      	beq.n	8004706 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800466e:	f7fc fcb9 	bl	8000fe4 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	429a      	cmp	r2, r3
 800467c:	d302      	bcc.n	8004684 <UART_WaitOnFlagUntilTimeout+0x30>
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e04e      	b.n	8004726 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0304 	and.w	r3, r3, #4
 8004692:	2b00      	cmp	r3, #0
 8004694:	d037      	beq.n	8004706 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2b80      	cmp	r3, #128	@ 0x80
 800469a:	d034      	beq.n	8004706 <UART_WaitOnFlagUntilTimeout+0xb2>
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b40      	cmp	r3, #64	@ 0x40
 80046a0:	d031      	beq.n	8004706 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d110      	bne.n	80046d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2208      	movs	r2, #8
 80046b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 f838 	bl	800472e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2208      	movs	r2, #8
 80046c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e029      	b.n	8004726 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046e0:	d111      	bne.n	8004706 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80046ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 f81e 	bl	800472e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e00f      	b.n	8004726 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69da      	ldr	r2, [r3, #28]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	4013      	ands	r3, r2
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	429a      	cmp	r2, r3
 8004714:	bf0c      	ite	eq
 8004716:	2301      	moveq	r3, #1
 8004718:	2300      	movne	r3, #0
 800471a:	b2db      	uxtb	r3, r3
 800471c:	461a      	mov	r2, r3
 800471e:	79fb      	ldrb	r3, [r7, #7]
 8004720:	429a      	cmp	r2, r3
 8004722:	d0a0      	beq.n	8004666 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800472e:	b480      	push	{r7}
 8004730:	b095      	sub	sp, #84	@ 0x54
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800473e:	e853 3f00 	ldrex	r3, [r3]
 8004742:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004746:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800474a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	461a      	mov	r2, r3
 8004752:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004754:	643b      	str	r3, [r7, #64]	@ 0x40
 8004756:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004758:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800475a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800475c:	e841 2300 	strex	r3, r2, [r1]
 8004760:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1e6      	bne.n	8004736 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3308      	adds	r3, #8
 800476e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	e853 3f00 	ldrex	r3, [r3]
 8004776:	61fb      	str	r3, [r7, #28]
   return(result);
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	f023 0301 	bic.w	r3, r3, #1
 800477e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3308      	adds	r3, #8
 8004786:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004788:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800478a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800478e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004790:	e841 2300 	strex	r3, r2, [r1]
 8004794:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e5      	bne.n	8004768 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d118      	bne.n	80047d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	e853 3f00 	ldrex	r3, [r3]
 80047b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	f023 0310 	bic.w	r3, r3, #16
 80047b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047c2:	61bb      	str	r3, [r7, #24]
 80047c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c6:	6979      	ldr	r1, [r7, #20]
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	e841 2300 	strex	r3, r2, [r1]
 80047ce:	613b      	str	r3, [r7, #16]
   return(result);
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1e6      	bne.n	80047a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2220      	movs	r2, #32
 80047da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80047ea:	bf00      	nop
 80047ec:	3754      	adds	r7, #84	@ 0x54
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
	...

080047f8 <siprintf>:
 80047f8:	b40e      	push	{r1, r2, r3}
 80047fa:	b500      	push	{lr}
 80047fc:	b09c      	sub	sp, #112	@ 0x70
 80047fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8004800:	9002      	str	r0, [sp, #8]
 8004802:	9006      	str	r0, [sp, #24]
 8004804:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004808:	4809      	ldr	r0, [pc, #36]	@ (8004830 <siprintf+0x38>)
 800480a:	9107      	str	r1, [sp, #28]
 800480c:	9104      	str	r1, [sp, #16]
 800480e:	4909      	ldr	r1, [pc, #36]	@ (8004834 <siprintf+0x3c>)
 8004810:	f853 2b04 	ldr.w	r2, [r3], #4
 8004814:	9105      	str	r1, [sp, #20]
 8004816:	6800      	ldr	r0, [r0, #0]
 8004818:	9301      	str	r3, [sp, #4]
 800481a:	a902      	add	r1, sp, #8
 800481c:	f000 f994 	bl	8004b48 <_svfiprintf_r>
 8004820:	9b02      	ldr	r3, [sp, #8]
 8004822:	2200      	movs	r2, #0
 8004824:	701a      	strb	r2, [r3, #0]
 8004826:	b01c      	add	sp, #112	@ 0x70
 8004828:	f85d eb04 	ldr.w	lr, [sp], #4
 800482c:	b003      	add	sp, #12
 800482e:	4770      	bx	lr
 8004830:	2000000c 	.word	0x2000000c
 8004834:	ffff0208 	.word	0xffff0208

08004838 <memset>:
 8004838:	4402      	add	r2, r0
 800483a:	4603      	mov	r3, r0
 800483c:	4293      	cmp	r3, r2
 800483e:	d100      	bne.n	8004842 <memset+0xa>
 8004840:	4770      	bx	lr
 8004842:	f803 1b01 	strb.w	r1, [r3], #1
 8004846:	e7f9      	b.n	800483c <memset+0x4>

08004848 <__errno>:
 8004848:	4b01      	ldr	r3, [pc, #4]	@ (8004850 <__errno+0x8>)
 800484a:	6818      	ldr	r0, [r3, #0]
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	2000000c 	.word	0x2000000c

08004854 <__libc_init_array>:
 8004854:	b570      	push	{r4, r5, r6, lr}
 8004856:	4d0d      	ldr	r5, [pc, #52]	@ (800488c <__libc_init_array+0x38>)
 8004858:	4c0d      	ldr	r4, [pc, #52]	@ (8004890 <__libc_init_array+0x3c>)
 800485a:	1b64      	subs	r4, r4, r5
 800485c:	10a4      	asrs	r4, r4, #2
 800485e:	2600      	movs	r6, #0
 8004860:	42a6      	cmp	r6, r4
 8004862:	d109      	bne.n	8004878 <__libc_init_array+0x24>
 8004864:	4d0b      	ldr	r5, [pc, #44]	@ (8004894 <__libc_init_array+0x40>)
 8004866:	4c0c      	ldr	r4, [pc, #48]	@ (8004898 <__libc_init_array+0x44>)
 8004868:	f000 fc66 	bl	8005138 <_init>
 800486c:	1b64      	subs	r4, r4, r5
 800486e:	10a4      	asrs	r4, r4, #2
 8004870:	2600      	movs	r6, #0
 8004872:	42a6      	cmp	r6, r4
 8004874:	d105      	bne.n	8004882 <__libc_init_array+0x2e>
 8004876:	bd70      	pop	{r4, r5, r6, pc}
 8004878:	f855 3b04 	ldr.w	r3, [r5], #4
 800487c:	4798      	blx	r3
 800487e:	3601      	adds	r6, #1
 8004880:	e7ee      	b.n	8004860 <__libc_init_array+0xc>
 8004882:	f855 3b04 	ldr.w	r3, [r5], #4
 8004886:	4798      	blx	r3
 8004888:	3601      	adds	r6, #1
 800488a:	e7f2      	b.n	8004872 <__libc_init_array+0x1e>
 800488c:	080051e4 	.word	0x080051e4
 8004890:	080051e4 	.word	0x080051e4
 8004894:	080051e4 	.word	0x080051e4
 8004898:	080051e8 	.word	0x080051e8

0800489c <__retarget_lock_acquire_recursive>:
 800489c:	4770      	bx	lr

0800489e <__retarget_lock_release_recursive>:
 800489e:	4770      	bx	lr

080048a0 <_free_r>:
 80048a0:	b538      	push	{r3, r4, r5, lr}
 80048a2:	4605      	mov	r5, r0
 80048a4:	2900      	cmp	r1, #0
 80048a6:	d041      	beq.n	800492c <_free_r+0x8c>
 80048a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048ac:	1f0c      	subs	r4, r1, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	bfb8      	it	lt
 80048b2:	18e4      	addlt	r4, r4, r3
 80048b4:	f000 f8e0 	bl	8004a78 <__malloc_lock>
 80048b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004930 <_free_r+0x90>)
 80048ba:	6813      	ldr	r3, [r2, #0]
 80048bc:	b933      	cbnz	r3, 80048cc <_free_r+0x2c>
 80048be:	6063      	str	r3, [r4, #4]
 80048c0:	6014      	str	r4, [r2, #0]
 80048c2:	4628      	mov	r0, r5
 80048c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048c8:	f000 b8dc 	b.w	8004a84 <__malloc_unlock>
 80048cc:	42a3      	cmp	r3, r4
 80048ce:	d908      	bls.n	80048e2 <_free_r+0x42>
 80048d0:	6820      	ldr	r0, [r4, #0]
 80048d2:	1821      	adds	r1, r4, r0
 80048d4:	428b      	cmp	r3, r1
 80048d6:	bf01      	itttt	eq
 80048d8:	6819      	ldreq	r1, [r3, #0]
 80048da:	685b      	ldreq	r3, [r3, #4]
 80048dc:	1809      	addeq	r1, r1, r0
 80048de:	6021      	streq	r1, [r4, #0]
 80048e0:	e7ed      	b.n	80048be <_free_r+0x1e>
 80048e2:	461a      	mov	r2, r3
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	b10b      	cbz	r3, 80048ec <_free_r+0x4c>
 80048e8:	42a3      	cmp	r3, r4
 80048ea:	d9fa      	bls.n	80048e2 <_free_r+0x42>
 80048ec:	6811      	ldr	r1, [r2, #0]
 80048ee:	1850      	adds	r0, r2, r1
 80048f0:	42a0      	cmp	r0, r4
 80048f2:	d10b      	bne.n	800490c <_free_r+0x6c>
 80048f4:	6820      	ldr	r0, [r4, #0]
 80048f6:	4401      	add	r1, r0
 80048f8:	1850      	adds	r0, r2, r1
 80048fa:	4283      	cmp	r3, r0
 80048fc:	6011      	str	r1, [r2, #0]
 80048fe:	d1e0      	bne.n	80048c2 <_free_r+0x22>
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	6053      	str	r3, [r2, #4]
 8004906:	4408      	add	r0, r1
 8004908:	6010      	str	r0, [r2, #0]
 800490a:	e7da      	b.n	80048c2 <_free_r+0x22>
 800490c:	d902      	bls.n	8004914 <_free_r+0x74>
 800490e:	230c      	movs	r3, #12
 8004910:	602b      	str	r3, [r5, #0]
 8004912:	e7d6      	b.n	80048c2 <_free_r+0x22>
 8004914:	6820      	ldr	r0, [r4, #0]
 8004916:	1821      	adds	r1, r4, r0
 8004918:	428b      	cmp	r3, r1
 800491a:	bf04      	itt	eq
 800491c:	6819      	ldreq	r1, [r3, #0]
 800491e:	685b      	ldreq	r3, [r3, #4]
 8004920:	6063      	str	r3, [r4, #4]
 8004922:	bf04      	itt	eq
 8004924:	1809      	addeq	r1, r1, r0
 8004926:	6021      	streq	r1, [r4, #0]
 8004928:	6054      	str	r4, [r2, #4]
 800492a:	e7ca      	b.n	80048c2 <_free_r+0x22>
 800492c:	bd38      	pop	{r3, r4, r5, pc}
 800492e:	bf00      	nop
 8004930:	20000344 	.word	0x20000344

08004934 <sbrk_aligned>:
 8004934:	b570      	push	{r4, r5, r6, lr}
 8004936:	4e0f      	ldr	r6, [pc, #60]	@ (8004974 <sbrk_aligned+0x40>)
 8004938:	460c      	mov	r4, r1
 800493a:	6831      	ldr	r1, [r6, #0]
 800493c:	4605      	mov	r5, r0
 800493e:	b911      	cbnz	r1, 8004946 <sbrk_aligned+0x12>
 8004940:	f000 fba6 	bl	8005090 <_sbrk_r>
 8004944:	6030      	str	r0, [r6, #0]
 8004946:	4621      	mov	r1, r4
 8004948:	4628      	mov	r0, r5
 800494a:	f000 fba1 	bl	8005090 <_sbrk_r>
 800494e:	1c43      	adds	r3, r0, #1
 8004950:	d103      	bne.n	800495a <sbrk_aligned+0x26>
 8004952:	f04f 34ff 	mov.w	r4, #4294967295
 8004956:	4620      	mov	r0, r4
 8004958:	bd70      	pop	{r4, r5, r6, pc}
 800495a:	1cc4      	adds	r4, r0, #3
 800495c:	f024 0403 	bic.w	r4, r4, #3
 8004960:	42a0      	cmp	r0, r4
 8004962:	d0f8      	beq.n	8004956 <sbrk_aligned+0x22>
 8004964:	1a21      	subs	r1, r4, r0
 8004966:	4628      	mov	r0, r5
 8004968:	f000 fb92 	bl	8005090 <_sbrk_r>
 800496c:	3001      	adds	r0, #1
 800496e:	d1f2      	bne.n	8004956 <sbrk_aligned+0x22>
 8004970:	e7ef      	b.n	8004952 <sbrk_aligned+0x1e>
 8004972:	bf00      	nop
 8004974:	20000340 	.word	0x20000340

08004978 <_malloc_r>:
 8004978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800497c:	1ccd      	adds	r5, r1, #3
 800497e:	f025 0503 	bic.w	r5, r5, #3
 8004982:	3508      	adds	r5, #8
 8004984:	2d0c      	cmp	r5, #12
 8004986:	bf38      	it	cc
 8004988:	250c      	movcc	r5, #12
 800498a:	2d00      	cmp	r5, #0
 800498c:	4606      	mov	r6, r0
 800498e:	db01      	blt.n	8004994 <_malloc_r+0x1c>
 8004990:	42a9      	cmp	r1, r5
 8004992:	d904      	bls.n	800499e <_malloc_r+0x26>
 8004994:	230c      	movs	r3, #12
 8004996:	6033      	str	r3, [r6, #0]
 8004998:	2000      	movs	r0, #0
 800499a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800499e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a74 <_malloc_r+0xfc>
 80049a2:	f000 f869 	bl	8004a78 <__malloc_lock>
 80049a6:	f8d8 3000 	ldr.w	r3, [r8]
 80049aa:	461c      	mov	r4, r3
 80049ac:	bb44      	cbnz	r4, 8004a00 <_malloc_r+0x88>
 80049ae:	4629      	mov	r1, r5
 80049b0:	4630      	mov	r0, r6
 80049b2:	f7ff ffbf 	bl	8004934 <sbrk_aligned>
 80049b6:	1c43      	adds	r3, r0, #1
 80049b8:	4604      	mov	r4, r0
 80049ba:	d158      	bne.n	8004a6e <_malloc_r+0xf6>
 80049bc:	f8d8 4000 	ldr.w	r4, [r8]
 80049c0:	4627      	mov	r7, r4
 80049c2:	2f00      	cmp	r7, #0
 80049c4:	d143      	bne.n	8004a4e <_malloc_r+0xd6>
 80049c6:	2c00      	cmp	r4, #0
 80049c8:	d04b      	beq.n	8004a62 <_malloc_r+0xea>
 80049ca:	6823      	ldr	r3, [r4, #0]
 80049cc:	4639      	mov	r1, r7
 80049ce:	4630      	mov	r0, r6
 80049d0:	eb04 0903 	add.w	r9, r4, r3
 80049d4:	f000 fb5c 	bl	8005090 <_sbrk_r>
 80049d8:	4581      	cmp	r9, r0
 80049da:	d142      	bne.n	8004a62 <_malloc_r+0xea>
 80049dc:	6821      	ldr	r1, [r4, #0]
 80049de:	1a6d      	subs	r5, r5, r1
 80049e0:	4629      	mov	r1, r5
 80049e2:	4630      	mov	r0, r6
 80049e4:	f7ff ffa6 	bl	8004934 <sbrk_aligned>
 80049e8:	3001      	adds	r0, #1
 80049ea:	d03a      	beq.n	8004a62 <_malloc_r+0xea>
 80049ec:	6823      	ldr	r3, [r4, #0]
 80049ee:	442b      	add	r3, r5
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	f8d8 3000 	ldr.w	r3, [r8]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	bb62      	cbnz	r2, 8004a54 <_malloc_r+0xdc>
 80049fa:	f8c8 7000 	str.w	r7, [r8]
 80049fe:	e00f      	b.n	8004a20 <_malloc_r+0xa8>
 8004a00:	6822      	ldr	r2, [r4, #0]
 8004a02:	1b52      	subs	r2, r2, r5
 8004a04:	d420      	bmi.n	8004a48 <_malloc_r+0xd0>
 8004a06:	2a0b      	cmp	r2, #11
 8004a08:	d917      	bls.n	8004a3a <_malloc_r+0xc2>
 8004a0a:	1961      	adds	r1, r4, r5
 8004a0c:	42a3      	cmp	r3, r4
 8004a0e:	6025      	str	r5, [r4, #0]
 8004a10:	bf18      	it	ne
 8004a12:	6059      	strne	r1, [r3, #4]
 8004a14:	6863      	ldr	r3, [r4, #4]
 8004a16:	bf08      	it	eq
 8004a18:	f8c8 1000 	streq.w	r1, [r8]
 8004a1c:	5162      	str	r2, [r4, r5]
 8004a1e:	604b      	str	r3, [r1, #4]
 8004a20:	4630      	mov	r0, r6
 8004a22:	f000 f82f 	bl	8004a84 <__malloc_unlock>
 8004a26:	f104 000b 	add.w	r0, r4, #11
 8004a2a:	1d23      	adds	r3, r4, #4
 8004a2c:	f020 0007 	bic.w	r0, r0, #7
 8004a30:	1ac2      	subs	r2, r0, r3
 8004a32:	bf1c      	itt	ne
 8004a34:	1a1b      	subne	r3, r3, r0
 8004a36:	50a3      	strne	r3, [r4, r2]
 8004a38:	e7af      	b.n	800499a <_malloc_r+0x22>
 8004a3a:	6862      	ldr	r2, [r4, #4]
 8004a3c:	42a3      	cmp	r3, r4
 8004a3e:	bf0c      	ite	eq
 8004a40:	f8c8 2000 	streq.w	r2, [r8]
 8004a44:	605a      	strne	r2, [r3, #4]
 8004a46:	e7eb      	b.n	8004a20 <_malloc_r+0xa8>
 8004a48:	4623      	mov	r3, r4
 8004a4a:	6864      	ldr	r4, [r4, #4]
 8004a4c:	e7ae      	b.n	80049ac <_malloc_r+0x34>
 8004a4e:	463c      	mov	r4, r7
 8004a50:	687f      	ldr	r7, [r7, #4]
 8004a52:	e7b6      	b.n	80049c2 <_malloc_r+0x4a>
 8004a54:	461a      	mov	r2, r3
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	42a3      	cmp	r3, r4
 8004a5a:	d1fb      	bne.n	8004a54 <_malloc_r+0xdc>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	6053      	str	r3, [r2, #4]
 8004a60:	e7de      	b.n	8004a20 <_malloc_r+0xa8>
 8004a62:	230c      	movs	r3, #12
 8004a64:	6033      	str	r3, [r6, #0]
 8004a66:	4630      	mov	r0, r6
 8004a68:	f000 f80c 	bl	8004a84 <__malloc_unlock>
 8004a6c:	e794      	b.n	8004998 <_malloc_r+0x20>
 8004a6e:	6005      	str	r5, [r0, #0]
 8004a70:	e7d6      	b.n	8004a20 <_malloc_r+0xa8>
 8004a72:	bf00      	nop
 8004a74:	20000344 	.word	0x20000344

08004a78 <__malloc_lock>:
 8004a78:	4801      	ldr	r0, [pc, #4]	@ (8004a80 <__malloc_lock+0x8>)
 8004a7a:	f7ff bf0f 	b.w	800489c <__retarget_lock_acquire_recursive>
 8004a7e:	bf00      	nop
 8004a80:	2000033c 	.word	0x2000033c

08004a84 <__malloc_unlock>:
 8004a84:	4801      	ldr	r0, [pc, #4]	@ (8004a8c <__malloc_unlock+0x8>)
 8004a86:	f7ff bf0a 	b.w	800489e <__retarget_lock_release_recursive>
 8004a8a:	bf00      	nop
 8004a8c:	2000033c 	.word	0x2000033c

08004a90 <__ssputs_r>:
 8004a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a94:	688e      	ldr	r6, [r1, #8]
 8004a96:	461f      	mov	r7, r3
 8004a98:	42be      	cmp	r6, r7
 8004a9a:	680b      	ldr	r3, [r1, #0]
 8004a9c:	4682      	mov	sl, r0
 8004a9e:	460c      	mov	r4, r1
 8004aa0:	4690      	mov	r8, r2
 8004aa2:	d82d      	bhi.n	8004b00 <__ssputs_r+0x70>
 8004aa4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004aa8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004aac:	d026      	beq.n	8004afc <__ssputs_r+0x6c>
 8004aae:	6965      	ldr	r5, [r4, #20]
 8004ab0:	6909      	ldr	r1, [r1, #16]
 8004ab2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ab6:	eba3 0901 	sub.w	r9, r3, r1
 8004aba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004abe:	1c7b      	adds	r3, r7, #1
 8004ac0:	444b      	add	r3, r9
 8004ac2:	106d      	asrs	r5, r5, #1
 8004ac4:	429d      	cmp	r5, r3
 8004ac6:	bf38      	it	cc
 8004ac8:	461d      	movcc	r5, r3
 8004aca:	0553      	lsls	r3, r2, #21
 8004acc:	d527      	bpl.n	8004b1e <__ssputs_r+0x8e>
 8004ace:	4629      	mov	r1, r5
 8004ad0:	f7ff ff52 	bl	8004978 <_malloc_r>
 8004ad4:	4606      	mov	r6, r0
 8004ad6:	b360      	cbz	r0, 8004b32 <__ssputs_r+0xa2>
 8004ad8:	6921      	ldr	r1, [r4, #16]
 8004ada:	464a      	mov	r2, r9
 8004adc:	f000 fae8 	bl	80050b0 <memcpy>
 8004ae0:	89a3      	ldrh	r3, [r4, #12]
 8004ae2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004ae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aea:	81a3      	strh	r3, [r4, #12]
 8004aec:	6126      	str	r6, [r4, #16]
 8004aee:	6165      	str	r5, [r4, #20]
 8004af0:	444e      	add	r6, r9
 8004af2:	eba5 0509 	sub.w	r5, r5, r9
 8004af6:	6026      	str	r6, [r4, #0]
 8004af8:	60a5      	str	r5, [r4, #8]
 8004afa:	463e      	mov	r6, r7
 8004afc:	42be      	cmp	r6, r7
 8004afe:	d900      	bls.n	8004b02 <__ssputs_r+0x72>
 8004b00:	463e      	mov	r6, r7
 8004b02:	6820      	ldr	r0, [r4, #0]
 8004b04:	4632      	mov	r2, r6
 8004b06:	4641      	mov	r1, r8
 8004b08:	f000 faa8 	bl	800505c <memmove>
 8004b0c:	68a3      	ldr	r3, [r4, #8]
 8004b0e:	1b9b      	subs	r3, r3, r6
 8004b10:	60a3      	str	r3, [r4, #8]
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	4433      	add	r3, r6
 8004b16:	6023      	str	r3, [r4, #0]
 8004b18:	2000      	movs	r0, #0
 8004b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b1e:	462a      	mov	r2, r5
 8004b20:	f000 fad4 	bl	80050cc <_realloc_r>
 8004b24:	4606      	mov	r6, r0
 8004b26:	2800      	cmp	r0, #0
 8004b28:	d1e0      	bne.n	8004aec <__ssputs_r+0x5c>
 8004b2a:	6921      	ldr	r1, [r4, #16]
 8004b2c:	4650      	mov	r0, sl
 8004b2e:	f7ff feb7 	bl	80048a0 <_free_r>
 8004b32:	230c      	movs	r3, #12
 8004b34:	f8ca 3000 	str.w	r3, [sl]
 8004b38:	89a3      	ldrh	r3, [r4, #12]
 8004b3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b3e:	81a3      	strh	r3, [r4, #12]
 8004b40:	f04f 30ff 	mov.w	r0, #4294967295
 8004b44:	e7e9      	b.n	8004b1a <__ssputs_r+0x8a>
	...

08004b48 <_svfiprintf_r>:
 8004b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b4c:	4698      	mov	r8, r3
 8004b4e:	898b      	ldrh	r3, [r1, #12]
 8004b50:	061b      	lsls	r3, r3, #24
 8004b52:	b09d      	sub	sp, #116	@ 0x74
 8004b54:	4607      	mov	r7, r0
 8004b56:	460d      	mov	r5, r1
 8004b58:	4614      	mov	r4, r2
 8004b5a:	d510      	bpl.n	8004b7e <_svfiprintf_r+0x36>
 8004b5c:	690b      	ldr	r3, [r1, #16]
 8004b5e:	b973      	cbnz	r3, 8004b7e <_svfiprintf_r+0x36>
 8004b60:	2140      	movs	r1, #64	@ 0x40
 8004b62:	f7ff ff09 	bl	8004978 <_malloc_r>
 8004b66:	6028      	str	r0, [r5, #0]
 8004b68:	6128      	str	r0, [r5, #16]
 8004b6a:	b930      	cbnz	r0, 8004b7a <_svfiprintf_r+0x32>
 8004b6c:	230c      	movs	r3, #12
 8004b6e:	603b      	str	r3, [r7, #0]
 8004b70:	f04f 30ff 	mov.w	r0, #4294967295
 8004b74:	b01d      	add	sp, #116	@ 0x74
 8004b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b7a:	2340      	movs	r3, #64	@ 0x40
 8004b7c:	616b      	str	r3, [r5, #20]
 8004b7e:	2300      	movs	r3, #0
 8004b80:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b82:	2320      	movs	r3, #32
 8004b84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b88:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b8c:	2330      	movs	r3, #48	@ 0x30
 8004b8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004d2c <_svfiprintf_r+0x1e4>
 8004b92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004b96:	f04f 0901 	mov.w	r9, #1
 8004b9a:	4623      	mov	r3, r4
 8004b9c:	469a      	mov	sl, r3
 8004b9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ba2:	b10a      	cbz	r2, 8004ba8 <_svfiprintf_r+0x60>
 8004ba4:	2a25      	cmp	r2, #37	@ 0x25
 8004ba6:	d1f9      	bne.n	8004b9c <_svfiprintf_r+0x54>
 8004ba8:	ebba 0b04 	subs.w	fp, sl, r4
 8004bac:	d00b      	beq.n	8004bc6 <_svfiprintf_r+0x7e>
 8004bae:	465b      	mov	r3, fp
 8004bb0:	4622      	mov	r2, r4
 8004bb2:	4629      	mov	r1, r5
 8004bb4:	4638      	mov	r0, r7
 8004bb6:	f7ff ff6b 	bl	8004a90 <__ssputs_r>
 8004bba:	3001      	adds	r0, #1
 8004bbc:	f000 80a7 	beq.w	8004d0e <_svfiprintf_r+0x1c6>
 8004bc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bc2:	445a      	add	r2, fp
 8004bc4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bc6:	f89a 3000 	ldrb.w	r3, [sl]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 809f 	beq.w	8004d0e <_svfiprintf_r+0x1c6>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bda:	f10a 0a01 	add.w	sl, sl, #1
 8004bde:	9304      	str	r3, [sp, #16]
 8004be0:	9307      	str	r3, [sp, #28]
 8004be2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004be6:	931a      	str	r3, [sp, #104]	@ 0x68
 8004be8:	4654      	mov	r4, sl
 8004bea:	2205      	movs	r2, #5
 8004bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bf0:	484e      	ldr	r0, [pc, #312]	@ (8004d2c <_svfiprintf_r+0x1e4>)
 8004bf2:	f7fb faed 	bl	80001d0 <memchr>
 8004bf6:	9a04      	ldr	r2, [sp, #16]
 8004bf8:	b9d8      	cbnz	r0, 8004c32 <_svfiprintf_r+0xea>
 8004bfa:	06d0      	lsls	r0, r2, #27
 8004bfc:	bf44      	itt	mi
 8004bfe:	2320      	movmi	r3, #32
 8004c00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c04:	0711      	lsls	r1, r2, #28
 8004c06:	bf44      	itt	mi
 8004c08:	232b      	movmi	r3, #43	@ 0x2b
 8004c0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c0e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c12:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c14:	d015      	beq.n	8004c42 <_svfiprintf_r+0xfa>
 8004c16:	9a07      	ldr	r2, [sp, #28]
 8004c18:	4654      	mov	r4, sl
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	f04f 0c0a 	mov.w	ip, #10
 8004c20:	4621      	mov	r1, r4
 8004c22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c26:	3b30      	subs	r3, #48	@ 0x30
 8004c28:	2b09      	cmp	r3, #9
 8004c2a:	d94b      	bls.n	8004cc4 <_svfiprintf_r+0x17c>
 8004c2c:	b1b0      	cbz	r0, 8004c5c <_svfiprintf_r+0x114>
 8004c2e:	9207      	str	r2, [sp, #28]
 8004c30:	e014      	b.n	8004c5c <_svfiprintf_r+0x114>
 8004c32:	eba0 0308 	sub.w	r3, r0, r8
 8004c36:	fa09 f303 	lsl.w	r3, r9, r3
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	9304      	str	r3, [sp, #16]
 8004c3e:	46a2      	mov	sl, r4
 8004c40:	e7d2      	b.n	8004be8 <_svfiprintf_r+0xa0>
 8004c42:	9b03      	ldr	r3, [sp, #12]
 8004c44:	1d19      	adds	r1, r3, #4
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	9103      	str	r1, [sp, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	bfbb      	ittet	lt
 8004c4e:	425b      	neglt	r3, r3
 8004c50:	f042 0202 	orrlt.w	r2, r2, #2
 8004c54:	9307      	strge	r3, [sp, #28]
 8004c56:	9307      	strlt	r3, [sp, #28]
 8004c58:	bfb8      	it	lt
 8004c5a:	9204      	strlt	r2, [sp, #16]
 8004c5c:	7823      	ldrb	r3, [r4, #0]
 8004c5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c60:	d10a      	bne.n	8004c78 <_svfiprintf_r+0x130>
 8004c62:	7863      	ldrb	r3, [r4, #1]
 8004c64:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c66:	d132      	bne.n	8004cce <_svfiprintf_r+0x186>
 8004c68:	9b03      	ldr	r3, [sp, #12]
 8004c6a:	1d1a      	adds	r2, r3, #4
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	9203      	str	r2, [sp, #12]
 8004c70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c74:	3402      	adds	r4, #2
 8004c76:	9305      	str	r3, [sp, #20]
 8004c78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004d3c <_svfiprintf_r+0x1f4>
 8004c7c:	7821      	ldrb	r1, [r4, #0]
 8004c7e:	2203      	movs	r2, #3
 8004c80:	4650      	mov	r0, sl
 8004c82:	f7fb faa5 	bl	80001d0 <memchr>
 8004c86:	b138      	cbz	r0, 8004c98 <_svfiprintf_r+0x150>
 8004c88:	9b04      	ldr	r3, [sp, #16]
 8004c8a:	eba0 000a 	sub.w	r0, r0, sl
 8004c8e:	2240      	movs	r2, #64	@ 0x40
 8004c90:	4082      	lsls	r2, r0
 8004c92:	4313      	orrs	r3, r2
 8004c94:	3401      	adds	r4, #1
 8004c96:	9304      	str	r3, [sp, #16]
 8004c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c9c:	4824      	ldr	r0, [pc, #144]	@ (8004d30 <_svfiprintf_r+0x1e8>)
 8004c9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ca2:	2206      	movs	r2, #6
 8004ca4:	f7fb fa94 	bl	80001d0 <memchr>
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	d036      	beq.n	8004d1a <_svfiprintf_r+0x1d2>
 8004cac:	4b21      	ldr	r3, [pc, #132]	@ (8004d34 <_svfiprintf_r+0x1ec>)
 8004cae:	bb1b      	cbnz	r3, 8004cf8 <_svfiprintf_r+0x1b0>
 8004cb0:	9b03      	ldr	r3, [sp, #12]
 8004cb2:	3307      	adds	r3, #7
 8004cb4:	f023 0307 	bic.w	r3, r3, #7
 8004cb8:	3308      	adds	r3, #8
 8004cba:	9303      	str	r3, [sp, #12]
 8004cbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cbe:	4433      	add	r3, r6
 8004cc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cc2:	e76a      	b.n	8004b9a <_svfiprintf_r+0x52>
 8004cc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cc8:	460c      	mov	r4, r1
 8004cca:	2001      	movs	r0, #1
 8004ccc:	e7a8      	b.n	8004c20 <_svfiprintf_r+0xd8>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	3401      	adds	r4, #1
 8004cd2:	9305      	str	r3, [sp, #20]
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	f04f 0c0a 	mov.w	ip, #10
 8004cda:	4620      	mov	r0, r4
 8004cdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ce0:	3a30      	subs	r2, #48	@ 0x30
 8004ce2:	2a09      	cmp	r2, #9
 8004ce4:	d903      	bls.n	8004cee <_svfiprintf_r+0x1a6>
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0c6      	beq.n	8004c78 <_svfiprintf_r+0x130>
 8004cea:	9105      	str	r1, [sp, #20]
 8004cec:	e7c4      	b.n	8004c78 <_svfiprintf_r+0x130>
 8004cee:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cf2:	4604      	mov	r4, r0
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e7f0      	b.n	8004cda <_svfiprintf_r+0x192>
 8004cf8:	ab03      	add	r3, sp, #12
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	462a      	mov	r2, r5
 8004cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8004d38 <_svfiprintf_r+0x1f0>)
 8004d00:	a904      	add	r1, sp, #16
 8004d02:	4638      	mov	r0, r7
 8004d04:	f3af 8000 	nop.w
 8004d08:	1c42      	adds	r2, r0, #1
 8004d0a:	4606      	mov	r6, r0
 8004d0c:	d1d6      	bne.n	8004cbc <_svfiprintf_r+0x174>
 8004d0e:	89ab      	ldrh	r3, [r5, #12]
 8004d10:	065b      	lsls	r3, r3, #25
 8004d12:	f53f af2d 	bmi.w	8004b70 <_svfiprintf_r+0x28>
 8004d16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d18:	e72c      	b.n	8004b74 <_svfiprintf_r+0x2c>
 8004d1a:	ab03      	add	r3, sp, #12
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	462a      	mov	r2, r5
 8004d20:	4b05      	ldr	r3, [pc, #20]	@ (8004d38 <_svfiprintf_r+0x1f0>)
 8004d22:	a904      	add	r1, sp, #16
 8004d24:	4638      	mov	r0, r7
 8004d26:	f000 f879 	bl	8004e1c <_printf_i>
 8004d2a:	e7ed      	b.n	8004d08 <_svfiprintf_r+0x1c0>
 8004d2c:	080051a8 	.word	0x080051a8
 8004d30:	080051b2 	.word	0x080051b2
 8004d34:	00000000 	.word	0x00000000
 8004d38:	08004a91 	.word	0x08004a91
 8004d3c:	080051ae 	.word	0x080051ae

08004d40 <_printf_common>:
 8004d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d44:	4616      	mov	r6, r2
 8004d46:	4698      	mov	r8, r3
 8004d48:	688a      	ldr	r2, [r1, #8]
 8004d4a:	690b      	ldr	r3, [r1, #16]
 8004d4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d50:	4293      	cmp	r3, r2
 8004d52:	bfb8      	it	lt
 8004d54:	4613      	movlt	r3, r2
 8004d56:	6033      	str	r3, [r6, #0]
 8004d58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d5c:	4607      	mov	r7, r0
 8004d5e:	460c      	mov	r4, r1
 8004d60:	b10a      	cbz	r2, 8004d66 <_printf_common+0x26>
 8004d62:	3301      	adds	r3, #1
 8004d64:	6033      	str	r3, [r6, #0]
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	0699      	lsls	r1, r3, #26
 8004d6a:	bf42      	ittt	mi
 8004d6c:	6833      	ldrmi	r3, [r6, #0]
 8004d6e:	3302      	addmi	r3, #2
 8004d70:	6033      	strmi	r3, [r6, #0]
 8004d72:	6825      	ldr	r5, [r4, #0]
 8004d74:	f015 0506 	ands.w	r5, r5, #6
 8004d78:	d106      	bne.n	8004d88 <_printf_common+0x48>
 8004d7a:	f104 0a19 	add.w	sl, r4, #25
 8004d7e:	68e3      	ldr	r3, [r4, #12]
 8004d80:	6832      	ldr	r2, [r6, #0]
 8004d82:	1a9b      	subs	r3, r3, r2
 8004d84:	42ab      	cmp	r3, r5
 8004d86:	dc26      	bgt.n	8004dd6 <_printf_common+0x96>
 8004d88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d8c:	6822      	ldr	r2, [r4, #0]
 8004d8e:	3b00      	subs	r3, #0
 8004d90:	bf18      	it	ne
 8004d92:	2301      	movne	r3, #1
 8004d94:	0692      	lsls	r2, r2, #26
 8004d96:	d42b      	bmi.n	8004df0 <_printf_common+0xb0>
 8004d98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d9c:	4641      	mov	r1, r8
 8004d9e:	4638      	mov	r0, r7
 8004da0:	47c8      	blx	r9
 8004da2:	3001      	adds	r0, #1
 8004da4:	d01e      	beq.n	8004de4 <_printf_common+0xa4>
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	6922      	ldr	r2, [r4, #16]
 8004daa:	f003 0306 	and.w	r3, r3, #6
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	bf02      	ittt	eq
 8004db2:	68e5      	ldreq	r5, [r4, #12]
 8004db4:	6833      	ldreq	r3, [r6, #0]
 8004db6:	1aed      	subeq	r5, r5, r3
 8004db8:	68a3      	ldr	r3, [r4, #8]
 8004dba:	bf0c      	ite	eq
 8004dbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dc0:	2500      	movne	r5, #0
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	bfc4      	itt	gt
 8004dc6:	1a9b      	subgt	r3, r3, r2
 8004dc8:	18ed      	addgt	r5, r5, r3
 8004dca:	2600      	movs	r6, #0
 8004dcc:	341a      	adds	r4, #26
 8004dce:	42b5      	cmp	r5, r6
 8004dd0:	d11a      	bne.n	8004e08 <_printf_common+0xc8>
 8004dd2:	2000      	movs	r0, #0
 8004dd4:	e008      	b.n	8004de8 <_printf_common+0xa8>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	4652      	mov	r2, sl
 8004dda:	4641      	mov	r1, r8
 8004ddc:	4638      	mov	r0, r7
 8004dde:	47c8      	blx	r9
 8004de0:	3001      	adds	r0, #1
 8004de2:	d103      	bne.n	8004dec <_printf_common+0xac>
 8004de4:	f04f 30ff 	mov.w	r0, #4294967295
 8004de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dec:	3501      	adds	r5, #1
 8004dee:	e7c6      	b.n	8004d7e <_printf_common+0x3e>
 8004df0:	18e1      	adds	r1, r4, r3
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	2030      	movs	r0, #48	@ 0x30
 8004df6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004dfa:	4422      	add	r2, r4
 8004dfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e04:	3302      	adds	r3, #2
 8004e06:	e7c7      	b.n	8004d98 <_printf_common+0x58>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	4622      	mov	r2, r4
 8004e0c:	4641      	mov	r1, r8
 8004e0e:	4638      	mov	r0, r7
 8004e10:	47c8      	blx	r9
 8004e12:	3001      	adds	r0, #1
 8004e14:	d0e6      	beq.n	8004de4 <_printf_common+0xa4>
 8004e16:	3601      	adds	r6, #1
 8004e18:	e7d9      	b.n	8004dce <_printf_common+0x8e>
	...

08004e1c <_printf_i>:
 8004e1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e20:	7e0f      	ldrb	r7, [r1, #24]
 8004e22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e24:	2f78      	cmp	r7, #120	@ 0x78
 8004e26:	4691      	mov	r9, r2
 8004e28:	4680      	mov	r8, r0
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	469a      	mov	sl, r3
 8004e2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e32:	d807      	bhi.n	8004e44 <_printf_i+0x28>
 8004e34:	2f62      	cmp	r7, #98	@ 0x62
 8004e36:	d80a      	bhi.n	8004e4e <_printf_i+0x32>
 8004e38:	2f00      	cmp	r7, #0
 8004e3a:	f000 80d2 	beq.w	8004fe2 <_printf_i+0x1c6>
 8004e3e:	2f58      	cmp	r7, #88	@ 0x58
 8004e40:	f000 80b9 	beq.w	8004fb6 <_printf_i+0x19a>
 8004e44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e4c:	e03a      	b.n	8004ec4 <_printf_i+0xa8>
 8004e4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e52:	2b15      	cmp	r3, #21
 8004e54:	d8f6      	bhi.n	8004e44 <_printf_i+0x28>
 8004e56:	a101      	add	r1, pc, #4	@ (adr r1, 8004e5c <_printf_i+0x40>)
 8004e58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e5c:	08004eb5 	.word	0x08004eb5
 8004e60:	08004ec9 	.word	0x08004ec9
 8004e64:	08004e45 	.word	0x08004e45
 8004e68:	08004e45 	.word	0x08004e45
 8004e6c:	08004e45 	.word	0x08004e45
 8004e70:	08004e45 	.word	0x08004e45
 8004e74:	08004ec9 	.word	0x08004ec9
 8004e78:	08004e45 	.word	0x08004e45
 8004e7c:	08004e45 	.word	0x08004e45
 8004e80:	08004e45 	.word	0x08004e45
 8004e84:	08004e45 	.word	0x08004e45
 8004e88:	08004fc9 	.word	0x08004fc9
 8004e8c:	08004ef3 	.word	0x08004ef3
 8004e90:	08004f83 	.word	0x08004f83
 8004e94:	08004e45 	.word	0x08004e45
 8004e98:	08004e45 	.word	0x08004e45
 8004e9c:	08004feb 	.word	0x08004feb
 8004ea0:	08004e45 	.word	0x08004e45
 8004ea4:	08004ef3 	.word	0x08004ef3
 8004ea8:	08004e45 	.word	0x08004e45
 8004eac:	08004e45 	.word	0x08004e45
 8004eb0:	08004f8b 	.word	0x08004f8b
 8004eb4:	6833      	ldr	r3, [r6, #0]
 8004eb6:	1d1a      	adds	r2, r3, #4
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6032      	str	r2, [r6, #0]
 8004ebc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ec0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e09d      	b.n	8005004 <_printf_i+0x1e8>
 8004ec8:	6833      	ldr	r3, [r6, #0]
 8004eca:	6820      	ldr	r0, [r4, #0]
 8004ecc:	1d19      	adds	r1, r3, #4
 8004ece:	6031      	str	r1, [r6, #0]
 8004ed0:	0606      	lsls	r6, r0, #24
 8004ed2:	d501      	bpl.n	8004ed8 <_printf_i+0xbc>
 8004ed4:	681d      	ldr	r5, [r3, #0]
 8004ed6:	e003      	b.n	8004ee0 <_printf_i+0xc4>
 8004ed8:	0645      	lsls	r5, r0, #25
 8004eda:	d5fb      	bpl.n	8004ed4 <_printf_i+0xb8>
 8004edc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ee0:	2d00      	cmp	r5, #0
 8004ee2:	da03      	bge.n	8004eec <_printf_i+0xd0>
 8004ee4:	232d      	movs	r3, #45	@ 0x2d
 8004ee6:	426d      	negs	r5, r5
 8004ee8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004eec:	4859      	ldr	r0, [pc, #356]	@ (8005054 <_printf_i+0x238>)
 8004eee:	230a      	movs	r3, #10
 8004ef0:	e011      	b.n	8004f16 <_printf_i+0xfa>
 8004ef2:	6821      	ldr	r1, [r4, #0]
 8004ef4:	6833      	ldr	r3, [r6, #0]
 8004ef6:	0608      	lsls	r0, r1, #24
 8004ef8:	f853 5b04 	ldr.w	r5, [r3], #4
 8004efc:	d402      	bmi.n	8004f04 <_printf_i+0xe8>
 8004efe:	0649      	lsls	r1, r1, #25
 8004f00:	bf48      	it	mi
 8004f02:	b2ad      	uxthmi	r5, r5
 8004f04:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f06:	4853      	ldr	r0, [pc, #332]	@ (8005054 <_printf_i+0x238>)
 8004f08:	6033      	str	r3, [r6, #0]
 8004f0a:	bf14      	ite	ne
 8004f0c:	230a      	movne	r3, #10
 8004f0e:	2308      	moveq	r3, #8
 8004f10:	2100      	movs	r1, #0
 8004f12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f16:	6866      	ldr	r6, [r4, #4]
 8004f18:	60a6      	str	r6, [r4, #8]
 8004f1a:	2e00      	cmp	r6, #0
 8004f1c:	bfa2      	ittt	ge
 8004f1e:	6821      	ldrge	r1, [r4, #0]
 8004f20:	f021 0104 	bicge.w	r1, r1, #4
 8004f24:	6021      	strge	r1, [r4, #0]
 8004f26:	b90d      	cbnz	r5, 8004f2c <_printf_i+0x110>
 8004f28:	2e00      	cmp	r6, #0
 8004f2a:	d04b      	beq.n	8004fc4 <_printf_i+0x1a8>
 8004f2c:	4616      	mov	r6, r2
 8004f2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f32:	fb03 5711 	mls	r7, r3, r1, r5
 8004f36:	5dc7      	ldrb	r7, [r0, r7]
 8004f38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f3c:	462f      	mov	r7, r5
 8004f3e:	42bb      	cmp	r3, r7
 8004f40:	460d      	mov	r5, r1
 8004f42:	d9f4      	bls.n	8004f2e <_printf_i+0x112>
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d10b      	bne.n	8004f60 <_printf_i+0x144>
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	07df      	lsls	r7, r3, #31
 8004f4c:	d508      	bpl.n	8004f60 <_printf_i+0x144>
 8004f4e:	6923      	ldr	r3, [r4, #16]
 8004f50:	6861      	ldr	r1, [r4, #4]
 8004f52:	4299      	cmp	r1, r3
 8004f54:	bfde      	ittt	le
 8004f56:	2330      	movle	r3, #48	@ 0x30
 8004f58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f60:	1b92      	subs	r2, r2, r6
 8004f62:	6122      	str	r2, [r4, #16]
 8004f64:	f8cd a000 	str.w	sl, [sp]
 8004f68:	464b      	mov	r3, r9
 8004f6a:	aa03      	add	r2, sp, #12
 8004f6c:	4621      	mov	r1, r4
 8004f6e:	4640      	mov	r0, r8
 8004f70:	f7ff fee6 	bl	8004d40 <_printf_common>
 8004f74:	3001      	adds	r0, #1
 8004f76:	d14a      	bne.n	800500e <_printf_i+0x1f2>
 8004f78:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7c:	b004      	add	sp, #16
 8004f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	f043 0320 	orr.w	r3, r3, #32
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	4833      	ldr	r0, [pc, #204]	@ (8005058 <_printf_i+0x23c>)
 8004f8c:	2778      	movs	r7, #120	@ 0x78
 8004f8e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	6831      	ldr	r1, [r6, #0]
 8004f96:	061f      	lsls	r7, r3, #24
 8004f98:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f9c:	d402      	bmi.n	8004fa4 <_printf_i+0x188>
 8004f9e:	065f      	lsls	r7, r3, #25
 8004fa0:	bf48      	it	mi
 8004fa2:	b2ad      	uxthmi	r5, r5
 8004fa4:	6031      	str	r1, [r6, #0]
 8004fa6:	07d9      	lsls	r1, r3, #31
 8004fa8:	bf44      	itt	mi
 8004faa:	f043 0320 	orrmi.w	r3, r3, #32
 8004fae:	6023      	strmi	r3, [r4, #0]
 8004fb0:	b11d      	cbz	r5, 8004fba <_printf_i+0x19e>
 8004fb2:	2310      	movs	r3, #16
 8004fb4:	e7ac      	b.n	8004f10 <_printf_i+0xf4>
 8004fb6:	4827      	ldr	r0, [pc, #156]	@ (8005054 <_printf_i+0x238>)
 8004fb8:	e7e9      	b.n	8004f8e <_printf_i+0x172>
 8004fba:	6823      	ldr	r3, [r4, #0]
 8004fbc:	f023 0320 	bic.w	r3, r3, #32
 8004fc0:	6023      	str	r3, [r4, #0]
 8004fc2:	e7f6      	b.n	8004fb2 <_printf_i+0x196>
 8004fc4:	4616      	mov	r6, r2
 8004fc6:	e7bd      	b.n	8004f44 <_printf_i+0x128>
 8004fc8:	6833      	ldr	r3, [r6, #0]
 8004fca:	6825      	ldr	r5, [r4, #0]
 8004fcc:	6961      	ldr	r1, [r4, #20]
 8004fce:	1d18      	adds	r0, r3, #4
 8004fd0:	6030      	str	r0, [r6, #0]
 8004fd2:	062e      	lsls	r6, r5, #24
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	d501      	bpl.n	8004fdc <_printf_i+0x1c0>
 8004fd8:	6019      	str	r1, [r3, #0]
 8004fda:	e002      	b.n	8004fe2 <_printf_i+0x1c6>
 8004fdc:	0668      	lsls	r0, r5, #25
 8004fde:	d5fb      	bpl.n	8004fd8 <_printf_i+0x1bc>
 8004fe0:	8019      	strh	r1, [r3, #0]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	6123      	str	r3, [r4, #16]
 8004fe6:	4616      	mov	r6, r2
 8004fe8:	e7bc      	b.n	8004f64 <_printf_i+0x148>
 8004fea:	6833      	ldr	r3, [r6, #0]
 8004fec:	1d1a      	adds	r2, r3, #4
 8004fee:	6032      	str	r2, [r6, #0]
 8004ff0:	681e      	ldr	r6, [r3, #0]
 8004ff2:	6862      	ldr	r2, [r4, #4]
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	f7fb f8ea 	bl	80001d0 <memchr>
 8004ffc:	b108      	cbz	r0, 8005002 <_printf_i+0x1e6>
 8004ffe:	1b80      	subs	r0, r0, r6
 8005000:	6060      	str	r0, [r4, #4]
 8005002:	6863      	ldr	r3, [r4, #4]
 8005004:	6123      	str	r3, [r4, #16]
 8005006:	2300      	movs	r3, #0
 8005008:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800500c:	e7aa      	b.n	8004f64 <_printf_i+0x148>
 800500e:	6923      	ldr	r3, [r4, #16]
 8005010:	4632      	mov	r2, r6
 8005012:	4649      	mov	r1, r9
 8005014:	4640      	mov	r0, r8
 8005016:	47d0      	blx	sl
 8005018:	3001      	adds	r0, #1
 800501a:	d0ad      	beq.n	8004f78 <_printf_i+0x15c>
 800501c:	6823      	ldr	r3, [r4, #0]
 800501e:	079b      	lsls	r3, r3, #30
 8005020:	d413      	bmi.n	800504a <_printf_i+0x22e>
 8005022:	68e0      	ldr	r0, [r4, #12]
 8005024:	9b03      	ldr	r3, [sp, #12]
 8005026:	4298      	cmp	r0, r3
 8005028:	bfb8      	it	lt
 800502a:	4618      	movlt	r0, r3
 800502c:	e7a6      	b.n	8004f7c <_printf_i+0x160>
 800502e:	2301      	movs	r3, #1
 8005030:	4632      	mov	r2, r6
 8005032:	4649      	mov	r1, r9
 8005034:	4640      	mov	r0, r8
 8005036:	47d0      	blx	sl
 8005038:	3001      	adds	r0, #1
 800503a:	d09d      	beq.n	8004f78 <_printf_i+0x15c>
 800503c:	3501      	adds	r5, #1
 800503e:	68e3      	ldr	r3, [r4, #12]
 8005040:	9903      	ldr	r1, [sp, #12]
 8005042:	1a5b      	subs	r3, r3, r1
 8005044:	42ab      	cmp	r3, r5
 8005046:	dcf2      	bgt.n	800502e <_printf_i+0x212>
 8005048:	e7eb      	b.n	8005022 <_printf_i+0x206>
 800504a:	2500      	movs	r5, #0
 800504c:	f104 0619 	add.w	r6, r4, #25
 8005050:	e7f5      	b.n	800503e <_printf_i+0x222>
 8005052:	bf00      	nop
 8005054:	080051b9 	.word	0x080051b9
 8005058:	080051ca 	.word	0x080051ca

0800505c <memmove>:
 800505c:	4288      	cmp	r0, r1
 800505e:	b510      	push	{r4, lr}
 8005060:	eb01 0402 	add.w	r4, r1, r2
 8005064:	d902      	bls.n	800506c <memmove+0x10>
 8005066:	4284      	cmp	r4, r0
 8005068:	4623      	mov	r3, r4
 800506a:	d807      	bhi.n	800507c <memmove+0x20>
 800506c:	1e43      	subs	r3, r0, #1
 800506e:	42a1      	cmp	r1, r4
 8005070:	d008      	beq.n	8005084 <memmove+0x28>
 8005072:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005076:	f803 2f01 	strb.w	r2, [r3, #1]!
 800507a:	e7f8      	b.n	800506e <memmove+0x12>
 800507c:	4402      	add	r2, r0
 800507e:	4601      	mov	r1, r0
 8005080:	428a      	cmp	r2, r1
 8005082:	d100      	bne.n	8005086 <memmove+0x2a>
 8005084:	bd10      	pop	{r4, pc}
 8005086:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800508a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800508e:	e7f7      	b.n	8005080 <memmove+0x24>

08005090 <_sbrk_r>:
 8005090:	b538      	push	{r3, r4, r5, lr}
 8005092:	4d06      	ldr	r5, [pc, #24]	@ (80050ac <_sbrk_r+0x1c>)
 8005094:	2300      	movs	r3, #0
 8005096:	4604      	mov	r4, r0
 8005098:	4608      	mov	r0, r1
 800509a:	602b      	str	r3, [r5, #0]
 800509c:	f7fb fdbc 	bl	8000c18 <_sbrk>
 80050a0:	1c43      	adds	r3, r0, #1
 80050a2:	d102      	bne.n	80050aa <_sbrk_r+0x1a>
 80050a4:	682b      	ldr	r3, [r5, #0]
 80050a6:	b103      	cbz	r3, 80050aa <_sbrk_r+0x1a>
 80050a8:	6023      	str	r3, [r4, #0]
 80050aa:	bd38      	pop	{r3, r4, r5, pc}
 80050ac:	20000338 	.word	0x20000338

080050b0 <memcpy>:
 80050b0:	440a      	add	r2, r1
 80050b2:	4291      	cmp	r1, r2
 80050b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80050b8:	d100      	bne.n	80050bc <memcpy+0xc>
 80050ba:	4770      	bx	lr
 80050bc:	b510      	push	{r4, lr}
 80050be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050c6:	4291      	cmp	r1, r2
 80050c8:	d1f9      	bne.n	80050be <memcpy+0xe>
 80050ca:	bd10      	pop	{r4, pc}

080050cc <_realloc_r>:
 80050cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050d0:	4680      	mov	r8, r0
 80050d2:	4615      	mov	r5, r2
 80050d4:	460c      	mov	r4, r1
 80050d6:	b921      	cbnz	r1, 80050e2 <_realloc_r+0x16>
 80050d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050dc:	4611      	mov	r1, r2
 80050de:	f7ff bc4b 	b.w	8004978 <_malloc_r>
 80050e2:	b92a      	cbnz	r2, 80050f0 <_realloc_r+0x24>
 80050e4:	f7ff fbdc 	bl	80048a0 <_free_r>
 80050e8:	2400      	movs	r4, #0
 80050ea:	4620      	mov	r0, r4
 80050ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050f0:	f000 f81a 	bl	8005128 <_malloc_usable_size_r>
 80050f4:	4285      	cmp	r5, r0
 80050f6:	4606      	mov	r6, r0
 80050f8:	d802      	bhi.n	8005100 <_realloc_r+0x34>
 80050fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80050fe:	d8f4      	bhi.n	80050ea <_realloc_r+0x1e>
 8005100:	4629      	mov	r1, r5
 8005102:	4640      	mov	r0, r8
 8005104:	f7ff fc38 	bl	8004978 <_malloc_r>
 8005108:	4607      	mov	r7, r0
 800510a:	2800      	cmp	r0, #0
 800510c:	d0ec      	beq.n	80050e8 <_realloc_r+0x1c>
 800510e:	42b5      	cmp	r5, r6
 8005110:	462a      	mov	r2, r5
 8005112:	4621      	mov	r1, r4
 8005114:	bf28      	it	cs
 8005116:	4632      	movcs	r2, r6
 8005118:	f7ff ffca 	bl	80050b0 <memcpy>
 800511c:	4621      	mov	r1, r4
 800511e:	4640      	mov	r0, r8
 8005120:	f7ff fbbe 	bl	80048a0 <_free_r>
 8005124:	463c      	mov	r4, r7
 8005126:	e7e0      	b.n	80050ea <_realloc_r+0x1e>

08005128 <_malloc_usable_size_r>:
 8005128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800512c:	1f18      	subs	r0, r3, #4
 800512e:	2b00      	cmp	r3, #0
 8005130:	bfbc      	itt	lt
 8005132:	580b      	ldrlt	r3, [r1, r0]
 8005134:	18c0      	addlt	r0, r0, r3
 8005136:	4770      	bx	lr

08005138 <_init>:
 8005138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513a:	bf00      	nop
 800513c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800513e:	bc08      	pop	{r3}
 8005140:	469e      	mov	lr, r3
 8005142:	4770      	bx	lr

08005144 <_fini>:
 8005144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005146:	bf00      	nop
 8005148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800514a:	bc08      	pop	{r3}
 800514c:	469e      	mov	lr, r3
 800514e:	4770      	bx	lr
