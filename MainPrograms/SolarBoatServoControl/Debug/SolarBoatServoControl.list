
SolarBoatServoControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047f0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800497c  0800497c  0001497c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049c4  080049c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080049c4  080049c4  000149c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049cc  080049cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049cc  080049cc  000149cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049d0  080049d0  000149d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080049d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  080049e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  080049e0  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014217  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002370  00000000  00000000  00034253  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001040  00000000  00000000  000365c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f38  00000000  00000000  00037608  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020b87  00000000  00000000  00038540  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e3e9  00000000  00000000  000590c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c82f0  00000000  00000000  000674b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012f7a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004390  00000000  00000000  0012f81c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004964 	.word	0x08004964

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08004964 	.word	0x08004964

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004d2:	4b34      	ldr	r3, [pc, #208]	; (80005a4 <MX_CAN1_Init+0xd8>)
 80004d4:	4a34      	ldr	r2, [pc, #208]	; (80005a8 <MX_CAN1_Init+0xdc>)
 80004d6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 80004d8:	4b32      	ldr	r3, [pc, #200]	; (80005a4 <MX_CAN1_Init+0xd8>)
 80004da:	2208      	movs	r2, #8
 80004dc:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004de:	4b31      	ldr	r3, [pc, #196]	; (80005a4 <MX_CAN1_Init+0xd8>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004e4:	4b2f      	ldr	r3, [pc, #188]	; (80005a4 <MX_CAN1_Init+0xd8>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80004ea:	4b2e      	ldr	r3, [pc, #184]	; (80005a4 <MX_CAN1_Init+0xd8>)
 80004ec:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80004f0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 80004f2:	4b2c      	ldr	r3, [pc, #176]	; (80005a4 <MX_CAN1_Init+0xd8>)
 80004f4:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 80004f8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80004fa:	4b2a      	ldr	r3, [pc, #168]	; (80005a4 <MX_CAN1_Init+0xd8>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000500:	4b28      	ldr	r3, [pc, #160]	; (80005a4 <MX_CAN1_Init+0xd8>)
 8000502:	2200      	movs	r2, #0
 8000504:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000506:	4b27      	ldr	r3, [pc, #156]	; (80005a4 <MX_CAN1_Init+0xd8>)
 8000508:	2200      	movs	r2, #0
 800050a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800050c:	4b25      	ldr	r3, [pc, #148]	; (80005a4 <MX_CAN1_Init+0xd8>)
 800050e:	2200      	movs	r2, #0
 8000510:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000512:	4b24      	ldr	r3, [pc, #144]	; (80005a4 <MX_CAN1_Init+0xd8>)
 8000514:	2200      	movs	r2, #0
 8000516:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000518:	4b22      	ldr	r3, [pc, #136]	; (80005a4 <MX_CAN1_Init+0xd8>)
 800051a:	2200      	movs	r2, #0
 800051c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800051e:	4821      	ldr	r0, [pc, #132]	; (80005a4 <MX_CAN1_Init+0xd8>)
 8000520:	f000 fc68 	bl	8000df4 <HAL_CAN_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800052a:	f000 f9b9 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800052e:	2200      	movs	r2, #0
 8000530:	2100      	movs	r1, #0
 8000532:	2014      	movs	r0, #20
 8000534:	f001 faa3 	bl	8001a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000538:	2014      	movs	r0, #20
 800053a:	f001 fabc 	bl	8001ab6 <HAL_NVIC_EnableIRQ>

    CAN_FilterTypeDef sFilterConfig;

    sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800053e:	2300      	movs	r3, #0
 8000540:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterIdHigh = 0x360<<5;
 8000542:	f44f 43d8 	mov.w	r3, #27648	; 0x6c00
 8000546:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x360<<5;
 8000548:	f44f 43d8 	mov.w	r3, #27648	; 0x6c00
 800054c:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = 0xff<<5;
 800054e:	f44f 53ff 	mov.w	r3, #8160	; 0x1fe0
 8000552:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0xff<<5;
 8000554:	f44f 53ff 	mov.w	r3, #8160	; 0x1fe0
 8000558:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800055a:	2301      	movs	r3, #1
 800055c:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterActivation = ENABLE;
 800055e:	2301      	movs	r3, #1
 8000560:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterBank = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000566:	2300      	movs	r3, #0
 8000568:	61bb      	str	r3, [r7, #24]
    sFilterConfig.SlaveStartFilterBank = 14;
 800056a:	230e      	movs	r3, #14
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 800056e:	463b      	mov	r3, r7
 8000570:	4619      	mov	r1, r3
 8000572:	480c      	ldr	r0, [pc, #48]	; (80005a4 <MX_CAN1_Init+0xd8>)
 8000574:	f000 fd39 	bl	8000fea <HAL_CAN_ConfigFilter>


  	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000578:	480a      	ldr	r0, [pc, #40]	; (80005a4 <MX_CAN1_Init+0xd8>)
 800057a:	f000 fe00 	bl	800117e <HAL_CAN_Start>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_CAN1_Init+0xbc>
  		Error_Handler();
 8000584:	f000 f98c 	bl	80008a0 <Error_Handler>
  	}

  	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000588:	2102      	movs	r1, #2
 800058a:	4806      	ldr	r0, [pc, #24]	; (80005a4 <MX_CAN1_Init+0xd8>)
 800058c:	f000 ff4d 	bl	800142a <HAL_CAN_ActivateNotification>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_CAN1_Init+0xce>
  	{
  		Error_Handler();
 8000596:	f000 f983 	bl	80008a0 <Error_Handler>
  	}

  /* USER CODE END CAN1_Init 2 */

}
 800059a:	bf00      	nop
 800059c:	3728      	adds	r7, #40	; 0x28
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000028 	.word	0x20000028
 80005a8:	40006400 	.word	0x40006400

080005ac <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a1c      	ldr	r2, [pc, #112]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d131      	bne.n	8000632 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005ce:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <HAL_CAN_MspInit+0x94>)
 80005d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d2:	4a1b      	ldr	r2, [pc, #108]	; (8000640 <HAL_CAN_MspInit+0x94>)
 80005d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005d8:	6593      	str	r3, [r2, #88]	; 0x58
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <HAL_CAN_MspInit+0x94>)
 80005dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <HAL_CAN_MspInit+0x94>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	4a15      	ldr	r2, [pc, #84]	; (8000640 <HAL_CAN_MspInit+0x94>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <HAL_CAN_MspInit+0x94>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000604:	2302      	movs	r3, #2
 8000606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060c:	2303      	movs	r3, #3
 800060e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000610:	2309      	movs	r3, #9
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	4619      	mov	r1, r3
 800061a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061e:	f001 fa65 	bl	8001aec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000622:	2200      	movs	r2, #0
 8000624:	2100      	movs	r1, #0
 8000626:	2014      	movs	r0, #20
 8000628:	f001 fa29 	bl	8001a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800062c:	2014      	movs	r0, #20
 800062e:	f001 fa42 	bl	8001ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000632:	bf00      	nop
 8000634:	3728      	adds	r7, #40	; 0x28
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40006400 	.word	0x40006400
 8000640:	40021000 	.word	0x40021000

08000644 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <MX_GPIO_Init+0x8c>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	4a1c      	ldr	r2, [pc, #112]	; (80006d0 <MX_GPIO_Init+0x8c>)
 8000660:	f043 0304 	orr.w	r3, r3, #4
 8000664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000666:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <MX_GPIO_Init+0x8c>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	f003 0304 	and.w	r3, r3, #4
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <MX_GPIO_Init+0x8c>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	4a16      	ldr	r2, [pc, #88]	; (80006d0 <MX_GPIO_Init+0x8c>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067e:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_GPIO_Init+0x8c>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_GPIO_Init+0x8c>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a10      	ldr	r2, [pc, #64]	; (80006d0 <MX_GPIO_Init+0x8c>)
 8000690:	f043 0302 	orr.w	r3, r3, #2
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_GPIO_Init+0x8c>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0302 	and.w	r3, r3, #2
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2108      	movs	r1, #8
 80006a6:	480b      	ldr	r0, [pc, #44]	; (80006d4 <MX_GPIO_Init+0x90>)
 80006a8:	f001 fb8a 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80006ac:	2308      	movs	r3, #8
 80006ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b0:	2301      	movs	r3, #1
 80006b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	4619      	mov	r1, r3
 80006c2:	4804      	ldr	r0, [pc, #16]	; (80006d4 <MX_GPIO_Init+0x90>)
 80006c4:	f001 fa12 	bl	8001aec <HAL_GPIO_Init>

}
 80006c8:	bf00      	nop
 80006ca:	3720      	adds	r7, #32
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40021000 	.word	0x40021000
 80006d4:	48000400 	.word	0x48000400

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
 CH1_DC = 1450;
 80006dc:	4b26      	ldr	r3, [pc, #152]	; (8000778 <main+0xa0>)
 80006de:	f240 52aa 	movw	r2, #1450	; 0x5aa
 80006e2:	601a      	str	r2, [r3, #0]

 // laagst is 1300
 // hoogst is 1850 8.3
 angleFoil[0] = 1300; //-1
 80006e4:	4b25      	ldr	r3, [pc, #148]	; (800077c <main+0xa4>)
 80006e6:	f240 5214 	movw	r2, #1300	; 0x514
 80006ea:	801a      	strh	r2, [r3, #0]
 angleFoil[1] = 1325; //-0.5
 80006ec:	4b23      	ldr	r3, [pc, #140]	; (800077c <main+0xa4>)
 80006ee:	f240 522d 	movw	r2, #1325	; 0x52d
 80006f2:	805a      	strh	r2, [r3, #2]
 angleFoil[2] = 1350; //0
 80006f4:	4b21      	ldr	r3, [pc, #132]	; (800077c <main+0xa4>)
 80006f6:	f240 5246 	movw	r2, #1350	; 0x546
 80006fa:	809a      	strh	r2, [r3, #4]
 angleFoil[3] = 1375; //0.5
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <main+0xa4>)
 80006fe:	f240 525f 	movw	r2, #1375	; 0x55f
 8000702:	80da      	strh	r2, [r3, #6]
 angleFoil[4] = 1420; //1
 8000704:	4b1d      	ldr	r3, [pc, #116]	; (800077c <main+0xa4>)
 8000706:	f240 528c 	movw	r2, #1420	; 0x58c
 800070a:	811a      	strh	r2, [r3, #8]
 angleFoil[5] = 1450; //1.5
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <main+0xa4>)
 800070e:	f240 52aa 	movw	r2, #1450	; 0x5aa
 8000712:	815a      	strh	r2, [r3, #10]
 angleFoil[6] = 1475; //2
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <main+0xa4>)
 8000716:	f240 52c3 	movw	r2, #1475	; 0x5c3
 800071a:	819a      	strh	r2, [r3, #12]
 angleFoil[7] = 1500; //2.5
 800071c:	4b17      	ldr	r3, [pc, #92]	; (800077c <main+0xa4>)
 800071e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000722:	81da      	strh	r2, [r3, #14]
 angleFoil[8] = 1550; //3
 8000724:	4b15      	ldr	r3, [pc, #84]	; (800077c <main+0xa4>)
 8000726:	f240 620e 	movw	r2, #1550	; 0x60e
 800072a:	821a      	strh	r2, [r3, #16]
 angleFoil[9] = 1600; //3.5
 800072c:	4b13      	ldr	r3, [pc, #76]	; (800077c <main+0xa4>)
 800072e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000732:	825a      	strh	r2, [r3, #18]
 angleFoil[10] = 1650; //4
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <main+0xa4>)
 8000736:	f240 6272 	movw	r2, #1650	; 0x672
 800073a:	829a      	strh	r2, [r3, #20]
 angleFoil[11] = 1700; //4.5
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <main+0xa4>)
 800073e:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8000742:	82da      	strh	r2, [r3, #22]
 angleFoil[12] = 1750; //5
 8000744:	4b0d      	ldr	r3, [pc, #52]	; (800077c <main+0xa4>)
 8000746:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800074a:	831a      	strh	r2, [r3, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074c:	f000 fadd 	bl	8000d0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000750:	f000 f81a 	bl	8000788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000754:	f7ff ff76 	bl	8000644 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000758:	f000 fa14 	bl	8000b84 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 800075c:	f7ff feb6 	bl	80004cc <MX_CAN1_Init>
  MX_TIM1_Init();
 8000760:	f000 f90c 	bl	800097c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000764:	2100      	movs	r1, #0
 8000766:	4806      	ldr	r0, [pc, #24]	; (8000780 <main+0xa8>)
 8000768:	f002 fd94 	bl	8003294 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		  TIM1->CCR1 = CH1_DC * 2;
 800076c:	4b02      	ldr	r3, [pc, #8]	; (8000778 <main+0xa0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	005a      	lsls	r2, r3, #1
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <main+0xac>)
 8000774:	635a      	str	r2, [r3, #52]	; 0x34
 8000776:	e7f9      	b.n	800076c <main+0x94>
 8000778:	20000054 	.word	0x20000054
 800077c:	20000058 	.word	0x20000058
 8000780:	20000098 	.word	0x20000098
 8000784:	40012c00 	.word	0x40012c00

08000788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b096      	sub	sp, #88	; 0x58
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	2244      	movs	r2, #68	; 0x44
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f004 f8dc 	bl	8004954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	463b      	mov	r3, r7
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007ae:	f001 fb3d 	bl	8001e2c <HAL_PWREx_ControlVoltageScaling>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007b8:	f000 f872 	bl	80008a0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007bc:	f001 fb18 	bl	8001df0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007c0:	4b21      	ldr	r3, [pc, #132]	; (8000848 <SystemClock_Config+0xc0>)
 80007c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007c6:	4a20      	ldr	r2, [pc, #128]	; (8000848 <SystemClock_Config+0xc0>)
 80007c8:	f023 0318 	bic.w	r3, r3, #24
 80007cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80007d0:	2314      	movs	r3, #20
 80007d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007d4:	2301      	movs	r3, #1
 80007d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007d8:	2301      	movs	r3, #1
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007e0:	2360      	movs	r3, #96	; 0x60
 80007e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e4:	2302      	movs	r3, #2
 80007e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007e8:	2301      	movs	r3, #1
 80007ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007ec:	2301      	movs	r3, #1
 80007ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80007f0:	2310      	movs	r3, #16
 80007f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007f4:	2307      	movs	r3, #7
 80007f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4618      	mov	r0, r3
 8000806:	f001 fb67 	bl	8001ed8 <HAL_RCC_OscConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000810:	f000 f846 	bl	80008a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000814:	230f      	movs	r3, #15
 8000816:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000818:	2303      	movs	r3, #3
 800081a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000828:	463b      	mov	r3, r7
 800082a:	2101      	movs	r1, #1
 800082c:	4618      	mov	r0, r3
 800082e:	f001 ff65 	bl	80026fc <HAL_RCC_ClockConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000838:	f000 f832 	bl	80008a0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800083c:	f002 fb72 	bl	8002f24 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000840:	bf00      	nop
 8000842:	3758      	adds	r7, #88	; 0x58
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40021000 	.word	0x40021000

0800084c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000854:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000856:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000858:	2100      	movs	r1, #0
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f000 fcd3 	bl	8001206 <HAL_CAN_GetRxMessage>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 8000866:	f000 f81b 	bl	80008a0 <Error_Handler>
  }

  if ((RxHeader.StdId == 0x360))
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
 8000872:	d108      	bne.n	8000886 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
  {
	  CH1_DC = angleFoil[RxData[1]];
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000876:	785b      	ldrb	r3, [r3, #1]
 8000878:	461a      	mov	r2, r3
 800087a:	4b07      	ldr	r3, [pc, #28]	; (8000898 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800087c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000880:	461a      	mov	r2, r3
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000884:	601a      	str	r2, [r3, #0]
  }
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000074 	.word	0x20000074
 8000894:	2000007c 	.word	0x2000007c
 8000898:	20000058 	.word	0x20000058
 800089c:	20000054 	.word	0x20000054

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <Error_Handler+0x6>

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <HAL_MspInit+0x44>)
 80008b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b2:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <HAL_MspInit+0x44>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6613      	str	r3, [r2, #96]	; 0x60
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <HAL_MspInit+0x44>)
 80008bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <HAL_MspInit+0x44>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ca:	4a08      	ldr	r2, [pc, #32]	; (80008ec <HAL_MspInit+0x44>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d0:	6593      	str	r3, [r2, #88]	; 0x58
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <HAL_MspInit+0x44>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <NMI_Handler+0x4>

080008f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <MemManage_Handler+0x4>

08000902 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <UsageFault_Handler+0x4>

0800090e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093c:	f000 fa3a 	bl	8000db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}

08000944 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000948:	4802      	ldr	r0, [pc, #8]	; (8000954 <CAN1_RX0_IRQHandler+0x10>)
 800094a:	f000 fd94 	bl	8001476 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000028 	.word	0x20000028

08000958 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <SystemInit+0x20>)
 800095e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000962:	4a05      	ldr	r2, [pc, #20]	; (8000978 <SystemInit+0x20>)
 8000964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b09a      	sub	sp, #104	; 0x68
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000982:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000990:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800099c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
 80009ac:	615a      	str	r2, [r3, #20]
 80009ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	222c      	movs	r2, #44	; 0x2c
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f003 ffcc 	bl	8004954 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009bc:	4b43      	ldr	r3, [pc, #268]	; (8000acc <MX_TIM1_Init+0x150>)
 80009be:	4a44      	ldr	r2, [pc, #272]	; (8000ad0 <MX_TIM1_Init+0x154>)
 80009c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80009c2:	4b42      	ldr	r3, [pc, #264]	; (8000acc <MX_TIM1_Init+0x150>)
 80009c4:	220f      	movs	r2, #15
 80009c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c8:	4b40      	ldr	r3, [pc, #256]	; (8000acc <MX_TIM1_Init+0x150>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40000-1;
 80009ce:	4b3f      	ldr	r3, [pc, #252]	; (8000acc <MX_TIM1_Init+0x150>)
 80009d0:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80009d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d6:	4b3d      	ldr	r3, [pc, #244]	; (8000acc <MX_TIM1_Init+0x150>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009dc:	4b3b      	ldr	r3, [pc, #236]	; (8000acc <MX_TIM1_Init+0x150>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e2:	4b3a      	ldr	r3, [pc, #232]	; (8000acc <MX_TIM1_Init+0x150>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009e8:	4838      	ldr	r0, [pc, #224]	; (8000acc <MX_TIM1_Init+0x150>)
 80009ea:	f002 fb9b 	bl	8003124 <HAL_TIM_Base_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80009f4:	f7ff ff54 	bl	80008a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a02:	4619      	mov	r1, r3
 8000a04:	4831      	ldr	r0, [pc, #196]	; (8000acc <MX_TIM1_Init+0x150>)
 8000a06:	f002 fe37 	bl	8003678 <HAL_TIM_ConfigClockSource>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a10:	f7ff ff46 	bl	80008a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a14:	482d      	ldr	r0, [pc, #180]	; (8000acc <MX_TIM1_Init+0x150>)
 8000a16:	f002 fbdc 	bl	80031d2 <HAL_TIM_PWM_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a20:	f7ff ff3e 	bl	80008a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a24:	2300      	movs	r3, #0
 8000a26:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a34:	4619      	mov	r1, r3
 8000a36:	4825      	ldr	r0, [pc, #148]	; (8000acc <MX_TIM1_Init+0x150>)
 8000a38:	f003 fa7e 	bl	8003f38 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000a42:	f7ff ff2d 	bl	80008a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a46:	2360      	movs	r3, #96	; 0x60
 8000a48:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a52:	2300      	movs	r3, #0
 8000a54:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a66:	2200      	movs	r2, #0
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4818      	ldr	r0, [pc, #96]	; (8000acc <MX_TIM1_Init+0x150>)
 8000a6c:	f002 fcf0 	bl	8003450 <HAL_TIM_PWM_ConfigChannel>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000a76:	f7ff ff13 	bl	80008a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a92:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	4619      	mov	r1, r3
 8000aae:	4807      	ldr	r0, [pc, #28]	; (8000acc <MX_TIM1_Init+0x150>)
 8000ab0:	f003 faa8 	bl	8004004 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000aba:	f7ff fef1 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000abe:	4803      	ldr	r0, [pc, #12]	; (8000acc <MX_TIM1_Init+0x150>)
 8000ac0:	f000 f828 	bl	8000b14 <HAL_TIM_MspPostInit>

}
 8000ac4:	bf00      	nop
 8000ac6:	3768      	adds	r7, #104	; 0x68
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000098 	.word	0x20000098
 8000ad0:	40012c00 	.word	0x40012c00

08000ad4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <HAL_TIM_Base_MspInit+0x38>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d10b      	bne.n	8000afe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <HAL_TIM_Base_MspInit+0x3c>)
 8000ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aea:	4a09      	ldr	r2, [pc, #36]	; (8000b10 <HAL_TIM_Base_MspInit+0x3c>)
 8000aec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000af0:	6613      	str	r3, [r2, #96]	; 0x60
 8000af2:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <HAL_TIM_Base_MspInit+0x3c>)
 8000af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000afe:	bf00      	nop
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40012c00 	.word	0x40012c00
 8000b10:	40021000 	.word	0x40021000

08000b14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b088      	sub	sp, #32
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <HAL_TIM_MspPostInit+0x68>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d11d      	bne.n	8000b72 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_TIM_MspPostInit+0x6c>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	4a11      	ldr	r2, [pc, #68]	; (8000b80 <HAL_TIM_MspPostInit+0x6c>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <HAL_TIM_MspPostInit+0x6c>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b52:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b60:	2301      	movs	r3, #1
 8000b62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 030c 	add.w	r3, r7, #12
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6e:	f000 ffbd 	bl	8001aec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b72:	bf00      	nop
 8000b74:	3720      	adds	r7, #32
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40012c00 	.word	0x40012c00
 8000b80:	40021000 	.word	0x40021000

08000b84 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000b8a:	4a15      	ldr	r2, [pc, #84]	; (8000be0 <MX_USART2_UART_Init+0x5c>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b8e:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000baa:	220c      	movs	r2, #12
 8000bac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bc8:	f003 fa94 	bl	80040f4 <HAL_UART_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bd2:	f7ff fe65 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200000e4 	.word	0x200000e4
 8000be0:	40004400 	.word	0x40004400

08000be4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b09e      	sub	sp, #120	; 0x78
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	2254      	movs	r2, #84	; 0x54
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f003 fea5 	bl	8004954 <memset>
  if(uartHandle->Instance==USART2)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a28      	ldr	r2, [pc, #160]	; (8000cb0 <HAL_UART_MspInit+0xcc>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d148      	bne.n	8000ca6 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c14:	2302      	movs	r3, #2
 8000c16:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 ff8d 	bl	8002b40 <HAL_RCCEx_PeriphCLKConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c2c:	f7ff fe38 	bl	80008a0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c30:	4b20      	ldr	r3, [pc, #128]	; (8000cb4 <HAL_UART_MspInit+0xd0>)
 8000c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c34:	4a1f      	ldr	r2, [pc, #124]	; (8000cb4 <HAL_UART_MspInit+0xd0>)
 8000c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <HAL_UART_MspInit+0xd0>)
 8000c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c48:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <HAL_UART_MspInit+0xd0>)
 8000c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4c:	4a19      	ldr	r2, [pc, #100]	; (8000cb4 <HAL_UART_MspInit+0xd0>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <HAL_UART_MspInit+0xd0>)
 8000c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000c60:	2304      	movs	r3, #4
 8000c62:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c70:	2307      	movs	r3, #7
 8000c72:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7e:	f000 ff35 	bl	8001aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c86:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000c94:	2303      	movs	r3, #3
 8000c96:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca2:	f000 ff23 	bl	8001aec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	3778      	adds	r7, #120	; 0x78
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40004400 	.word	0x40004400
 8000cb4:	40021000 	.word	0x40021000

08000cb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cbc:	f7ff fe4c 	bl	8000958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc0:	480c      	ldr	r0, [pc, #48]	; (8000cf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cc2:	490d      	ldr	r1, [pc, #52]	; (8000cf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <LoopForever+0xe>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc8:	e002      	b.n	8000cd0 <LoopCopyDataInit>

08000cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cce:	3304      	adds	r3, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd4:	d3f9      	bcc.n	8000cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd8:	4c0a      	ldr	r4, [pc, #40]	; (8000d04 <LoopForever+0x16>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cdc:	e001      	b.n	8000ce2 <LoopFillZerobss>

08000cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce0:	3204      	adds	r2, #4

08000ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce4:	d3fb      	bcc.n	8000cde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce6:	f003 fe11 	bl	800490c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cea:	f7ff fcf5 	bl	80006d8 <main>

08000cee <LoopForever>:

LoopForever:
    b LoopForever
 8000cee:	e7fe      	b.n	8000cee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cf0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cfc:	080049d4 	.word	0x080049d4
  ldr r2, =_sbss
 8000d00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d04:	2000016c 	.word	0x2000016c

08000d08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC1_IRQHandler>

08000d0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d10:	2300      	movs	r3, #0
 8000d12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d14:	2003      	movs	r0, #3
 8000d16:	f000 fea7 	bl	8001a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f000 f80e 	bl	8000d3c <HAL_InitTick>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d002      	beq.n	8000d2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	71fb      	strb	r3, [r7, #7]
 8000d2a:	e001      	b.n	8000d30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d2c:	f7ff fdbc 	bl	80008a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d30:	79fb      	ldrb	r3, [r7, #7]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d44:	2300      	movs	r3, #0
 8000d46:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d48:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <HAL_InitTick+0x6c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d023      	beq.n	8000d98 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d50:	4b16      	ldr	r3, [pc, #88]	; (8000dac <HAL_InitTick+0x70>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <HAL_InitTick+0x6c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 feb3 	bl	8001ad2 <HAL_SYSTICK_Config>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d10f      	bne.n	8000d92 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2b0f      	cmp	r3, #15
 8000d76:	d809      	bhi.n	8000d8c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d80:	f000 fe7d 	bl	8001a7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d84:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <HAL_InitTick+0x74>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6013      	str	r3, [r2, #0]
 8000d8a:	e007      	b.n	8000d9c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	73fb      	strb	r3, [r7, #15]
 8000d90:	e004      	b.n	8000d9c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	73fb      	strb	r3, [r7, #15]
 8000d96:	e001      	b.n	8000d9c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000008 	.word	0x20000008
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000004 	.word	0x20000004

08000db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_IncTick+0x20>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x24>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <HAL_IncTick+0x24>)
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	20000168 	.word	0x20000168

08000ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return uwTick;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <HAL_GetTick+0x14>)
 8000de2:	681b      	ldr	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000168 	.word	0x20000168

08000df4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d101      	bne.n	8000e06 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e0ed      	b.n	8000fe2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d102      	bne.n	8000e18 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff fbca 	bl	80005ac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f042 0201 	orr.w	r2, r2, #1
 8000e26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e28:	f7ff ffd8 	bl	8000ddc <HAL_GetTick>
 8000e2c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e2e:	e012      	b.n	8000e56 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e30:	f7ff ffd4 	bl	8000ddc <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b0a      	cmp	r3, #10
 8000e3c:	d90b      	bls.n	8000e56 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e42:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2205      	movs	r2, #5
 8000e4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e0c5      	b.n	8000fe2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d0e5      	beq.n	8000e30 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f022 0202 	bic.w	r2, r2, #2
 8000e72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e74:	f7ff ffb2 	bl	8000ddc <HAL_GetTick>
 8000e78:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e7a:	e012      	b.n	8000ea2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e7c:	f7ff ffae 	bl	8000ddc <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b0a      	cmp	r3, #10
 8000e88:	d90b      	bls.n	8000ea2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2205      	movs	r2, #5
 8000e9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e09f      	b.n	8000fe2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0302 	and.w	r3, r3, #2
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1e5      	bne.n	8000e7c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	7e1b      	ldrb	r3, [r3, #24]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d108      	bne.n	8000eca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	e007      	b.n	8000eda <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ed8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	7e5b      	ldrb	r3, [r3, #25]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d108      	bne.n	8000ef4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	e007      	b.n	8000f04 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7e9b      	ldrb	r3, [r3, #26]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d108      	bne.n	8000f1e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f042 0220 	orr.w	r2, r2, #32
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	e007      	b.n	8000f2e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f022 0220 	bic.w	r2, r2, #32
 8000f2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	7edb      	ldrb	r3, [r3, #27]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d108      	bne.n	8000f48 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f022 0210 	bic.w	r2, r2, #16
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	e007      	b.n	8000f58 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f042 0210 	orr.w	r2, r2, #16
 8000f56:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	7f1b      	ldrb	r3, [r3, #28]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d108      	bne.n	8000f72 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f042 0208 	orr.w	r2, r2, #8
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	e007      	b.n	8000f82 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 0208 	bic.w	r2, r2, #8
 8000f80:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	7f5b      	ldrb	r3, [r3, #29]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d108      	bne.n	8000f9c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f042 0204 	orr.w	r2, r2, #4
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	e007      	b.n	8000fac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f022 0204 	bic.w	r2, r2, #4
 8000faa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	ea42 0103 	orr.w	r1, r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	1e5a      	subs	r2, r3, #1
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b087      	sub	sp, #28
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
 8000ff2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001000:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001002:	7cfb      	ldrb	r3, [r7, #19]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d003      	beq.n	8001010 <HAL_CAN_ConfigFilter+0x26>
 8001008:	7cfb      	ldrb	r3, [r7, #19]
 800100a:	2b02      	cmp	r3, #2
 800100c:	f040 80aa 	bne.w	8001164 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001016:	f043 0201 	orr.w	r2, r3, #1
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	f003 031f 	and.w	r3, r3, #31
 8001028:	2201      	movs	r2, #1
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43db      	mvns	r3, r3
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d123      	bne.n	8001092 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	43db      	mvns	r3, r3
 8001054:	401a      	ands	r2, r3
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800106c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	3248      	adds	r2, #72	; 0x48
 8001072:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001086:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001088:	6979      	ldr	r1, [r7, #20]
 800108a:	3348      	adds	r3, #72	; 0x48
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	440b      	add	r3, r1
 8001090:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d122      	bne.n	80010e0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	431a      	orrs	r2, r3
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010ba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	3248      	adds	r2, #72	; 0x48
 80010c0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010d4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010d6:	6979      	ldr	r1, [r7, #20]
 80010d8:	3348      	adds	r3, #72	; 0x48
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	440b      	add	r3, r1
 80010de:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d109      	bne.n	80010fc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	401a      	ands	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80010fa:	e007      	b.n	800110c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	431a      	orrs	r2, r3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d109      	bne.n	8001128 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	43db      	mvns	r3, r3
 800111e:	401a      	ands	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001126:	e007      	b.n	8001138 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	431a      	orrs	r2, r3
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	6a1b      	ldr	r3, [r3, #32]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d107      	bne.n	8001150 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	431a      	orrs	r2, r3
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001156:	f023 0201 	bic.w	r2, r3, #1
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	e006      	b.n	8001172 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001168:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
  }
}
 8001172:	4618      	mov	r0, r3
 8001174:	371c      	adds	r7, #28
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b084      	sub	sp, #16
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f893 3020 	ldrb.w	r3, [r3, #32]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b01      	cmp	r3, #1
 8001190:	d12e      	bne.n	80011f0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2202      	movs	r2, #2
 8001196:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 0201 	bic.w	r2, r2, #1
 80011a8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80011aa:	f7ff fe17 	bl	8000ddc <HAL_GetTick>
 80011ae:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011b0:	e012      	b.n	80011d8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011b2:	f7ff fe13 	bl	8000ddc <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b0a      	cmp	r3, #10
 80011be:	d90b      	bls.n	80011d8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2205      	movs	r2, #5
 80011d0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e012      	b.n	80011fe <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1e5      	bne.n	80011b2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80011ec:	2300      	movs	r3, #0
 80011ee:	e006      	b.n	80011fe <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
  }
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001206:	b480      	push	{r7}
 8001208:	b087      	sub	sp, #28
 800120a:	af00      	add	r7, sp, #0
 800120c:	60f8      	str	r0, [r7, #12]
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f893 3020 	ldrb.w	r3, [r3, #32]
 800121a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800121c:	7dfb      	ldrb	r3, [r7, #23]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d003      	beq.n	800122a <HAL_CAN_GetRxMessage+0x24>
 8001222:	7dfb      	ldrb	r3, [r7, #23]
 8001224:	2b02      	cmp	r3, #2
 8001226:	f040 80f3 	bne.w	8001410 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d10e      	bne.n	800124e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d116      	bne.n	800126c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e0e7      	b.n	800141e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	2b00      	cmp	r3, #0
 800125a:	d107      	bne.n	800126c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e0d8      	b.n	800141e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	331b      	adds	r3, #27
 8001274:	011b      	lsls	r3, r3, #4
 8001276:	4413      	add	r3, r2
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0204 	and.w	r2, r3, #4
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10c      	bne.n	80012a4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	331b      	adds	r3, #27
 8001292:	011b      	lsls	r3, r3, #4
 8001294:	4413      	add	r3, r2
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	0d5b      	lsrs	r3, r3, #21
 800129a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	e00b      	b.n	80012bc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	331b      	adds	r3, #27
 80012ac:	011b      	lsls	r3, r3, #4
 80012ae:	4413      	add	r3, r2
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	08db      	lsrs	r3, r3, #3
 80012b4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	331b      	adds	r3, #27
 80012c4:	011b      	lsls	r3, r3, #4
 80012c6:	4413      	add	r3, r2
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0202 	and.w	r2, r3, #2
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	331b      	adds	r3, #27
 80012da:	011b      	lsls	r3, r3, #4
 80012dc:	4413      	add	r3, r2
 80012de:	3304      	adds	r3, #4
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 020f 	and.w	r2, r3, #15
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	331b      	adds	r3, #27
 80012f2:	011b      	lsls	r3, r3, #4
 80012f4:	4413      	add	r3, r2
 80012f6:	3304      	adds	r3, #4
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	0a1b      	lsrs	r3, r3, #8
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	331b      	adds	r3, #27
 800130a:	011b      	lsls	r3, r3, #4
 800130c:	4413      	add	r3, r2
 800130e:	3304      	adds	r3, #4
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	0c1b      	lsrs	r3, r3, #16
 8001314:	b29a      	uxth	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	011b      	lsls	r3, r3, #4
 8001322:	4413      	add	r3, r2
 8001324:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	4413      	add	r3, r2
 800133a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	0a1a      	lsrs	r2, r3, #8
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	011b      	lsls	r3, r3, #4
 8001352:	4413      	add	r3, r2
 8001354:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	0c1a      	lsrs	r2, r3, #16
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	3302      	adds	r3, #2
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	011b      	lsls	r3, r3, #4
 800136c:	4413      	add	r3, r2
 800136e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	0e1a      	lsrs	r2, r3, #24
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	3303      	adds	r3, #3
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	011b      	lsls	r3, r3, #4
 8001386:	4413      	add	r3, r2
 8001388:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	3304      	adds	r3, #4
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	4413      	add	r3, r2
 80013a0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	0a1a      	lsrs	r2, r3, #8
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	3305      	adds	r3, #5
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	4413      	add	r3, r2
 80013ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	0c1a      	lsrs	r2, r3, #16
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	3306      	adds	r3, #6
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	011b      	lsls	r3, r3, #4
 80013d2:	4413      	add	r3, r2
 80013d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	0e1a      	lsrs	r2, r3, #24
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	3307      	adds	r3, #7
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d108      	bne.n	80013fc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f042 0220 	orr.w	r2, r2, #32
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	e007      	b.n	800140c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	691a      	ldr	r2, [r3, #16]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f042 0220 	orr.w	r2, r2, #32
 800140a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800140c:	2300      	movs	r3, #0
 800140e:	e006      	b.n	800141e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001414:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
  }
}
 800141e:	4618      	mov	r0, r3
 8001420:	371c      	adds	r7, #28
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800142a:	b480      	push	{r7}
 800142c:	b085      	sub	sp, #20
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 3020 	ldrb.w	r3, [r3, #32]
 800143a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d002      	beq.n	8001448 <HAL_CAN_ActivateNotification+0x1e>
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	2b02      	cmp	r3, #2
 8001446:	d109      	bne.n	800145c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6959      	ldr	r1, [r3, #20]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	e006      	b.n	800146a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001460:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
  }
}
 800146a:	4618      	mov	r0, r3
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b08a      	sub	sp, #40	; 0x28
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d07c      	beq.n	80015b6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d023      	beq.n	800150e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2201      	movs	r2, #1
 80014cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 f97d 	bl	80017d8 <HAL_CAN_TxMailbox0CompleteCallback>
 80014de:	e016      	b.n	800150e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d004      	beq.n	80014f4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
 80014f2:	e00c      	b.n	800150e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d004      	beq.n	8001508 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
 8001506:	e002      	b.n	800150e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 f983 	bl	8001814 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001514:	2b00      	cmp	r3, #0
 8001516:	d024      	beq.n	8001562 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001520:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 f95d 	bl	80017ec <HAL_CAN_TxMailbox1CompleteCallback>
 8001532:	e016      	b.n	8001562 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153a:	2b00      	cmp	r3, #0
 800153c:	d004      	beq.n	8001548 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
 8001546:	e00c      	b.n	8001562 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800154e:	2b00      	cmp	r3, #0
 8001550:	d004      	beq.n	800155c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
 800155a:	e002      	b.n	8001562 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 f963 	bl	8001828 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d024      	beq.n	80015b6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001574:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 f93d 	bl	8001800 <HAL_CAN_TxMailbox2CompleteCallback>
 8001586:	e016      	b.n	80015b6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d004      	beq.n	800159c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
 800159a:	e00c      	b.n	80015b6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d004      	beq.n	80015b0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
 80015ae:	e002      	b.n	80015b6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 f943 	bl	800183c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80015b6:	6a3b      	ldr	r3, [r7, #32]
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00c      	beq.n	80015da <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	f003 0310 	and.w	r3, r3, #16
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d007      	beq.n	80015da <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2210      	movs	r2, #16
 80015d8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00b      	beq.n	80015fc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d006      	beq.n	80015fc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2208      	movs	r2, #8
 80015f4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 f92a 	bl	8001850 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d009      	beq.n	800161a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	2b00      	cmp	r3, #0
 8001612:	d002      	beq.n	800161a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff f919 	bl	800084c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800161a:	6a3b      	ldr	r3, [r7, #32]
 800161c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00c      	beq.n	800163e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	f003 0310 	and.w	r3, r3, #16
 800162a:	2b00      	cmp	r3, #0
 800162c:	d007      	beq.n	800163e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001634:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2210      	movs	r2, #16
 800163c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800163e:	6a3b      	ldr	r3, [r7, #32]
 8001640:	f003 0320 	and.w	r3, r3, #32
 8001644:	2b00      	cmp	r3, #0
 8001646:	d00b      	beq.n	8001660 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	2b00      	cmp	r3, #0
 8001650:	d006      	beq.n	8001660 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2208      	movs	r2, #8
 8001658:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 f90c 	bl	8001878 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	f003 0310 	and.w	r3, r3, #16
 8001666:	2b00      	cmp	r3, #0
 8001668:	d009      	beq.n	800167e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	2b00      	cmp	r3, #0
 8001676:	d002      	beq.n	800167e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 f8f3 	bl	8001864 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800167e:	6a3b      	ldr	r3, [r7, #32]
 8001680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d00b      	beq.n	80016a0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	2b00      	cmp	r3, #0
 8001690:	d006      	beq.n	80016a0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2210      	movs	r2, #16
 8001698:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f8f6 	bl	800188c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80016a0:	6a3b      	ldr	r3, [r7, #32]
 80016a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00b      	beq.n	80016c2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d006      	beq.n	80016c2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2208      	movs	r2, #8
 80016ba:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 f8ef 	bl	80018a0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80016c2:	6a3b      	ldr	r3, [r7, #32]
 80016c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d075      	beq.n	80017b8 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d06c      	beq.n	80017b0 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016f2:	6a3b      	ldr	r3, [r7, #32]
 80016f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d008      	beq.n	800170e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800170e:	6a3b      	ldr	r3, [r7, #32]
 8001710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001714:	2b00      	cmp	r3, #0
 8001716:	d008      	beq.n	800172a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800172a:	6a3b      	ldr	r3, [r7, #32]
 800172c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001730:	2b00      	cmp	r3, #0
 8001732:	d03d      	beq.n	80017b0 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800173a:	2b00      	cmp	r3, #0
 800173c:	d038      	beq.n	80017b0 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001744:	2b30      	cmp	r3, #48	; 0x30
 8001746:	d017      	beq.n	8001778 <HAL_CAN_IRQHandler+0x302>
 8001748:	2b30      	cmp	r3, #48	; 0x30
 800174a:	d804      	bhi.n	8001756 <HAL_CAN_IRQHandler+0x2e0>
 800174c:	2b10      	cmp	r3, #16
 800174e:	d009      	beq.n	8001764 <HAL_CAN_IRQHandler+0x2ee>
 8001750:	2b20      	cmp	r3, #32
 8001752:	d00c      	beq.n	800176e <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001754:	e024      	b.n	80017a0 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001756:	2b50      	cmp	r3, #80	; 0x50
 8001758:	d018      	beq.n	800178c <HAL_CAN_IRQHandler+0x316>
 800175a:	2b60      	cmp	r3, #96	; 0x60
 800175c:	d01b      	beq.n	8001796 <HAL_CAN_IRQHandler+0x320>
 800175e:	2b40      	cmp	r3, #64	; 0x40
 8001760:	d00f      	beq.n	8001782 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001762:	e01d      	b.n	80017a0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	f043 0308 	orr.w	r3, r3, #8
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800176c:	e018      	b.n	80017a0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	f043 0310 	orr.w	r3, r3, #16
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001776:	e013      	b.n	80017a0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	f043 0320 	orr.w	r3, r3, #32
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001780:	e00e      	b.n	80017a0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800178a:	e009      	b.n	80017a0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001794:	e004      	b.n	80017a0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800179e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	699a      	ldr	r2, [r3, #24]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017ae:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2204      	movs	r2, #4
 80017b6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d008      	beq.n	80017d0 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	431a      	orrs	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 f872 	bl	80018b4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80017d0:	bf00      	nop
 80017d2:	3728      	adds	r7, #40	; 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e4:	4013      	ands	r3, r2
 80018e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fa:	4a04      	ldr	r2, [pc, #16]	; (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	60d3      	str	r3, [r2, #12]
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <__NVIC_GetPriorityGrouping+0x18>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	f003 0307 	and.w	r3, r3, #7
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	2b00      	cmp	r3, #0
 800193c:	db0b      	blt.n	8001956 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	f003 021f 	and.w	r2, r3, #31
 8001944:	4907      	ldr	r1, [pc, #28]	; (8001964 <__NVIC_EnableIRQ+0x38>)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	095b      	lsrs	r3, r3, #5
 800194c:	2001      	movs	r0, #1
 800194e:	fa00 f202 	lsl.w	r2, r0, r2
 8001952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000e100 	.word	0xe000e100

08001968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	2b00      	cmp	r3, #0
 800197a:	db0a      	blt.n	8001992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	b2da      	uxtb	r2, r3
 8001980:	490c      	ldr	r1, [pc, #48]	; (80019b4 <__NVIC_SetPriority+0x4c>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	0112      	lsls	r2, r2, #4
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	440b      	add	r3, r1
 800198c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001990:	e00a      	b.n	80019a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4908      	ldr	r1, [pc, #32]	; (80019b8 <__NVIC_SetPriority+0x50>)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	3b04      	subs	r3, #4
 80019a0:	0112      	lsls	r2, r2, #4
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	440b      	add	r3, r1
 80019a6:	761a      	strb	r2, [r3, #24]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000e100 	.word	0xe000e100
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	; 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f1c3 0307 	rsb	r3, r3, #7
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	bf28      	it	cs
 80019da:	2304      	movcs	r3, #4
 80019dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3304      	adds	r3, #4
 80019e2:	2b06      	cmp	r3, #6
 80019e4:	d902      	bls.n	80019ec <NVIC_EncodePriority+0x30>
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3b03      	subs	r3, #3
 80019ea:	e000      	b.n	80019ee <NVIC_EncodePriority+0x32>
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	f04f 32ff 	mov.w	r2, #4294967295
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43da      	mvns	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	401a      	ands	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	43d9      	mvns	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	4313      	orrs	r3, r2
         );
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3724      	adds	r7, #36	; 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a34:	d301      	bcc.n	8001a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00f      	b.n	8001a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <SysTick_Config+0x40>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a42:	210f      	movs	r1, #15
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295
 8001a48:	f7ff ff8e 	bl	8001968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <SysTick_Config+0x40>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a52:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <SysTick_Config+0x40>)
 8001a54:	2207      	movs	r2, #7
 8001a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	e000e010 	.word	0xe000e010

08001a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ff29 	bl	80018c8 <__NVIC_SetPriorityGrouping>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a90:	f7ff ff3e 	bl	8001910 <__NVIC_GetPriorityGrouping>
 8001a94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	6978      	ldr	r0, [r7, #20]
 8001a9c:	f7ff ff8e 	bl	80019bc <NVIC_EncodePriority>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff5d 	bl	8001968 <__NVIC_SetPriority>
}
 8001aae:	bf00      	nop
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff31 	bl	800192c <__NVIC_EnableIRQ>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ffa2 	bl	8001a24 <SysTick_Config>
 8001ae0:	4603      	mov	r3, r0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afa:	e148      	b.n	8001d8e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	2101      	movs	r1, #1
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	fa01 f303 	lsl.w	r3, r1, r3
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 813a 	beq.w	8001d88 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d005      	beq.n	8001b2c <HAL_GPIO_Init+0x40>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 0303 	and.w	r3, r3, #3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d130      	bne.n	8001b8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	2203      	movs	r2, #3
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b62:	2201      	movs	r2, #1
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	091b      	lsrs	r3, r3, #4
 8001b78:	f003 0201 	and.w	r2, r3, #1
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d017      	beq.n	8001bca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d123      	bne.n	8001c1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	08da      	lsrs	r2, r3, #3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3208      	adds	r2, #8
 8001bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	220f      	movs	r2, #15
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	691a      	ldr	r2, [r3, #16]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	08da      	lsrs	r2, r3, #3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3208      	adds	r2, #8
 8001c18:	6939      	ldr	r1, [r7, #16]
 8001c1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	2203      	movs	r2, #3
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4013      	ands	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 0203 	and.w	r2, r3, #3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 8094 	beq.w	8001d88 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c60:	4b52      	ldr	r3, [pc, #328]	; (8001dac <HAL_GPIO_Init+0x2c0>)
 8001c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c64:	4a51      	ldr	r2, [pc, #324]	; (8001dac <HAL_GPIO_Init+0x2c0>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6613      	str	r3, [r2, #96]	; 0x60
 8001c6c:	4b4f      	ldr	r3, [pc, #316]	; (8001dac <HAL_GPIO_Init+0x2c0>)
 8001c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c78:	4a4d      	ldr	r2, [pc, #308]	; (8001db0 <HAL_GPIO_Init+0x2c4>)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	089b      	lsrs	r3, r3, #2
 8001c7e:	3302      	adds	r3, #2
 8001c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	220f      	movs	r2, #15
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ca2:	d00d      	beq.n	8001cc0 <HAL_GPIO_Init+0x1d4>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a43      	ldr	r2, [pc, #268]	; (8001db4 <HAL_GPIO_Init+0x2c8>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d007      	beq.n	8001cbc <HAL_GPIO_Init+0x1d0>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a42      	ldr	r2, [pc, #264]	; (8001db8 <HAL_GPIO_Init+0x2cc>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d101      	bne.n	8001cb8 <HAL_GPIO_Init+0x1cc>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e004      	b.n	8001cc2 <HAL_GPIO_Init+0x1d6>
 8001cb8:	2307      	movs	r3, #7
 8001cba:	e002      	b.n	8001cc2 <HAL_GPIO_Init+0x1d6>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <HAL_GPIO_Init+0x1d6>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	f002 0203 	and.w	r2, r2, #3
 8001cc8:	0092      	lsls	r2, r2, #2
 8001cca:	4093      	lsls	r3, r2
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cd2:	4937      	ldr	r1, [pc, #220]	; (8001db0 <HAL_GPIO_Init+0x2c4>)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	089b      	lsrs	r3, r3, #2
 8001cd8:	3302      	adds	r3, #2
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ce0:	4b36      	ldr	r3, [pc, #216]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4013      	ands	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d04:	4a2d      	ldr	r2, [pc, #180]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d0a:	4b2c      	ldr	r3, [pc, #176]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d2e:	4a23      	ldr	r2, [pc, #140]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d34:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4013      	ands	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d58:	4a18      	ldr	r2, [pc, #96]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d5e:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	43db      	mvns	r3, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d82:	4a0e      	ldr	r2, [pc, #56]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	fa22 f303 	lsr.w	r3, r2, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f47f aeaf 	bne.w	8001afc <HAL_GPIO_Init+0x10>
  }
}
 8001d9e:	bf00      	nop
 8001da0:	371c      	adds	r7, #28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40010000 	.word	0x40010000
 8001db4:	48000400 	.word	0x48000400
 8001db8:	48000800 	.word	0x48000800
 8001dbc:	40010400 	.word	0x40010400

08001dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	807b      	strh	r3, [r7, #2]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd0:	787b      	ldrb	r3, [r7, #1]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dd6:	887a      	ldrh	r2, [r7, #2]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ddc:	e002      	b.n	8001de4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dde:	887a      	ldrh	r2, [r7, #2]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfe:	6013      	str	r3, [r2, #0]
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40007000 	.word	0x40007000

08001e10 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40007000 	.word	0x40007000

08001e2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e3a:	d130      	bne.n	8001e9e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e3c:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e48:	d038      	beq.n	8001ebc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e4a:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e52:	4a1e      	ldr	r2, [pc, #120]	; (8001ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e58:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2232      	movs	r2, #50	; 0x32
 8001e60:	fb02 f303 	mul.w	r3, r2, r3
 8001e64:	4a1b      	ldr	r2, [pc, #108]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e66:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6a:	0c9b      	lsrs	r3, r3, #18
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e70:	e002      	b.n	8001e78 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	3b01      	subs	r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e78:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e84:	d102      	bne.n	8001e8c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f2      	bne.n	8001e72 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e98:	d110      	bne.n	8001ebc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e00f      	b.n	8001ebe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eaa:	d007      	beq.n	8001ebc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001eac:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001eb4:	4a05      	ldr	r2, [pc, #20]	; (8001ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40007000 	.word	0x40007000
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	431bde83 	.word	0x431bde83

08001ed8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e3fe      	b.n	80026e8 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eea:	4ba1      	ldr	r3, [pc, #644]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 030c 	and.w	r3, r3, #12
 8001ef2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ef4:	4b9e      	ldr	r3, [pc, #632]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0310 	and.w	r3, r3, #16
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 80e4 	beq.w	80020d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d007      	beq.n	8001f22 <HAL_RCC_OscConfig+0x4a>
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	2b0c      	cmp	r3, #12
 8001f16:	f040 808b 	bne.w	8002030 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	f040 8087 	bne.w	8002030 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f22:	4b93      	ldr	r3, [pc, #588]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d005      	beq.n	8001f3a <HAL_RCC_OscConfig+0x62>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e3d6      	b.n	80026e8 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1a      	ldr	r2, [r3, #32]
 8001f3e:	4b8c      	ldr	r3, [pc, #560]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d004      	beq.n	8001f54 <HAL_RCC_OscConfig+0x7c>
 8001f4a:	4b89      	ldr	r3, [pc, #548]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f52:	e005      	b.n	8001f60 <HAL_RCC_OscConfig+0x88>
 8001f54:	4b86      	ldr	r3, [pc, #536]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8001f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f5a:	091b      	lsrs	r3, r3, #4
 8001f5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d223      	bcs.n	8001fac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f000 fd89 	bl	8002a80 <RCC_SetFlashLatencyFromMSIRange>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e3b7      	b.n	80026e8 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f78:	4b7d      	ldr	r3, [pc, #500]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a7c      	ldr	r2, [pc, #496]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8001f7e:	f043 0308 	orr.w	r3, r3, #8
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	4b7a      	ldr	r3, [pc, #488]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	4977      	ldr	r1, [pc, #476]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f96:	4b76      	ldr	r3, [pc, #472]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	021b      	lsls	r3, r3, #8
 8001fa4:	4972      	ldr	r1, [pc, #456]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	604b      	str	r3, [r1, #4]
 8001faa:	e025      	b.n	8001ff8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fac:	4b70      	ldr	r3, [pc, #448]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a6f      	ldr	r2, [pc, #444]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8001fb2:	f043 0308 	orr.w	r3, r3, #8
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	4b6d      	ldr	r3, [pc, #436]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	496a      	ldr	r1, [pc, #424]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fca:	4b69      	ldr	r3, [pc, #420]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	4965      	ldr	r1, [pc, #404]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d109      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 fd49 	bl	8002a80 <RCC_SetFlashLatencyFromMSIRange>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e377      	b.n	80026e8 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ff8:	f000 fc80 	bl	80028fc <HAL_RCC_GetSysClockFreq>
 8001ffc:	4601      	mov	r1, r0
 8001ffe:	4b5c      	ldr	r3, [pc, #368]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	091b      	lsrs	r3, r3, #4
 8002004:	f003 030f 	and.w	r3, r3, #15
 8002008:	4a5a      	ldr	r2, [pc, #360]	; (8002174 <HAL_RCC_OscConfig+0x29c>)
 800200a:	5cd3      	ldrb	r3, [r2, r3]
 800200c:	f003 031f 	and.w	r3, r3, #31
 8002010:	fa21 f303 	lsr.w	r3, r1, r3
 8002014:	4a58      	ldr	r2, [pc, #352]	; (8002178 <HAL_RCC_OscConfig+0x2a0>)
 8002016:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002018:	4b58      	ldr	r3, [pc, #352]	; (800217c <HAL_RCC_OscConfig+0x2a4>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe fe8d 	bl	8000d3c <HAL_InitTick>
 8002022:	4603      	mov	r3, r0
 8002024:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d052      	beq.n	80020d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	e35b      	b.n	80026e8 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d032      	beq.n	800209e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002038:	4b4d      	ldr	r3, [pc, #308]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a4c      	ldr	r2, [pc, #304]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002044:	f7fe feca 	bl	8000ddc <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800204c:	f7fe fec6 	bl	8000ddc <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e344      	b.n	80026e8 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800205e:	4b44      	ldr	r3, [pc, #272]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800206a:	4b41      	ldr	r3, [pc, #260]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a40      	ldr	r2, [pc, #256]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8002070:	f043 0308 	orr.w	r3, r3, #8
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	4b3e      	ldr	r3, [pc, #248]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	493b      	ldr	r1, [pc, #236]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8002084:	4313      	orrs	r3, r2
 8002086:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002088:	4b39      	ldr	r3, [pc, #228]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	021b      	lsls	r3, r3, #8
 8002096:	4936      	ldr	r1, [pc, #216]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8002098:	4313      	orrs	r3, r2
 800209a:	604b      	str	r3, [r1, #4]
 800209c:	e01a      	b.n	80020d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800209e:	4b34      	ldr	r3, [pc, #208]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a33      	ldr	r2, [pc, #204]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020aa:	f7fe fe97 	bl	8000ddc <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020b2:	f7fe fe93 	bl	8000ddc <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e311      	b.n	80026e8 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020c4:	4b2a      	ldr	r3, [pc, #168]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f0      	bne.n	80020b2 <HAL_RCC_OscConfig+0x1da>
 80020d0:	e000      	b.n	80020d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d074      	beq.n	80021ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d005      	beq.n	80020f2 <HAL_RCC_OscConfig+0x21a>
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	2b0c      	cmp	r3, #12
 80020ea:	d10e      	bne.n	800210a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d10b      	bne.n	800210a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f2:	4b1f      	ldr	r3, [pc, #124]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d064      	beq.n	80021c8 <HAL_RCC_OscConfig+0x2f0>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d160      	bne.n	80021c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e2ee      	b.n	80026e8 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002112:	d106      	bne.n	8002122 <HAL_RCC_OscConfig+0x24a>
 8002114:	4b16      	ldr	r3, [pc, #88]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a15      	ldr	r2, [pc, #84]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 800211a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	e01d      	b.n	800215e <HAL_RCC_OscConfig+0x286>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800212a:	d10c      	bne.n	8002146 <HAL_RCC_OscConfig+0x26e>
 800212c:	4b10      	ldr	r3, [pc, #64]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0f      	ldr	r2, [pc, #60]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8002132:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a0c      	ldr	r2, [pc, #48]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 800213e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	e00b      	b.n	800215e <HAL_RCC_OscConfig+0x286>
 8002146:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a09      	ldr	r2, [pc, #36]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 800214c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	4b07      	ldr	r3, [pc, #28]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a06      	ldr	r2, [pc, #24]	; (8002170 <HAL_RCC_OscConfig+0x298>)
 8002158:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800215c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d01c      	beq.n	80021a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002166:	f7fe fe39 	bl	8000ddc <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800216c:	e011      	b.n	8002192 <HAL_RCC_OscConfig+0x2ba>
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000
 8002174:	0800497c 	.word	0x0800497c
 8002178:	20000000 	.word	0x20000000
 800217c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002180:	f7fe fe2c 	bl	8000ddc <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b64      	cmp	r3, #100	; 0x64
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e2aa      	b.n	80026e8 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002192:	4baf      	ldr	r3, [pc, #700]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f0      	beq.n	8002180 <HAL_RCC_OscConfig+0x2a8>
 800219e:	e014      	b.n	80021ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a0:	f7fe fe1c 	bl	8000ddc <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a8:	f7fe fe18 	bl	8000ddc <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b64      	cmp	r3, #100	; 0x64
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e296      	b.n	80026e8 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ba:	4ba5      	ldr	r3, [pc, #660]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x2d0>
 80021c6:	e000      	b.n	80021ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d060      	beq.n	8002298 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d005      	beq.n	80021e8 <HAL_RCC_OscConfig+0x310>
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	2b0c      	cmp	r3, #12
 80021e0:	d119      	bne.n	8002216 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d116      	bne.n	8002216 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021e8:	4b99      	ldr	r3, [pc, #612]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_RCC_OscConfig+0x328>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e273      	b.n	80026e8 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002200:	4b93      	ldr	r3, [pc, #588]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	061b      	lsls	r3, r3, #24
 800220e:	4990      	ldr	r1, [pc, #576]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002214:	e040      	b.n	8002298 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d023      	beq.n	8002266 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800221e:	4b8c      	ldr	r3, [pc, #560]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a8b      	ldr	r2, [pc, #556]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 8002224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222a:	f7fe fdd7 	bl	8000ddc <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002232:	f7fe fdd3 	bl	8000ddc <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e251      	b.n	80026e8 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002244:	4b82      	ldr	r3, [pc, #520]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002250:	4b7f      	ldr	r3, [pc, #508]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	061b      	lsls	r3, r3, #24
 800225e:	497c      	ldr	r1, [pc, #496]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]
 8002264:	e018      	b.n	8002298 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002266:	4b7a      	ldr	r3, [pc, #488]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a79      	ldr	r2, [pc, #484]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 800226c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002272:	f7fe fdb3 	bl	8000ddc <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800227a:	f7fe fdaf 	bl	8000ddc <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e22d      	b.n	80026e8 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800228c:	4b70      	ldr	r3, [pc, #448]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1f0      	bne.n	800227a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d03c      	beq.n	800231e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d01c      	beq.n	80022e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ac:	4b68      	ldr	r3, [pc, #416]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 80022ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022b2:	4a67      	ldr	r2, [pc, #412]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022bc:	f7fe fd8e 	bl	8000ddc <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c4:	f7fe fd8a 	bl	8000ddc <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e208      	b.n	80026e8 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022d6:	4b5e      	ldr	r3, [pc, #376]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 80022d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0ef      	beq.n	80022c4 <HAL_RCC_OscConfig+0x3ec>
 80022e4:	e01b      	b.n	800231e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022e6:	4b5a      	ldr	r3, [pc, #360]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 80022e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ec:	4a58      	ldr	r2, [pc, #352]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 80022ee:	f023 0301 	bic.w	r3, r3, #1
 80022f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f6:	f7fe fd71 	bl	8000ddc <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022fe:	f7fe fd6d 	bl	8000ddc <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e1eb      	b.n	80026e8 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002310:	4b4f      	ldr	r3, [pc, #316]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 8002312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1ef      	bne.n	80022fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0304 	and.w	r3, r3, #4
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 80a6 	beq.w	8002478 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800232c:	2300      	movs	r3, #0
 800232e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002330:	4b47      	ldr	r3, [pc, #284]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 8002332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10d      	bne.n	8002358 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800233c:	4b44      	ldr	r3, [pc, #272]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 800233e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002340:	4a43      	ldr	r2, [pc, #268]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 8002342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002346:	6593      	str	r3, [r2, #88]	; 0x58
 8002348:	4b41      	ldr	r3, [pc, #260]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 800234a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002354:	2301      	movs	r3, #1
 8002356:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002358:	4b3e      	ldr	r3, [pc, #248]	; (8002454 <HAL_RCC_OscConfig+0x57c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002360:	2b00      	cmp	r3, #0
 8002362:	d118      	bne.n	8002396 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002364:	4b3b      	ldr	r3, [pc, #236]	; (8002454 <HAL_RCC_OscConfig+0x57c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a3a      	ldr	r2, [pc, #232]	; (8002454 <HAL_RCC_OscConfig+0x57c>)
 800236a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002370:	f7fe fd34 	bl	8000ddc <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002378:	f7fe fd30 	bl	8000ddc <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e1ae      	b.n	80026e8 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800238a:	4b32      	ldr	r3, [pc, #200]	; (8002454 <HAL_RCC_OscConfig+0x57c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d108      	bne.n	80023b0 <HAL_RCC_OscConfig+0x4d8>
 800239e:	4b2c      	ldr	r3, [pc, #176]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 80023a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a4:	4a2a      	ldr	r2, [pc, #168]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023ae:	e024      	b.n	80023fa <HAL_RCC_OscConfig+0x522>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	d110      	bne.n	80023da <HAL_RCC_OscConfig+0x502>
 80023b8:	4b25      	ldr	r3, [pc, #148]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 80023ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023be:	4a24      	ldr	r2, [pc, #144]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 80023c0:	f043 0304 	orr.w	r3, r3, #4
 80023c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023c8:	4b21      	ldr	r3, [pc, #132]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 80023ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ce:	4a20      	ldr	r2, [pc, #128]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023d8:	e00f      	b.n	80023fa <HAL_RCC_OscConfig+0x522>
 80023da:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 80023dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e0:	4a1b      	ldr	r2, [pc, #108]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 80023e2:	f023 0301 	bic.w	r3, r3, #1
 80023e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023ea:	4b19      	ldr	r3, [pc, #100]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 80023ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f0:	4a17      	ldr	r2, [pc, #92]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 80023f2:	f023 0304 	bic.w	r3, r3, #4
 80023f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d016      	beq.n	8002430 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002402:	f7fe fceb 	bl	8000ddc <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002408:	e00a      	b.n	8002420 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240a:	f7fe fce7 	bl	8000ddc <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	f241 3288 	movw	r2, #5000	; 0x1388
 8002418:	4293      	cmp	r3, r2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e163      	b.n	80026e8 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 8002422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0ed      	beq.n	800240a <HAL_RCC_OscConfig+0x532>
 800242e:	e01a      	b.n	8002466 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002430:	f7fe fcd4 	bl	8000ddc <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002436:	e00f      	b.n	8002458 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002438:	f7fe fcd0 	bl	8000ddc <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	f241 3288 	movw	r2, #5000	; 0x1388
 8002446:	4293      	cmp	r3, r2
 8002448:	d906      	bls.n	8002458 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e14c      	b.n	80026e8 <HAL_RCC_OscConfig+0x810>
 800244e:	bf00      	nop
 8002450:	40021000 	.word	0x40021000
 8002454:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002458:	4ba5      	ldr	r3, [pc, #660]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 800245a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1e8      	bne.n	8002438 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002466:	7ffb      	ldrb	r3, [r7, #31]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d105      	bne.n	8002478 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800246c:	4ba0      	ldr	r3, [pc, #640]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 800246e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002470:	4a9f      	ldr	r2, [pc, #636]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 8002472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002476:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0320 	and.w	r3, r3, #32
 8002480:	2b00      	cmp	r3, #0
 8002482:	d03c      	beq.n	80024fe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	2b00      	cmp	r3, #0
 800248a:	d01c      	beq.n	80024c6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800248c:	4b98      	ldr	r3, [pc, #608]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 800248e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002492:	4a97      	ldr	r2, [pc, #604]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249c:	f7fe fc9e 	bl	8000ddc <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024a4:	f7fe fc9a 	bl	8000ddc <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e118      	b.n	80026e8 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024b6:	4b8e      	ldr	r3, [pc, #568]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 80024b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0ef      	beq.n	80024a4 <HAL_RCC_OscConfig+0x5cc>
 80024c4:	e01b      	b.n	80024fe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024c6:	4b8a      	ldr	r3, [pc, #552]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 80024c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024cc:	4a88      	ldr	r2, [pc, #544]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 80024ce:	f023 0301 	bic.w	r3, r3, #1
 80024d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d6:	f7fe fc81 	bl	8000ddc <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024de:	f7fe fc7d 	bl	8000ddc <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e0fb      	b.n	80026e8 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024f0:	4b7f      	ldr	r3, [pc, #508]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 80024f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1ef      	bne.n	80024de <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 80ef 	beq.w	80026e6 <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	2b02      	cmp	r3, #2
 800250e:	f040 80c5 	bne.w	800269c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002512:	4b77      	ldr	r3, [pc, #476]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f003 0203 	and.w	r2, r3, #3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002522:	429a      	cmp	r2, r3
 8002524:	d12c      	bne.n	8002580 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	3b01      	subs	r3, #1
 8002532:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002534:	429a      	cmp	r2, r3
 8002536:	d123      	bne.n	8002580 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002542:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002544:	429a      	cmp	r2, r3
 8002546:	d11b      	bne.n	8002580 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002552:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002554:	429a      	cmp	r2, r3
 8002556:	d113      	bne.n	8002580 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002562:	085b      	lsrs	r3, r3, #1
 8002564:	3b01      	subs	r3, #1
 8002566:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002568:	429a      	cmp	r2, r3
 800256a:	d109      	bne.n	8002580 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	085b      	lsrs	r3, r3, #1
 8002578:	3b01      	subs	r3, #1
 800257a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d067      	beq.n	8002650 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	2b0c      	cmp	r3, #12
 8002584:	d062      	beq.n	800264c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002586:	4b5a      	ldr	r3, [pc, #360]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e0a8      	b.n	80026e8 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002596:	4b56      	ldr	r3, [pc, #344]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a55      	ldr	r2, [pc, #340]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 800259c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025a2:	f7fe fc1b 	bl	8000ddc <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025aa:	f7fe fc17 	bl	8000ddc <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e095      	b.n	80026e8 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025bc:	4b4c      	ldr	r3, [pc, #304]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1f0      	bne.n	80025aa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c8:	4b49      	ldr	r3, [pc, #292]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	4b49      	ldr	r3, [pc, #292]	; (80026f4 <HAL_RCC_OscConfig+0x81c>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025d8:	3a01      	subs	r2, #1
 80025da:	0112      	lsls	r2, r2, #4
 80025dc:	4311      	orrs	r1, r2
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025e2:	0212      	lsls	r2, r2, #8
 80025e4:	4311      	orrs	r1, r2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025ea:	0852      	lsrs	r2, r2, #1
 80025ec:	3a01      	subs	r2, #1
 80025ee:	0552      	lsls	r2, r2, #21
 80025f0:	4311      	orrs	r1, r2
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025f6:	0852      	lsrs	r2, r2, #1
 80025f8:	3a01      	subs	r2, #1
 80025fa:	0652      	lsls	r2, r2, #25
 80025fc:	4311      	orrs	r1, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002602:	06d2      	lsls	r2, r2, #27
 8002604:	430a      	orrs	r2, r1
 8002606:	493a      	ldr	r1, [pc, #232]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 8002608:	4313      	orrs	r3, r2
 800260a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800260c:	4b38      	ldr	r3, [pc, #224]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a37      	ldr	r2, [pc, #220]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 8002612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002616:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002618:	4b35      	ldr	r3, [pc, #212]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4a34      	ldr	r2, [pc, #208]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 800261e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002622:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002624:	f7fe fbda 	bl	8000ddc <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262c:	f7fe fbd6 	bl	8000ddc <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e054      	b.n	80026e8 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800263e:	4b2c      	ldr	r3, [pc, #176]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800264a:	e04c      	b.n	80026e6 <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e04b      	b.n	80026e8 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002650:	4b27      	ldr	r3, [pc, #156]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d144      	bne.n	80026e6 <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800265c:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a23      	ldr	r2, [pc, #140]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 8002662:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002666:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002668:	4b21      	ldr	r3, [pc, #132]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4a20      	ldr	r2, [pc, #128]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 800266e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002672:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002674:	f7fe fbb2 	bl	8000ddc <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267c:	f7fe fbae 	bl	8000ddc <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e02c      	b.n	80026e8 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800268e:	4b18      	ldr	r3, [pc, #96]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0f0      	beq.n	800267c <HAL_RCC_OscConfig+0x7a4>
 800269a:	e024      	b.n	80026e6 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	2b0c      	cmp	r3, #12
 80026a0:	d01f      	beq.n	80026e2 <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a2:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a12      	ldr	r2, [pc, #72]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 80026a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ae:	f7fe fb95 	bl	8000ddc <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b6:	f7fe fb91 	bl	8000ddc <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e00f      	b.n	80026e8 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026c8:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1f0      	bne.n	80026b6 <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	4905      	ldr	r1, [pc, #20]	; (80026f0 <HAL_RCC_OscConfig+0x818>)
 80026da:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <HAL_RCC_OscConfig+0x820>)
 80026dc:	4013      	ands	r3, r2
 80026de:	60cb      	str	r3, [r1, #12]
 80026e0:	e001      	b.n	80026e6 <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3720      	adds	r7, #32
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000
 80026f4:	019d808c 	.word	0x019d808c
 80026f8:	feeefffc 	.word	0xfeeefffc

080026fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0e7      	b.n	80028e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002710:	4b75      	ldr	r3, [pc, #468]	; (80028e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d910      	bls.n	8002740 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b72      	ldr	r3, [pc, #456]	; (80028e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 0207 	bic.w	r2, r3, #7
 8002726:	4970      	ldr	r1, [pc, #448]	; (80028e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b6e      	ldr	r3, [pc, #440]	; (80028e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0cf      	b.n	80028e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d010      	beq.n	800276e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	4b66      	ldr	r3, [pc, #408]	; (80028ec <HAL_RCC_ClockConfig+0x1f0>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002758:	429a      	cmp	r2, r3
 800275a:	d908      	bls.n	800276e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800275c:	4b63      	ldr	r3, [pc, #396]	; (80028ec <HAL_RCC_ClockConfig+0x1f0>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4960      	ldr	r1, [pc, #384]	; (80028ec <HAL_RCC_ClockConfig+0x1f0>)
 800276a:	4313      	orrs	r3, r2
 800276c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d04c      	beq.n	8002814 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b03      	cmp	r3, #3
 8002780:	d107      	bne.n	8002792 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002782:	4b5a      	ldr	r3, [pc, #360]	; (80028ec <HAL_RCC_ClockConfig+0x1f0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d121      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e0a6      	b.n	80028e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d107      	bne.n	80027aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800279a:	4b54      	ldr	r3, [pc, #336]	; (80028ec <HAL_RCC_ClockConfig+0x1f0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d115      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e09a      	b.n	80028e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d107      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027b2:	4b4e      	ldr	r3, [pc, #312]	; (80028ec <HAL_RCC_ClockConfig+0x1f0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d109      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e08e      	b.n	80028e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027c2:	4b4a      	ldr	r3, [pc, #296]	; (80028ec <HAL_RCC_ClockConfig+0x1f0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e086      	b.n	80028e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027d2:	4b46      	ldr	r3, [pc, #280]	; (80028ec <HAL_RCC_ClockConfig+0x1f0>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f023 0203 	bic.w	r2, r3, #3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4943      	ldr	r1, [pc, #268]	; (80028ec <HAL_RCC_ClockConfig+0x1f0>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e4:	f7fe fafa 	bl	8000ddc <HAL_GetTick>
 80027e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ea:	e00a      	b.n	8002802 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ec:	f7fe faf6 	bl	8000ddc <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e06e      	b.n	80028e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002802:	4b3a      	ldr	r3, [pc, #232]	; (80028ec <HAL_RCC_ClockConfig+0x1f0>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 020c 	and.w	r2, r3, #12
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	429a      	cmp	r2, r3
 8002812:	d1eb      	bne.n	80027ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d010      	beq.n	8002842 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	4b31      	ldr	r3, [pc, #196]	; (80028ec <HAL_RCC_ClockConfig+0x1f0>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800282c:	429a      	cmp	r2, r3
 800282e:	d208      	bcs.n	8002842 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002830:	4b2e      	ldr	r3, [pc, #184]	; (80028ec <HAL_RCC_ClockConfig+0x1f0>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	492b      	ldr	r1, [pc, #172]	; (80028ec <HAL_RCC_ClockConfig+0x1f0>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002842:	4b29      	ldr	r3, [pc, #164]	; (80028e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d210      	bcs.n	8002872 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002850:	4b25      	ldr	r3, [pc, #148]	; (80028e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f023 0207 	bic.w	r2, r3, #7
 8002858:	4923      	ldr	r1, [pc, #140]	; (80028e8 <HAL_RCC_ClockConfig+0x1ec>)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	4313      	orrs	r3, r2
 800285e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002860:	4b21      	ldr	r3, [pc, #132]	; (80028e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	d001      	beq.n	8002872 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e036      	b.n	80028e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	2b00      	cmp	r3, #0
 800287c:	d008      	beq.n	8002890 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800287e:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <HAL_RCC_ClockConfig+0x1f0>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	4918      	ldr	r1, [pc, #96]	; (80028ec <HAL_RCC_ClockConfig+0x1f0>)
 800288c:	4313      	orrs	r3, r2
 800288e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0308 	and.w	r3, r3, #8
 8002898:	2b00      	cmp	r3, #0
 800289a:	d009      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800289c:	4b13      	ldr	r3, [pc, #76]	; (80028ec <HAL_RCC_ClockConfig+0x1f0>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4910      	ldr	r1, [pc, #64]	; (80028ec <HAL_RCC_ClockConfig+0x1f0>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028b0:	f000 f824 	bl	80028fc <HAL_RCC_GetSysClockFreq>
 80028b4:	4601      	mov	r1, r0
 80028b6:	4b0d      	ldr	r3, [pc, #52]	; (80028ec <HAL_RCC_ClockConfig+0x1f0>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	091b      	lsrs	r3, r3, #4
 80028bc:	f003 030f 	and.w	r3, r3, #15
 80028c0:	4a0b      	ldr	r2, [pc, #44]	; (80028f0 <HAL_RCC_ClockConfig+0x1f4>)
 80028c2:	5cd3      	ldrb	r3, [r2, r3]
 80028c4:	f003 031f 	and.w	r3, r3, #31
 80028c8:	fa21 f303 	lsr.w	r3, r1, r3
 80028cc:	4a09      	ldr	r2, [pc, #36]	; (80028f4 <HAL_RCC_ClockConfig+0x1f8>)
 80028ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028d0:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <HAL_RCC_ClockConfig+0x1fc>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fe fa31 	bl	8000d3c <HAL_InitTick>
 80028da:	4603      	mov	r3, r0
 80028dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80028de:	7afb      	ldrb	r3, [r7, #11]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40022000 	.word	0x40022000
 80028ec:	40021000 	.word	0x40021000
 80028f0:	0800497c 	.word	0x0800497c
 80028f4:	20000000 	.word	0x20000000
 80028f8:	20000004 	.word	0x20000004

080028fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	; 0x24
 8002900:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	2300      	movs	r3, #0
 8002908:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800290a:	4b3d      	ldr	r3, [pc, #244]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x104>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 030c 	and.w	r3, r3, #12
 8002912:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002914:	4b3a      	ldr	r3, [pc, #232]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x104>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_RCC_GetSysClockFreq+0x34>
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	2b0c      	cmp	r3, #12
 8002928:	d121      	bne.n	800296e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d11e      	bne.n	800296e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002930:	4b33      	ldr	r3, [pc, #204]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x104>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b00      	cmp	r3, #0
 800293a:	d107      	bne.n	800294c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800293c:	4b30      	ldr	r3, [pc, #192]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x104>)
 800293e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002942:	0a1b      	lsrs	r3, r3, #8
 8002944:	f003 030f 	and.w	r3, r3, #15
 8002948:	61fb      	str	r3, [r7, #28]
 800294a:	e005      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800294c:	4b2c      	ldr	r3, [pc, #176]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x104>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	091b      	lsrs	r3, r3, #4
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002958:	4a2a      	ldr	r2, [pc, #168]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x108>)
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002960:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10d      	bne.n	8002984 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800296c:	e00a      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	2b04      	cmp	r3, #4
 8002972:	d102      	bne.n	800297a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002974:	4b24      	ldr	r3, [pc, #144]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002976:	61bb      	str	r3, [r7, #24]
 8002978:	e004      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	2b08      	cmp	r3, #8
 800297e:	d101      	bne.n	8002984 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002980:	4b22      	ldr	r3, [pc, #136]	; (8002a0c <HAL_RCC_GetSysClockFreq+0x110>)
 8002982:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	2b0c      	cmp	r3, #12
 8002988:	d133      	bne.n	80029f2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800298a:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x104>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d002      	beq.n	80029a0 <HAL_RCC_GetSysClockFreq+0xa4>
 800299a:	2b03      	cmp	r3, #3
 800299c:	d003      	beq.n	80029a6 <HAL_RCC_GetSysClockFreq+0xaa>
 800299e:	e005      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029a0:	4b19      	ldr	r3, [pc, #100]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x10c>)
 80029a2:	617b      	str	r3, [r7, #20]
      break;
 80029a4:	e005      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029a6:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <HAL_RCC_GetSysClockFreq+0x110>)
 80029a8:	617b      	str	r3, [r7, #20]
      break;
 80029aa:	e002      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	617b      	str	r3, [r7, #20]
      break;
 80029b0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029b2:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x104>)
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	091b      	lsrs	r3, r3, #4
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	3301      	adds	r3, #1
 80029be:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029c0:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x104>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	0a1b      	lsrs	r3, r3, #8
 80029c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	fb02 f203 	mul.w	r2, r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029d8:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x104>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	0e5b      	lsrs	r3, r3, #25
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	3301      	adds	r3, #1
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029f2:	69bb      	ldr	r3, [r7, #24]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3724      	adds	r7, #36	; 0x24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	40021000 	.word	0x40021000
 8002a04:	08004994 	.word	0x08004994
 8002a08:	00f42400 	.word	0x00f42400
 8002a0c:	007a1200 	.word	0x007a1200

08002a10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a14:	4b03      	ldr	r3, [pc, #12]	; (8002a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a16:	681b      	ldr	r3, [r3, #0]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	20000000 	.word	0x20000000

08002a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a2c:	f7ff fff0 	bl	8002a10 <HAL_RCC_GetHCLKFreq>
 8002a30:	4601      	mov	r1, r0
 8002a32:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	0a1b      	lsrs	r3, r3, #8
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	4a04      	ldr	r2, [pc, #16]	; (8002a50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a3e:	5cd3      	ldrb	r3, [r2, r3]
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	0800498c 	.word	0x0800498c

08002a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a58:	f7ff ffda 	bl	8002a10 <HAL_RCC_GetHCLKFreq>
 8002a5c:	4601      	mov	r1, r0
 8002a5e:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	0adb      	lsrs	r3, r3, #11
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	4a04      	ldr	r2, [pc, #16]	; (8002a7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a6a:	5cd3      	ldrb	r3, [r2, r3]
 8002a6c:	f003 031f 	and.w	r3, r3, #31
 8002a70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	0800498c 	.word	0x0800498c

08002a80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a88:	2300      	movs	r3, #0
 8002a8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a8c:	4b2a      	ldr	r3, [pc, #168]	; (8002b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a98:	f7ff f9ba 	bl	8001e10 <HAL_PWREx_GetVoltageRange>
 8002a9c:	6178      	str	r0, [r7, #20]
 8002a9e:	e014      	b.n	8002aca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002aa0:	4b25      	ldr	r3, [pc, #148]	; (8002b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa4:	4a24      	ldr	r2, [pc, #144]	; (8002b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8002aac:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ab8:	f7ff f9aa 	bl	8001e10 <HAL_PWREx_GetVoltageRange>
 8002abc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002abe:	4b1e      	ldr	r3, [pc, #120]	; (8002b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac2:	4a1d      	ldr	r2, [pc, #116]	; (8002b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ac8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ad0:	d10b      	bne.n	8002aea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b80      	cmp	r3, #128	; 0x80
 8002ad6:	d919      	bls.n	8002b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2ba0      	cmp	r3, #160	; 0xa0
 8002adc:	d902      	bls.n	8002ae4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ade:	2302      	movs	r3, #2
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	e013      	b.n	8002b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	e010      	b.n	8002b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b80      	cmp	r3, #128	; 0x80
 8002aee:	d902      	bls.n	8002af6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002af0:	2303      	movs	r3, #3
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	e00a      	b.n	8002b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b80      	cmp	r3, #128	; 0x80
 8002afa:	d102      	bne.n	8002b02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002afc:	2302      	movs	r3, #2
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	e004      	b.n	8002b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b70      	cmp	r3, #112	; 0x70
 8002b06:	d101      	bne.n	8002b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b08:	2301      	movs	r3, #1
 8002b0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f023 0207 	bic.w	r2, r3, #7
 8002b14:	4909      	ldr	r1, [pc, #36]	; (8002b3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b1c:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d001      	beq.n	8002b2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40022000 	.word	0x40022000

08002b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b48:	2300      	movs	r3, #0
 8002b4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d02f      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b64:	d005      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002b66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b6a:	d015      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d007      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002b70:	e00f      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002b72:	4bac      	ldr	r3, [pc, #688]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	4aab      	ldr	r2, [pc, #684]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b7c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b7e:	e00c      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3304      	adds	r3, #4
 8002b84:	2100      	movs	r1, #0
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 f9dc 	bl	8002f44 <RCCEx_PLLSAI1_Config>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b90:	e003      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	74fb      	strb	r3, [r7, #19]
      break;
 8002b96:	e000      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002b98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b9a:	7cfb      	ldrb	r3, [r7, #19]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10b      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ba0:	4ba0      	ldr	r3, [pc, #640]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bae:	499d      	ldr	r1, [pc, #628]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bb6:	e001      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb8:	7cfb      	ldrb	r3, [r7, #19]
 8002bba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 8099 	beq.w	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bce:	4b95      	ldr	r3, [pc, #596]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002bde:	2300      	movs	r3, #0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00d      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be4:	4b8f      	ldr	r3, [pc, #572]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be8:	4a8e      	ldr	r2, [pc, #568]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bee:	6593      	str	r3, [r2, #88]	; 0x58
 8002bf0:	4b8c      	ldr	r3, [pc, #560]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c00:	4b89      	ldr	r3, [pc, #548]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a88      	ldr	r2, [pc, #544]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c0c:	f7fe f8e6 	bl	8000ddc <HAL_GetTick>
 8002c10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c12:	e009      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c14:	f7fe f8e2 	bl	8000ddc <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d902      	bls.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	74fb      	strb	r3, [r7, #19]
        break;
 8002c26:	e005      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c28:	4b7f      	ldr	r3, [pc, #508]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0ef      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002c34:	7cfb      	ldrb	r3, [r7, #19]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d155      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c3a:	4b7a      	ldr	r3, [pc, #488]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d01e      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d019      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c56:	4b73      	ldr	r3, [pc, #460]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c60:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c62:	4b70      	ldr	r3, [pc, #448]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c68:	4a6e      	ldr	r2, [pc, #440]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c72:	4b6c      	ldr	r3, [pc, #432]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c78:	4a6a      	ldr	r2, [pc, #424]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c82:	4a68      	ldr	r2, [pc, #416]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d016      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c94:	f7fe f8a2 	bl	8000ddc <HAL_GetTick>
 8002c98:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c9a:	e00b      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9c:	f7fe f89e 	bl	8000ddc <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d902      	bls.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	74fb      	strb	r3, [r7, #19]
            break;
 8002cb2:	e006      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb4:	4b5b      	ldr	r3, [pc, #364]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0ec      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002cc2:	7cfb      	ldrb	r3, [r7, #19]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10b      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cc8:	4b56      	ldr	r3, [pc, #344]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd6:	4953      	ldr	r1, [pc, #332]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002cde:	e004      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ce0:	7cfb      	ldrb	r3, [r7, #19]
 8002ce2:	74bb      	strb	r3, [r7, #18]
 8002ce4:	e001      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce6:	7cfb      	ldrb	r3, [r7, #19]
 8002ce8:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cea:	7c7b      	ldrb	r3, [r7, #17]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d105      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf0:	4b4c      	ldr	r3, [pc, #304]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf4:	4a4b      	ldr	r2, [pc, #300]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cfa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d08:	4b46      	ldr	r3, [pc, #280]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0e:	f023 0203 	bic.w	r2, r3, #3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	4943      	ldr	r1, [pc, #268]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d2a:	4b3e      	ldr	r3, [pc, #248]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d30:	f023 020c 	bic.w	r2, r3, #12
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	493a      	ldr	r1, [pc, #232]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d4c:	4b35      	ldr	r3, [pc, #212]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5a:	4932      	ldr	r1, [pc, #200]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d6e:	4b2d      	ldr	r3, [pc, #180]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7c:	4929      	ldr	r1, [pc, #164]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00a      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d90:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9e:	4921      	ldr	r1, [pc, #132]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002db2:	4b1c      	ldr	r3, [pc, #112]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc0:	4918      	ldr	r1, [pc, #96]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dd4:	4b13      	ldr	r3, [pc, #76]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dda:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	4910      	ldr	r1, [pc, #64]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d02c      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002df6:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	4907      	ldr	r1, [pc, #28]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e14:	d10a      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e16:	4b03      	ldr	r3, [pc, #12]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	4a02      	ldr	r2, [pc, #8]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e20:	60d3      	str	r3, [r2, #12]
 8002e22:	e015      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002e24:	40021000 	.word	0x40021000
 8002e28:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e34:	d10c      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 f881 	bl	8002f44 <RCCEx_PLLSAI1_Config>
 8002e42:	4603      	mov	r3, r0
 8002e44:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e46:	7cfb      	ldrb	r3, [r7, #19]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8002e4c:	7cfb      	ldrb	r3, [r7, #19]
 8002e4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d028      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e5c:	4b30      	ldr	r3, [pc, #192]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6a:	492d      	ldr	r1, [pc, #180]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e7a:	d106      	bne.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e7c:	4b28      	ldr	r3, [pc, #160]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	4a27      	ldr	r2, [pc, #156]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e86:	60d3      	str	r3, [r2, #12]
 8002e88:	e011      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e92:	d10c      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3304      	adds	r3, #4
 8002e98:	2101      	movs	r1, #1
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 f852 	bl	8002f44 <RCCEx_PLLSAI1_Config>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ea4:	7cfb      	ldrb	r3, [r7, #19]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8002eaa:	7cfb      	ldrb	r3, [r7, #19]
 8002eac:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d01c      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002eba:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec8:	4915      	ldr	r1, [pc, #84]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3304      	adds	r3, #4
 8002ede:	2102      	movs	r1, #2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 f82f 	bl	8002f44 <RCCEx_PLLSAI1_Config>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eea:	7cfb      	ldrb	r3, [r7, #19]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002ef0:	7cfb      	ldrb	r3, [r7, #19]
 8002ef2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f00:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f06:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0e:	4904      	ldr	r1, [pc, #16]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f16:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000

08002f24 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a04      	ldr	r2, [pc, #16]	; (8002f40 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002f2e:	f043 0304 	orr.w	r3, r3, #4
 8002f32:	6013      	str	r3, [r2, #0]
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40021000 	.word	0x40021000

08002f44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f52:	4b73      	ldr	r3, [pc, #460]	; (8003120 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d018      	beq.n	8002f90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f5e:	4b70      	ldr	r3, [pc, #448]	; (8003120 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f003 0203 	and.w	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d10d      	bne.n	8002f8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
       ||
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d009      	beq.n	8002f8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f76:	4b6a      	ldr	r3, [pc, #424]	; (8003120 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	091b      	lsrs	r3, r3, #4
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
       ||
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d044      	beq.n	8003014 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	73fb      	strb	r3, [r7, #15]
 8002f8e:	e041      	b.n	8003014 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d00c      	beq.n	8002fb2 <RCCEx_PLLSAI1_Config+0x6e>
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d013      	beq.n	8002fc4 <RCCEx_PLLSAI1_Config+0x80>
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d120      	bne.n	8002fe2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fa0:	4b5f      	ldr	r3, [pc, #380]	; (8003120 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d11d      	bne.n	8002fe8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fb0:	e01a      	b.n	8002fe8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fb2:	4b5b      	ldr	r3, [pc, #364]	; (8003120 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d116      	bne.n	8002fec <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fc2:	e013      	b.n	8002fec <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fc4:	4b56      	ldr	r3, [pc, #344]	; (8003120 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10f      	bne.n	8002ff0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fd0:	4b53      	ldr	r3, [pc, #332]	; (8003120 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d109      	bne.n	8002ff0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fe0:	e006      	b.n	8002ff0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe6:	e004      	b.n	8002ff2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002fe8:	bf00      	nop
 8002fea:	e002      	b.n	8002ff2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002fec:	bf00      	nop
 8002fee:	e000      	b.n	8002ff2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002ff0:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10d      	bne.n	8003014 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ff8:	4b49      	ldr	r3, [pc, #292]	; (8003120 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6819      	ldr	r1, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	3b01      	subs	r3, #1
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	430b      	orrs	r3, r1
 800300e:	4944      	ldr	r1, [pc, #272]	; (8003120 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003010:	4313      	orrs	r3, r2
 8003012:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d17c      	bne.n	8003114 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800301a:	4b41      	ldr	r3, [pc, #260]	; (8003120 <RCCEx_PLLSAI1_Config+0x1dc>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a40      	ldr	r2, [pc, #256]	; (8003120 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003020:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003024:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003026:	f7fd fed9 	bl	8000ddc <HAL_GetTick>
 800302a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800302c:	e009      	b.n	8003042 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800302e:	f7fd fed5 	bl	8000ddc <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d902      	bls.n	8003042 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	73fb      	strb	r3, [r7, #15]
        break;
 8003040:	e005      	b.n	800304e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003042:	4b37      	ldr	r3, [pc, #220]	; (8003120 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1ef      	bne.n	800302e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800304e:	7bfb      	ldrb	r3, [r7, #15]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d15f      	bne.n	8003114 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d110      	bne.n	800307c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800305a:	4b31      	ldr	r3, [pc, #196]	; (8003120 <RCCEx_PLLSAI1_Config+0x1dc>)
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003062:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6892      	ldr	r2, [r2, #8]
 800306a:	0211      	lsls	r1, r2, #8
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	68d2      	ldr	r2, [r2, #12]
 8003070:	06d2      	lsls	r2, r2, #27
 8003072:	430a      	orrs	r2, r1
 8003074:	492a      	ldr	r1, [pc, #168]	; (8003120 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003076:	4313      	orrs	r3, r2
 8003078:	610b      	str	r3, [r1, #16]
 800307a:	e027      	b.n	80030cc <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d112      	bne.n	80030a8 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003082:	4b27      	ldr	r3, [pc, #156]	; (8003120 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800308a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6892      	ldr	r2, [r2, #8]
 8003092:	0211      	lsls	r1, r2, #8
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6912      	ldr	r2, [r2, #16]
 8003098:	0852      	lsrs	r2, r2, #1
 800309a:	3a01      	subs	r2, #1
 800309c:	0552      	lsls	r2, r2, #21
 800309e:	430a      	orrs	r2, r1
 80030a0:	491f      	ldr	r1, [pc, #124]	; (8003120 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	610b      	str	r3, [r1, #16]
 80030a6:	e011      	b.n	80030cc <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030a8:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6892      	ldr	r2, [r2, #8]
 80030b8:	0211      	lsls	r1, r2, #8
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6952      	ldr	r2, [r2, #20]
 80030be:	0852      	lsrs	r2, r2, #1
 80030c0:	3a01      	subs	r2, #1
 80030c2:	0652      	lsls	r2, r2, #25
 80030c4:	430a      	orrs	r2, r1
 80030c6:	4916      	ldr	r1, [pc, #88]	; (8003120 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030cc:	4b14      	ldr	r3, [pc, #80]	; (8003120 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a13      	ldr	r2, [pc, #76]	; (8003120 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d8:	f7fd fe80 	bl	8000ddc <HAL_GetTick>
 80030dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030de:	e009      	b.n	80030f4 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030e0:	f7fd fe7c 	bl	8000ddc <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d902      	bls.n	80030f4 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	73fb      	strb	r3, [r7, #15]
          break;
 80030f2:	e005      	b.n	8003100 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030f4:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0ef      	beq.n	80030e0 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003106:	4b06      	ldr	r3, [pc, #24]	; (8003120 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	4904      	ldr	r1, [pc, #16]	; (8003120 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003110:	4313      	orrs	r3, r2
 8003112:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003114:	7bfb      	ldrb	r3, [r7, #15]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40021000 	.word	0x40021000

08003124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e049      	b.n	80031ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d106      	bne.n	8003150 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fd fcc2 	bl	8000ad4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3304      	adds	r3, #4
 8003160:	4619      	mov	r1, r3
 8003162:	4610      	mov	r0, r2
 8003164:	f000 fb46 	bl	80037f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b082      	sub	sp, #8
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e049      	b.n	8003278 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d106      	bne.n	80031fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f841 	bl	8003280 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2202      	movs	r2, #2
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3304      	adds	r3, #4
 800320e:	4619      	mov	r1, r3
 8003210:	4610      	mov	r0, r2
 8003212:	f000 faef 	bl	80037f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d109      	bne.n	80032b8 <HAL_TIM_PWM_Start+0x24>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	bf14      	ite	ne
 80032b0:	2301      	movne	r3, #1
 80032b2:	2300      	moveq	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	e03c      	b.n	8003332 <HAL_TIM_PWM_Start+0x9e>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d109      	bne.n	80032d2 <HAL_TIM_PWM_Start+0x3e>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	bf14      	ite	ne
 80032ca:	2301      	movne	r3, #1
 80032cc:	2300      	moveq	r3, #0
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	e02f      	b.n	8003332 <HAL_TIM_PWM_Start+0x9e>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d109      	bne.n	80032ec <HAL_TIM_PWM_Start+0x58>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	bf14      	ite	ne
 80032e4:	2301      	movne	r3, #1
 80032e6:	2300      	moveq	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	e022      	b.n	8003332 <HAL_TIM_PWM_Start+0x9e>
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	2b0c      	cmp	r3, #12
 80032f0:	d109      	bne.n	8003306 <HAL_TIM_PWM_Start+0x72>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	bf14      	ite	ne
 80032fe:	2301      	movne	r3, #1
 8003300:	2300      	moveq	r3, #0
 8003302:	b2db      	uxtb	r3, r3
 8003304:	e015      	b.n	8003332 <HAL_TIM_PWM_Start+0x9e>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b10      	cmp	r3, #16
 800330a:	d109      	bne.n	8003320 <HAL_TIM_PWM_Start+0x8c>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b01      	cmp	r3, #1
 8003316:	bf14      	ite	ne
 8003318:	2301      	movne	r3, #1
 800331a:	2300      	moveq	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	e008      	b.n	8003332 <HAL_TIM_PWM_Start+0x9e>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b01      	cmp	r3, #1
 800332a:	bf14      	ite	ne
 800332c:	2301      	movne	r3, #1
 800332e:	2300      	moveq	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e07e      	b.n	8003438 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d104      	bne.n	800334a <HAL_TIM_PWM_Start+0xb6>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003348:	e023      	b.n	8003392 <HAL_TIM_PWM_Start+0xfe>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b04      	cmp	r3, #4
 800334e:	d104      	bne.n	800335a <HAL_TIM_PWM_Start+0xc6>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003358:	e01b      	b.n	8003392 <HAL_TIM_PWM_Start+0xfe>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	2b08      	cmp	r3, #8
 800335e:	d104      	bne.n	800336a <HAL_TIM_PWM_Start+0xd6>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003368:	e013      	b.n	8003392 <HAL_TIM_PWM_Start+0xfe>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b0c      	cmp	r3, #12
 800336e:	d104      	bne.n	800337a <HAL_TIM_PWM_Start+0xe6>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003378:	e00b      	b.n	8003392 <HAL_TIM_PWM_Start+0xfe>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b10      	cmp	r3, #16
 800337e:	d104      	bne.n	800338a <HAL_TIM_PWM_Start+0xf6>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003388:	e003      	b.n	8003392 <HAL_TIM_PWM_Start+0xfe>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2202      	movs	r2, #2
 800338e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2201      	movs	r2, #1
 8003398:	6839      	ldr	r1, [r7, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fda6 	bl	8003eec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a26      	ldr	r2, [pc, #152]	; (8003440 <HAL_TIM_PWM_Start+0x1ac>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d009      	beq.n	80033be <HAL_TIM_PWM_Start+0x12a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a25      	ldr	r2, [pc, #148]	; (8003444 <HAL_TIM_PWM_Start+0x1b0>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d004      	beq.n	80033be <HAL_TIM_PWM_Start+0x12a>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a23      	ldr	r2, [pc, #140]	; (8003448 <HAL_TIM_PWM_Start+0x1b4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d101      	bne.n	80033c2 <HAL_TIM_PWM_Start+0x12e>
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <HAL_TIM_PWM_Start+0x130>
 80033c2:	2300      	movs	r3, #0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d007      	beq.n	80033d8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a18      	ldr	r2, [pc, #96]	; (8003440 <HAL_TIM_PWM_Start+0x1ac>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d009      	beq.n	80033f6 <HAL_TIM_PWM_Start+0x162>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ea:	d004      	beq.n	80033f6 <HAL_TIM_PWM_Start+0x162>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a14      	ldr	r2, [pc, #80]	; (8003444 <HAL_TIM_PWM_Start+0x1b0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d115      	bne.n	8003422 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	4b13      	ldr	r3, [pc, #76]	; (800344c <HAL_TIM_PWM_Start+0x1b8>)
 80033fe:	4013      	ands	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2b06      	cmp	r3, #6
 8003406:	d015      	beq.n	8003434 <HAL_TIM_PWM_Start+0x1a0>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340e:	d011      	beq.n	8003434 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0201 	orr.w	r2, r2, #1
 800341e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003420:	e008      	b.n	8003434 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f042 0201 	orr.w	r2, r2, #1
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	e000      	b.n	8003436 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003434:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40012c00 	.word	0x40012c00
 8003444:	40014000 	.word	0x40014000
 8003448:	40014400 	.word	0x40014400
 800344c:	00010007 	.word	0x00010007

08003450 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800346a:	2302      	movs	r3, #2
 800346c:	e0ff      	b.n	800366e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b14      	cmp	r3, #20
 800347a:	f200 80f0 	bhi.w	800365e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800347e:	a201      	add	r2, pc, #4	; (adr r2, 8003484 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003484:	080034d9 	.word	0x080034d9
 8003488:	0800365f 	.word	0x0800365f
 800348c:	0800365f 	.word	0x0800365f
 8003490:	0800365f 	.word	0x0800365f
 8003494:	08003519 	.word	0x08003519
 8003498:	0800365f 	.word	0x0800365f
 800349c:	0800365f 	.word	0x0800365f
 80034a0:	0800365f 	.word	0x0800365f
 80034a4:	0800355b 	.word	0x0800355b
 80034a8:	0800365f 	.word	0x0800365f
 80034ac:	0800365f 	.word	0x0800365f
 80034b0:	0800365f 	.word	0x0800365f
 80034b4:	0800359b 	.word	0x0800359b
 80034b8:	0800365f 	.word	0x0800365f
 80034bc:	0800365f 	.word	0x0800365f
 80034c0:	0800365f 	.word	0x0800365f
 80034c4:	080035dd 	.word	0x080035dd
 80034c8:	0800365f 	.word	0x0800365f
 80034cc:	0800365f 	.word	0x0800365f
 80034d0:	0800365f 	.word	0x0800365f
 80034d4:	0800361d 	.word	0x0800361d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68b9      	ldr	r1, [r7, #8]
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 f9ec 	bl	80038bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699a      	ldr	r2, [r3, #24]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0208 	orr.w	r2, r2, #8
 80034f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699a      	ldr	r2, [r3, #24]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0204 	bic.w	r2, r2, #4
 8003502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6999      	ldr	r1, [r3, #24]
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	691a      	ldr	r2, [r3, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	619a      	str	r2, [r3, #24]
      break;
 8003516:	e0a5      	b.n	8003664 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68b9      	ldr	r1, [r7, #8]
 800351e:	4618      	mov	r0, r3
 8003520:	f000 fa48 	bl	80039b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699a      	ldr	r2, [r3, #24]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003532:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699a      	ldr	r2, [r3, #24]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003542:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6999      	ldr	r1, [r3, #24]
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	021a      	lsls	r2, r3, #8
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	619a      	str	r2, [r3, #24]
      break;
 8003558:	e084      	b.n	8003664 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68b9      	ldr	r1, [r7, #8]
 8003560:	4618      	mov	r0, r3
 8003562:	f000 faa1 	bl	8003aa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	69da      	ldr	r2, [r3, #28]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0208 	orr.w	r2, r2, #8
 8003574:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	69da      	ldr	r2, [r3, #28]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0204 	bic.w	r2, r2, #4
 8003584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	69d9      	ldr	r1, [r3, #28]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	61da      	str	r2, [r3, #28]
      break;
 8003598:	e064      	b.n	8003664 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68b9      	ldr	r1, [r7, #8]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 faf9 	bl	8003b98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	69da      	ldr	r2, [r3, #28]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69da      	ldr	r2, [r3, #28]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	69d9      	ldr	r1, [r3, #28]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	021a      	lsls	r2, r3, #8
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	61da      	str	r2, [r3, #28]
      break;
 80035da:	e043      	b.n	8003664 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fb36 	bl	8003c54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0208 	orr.w	r2, r2, #8
 80035f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0204 	bic.w	r2, r2, #4
 8003606:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	691a      	ldr	r2, [r3, #16]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800361a:	e023      	b.n	8003664 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68b9      	ldr	r1, [r7, #8]
 8003622:	4618      	mov	r0, r3
 8003624:	f000 fb6e 	bl	8003d04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003636:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003646:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	021a      	lsls	r2, r3, #8
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800365c:	e002      	b.n	8003664 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	75fb      	strb	r3, [r7, #23]
      break;
 8003662:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800366c:	7dfb      	ldrb	r3, [r7, #23]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop

08003678 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_TIM_ConfigClockSource+0x1c>
 8003690:	2302      	movs	r3, #2
 8003692:	e0ab      	b.n	80037ec <HAL_TIM_ConfigClockSource+0x174>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b40      	cmp	r3, #64	; 0x40
 80036ce:	d067      	beq.n	80037a0 <HAL_TIM_ConfigClockSource+0x128>
 80036d0:	2b40      	cmp	r3, #64	; 0x40
 80036d2:	d80b      	bhi.n	80036ec <HAL_TIM_ConfigClockSource+0x74>
 80036d4:	2b10      	cmp	r3, #16
 80036d6:	d073      	beq.n	80037c0 <HAL_TIM_ConfigClockSource+0x148>
 80036d8:	2b10      	cmp	r3, #16
 80036da:	d802      	bhi.n	80036e2 <HAL_TIM_ConfigClockSource+0x6a>
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d06f      	beq.n	80037c0 <HAL_TIM_ConfigClockSource+0x148>
 80036e0:	e077      	b.n	80037d2 <HAL_TIM_ConfigClockSource+0x15a>
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	d06c      	beq.n	80037c0 <HAL_TIM_ConfigClockSource+0x148>
 80036e6:	2b30      	cmp	r3, #48	; 0x30
 80036e8:	d06a      	beq.n	80037c0 <HAL_TIM_ConfigClockSource+0x148>
 80036ea:	e072      	b.n	80037d2 <HAL_TIM_ConfigClockSource+0x15a>
 80036ec:	2b70      	cmp	r3, #112	; 0x70
 80036ee:	d00d      	beq.n	800370c <HAL_TIM_ConfigClockSource+0x94>
 80036f0:	2b70      	cmp	r3, #112	; 0x70
 80036f2:	d804      	bhi.n	80036fe <HAL_TIM_ConfigClockSource+0x86>
 80036f4:	2b50      	cmp	r3, #80	; 0x50
 80036f6:	d033      	beq.n	8003760 <HAL_TIM_ConfigClockSource+0xe8>
 80036f8:	2b60      	cmp	r3, #96	; 0x60
 80036fa:	d041      	beq.n	8003780 <HAL_TIM_ConfigClockSource+0x108>
 80036fc:	e069      	b.n	80037d2 <HAL_TIM_ConfigClockSource+0x15a>
 80036fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003702:	d069      	beq.n	80037d8 <HAL_TIM_ConfigClockSource+0x160>
 8003704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003708:	d017      	beq.n	800373a <HAL_TIM_ConfigClockSource+0xc2>
 800370a:	e062      	b.n	80037d2 <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	6899      	ldr	r1, [r3, #8]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f000 fbc6 	bl	8003eac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800372e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	609a      	str	r2, [r3, #8]
      break;
 8003738:	e04f      	b.n	80037da <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	6899      	ldr	r1, [r3, #8]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f000 fbaf 	bl	8003eac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800375c:	609a      	str	r2, [r3, #8]
      break;
 800375e:	e03c      	b.n	80037da <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	6859      	ldr	r1, [r3, #4]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	461a      	mov	r2, r3
 800376e:	f000 fb23 	bl	8003db8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2150      	movs	r1, #80	; 0x50
 8003778:	4618      	mov	r0, r3
 800377a:	f000 fb7c 	bl	8003e76 <TIM_ITRx_SetConfig>
      break;
 800377e:	e02c      	b.n	80037da <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6818      	ldr	r0, [r3, #0]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	6859      	ldr	r1, [r3, #4]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	461a      	mov	r2, r3
 800378e:	f000 fb42 	bl	8003e16 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2160      	movs	r1, #96	; 0x60
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fb6c 	bl	8003e76 <TIM_ITRx_SetConfig>
      break;
 800379e:	e01c      	b.n	80037da <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6818      	ldr	r0, [r3, #0]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	6859      	ldr	r1, [r3, #4]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	461a      	mov	r2, r3
 80037ae:	f000 fb03 	bl	8003db8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2140      	movs	r1, #64	; 0x40
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 fb5c 	bl	8003e76 <TIM_ITRx_SetConfig>
      break;
 80037be:	e00c      	b.n	80037da <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4619      	mov	r1, r3
 80037ca:	4610      	mov	r0, r2
 80037cc:	f000 fb53 	bl	8003e76 <TIM_ITRx_SetConfig>
      break;
 80037d0:	e003      	b.n	80037da <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	73fb      	strb	r3, [r7, #15]
      break;
 80037d6:	e000      	b.n	80037da <HAL_TIM_ConfigClockSource+0x162>
      break;
 80037d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a2a      	ldr	r2, [pc, #168]	; (80038b0 <TIM_Base_SetConfig+0xbc>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d003      	beq.n	8003814 <TIM_Base_SetConfig+0x20>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003812:	d108      	bne.n	8003826 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a21      	ldr	r2, [pc, #132]	; (80038b0 <TIM_Base_SetConfig+0xbc>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00b      	beq.n	8003846 <TIM_Base_SetConfig+0x52>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003834:	d007      	beq.n	8003846 <TIM_Base_SetConfig+0x52>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a1e      	ldr	r2, [pc, #120]	; (80038b4 <TIM_Base_SetConfig+0xc0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d003      	beq.n	8003846 <TIM_Base_SetConfig+0x52>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a1d      	ldr	r2, [pc, #116]	; (80038b8 <TIM_Base_SetConfig+0xc4>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d108      	bne.n	8003858 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800384c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	4313      	orrs	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	4313      	orrs	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a0c      	ldr	r2, [pc, #48]	; (80038b0 <TIM_Base_SetConfig+0xbc>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d007      	beq.n	8003894 <TIM_Base_SetConfig+0xa0>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a0b      	ldr	r2, [pc, #44]	; (80038b4 <TIM_Base_SetConfig+0xc0>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d003      	beq.n	8003894 <TIM_Base_SetConfig+0xa0>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a0a      	ldr	r2, [pc, #40]	; (80038b8 <TIM_Base_SetConfig+0xc4>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d103      	bne.n	800389c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	691a      	ldr	r2, [r3, #16]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	615a      	str	r2, [r3, #20]
}
 80038a2:	bf00      	nop
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	40012c00 	.word	0x40012c00
 80038b4:	40014000 	.word	0x40014000
 80038b8:	40014400 	.word	0x40014400

080038bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	f023 0201 	bic.w	r2, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0303 	bic.w	r3, r3, #3
 80038f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f023 0302 	bic.w	r3, r3, #2
 8003908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a24      	ldr	r2, [pc, #144]	; (80039a8 <TIM_OC1_SetConfig+0xec>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d007      	beq.n	800392c <TIM_OC1_SetConfig+0x70>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a23      	ldr	r2, [pc, #140]	; (80039ac <TIM_OC1_SetConfig+0xf0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d003      	beq.n	800392c <TIM_OC1_SetConfig+0x70>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a22      	ldr	r2, [pc, #136]	; (80039b0 <TIM_OC1_SetConfig+0xf4>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d10c      	bne.n	8003946 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f023 0308 	bic.w	r3, r3, #8
 8003932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	4313      	orrs	r3, r2
 800393c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f023 0304 	bic.w	r3, r3, #4
 8003944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a17      	ldr	r2, [pc, #92]	; (80039a8 <TIM_OC1_SetConfig+0xec>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d007      	beq.n	800395e <TIM_OC1_SetConfig+0xa2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a16      	ldr	r2, [pc, #88]	; (80039ac <TIM_OC1_SetConfig+0xf0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d003      	beq.n	800395e <TIM_OC1_SetConfig+0xa2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a15      	ldr	r2, [pc, #84]	; (80039b0 <TIM_OC1_SetConfig+0xf4>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d111      	bne.n	8003982 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003964:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800396c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	4313      	orrs	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	621a      	str	r2, [r3, #32]
}
 800399c:	bf00      	nop
 800399e:	371c      	adds	r7, #28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	40012c00 	.word	0x40012c00
 80039ac:	40014000 	.word	0x40014000
 80039b0:	40014400 	.word	0x40014400

080039b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	f023 0210 	bic.w	r2, r3, #16
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	021b      	lsls	r3, r3, #8
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f023 0320 	bic.w	r3, r3, #32
 8003a02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a22      	ldr	r2, [pc, #136]	; (8003a9c <TIM_OC2_SetConfig+0xe8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d10d      	bne.n	8003a34 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a19      	ldr	r2, [pc, #100]	; (8003a9c <TIM_OC2_SetConfig+0xe8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d007      	beq.n	8003a4c <TIM_OC2_SetConfig+0x98>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a18      	ldr	r2, [pc, #96]	; (8003aa0 <TIM_OC2_SetConfig+0xec>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d003      	beq.n	8003a4c <TIM_OC2_SetConfig+0x98>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a17      	ldr	r2, [pc, #92]	; (8003aa4 <TIM_OC2_SetConfig+0xf0>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d113      	bne.n	8003a74 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	621a      	str	r2, [r3, #32]
}
 8003a8e:	bf00      	nop
 8003a90:	371c      	adds	r7, #28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40012c00 	.word	0x40012c00
 8003aa0:	40014000 	.word	0x40014000
 8003aa4:	40014400 	.word	0x40014400

08003aa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 0303 	bic.w	r3, r3, #3
 8003ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	021b      	lsls	r3, r3, #8
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a21      	ldr	r2, [pc, #132]	; (8003b8c <TIM_OC3_SetConfig+0xe4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d10d      	bne.n	8003b26 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a18      	ldr	r2, [pc, #96]	; (8003b8c <TIM_OC3_SetConfig+0xe4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d007      	beq.n	8003b3e <TIM_OC3_SetConfig+0x96>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a17      	ldr	r2, [pc, #92]	; (8003b90 <TIM_OC3_SetConfig+0xe8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d003      	beq.n	8003b3e <TIM_OC3_SetConfig+0x96>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a16      	ldr	r2, [pc, #88]	; (8003b94 <TIM_OC3_SetConfig+0xec>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d113      	bne.n	8003b66 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	621a      	str	r2, [r3, #32]
}
 8003b80:	bf00      	nop
 8003b82:	371c      	adds	r7, #28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	40012c00 	.word	0x40012c00
 8003b90:	40014000 	.word	0x40014000
 8003b94:	40014400 	.word	0x40014400

08003b98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	021b      	lsls	r3, r3, #8
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003be6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	031b      	lsls	r3, r3, #12
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a14      	ldr	r2, [pc, #80]	; (8003c48 <TIM_OC4_SetConfig+0xb0>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d007      	beq.n	8003c0c <TIM_OC4_SetConfig+0x74>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a13      	ldr	r2, [pc, #76]	; (8003c4c <TIM_OC4_SetConfig+0xb4>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d003      	beq.n	8003c0c <TIM_OC4_SetConfig+0x74>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a12      	ldr	r2, [pc, #72]	; (8003c50 <TIM_OC4_SetConfig+0xb8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d109      	bne.n	8003c20 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	019b      	lsls	r3, r3, #6
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	621a      	str	r2, [r3, #32]
}
 8003c3a:	bf00      	nop
 8003c3c:	371c      	adds	r7, #28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40012c00 	.word	0x40012c00
 8003c4c:	40014000 	.word	0x40014000
 8003c50:	40014400 	.word	0x40014400

08003c54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003c98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	041b      	lsls	r3, r3, #16
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a13      	ldr	r2, [pc, #76]	; (8003cf8 <TIM_OC5_SetConfig+0xa4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d007      	beq.n	8003cbe <TIM_OC5_SetConfig+0x6a>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a12      	ldr	r2, [pc, #72]	; (8003cfc <TIM_OC5_SetConfig+0xa8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d003      	beq.n	8003cbe <TIM_OC5_SetConfig+0x6a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a11      	ldr	r2, [pc, #68]	; (8003d00 <TIM_OC5_SetConfig+0xac>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d109      	bne.n	8003cd2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	021b      	lsls	r3, r3, #8
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	621a      	str	r2, [r3, #32]
}
 8003cec:	bf00      	nop
 8003cee:	371c      	adds	r7, #28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	40012c00 	.word	0x40012c00
 8003cfc:	40014000 	.word	0x40014000
 8003d00:	40014400 	.word	0x40014400

08003d04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	021b      	lsls	r3, r3, #8
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	051b      	lsls	r3, r3, #20
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a14      	ldr	r2, [pc, #80]	; (8003dac <TIM_OC6_SetConfig+0xa8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d007      	beq.n	8003d70 <TIM_OC6_SetConfig+0x6c>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a13      	ldr	r2, [pc, #76]	; (8003db0 <TIM_OC6_SetConfig+0xac>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d003      	beq.n	8003d70 <TIM_OC6_SetConfig+0x6c>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a12      	ldr	r2, [pc, #72]	; (8003db4 <TIM_OC6_SetConfig+0xb0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d109      	bne.n	8003d84 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	029b      	lsls	r3, r3, #10
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	621a      	str	r2, [r3, #32]
}
 8003d9e:	bf00      	nop
 8003da0:	371c      	adds	r7, #28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40012c00 	.word	0x40012c00
 8003db0:	40014000 	.word	0x40014000
 8003db4:	40014400 	.word	0x40014400

08003db8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	f023 0201 	bic.w	r2, r3, #1
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f023 030a 	bic.w	r3, r3, #10
 8003df4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	621a      	str	r2, [r3, #32]
}
 8003e0a:	bf00      	nop
 8003e0c:	371c      	adds	r7, #28
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b087      	sub	sp, #28
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	60f8      	str	r0, [r7, #12]
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	f023 0210 	bic.w	r2, r3, #16
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	031b      	lsls	r3, r3, #12
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	621a      	str	r2, [r3, #32]
}
 8003e6a:	bf00      	nop
 8003e6c:	371c      	adds	r7, #28
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b085      	sub	sp, #20
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
 8003e7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	f043 0307 	orr.w	r3, r3, #7
 8003e98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	609a      	str	r2, [r3, #8]
}
 8003ea0:	bf00      	nop
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
 8003eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ec6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	021a      	lsls	r2, r3, #8
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	609a      	str	r2, [r3, #8]
}
 8003ee0:	bf00      	nop
 8003ee2:	371c      	adds	r7, #28
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f003 031f 	and.w	r3, r3, #31
 8003efe:	2201      	movs	r2, #1
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a1a      	ldr	r2, [r3, #32]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	401a      	ands	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a1a      	ldr	r2, [r3, #32]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f003 031f 	and.w	r3, r3, #31
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	fa01 f303 	lsl.w	r3, r1, r3
 8003f24:	431a      	orrs	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	621a      	str	r2, [r3, #32]
}
 8003f2a:	bf00      	nop
 8003f2c:	371c      	adds	r7, #28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
	...

08003f38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e04f      	b.n	8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a21      	ldr	r2, [pc, #132]	; (8003ffc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d108      	bne.n	8003f8c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a14      	ldr	r2, [pc, #80]	; (8003ffc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d009      	beq.n	8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb8:	d004      	beq.n	8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a10      	ldr	r2, [pc, #64]	; (8004000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d10c      	bne.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	40012c00 	.word	0x40012c00
 8004000:	40014000 	.word	0x40014000

08004004 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800401c:	2302      	movs	r3, #2
 800401e:	e060      	b.n	80040e2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	4313      	orrs	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4313      	orrs	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	4313      	orrs	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	041b      	lsls	r3, r3, #16
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a14      	ldr	r2, [pc, #80]	; (80040f0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d115      	bne.n	80040d0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	051b      	lsls	r3, r3, #20
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40012c00 	.word	0x40012c00

080040f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e040      	b.n	8004188 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800410a:	2b00      	cmp	r3, #0
 800410c:	d106      	bne.n	800411c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7fc fd64 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2224      	movs	r2, #36	; 0x24
 8004120:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0201 	bic.w	r2, r2, #1
 8004130:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f82c 	bl	8004190 <UART_SetConfig>
 8004138:	4603      	mov	r3, r0
 800413a:	2b01      	cmp	r3, #1
 800413c:	d101      	bne.n	8004142 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e022      	b.n	8004188 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fa2e 	bl	80045ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800415e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800416e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0201 	orr.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 fab5 	bl	80046f0 <UART_CheckIdleState>
 8004186:	4603      	mov	r3, r0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004190:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004194:	b088      	sub	sp, #32
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	431a      	orrs	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	4bb0      	ldr	r3, [pc, #704]	; (8004480 <UART_SetConfig+0x2f0>)
 80041be:	4013      	ands	r3, r2
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6812      	ldr	r2, [r2, #0]
 80041c4:	69f9      	ldr	r1, [r7, #28]
 80041c6:	430b      	orrs	r3, r1
 80041c8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4aa6      	ldr	r2, [pc, #664]	; (8004484 <UART_SetConfig+0x2f4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d004      	beq.n	80041fa <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	69fa      	ldr	r2, [r7, #28]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	69fa      	ldr	r2, [r7, #28]
 800420a:	430a      	orrs	r2, r1
 800420c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a9d      	ldr	r2, [pc, #628]	; (8004488 <UART_SetConfig+0x2f8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d121      	bne.n	800425c <UART_SetConfig+0xcc>
 8004218:	4b9c      	ldr	r3, [pc, #624]	; (800448c <UART_SetConfig+0x2fc>)
 800421a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	2b03      	cmp	r3, #3
 8004224:	d816      	bhi.n	8004254 <UART_SetConfig+0xc4>
 8004226:	a201      	add	r2, pc, #4	; (adr r2, 800422c <UART_SetConfig+0x9c>)
 8004228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422c:	0800423d 	.word	0x0800423d
 8004230:	08004249 	.word	0x08004249
 8004234:	08004243 	.word	0x08004243
 8004238:	0800424f 	.word	0x0800424f
 800423c:	2301      	movs	r3, #1
 800423e:	76fb      	strb	r3, [r7, #27]
 8004240:	e072      	b.n	8004328 <UART_SetConfig+0x198>
 8004242:	2302      	movs	r3, #2
 8004244:	76fb      	strb	r3, [r7, #27]
 8004246:	e06f      	b.n	8004328 <UART_SetConfig+0x198>
 8004248:	2304      	movs	r3, #4
 800424a:	76fb      	strb	r3, [r7, #27]
 800424c:	e06c      	b.n	8004328 <UART_SetConfig+0x198>
 800424e:	2308      	movs	r3, #8
 8004250:	76fb      	strb	r3, [r7, #27]
 8004252:	e069      	b.n	8004328 <UART_SetConfig+0x198>
 8004254:	2310      	movs	r3, #16
 8004256:	76fb      	strb	r3, [r7, #27]
 8004258:	bf00      	nop
 800425a:	e065      	b.n	8004328 <UART_SetConfig+0x198>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a8b      	ldr	r2, [pc, #556]	; (8004490 <UART_SetConfig+0x300>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d134      	bne.n	80042d0 <UART_SetConfig+0x140>
 8004266:	4b89      	ldr	r3, [pc, #548]	; (800448c <UART_SetConfig+0x2fc>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426c:	f003 030c 	and.w	r3, r3, #12
 8004270:	2b0c      	cmp	r3, #12
 8004272:	d829      	bhi.n	80042c8 <UART_SetConfig+0x138>
 8004274:	a201      	add	r2, pc, #4	; (adr r2, 800427c <UART_SetConfig+0xec>)
 8004276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427a:	bf00      	nop
 800427c:	080042b1 	.word	0x080042b1
 8004280:	080042c9 	.word	0x080042c9
 8004284:	080042c9 	.word	0x080042c9
 8004288:	080042c9 	.word	0x080042c9
 800428c:	080042bd 	.word	0x080042bd
 8004290:	080042c9 	.word	0x080042c9
 8004294:	080042c9 	.word	0x080042c9
 8004298:	080042c9 	.word	0x080042c9
 800429c:	080042b7 	.word	0x080042b7
 80042a0:	080042c9 	.word	0x080042c9
 80042a4:	080042c9 	.word	0x080042c9
 80042a8:	080042c9 	.word	0x080042c9
 80042ac:	080042c3 	.word	0x080042c3
 80042b0:	2300      	movs	r3, #0
 80042b2:	76fb      	strb	r3, [r7, #27]
 80042b4:	e038      	b.n	8004328 <UART_SetConfig+0x198>
 80042b6:	2302      	movs	r3, #2
 80042b8:	76fb      	strb	r3, [r7, #27]
 80042ba:	e035      	b.n	8004328 <UART_SetConfig+0x198>
 80042bc:	2304      	movs	r3, #4
 80042be:	76fb      	strb	r3, [r7, #27]
 80042c0:	e032      	b.n	8004328 <UART_SetConfig+0x198>
 80042c2:	2308      	movs	r3, #8
 80042c4:	76fb      	strb	r3, [r7, #27]
 80042c6:	e02f      	b.n	8004328 <UART_SetConfig+0x198>
 80042c8:	2310      	movs	r3, #16
 80042ca:	76fb      	strb	r3, [r7, #27]
 80042cc:	bf00      	nop
 80042ce:	e02b      	b.n	8004328 <UART_SetConfig+0x198>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a6b      	ldr	r2, [pc, #428]	; (8004484 <UART_SetConfig+0x2f4>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d124      	bne.n	8004324 <UART_SetConfig+0x194>
 80042da:	4b6c      	ldr	r3, [pc, #432]	; (800448c <UART_SetConfig+0x2fc>)
 80042dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e8:	d012      	beq.n	8004310 <UART_SetConfig+0x180>
 80042ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ee:	d802      	bhi.n	80042f6 <UART_SetConfig+0x166>
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d007      	beq.n	8004304 <UART_SetConfig+0x174>
 80042f4:	e012      	b.n	800431c <UART_SetConfig+0x18c>
 80042f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042fa:	d006      	beq.n	800430a <UART_SetConfig+0x17a>
 80042fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004300:	d009      	beq.n	8004316 <UART_SetConfig+0x186>
 8004302:	e00b      	b.n	800431c <UART_SetConfig+0x18c>
 8004304:	2300      	movs	r3, #0
 8004306:	76fb      	strb	r3, [r7, #27]
 8004308:	e00e      	b.n	8004328 <UART_SetConfig+0x198>
 800430a:	2302      	movs	r3, #2
 800430c:	76fb      	strb	r3, [r7, #27]
 800430e:	e00b      	b.n	8004328 <UART_SetConfig+0x198>
 8004310:	2304      	movs	r3, #4
 8004312:	76fb      	strb	r3, [r7, #27]
 8004314:	e008      	b.n	8004328 <UART_SetConfig+0x198>
 8004316:	2308      	movs	r3, #8
 8004318:	76fb      	strb	r3, [r7, #27]
 800431a:	e005      	b.n	8004328 <UART_SetConfig+0x198>
 800431c:	2310      	movs	r3, #16
 800431e:	76fb      	strb	r3, [r7, #27]
 8004320:	bf00      	nop
 8004322:	e001      	b.n	8004328 <UART_SetConfig+0x198>
 8004324:	2310      	movs	r3, #16
 8004326:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a55      	ldr	r2, [pc, #340]	; (8004484 <UART_SetConfig+0x2f4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d174      	bne.n	800441c <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004332:	7efb      	ldrb	r3, [r7, #27]
 8004334:	2b08      	cmp	r3, #8
 8004336:	d824      	bhi.n	8004382 <UART_SetConfig+0x1f2>
 8004338:	a201      	add	r2, pc, #4	; (adr r2, 8004340 <UART_SetConfig+0x1b0>)
 800433a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433e:	bf00      	nop
 8004340:	08004365 	.word	0x08004365
 8004344:	08004383 	.word	0x08004383
 8004348:	0800436d 	.word	0x0800436d
 800434c:	08004383 	.word	0x08004383
 8004350:	08004373 	.word	0x08004373
 8004354:	08004383 	.word	0x08004383
 8004358:	08004383 	.word	0x08004383
 800435c:	08004383 	.word	0x08004383
 8004360:	0800437b 	.word	0x0800437b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004364:	f7fe fb60 	bl	8002a28 <HAL_RCC_GetPCLK1Freq>
 8004368:	6178      	str	r0, [r7, #20]
        break;
 800436a:	e00f      	b.n	800438c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800436c:	4b49      	ldr	r3, [pc, #292]	; (8004494 <UART_SetConfig+0x304>)
 800436e:	617b      	str	r3, [r7, #20]
        break;
 8004370:	e00c      	b.n	800438c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004372:	f7fe fac3 	bl	80028fc <HAL_RCC_GetSysClockFreq>
 8004376:	6178      	str	r0, [r7, #20]
        break;
 8004378:	e008      	b.n	800438c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800437a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800437e:	617b      	str	r3, [r7, #20]
        break;
 8004380:	e004      	b.n	800438c <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8004382:	2300      	movs	r3, #0
 8004384:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	76bb      	strb	r3, [r7, #26]
        break;
 800438a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 80fe 	beq.w	8004590 <UART_SetConfig+0x400>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	4613      	mov	r3, r2
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	4413      	add	r3, r2
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d305      	bcc.n	80043b0 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d902      	bls.n	80043b6 <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	76bb      	strb	r3, [r7, #26]
 80043b4:	e0ec      	b.n	8004590 <UART_SetConfig+0x400>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	4619      	mov	r1, r3
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	f04f 0300 	mov.w	r3, #0
 80043c2:	f04f 0400 	mov.w	r4, #0
 80043c6:	0214      	lsls	r4, r2, #8
 80043c8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80043cc:	020b      	lsls	r3, r1, #8
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6852      	ldr	r2, [r2, #4]
 80043d2:	0852      	lsrs	r2, r2, #1
 80043d4:	4611      	mov	r1, r2
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	eb13 0b01 	adds.w	fp, r3, r1
 80043de:	eb44 0c02 	adc.w	ip, r4, r2
 80043e2:	4658      	mov	r0, fp
 80043e4:	4661      	mov	r1, ip
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f04f 0400 	mov.w	r4, #0
 80043ee:	461a      	mov	r2, r3
 80043f0:	4623      	mov	r3, r4
 80043f2:	f7fb feeb 	bl	80001cc <__aeabi_uldivmod>
 80043f6:	4603      	mov	r3, r0
 80043f8:	460c      	mov	r4, r1
 80043fa:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004402:	d308      	bcc.n	8004416 <UART_SetConfig+0x286>
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800440a:	d204      	bcs.n	8004416 <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	60da      	str	r2, [r3, #12]
 8004414:	e0bc      	b.n	8004590 <UART_SetConfig+0x400>
        }
        else
        {
          ret = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	76bb      	strb	r3, [r7, #26]
 800441a:	e0b9      	b.n	8004590 <UART_SetConfig+0x400>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004424:	d168      	bne.n	80044f8 <UART_SetConfig+0x368>
  {
    switch (clocksource)
 8004426:	7efb      	ldrb	r3, [r7, #27]
 8004428:	2b08      	cmp	r3, #8
 800442a:	d835      	bhi.n	8004498 <UART_SetConfig+0x308>
 800442c:	a201      	add	r2, pc, #4	; (adr r2, 8004434 <UART_SetConfig+0x2a4>)
 800442e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004432:	bf00      	nop
 8004434:	08004459 	.word	0x08004459
 8004438:	08004461 	.word	0x08004461
 800443c:	08004469 	.word	0x08004469
 8004440:	08004499 	.word	0x08004499
 8004444:	0800446f 	.word	0x0800446f
 8004448:	08004499 	.word	0x08004499
 800444c:	08004499 	.word	0x08004499
 8004450:	08004499 	.word	0x08004499
 8004454:	08004477 	.word	0x08004477
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004458:	f7fe fae6 	bl	8002a28 <HAL_RCC_GetPCLK1Freq>
 800445c:	6178      	str	r0, [r7, #20]
        break;
 800445e:	e020      	b.n	80044a2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004460:	f7fe faf8 	bl	8002a54 <HAL_RCC_GetPCLK2Freq>
 8004464:	6178      	str	r0, [r7, #20]
        break;
 8004466:	e01c      	b.n	80044a2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004468:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <UART_SetConfig+0x304>)
 800446a:	617b      	str	r3, [r7, #20]
        break;
 800446c:	e019      	b.n	80044a2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800446e:	f7fe fa45 	bl	80028fc <HAL_RCC_GetSysClockFreq>
 8004472:	6178      	str	r0, [r7, #20]
        break;
 8004474:	e015      	b.n	80044a2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800447a:	617b      	str	r3, [r7, #20]
        break;
 800447c:	e011      	b.n	80044a2 <UART_SetConfig+0x312>
 800447e:	bf00      	nop
 8004480:	efff69f3 	.word	0xefff69f3
 8004484:	40008000 	.word	0x40008000
 8004488:	40013800 	.word	0x40013800
 800448c:	40021000 	.word	0x40021000
 8004490:	40004400 	.word	0x40004400
 8004494:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	76bb      	strb	r3, [r7, #26]
        break;
 80044a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d073      	beq.n	8004590 <UART_SetConfig+0x400>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	005a      	lsls	r2, r3, #1
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	085b      	lsrs	r3, r3, #1
 80044b2:	441a      	add	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044bc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2b0f      	cmp	r3, #15
 80044c2:	d916      	bls.n	80044f2 <UART_SetConfig+0x362>
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ca:	d212      	bcs.n	80044f2 <UART_SetConfig+0x362>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	f023 030f 	bic.w	r3, r3, #15
 80044d4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	085b      	lsrs	r3, r3, #1
 80044da:	b29b      	uxth	r3, r3
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	89fb      	ldrh	r3, [r7, #14]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	89fa      	ldrh	r2, [r7, #14]
 80044ee:	60da      	str	r2, [r3, #12]
 80044f0:	e04e      	b.n	8004590 <UART_SetConfig+0x400>
      }
      else
      {
        ret = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	76bb      	strb	r3, [r7, #26]
 80044f6:	e04b      	b.n	8004590 <UART_SetConfig+0x400>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044f8:	7efb      	ldrb	r3, [r7, #27]
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d827      	bhi.n	800454e <UART_SetConfig+0x3be>
 80044fe:	a201      	add	r2, pc, #4	; (adr r2, 8004504 <UART_SetConfig+0x374>)
 8004500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004504:	08004529 	.word	0x08004529
 8004508:	08004531 	.word	0x08004531
 800450c:	08004539 	.word	0x08004539
 8004510:	0800454f 	.word	0x0800454f
 8004514:	0800453f 	.word	0x0800453f
 8004518:	0800454f 	.word	0x0800454f
 800451c:	0800454f 	.word	0x0800454f
 8004520:	0800454f 	.word	0x0800454f
 8004524:	08004547 	.word	0x08004547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004528:	f7fe fa7e 	bl	8002a28 <HAL_RCC_GetPCLK1Freq>
 800452c:	6178      	str	r0, [r7, #20]
        break;
 800452e:	e013      	b.n	8004558 <UART_SetConfig+0x3c8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004530:	f7fe fa90 	bl	8002a54 <HAL_RCC_GetPCLK2Freq>
 8004534:	6178      	str	r0, [r7, #20]
        break;
 8004536:	e00f      	b.n	8004558 <UART_SetConfig+0x3c8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004538:	4b1b      	ldr	r3, [pc, #108]	; (80045a8 <UART_SetConfig+0x418>)
 800453a:	617b      	str	r3, [r7, #20]
        break;
 800453c:	e00c      	b.n	8004558 <UART_SetConfig+0x3c8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800453e:	f7fe f9dd 	bl	80028fc <HAL_RCC_GetSysClockFreq>
 8004542:	6178      	str	r0, [r7, #20]
        break;
 8004544:	e008      	b.n	8004558 <UART_SetConfig+0x3c8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800454a:	617b      	str	r3, [r7, #20]
        break;
 800454c:	e004      	b.n	8004558 <UART_SetConfig+0x3c8>
      default:
        pclk = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	76bb      	strb	r3, [r7, #26]
        break;
 8004556:	bf00      	nop
    }

    if (pclk != 0U)
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d018      	beq.n	8004590 <UART_SetConfig+0x400>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	085a      	lsrs	r2, r3, #1
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	441a      	add	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004570:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	2b0f      	cmp	r3, #15
 8004576:	d909      	bls.n	800458c <UART_SetConfig+0x3fc>
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800457e:	d205      	bcs.n	800458c <UART_SetConfig+0x3fc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	b29a      	uxth	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	60da      	str	r2, [r3, #12]
 800458a:	e001      	b.n	8004590 <UART_SetConfig+0x400>
      }
      else
      {
        ret = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800459c:	7ebb      	ldrb	r3, [r7, #26]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3720      	adds	r7, #32
 80045a2:	46bd      	mov	sp, r7
 80045a4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80045a8:	00f42400 	.word	0x00f42400

080045ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	f003 0310 	and.w	r3, r3, #16
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d01a      	beq.n	80046c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046aa:	d10a      	bne.n	80046c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	605a      	str	r2, [r3, #4]
  }
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004700:	f7fc fb6c 	bl	8000ddc <HAL_GetTick>
 8004704:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b08      	cmp	r3, #8
 8004712:	d10e      	bne.n	8004732 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004714:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f82d 	bl	8004782 <UART_WaitOnFlagUntilTimeout>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e023      	b.n	800477a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b04      	cmp	r3, #4
 800473e:	d10e      	bne.n	800475e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004740:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f817 	bl	8004782 <UART_WaitOnFlagUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e00d      	b.n	800477a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2220      	movs	r2, #32
 8004762:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2220      	movs	r2, #32
 8004768:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b09c      	sub	sp, #112	; 0x70
 8004786:	af00      	add	r7, sp, #0
 8004788:	60f8      	str	r0, [r7, #12]
 800478a:	60b9      	str	r1, [r7, #8]
 800478c:	603b      	str	r3, [r7, #0]
 800478e:	4613      	mov	r3, r2
 8004790:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004792:	e0a5      	b.n	80048e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479a:	f000 80a1 	beq.w	80048e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800479e:	f7fc fb1d 	bl	8000ddc <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d302      	bcc.n	80047b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80047ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d13e      	bne.n	8004832 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047bc:	e853 3f00 	ldrex	r3, [r3]
 80047c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047c8:	667b      	str	r3, [r7, #100]	; 0x64
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80047d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047da:	e841 2300 	strex	r3, r2, [r1]
 80047de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80047e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1e6      	bne.n	80047b4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3308      	adds	r3, #8
 80047ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f0:	e853 3f00 	ldrex	r3, [r3]
 80047f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f8:	f023 0301 	bic.w	r3, r3, #1
 80047fc:	663b      	str	r3, [r7, #96]	; 0x60
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3308      	adds	r3, #8
 8004804:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004806:	64ba      	str	r2, [r7, #72]	; 0x48
 8004808:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800480c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800480e:	e841 2300 	strex	r3, r2, [r1]
 8004812:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1e5      	bne.n	80047e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2220      	movs	r2, #32
 800481e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2220      	movs	r2, #32
 8004824:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e067      	b.n	8004902 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b00      	cmp	r3, #0
 800483e:	d04f      	beq.n	80048e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800484a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800484e:	d147      	bne.n	80048e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004858:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004862:	e853 3f00 	ldrex	r3, [r3]
 8004866:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800486e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	461a      	mov	r2, r3
 8004876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004878:	637b      	str	r3, [r7, #52]	; 0x34
 800487a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800487e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004880:	e841 2300 	strex	r3, r2, [r1]
 8004884:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1e6      	bne.n	800485a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	3308      	adds	r3, #8
 8004892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	e853 3f00 	ldrex	r3, [r3]
 800489a:	613b      	str	r3, [r7, #16]
   return(result);
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f023 0301 	bic.w	r3, r3, #1
 80048a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3308      	adds	r3, #8
 80048aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048ac:	623a      	str	r2, [r7, #32]
 80048ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b0:	69f9      	ldr	r1, [r7, #28]
 80048b2:	6a3a      	ldr	r2, [r7, #32]
 80048b4:	e841 2300 	strex	r3, r2, [r1]
 80048b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e5      	bne.n	800488c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2220      	movs	r2, #32
 80048c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2220      	movs	r2, #32
 80048ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e010      	b.n	8004902 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	69da      	ldr	r2, [r3, #28]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	4013      	ands	r3, r2
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	bf0c      	ite	eq
 80048f0:	2301      	moveq	r3, #1
 80048f2:	2300      	movne	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	461a      	mov	r2, r3
 80048f8:	79fb      	ldrb	r3, [r7, #7]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	f43f af4a 	beq.w	8004794 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3770      	adds	r7, #112	; 0x70
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
	...

0800490c <__libc_init_array>:
 800490c:	b570      	push	{r4, r5, r6, lr}
 800490e:	4e0d      	ldr	r6, [pc, #52]	; (8004944 <__libc_init_array+0x38>)
 8004910:	4c0d      	ldr	r4, [pc, #52]	; (8004948 <__libc_init_array+0x3c>)
 8004912:	1ba4      	subs	r4, r4, r6
 8004914:	10a4      	asrs	r4, r4, #2
 8004916:	2500      	movs	r5, #0
 8004918:	42a5      	cmp	r5, r4
 800491a:	d109      	bne.n	8004930 <__libc_init_array+0x24>
 800491c:	4e0b      	ldr	r6, [pc, #44]	; (800494c <__libc_init_array+0x40>)
 800491e:	4c0c      	ldr	r4, [pc, #48]	; (8004950 <__libc_init_array+0x44>)
 8004920:	f000 f820 	bl	8004964 <_init>
 8004924:	1ba4      	subs	r4, r4, r6
 8004926:	10a4      	asrs	r4, r4, #2
 8004928:	2500      	movs	r5, #0
 800492a:	42a5      	cmp	r5, r4
 800492c:	d105      	bne.n	800493a <__libc_init_array+0x2e>
 800492e:	bd70      	pop	{r4, r5, r6, pc}
 8004930:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004934:	4798      	blx	r3
 8004936:	3501      	adds	r5, #1
 8004938:	e7ee      	b.n	8004918 <__libc_init_array+0xc>
 800493a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800493e:	4798      	blx	r3
 8004940:	3501      	adds	r5, #1
 8004942:	e7f2      	b.n	800492a <__libc_init_array+0x1e>
 8004944:	080049cc 	.word	0x080049cc
 8004948:	080049cc 	.word	0x080049cc
 800494c:	080049cc 	.word	0x080049cc
 8004950:	080049d0 	.word	0x080049d0

08004954 <memset>:
 8004954:	4402      	add	r2, r0
 8004956:	4603      	mov	r3, r0
 8004958:	4293      	cmp	r3, r2
 800495a:	d100      	bne.n	800495e <memset+0xa>
 800495c:	4770      	bx	lr
 800495e:	f803 1b01 	strb.w	r1, [r3], #1
 8004962:	e7f9      	b.n	8004958 <memset+0x4>

08004964 <_init>:
 8004964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004966:	bf00      	nop
 8004968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800496a:	bc08      	pop	{r3}
 800496c:	469e      	mov	lr, r3
 800496e:	4770      	bx	lr

08004970 <_fini>:
 8004970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004972:	bf00      	nop
 8004974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004976:	bc08      	pop	{r3}
 8004978:	469e      	mov	lr, r3
 800497a:	4770      	bx	lr
