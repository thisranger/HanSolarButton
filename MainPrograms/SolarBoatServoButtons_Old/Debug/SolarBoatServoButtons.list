
SolarBoatServoButtons.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004d7c  08004d7c  00014d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e08  08004e08  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004e08  08004e08  00014e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e10  08004e10  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e10  08004e10  00014e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e14  08004e14  00014e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000070  08004e88  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08004e88  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154d8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002612  00000000  00000000  00035578  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001098  00000000  00000000  00037b90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f80  00000000  00000000  00038c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020ebc  00000000  00000000  00039ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e940  00000000  00000000  0005aa64  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca308  00000000  00000000  000693a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001336ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047e4  00000000  00000000  00133728  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d64 	.word	0x08004d64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004d64 	.word	0x08004d64

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000574:	4b1b      	ldr	r3, [pc, #108]	; (80005e4 <MX_CAN1_Init+0x74>)
 8000576:	4a1c      	ldr	r2, [pc, #112]	; (80005e8 <MX_CAN1_Init+0x78>)
 8000578:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 800057a:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <MX_CAN1_Init+0x74>)
 800057c:	2208      	movs	r2, #8
 800057e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000580:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <MX_CAN1_Init+0x74>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000586:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <MX_CAN1_Init+0x74>)
 8000588:	2200      	movs	r2, #0
 800058a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 800058c:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <MX_CAN1_Init+0x74>)
 800058e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000592:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000594:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <MX_CAN1_Init+0x74>)
 8000596:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 800059a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <MX_CAN1_Init+0x74>)
 800059e:	2200      	movs	r2, #0
 80005a0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005a2:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <MX_CAN1_Init+0x74>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005a8:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <MX_CAN1_Init+0x74>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005ae:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <MX_CAN1_Init+0x74>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005b4:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <MX_CAN1_Init+0x74>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <MX_CAN1_Init+0x74>)
 80005bc:	2200      	movs	r2, #0
 80005be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005c0:	4808      	ldr	r0, [pc, #32]	; (80005e4 <MX_CAN1_Init+0x74>)
 80005c2:	f000 fd09 	bl	8000fd8 <HAL_CAN_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005cc:	f000 fa42 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80005d0:	4804      	ldr	r0, [pc, #16]	; (80005e4 <MX_CAN1_Init+0x74>)
 80005d2:	f000 fdfc 	bl	80011ce <HAL_CAN_Start>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_CAN1_Init+0x70>
  	    Error_Handler();
 80005dc:	f000 fa3a 	bl	8000a54 <Error_Handler>
  	}

  /* USER CODE END CAN1_Init 2 */

}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	200000a8 	.word	0x200000a8
 80005e8:	40006400 	.word	0x40006400

080005ec <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a18      	ldr	r2, [pc, #96]	; (800066c <HAL_CAN_MspInit+0x80>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d129      	bne.n	8000662 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800060e:	4b18      	ldr	r3, [pc, #96]	; (8000670 <HAL_CAN_MspInit+0x84>)
 8000610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000612:	4a17      	ldr	r2, [pc, #92]	; (8000670 <HAL_CAN_MspInit+0x84>)
 8000614:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000618:	6593      	str	r3, [r2, #88]	; 0x58
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <HAL_CAN_MspInit+0x84>)
 800061c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800061e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b12      	ldr	r3, [pc, #72]	; (8000670 <HAL_CAN_MspInit+0x84>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	4a11      	ldr	r2, [pc, #68]	; (8000670 <HAL_CAN_MspInit+0x84>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <HAL_CAN_MspInit+0x84>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800063e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000644:	2302      	movs	r3, #2
 8000646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800064c:	2303      	movs	r3, #3
 800064e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000650:	2309      	movs	r3, #9
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065e:	f000 ffe9 	bl	8001634 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000662:	bf00      	nop
 8000664:	3728      	adds	r7, #40	; 0x28
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40006400 	.word	0x40006400
 8000670:	40021000 	.word	0x40021000

08000674 <CAN_TX_filter_init>:
}

/* USER CODE BEGIN 1 */

void CAN_TX_filter_init(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
	TxHeader.StdId = 0x360;
 8000678:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <CAN_TX_filter_init+0x34>)
 800067a:	f44f 7258 	mov.w	r2, #864	; 0x360
 800067e:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <CAN_TX_filter_init+0x34>)
 8000682:	2200      	movs	r2, #0
 8000684:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <CAN_TX_filter_init+0x34>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <CAN_TX_filter_init+0x34>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 8;
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <CAN_TX_filter_init+0x34>)
 8000694:	2208      	movs	r2, #8
 8000696:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <CAN_TX_filter_init+0x34>)
 800069a:	2200      	movs	r2, #0
 800069c:	751a      	strb	r2, [r3, #20]
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	200000d0 	.word	0x200000d0

080006ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	4b2d      	ldr	r3, [pc, #180]	; (8000778 <MX_GPIO_Init+0xcc>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	4a2c      	ldr	r2, [pc, #176]	; (8000778 <MX_GPIO_Init+0xcc>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ce:	4b2a      	ldr	r3, [pc, #168]	; (8000778 <MX_GPIO_Init+0xcc>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	4b27      	ldr	r3, [pc, #156]	; (8000778 <MX_GPIO_Init+0xcc>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	4a26      	ldr	r2, [pc, #152]	; (8000778 <MX_GPIO_Init+0xcc>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e6:	4b24      	ldr	r3, [pc, #144]	; (8000778 <MX_GPIO_Init+0xcc>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	4b21      	ldr	r3, [pc, #132]	; (8000778 <MX_GPIO_Init+0xcc>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	4a20      	ldr	r2, [pc, #128]	; (8000778 <MX_GPIO_Init+0xcc>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fe:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <MX_GPIO_Init+0xcc>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	2108      	movs	r1, #8
 800070e:	481b      	ldr	r0, [pc, #108]	; (800077c <MX_GPIO_Init+0xd0>)
 8000710:	f001 f8fa 	bl	8001908 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000714:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800071a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800071e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	4619      	mov	r1, r3
 800072a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072e:	f000 ff81 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000732:	2308      	movs	r3, #8
 8000734:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	4619      	mov	r1, r3
 8000748:	480c      	ldr	r0, [pc, #48]	; (800077c <MX_GPIO_Init+0xd0>)
 800074a:	f000 ff73 	bl	8001634 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2100      	movs	r1, #0
 8000752:	2017      	movs	r0, #23
 8000754:	f000 ff37 	bl	80015c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000758:	2017      	movs	r0, #23
 800075a:	f000 ff50 	bl	80015fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	2028      	movs	r0, #40	; 0x28
 8000764:	f000 ff2f 	bl	80015c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000768:	2028      	movs	r0, #40	; 0x28
 800076a:	f000 ff48 	bl	80015fe <HAL_NVIC_EnableIRQ>

}
 800076e:	bf00      	nop
 8000770:	3720      	adds	r7, #32
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40021000 	.word	0x40021000
 800077c:	48000400 	.word	0x48000400

08000780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	db0a      	blt.n	80007aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	490c      	ldr	r1, [pc, #48]	; (80007cc <__NVIC_SetPriority+0x4c>)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	0112      	lsls	r2, r2, #4
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	440b      	add	r3, r1
 80007a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a8:	e00a      	b.n	80007c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4908      	ldr	r1, [pc, #32]	; (80007d0 <__NVIC_SetPriority+0x50>)
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	f003 030f 	and.w	r3, r3, #15
 80007b6:	3b04      	subs	r3, #4
 80007b8:	0112      	lsls	r2, r2, #4
 80007ba:	b2d2      	uxtb	r2, r2
 80007bc:	440b      	add	r3, r1
 80007be:	761a      	strb	r2, [r3, #24]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	e000e100 	.word	0xe000e100
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3b01      	subs	r3, #1
 80007e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007e4:	d301      	bcc.n	80007ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007e6:	2301      	movs	r3, #1
 80007e8:	e00f      	b.n	800080a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ea:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <SysTick_Config+0x40>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007f2:	210f      	movs	r1, #15
 80007f4:	f04f 30ff 	mov.w	r0, #4294967295
 80007f8:	f7ff ffc2 	bl	8000780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <SysTick_Config+0x40>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000802:	4b04      	ldr	r3, [pc, #16]	; (8000814 <SysTick_Config+0x40>)
 8000804:	2207      	movs	r2, #7
 8000806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	e000e010 	.word	0xe000e010

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081c:	f000 fb67 	bl	8000eee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000820:	f000 f82a 	bl	8000878 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */


  SysTick_Config(SystemCoreClock / 1000);
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <main+0x4c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a0f      	ldr	r2, [pc, #60]	; (8000868 <main+0x50>)
 800082a:	fba2 2303 	umull	r2, r3, r2, r3
 800082e:	099b      	lsrs	r3, r3, #6
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ffcf 	bl	80007d4 <SysTick_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f7ff ff39 	bl	80006ac <MX_GPIO_Init>
  MX_CAN1_Init();
 800083a:	f7ff fe99 	bl	8000570 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 800083e:	f000 fa93 	bl	8000d68 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000842:	f000 f9c3 	bl	8000bcc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  CAN_TX_filter_init();
 8000846:	f7ff ff15 	bl	8000674 <CAN_TX_filter_init>
  counter = 0;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <main+0x54>)
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
  state = 8;
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <main+0x58>)
 8000852:	2208      	movs	r2, #8
 8000854:	601a      	str	r2, [r3, #0]
  SendState();
 8000856:	f000 f871 	bl	800093c <SendState>

  HAL_TIM_Base_Start_IT(&htim2);
 800085a:	4806      	ldr	r0, [pc, #24]	; (8000874 <main+0x5c>)
 800085c:	f002 fa76 	bl	8002d4c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000860:	e7fe      	b.n	8000860 <main+0x48>
 8000862:	bf00      	nop
 8000864:	20000000 	.word	0x20000000
 8000868:	10624dd3 	.word	0x10624dd3
 800086c:	20000098 	.word	0x20000098
 8000870:	200000ec 	.word	0x200000ec
 8000874:	20000124 	.word	0x20000124

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b096      	sub	sp, #88	; 0x58
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	2244      	movs	r2, #68	; 0x44
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f003 fe5e 	bl	8004548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	463b      	mov	r3, r7
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800089a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800089e:	f001 f881 	bl	80019a4 <HAL_PWREx_ControlVoltageScaling>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008a8:	f000 f8d4 	bl	8000a54 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008ac:	f001 f85c 	bl	8001968 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008b0:	4b21      	ldr	r3, [pc, #132]	; (8000938 <SystemClock_Config+0xc0>)
 80008b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008b6:	4a20      	ldr	r2, [pc, #128]	; (8000938 <SystemClock_Config+0xc0>)
 80008b8:	f023 0318 	bic.w	r3, r3, #24
 80008bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80008c0:	2314      	movs	r3, #20
 80008c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008c4:	2301      	movs	r3, #1
 80008c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008c8:	2301      	movs	r3, #1
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008d0:	2360      	movs	r3, #96	; 0x60
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d4:	2302      	movs	r3, #2
 80008d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008d8:	2301      	movs	r3, #1
 80008da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008dc:	2301      	movs	r3, #1
 80008de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80008e0:	2310      	movs	r3, #16
 80008e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008e4:	2307      	movs	r3, #7
 80008e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008e8:	2302      	movs	r3, #2
 80008ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4618      	mov	r0, r3
 80008f6:	f001 f8ab 	bl	8001a50 <HAL_RCC_OscConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000900:	f000 f8a8 	bl	8000a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000904:	230f      	movs	r3, #15
 8000906:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000908:	2303      	movs	r3, #3
 800090a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	2101      	movs	r1, #1
 800091c:	4618      	mov	r0, r3
 800091e:	f001 fca9 	bl	8002274 <HAL_RCC_ClockConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000928:	f000 f894 	bl	8000a54 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800092c:	f002 f8b6 	bl	8002a9c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000930:	bf00      	nop
 8000932:	3758      	adds	r7, #88	; 0x58
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40021000 	.word	0x40021000

0800093c <SendState>:

/* USER CODE BEGIN 4 */
void SendState(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
	TxData[0] = (state & 0xFF00) >> 8;
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <SendState+0x68>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	121b      	asrs	r3, r3, #8
 8000948:	b2da      	uxtb	r2, r3
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <SendState+0x6c>)
 800094c:	701a      	strb	r2, [r3, #0]
	TxData[1] = state & 0x00FF;
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <SendState+0x68>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	b2da      	uxtb	r2, r3
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <SendState+0x6c>)
 8000956:	705a      	strb	r2, [r3, #1]
	TxData[2] = 0;
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <SendState+0x6c>)
 800095a:	2200      	movs	r2, #0
 800095c:	709a      	strb	r2, [r3, #2]
	TxData[3] = 0;
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <SendState+0x6c>)
 8000960:	2200      	movs	r2, #0
 8000962:	70da      	strb	r2, [r3, #3]
	TxData[4] = 0;
 8000964:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <SendState+0x6c>)
 8000966:	2200      	movs	r2, #0
 8000968:	711a      	strb	r2, [r3, #4]
	TxData[5] = 0;
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <SendState+0x6c>)
 800096c:	2200      	movs	r2, #0
 800096e:	715a      	strb	r2, [r3, #5]
	TxData[6] = 0;
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <SendState+0x6c>)
 8000972:	2200      	movs	r2, #0
 8000974:	719a      	strb	r2, [r3, #6]
	TxData[7] = 0;
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <SendState+0x6c>)
 8000978:	2200      	movs	r2, #0
 800097a:	71da      	strb	r2, [r3, #7]

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, (uint8_t*)TxData, &TxMailbox) != HAL_OK)
 800097c:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <SendState+0x70>)
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <SendState+0x6c>)
 8000980:	490b      	ldr	r1, [pc, #44]	; (80009b0 <SendState+0x74>)
 8000982:	480c      	ldr	r0, [pc, #48]	; (80009b4 <SendState+0x78>)
 8000984:	f000 fc67 	bl	8001256 <HAL_CAN_AddTxMessage>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d005      	beq.n	800099a <SendState+0x5e>
	{
	  uint32_t error = HAL_CAN_GetError(&hcan1);
 800098e:	4809      	ldr	r0, [pc, #36]	; (80009b4 <SendState+0x78>)
 8000990:	f000 fd31 	bl	80013f6 <HAL_CAN_GetError>
 8000994:	6078      	str	r0, [r7, #4]
	  Error_Handler ();
 8000996:	f000 f85d 	bl	8000a54 <Error_Handler>
	}
    }
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200000ec 	.word	0x200000ec
 80009a8:	2000009c 	.word	0x2000009c
 80009ac:	200000a4 	.word	0x200000a4
 80009b0:	200000d0 	.word	0x200000d0
 80009b4:	200000a8 	.word	0x200000a8

080009b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	SendState();
 80009c0:	f7ff ffbc 	bl	800093c <SendState>
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_9)
 80009d6:	88fb      	ldrh	r3, [r7, #6]
 80009d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009dc:	d109      	bne.n	80009f2 <HAL_GPIO_EXTI_Callback+0x26>
	{
		if(state > minState)
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x74>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	dd14      	ble.n	8000a10 <HAL_GPIO_EXTI_Callback+0x44>
		{
			state = state - 1;
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x74>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	4a14      	ldr	r2, [pc, #80]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x74>)
 80009ee:	6013      	str	r3, [r2, #0]
 80009f0:	e00e      	b.n	8000a10 <HAL_GPIO_EXTI_Callback+0x44>
		}
	}
	else if(GPIO_Pin == GPIO_PIN_10) {
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009f8:	d109      	bne.n	8000a0e <HAL_GPIO_EXTI_Callback+0x42>
		if(state < maxState)
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x74>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b0b      	cmp	r3, #11
 8000a00:	dc06      	bgt.n	8000a10 <HAL_GPIO_EXTI_Callback+0x44>
		{
			state = state + 1;
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x74>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	3301      	adds	r3, #1
 8000a08:	4a0d      	ldr	r2, [pc, #52]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x74>)
 8000a0a:	6013      	str	r3, [r2, #0]
 8000a0c:	e000      	b.n	8000a10 <HAL_GPIO_EXTI_Callback+0x44>
		}
	} else {
		__NOP();
 8000a0e:	bf00      	nop
	}
	uart_buf_len = sprintf(uart_buf, "state : %lu\n", state);
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x74>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	490b      	ldr	r1, [pc, #44]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x78>)
 8000a18:	480b      	ldr	r0, [pc, #44]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000a1a:	f003 fd9d 	bl	8004558 <siprintf>
 8000a1e:	4602      	mov	r2, r0
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x80>)
 8000a22:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x80>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	2364      	movs	r3, #100	; 0x64
 8000a2c:	4906      	ldr	r1, [pc, #24]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000a2e:	4808      	ldr	r0, [pc, #32]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x84>)
 8000a30:	f003 f90e 	bl	8003c50 <HAL_UART_Transmit>
	SendState();
 8000a34:	f7ff ff82 	bl	800093c <SendState>
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	200000ec 	.word	0x200000ec
 8000a44:	08004d7c 	.word	0x08004d7c
 8000a48:	200000f0 	.word	0x200000f0
 8000a4c:	200000e8 	.word	0x200000e8
 8000a50:	20000170 	.word	0x20000170

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <Error_Handler+0x6>

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a66:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7e:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a84:	6593      	str	r3, [r2, #88]	; 0x58
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <NMI_Handler+0x4>

08000aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	counter++;
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <SysTick_Handler+0x18>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	3301      	adds	r3, #1
 8000af6:	4a03      	ldr	r2, [pc, #12]	; (8000b04 <SysTick_Handler+0x18>)
 8000af8:	6013      	str	r3, [r2, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afa:	f000 fa4d 	bl	8000f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000098 	.word	0x20000098

08000b08 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000b0c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b10:	f000 ff12 	bl	8001938 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b1c:	4802      	ldr	r0, [pc, #8]	; (8000b28 <TIM2_IRQHandler+0x10>)
 8000b1e:	f002 f9ca 	bl	8002eb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000124 	.word	0x20000124

08000b2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000b30:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b34:	f000 ff00 	bl	8001938 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b44:	4a14      	ldr	r2, [pc, #80]	; (8000b98 <_sbrk+0x5c>)
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <_sbrk+0x60>)
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d102      	bne.n	8000b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <_sbrk+0x64>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <_sbrk+0x68>)
 8000b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d207      	bcs.n	8000b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b6c:	f003 fcc2 	bl	80044f4 <__errno>
 8000b70:	4602      	mov	r2, r0
 8000b72:	230c      	movs	r3, #12
 8000b74:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7a:	e009      	b.n	8000b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <_sbrk+0x64>)
 8000b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20010000 	.word	0x20010000
 8000b9c:	00000400 	.word	0x00000400
 8000ba0:	2000008c 	.word	0x2000008c
 8000ba4:	20000200 	.word	0x20000200

08000ba8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <SystemInit+0x20>)
 8000bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <SystemInit+0x20>)
 8000bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08e      	sub	sp, #56	; 0x38
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bec:	463b      	mov	r3, r7
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]
 8000bfa:	615a      	str	r2, [r3, #20]
 8000bfc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bfe:	4b2d      	ldr	r3, [pc, #180]	; (8000cb4 <MX_TIM2_Init+0xe8>)
 8000c00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000 - 1;
 8000c06:	4b2b      	ldr	r3, [pc, #172]	; (8000cb4 <MX_TIM2_Init+0xe8>)
 8000c08:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000c0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0e:	4b29      	ldr	r3, [pc, #164]	; (8000cb4 <MX_TIM2_Init+0xe8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000c14:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <MX_TIM2_Init+0xe8>)
 8000c16:	2264      	movs	r2, #100	; 0x64
 8000c18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1a:	4b26      	ldr	r3, [pc, #152]	; (8000cb4 <MX_TIM2_Init+0xe8>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c20:	4b24      	ldr	r3, [pc, #144]	; (8000cb4 <MX_TIM2_Init+0xe8>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c26:	4823      	ldr	r0, [pc, #140]	; (8000cb4 <MX_TIM2_Init+0xe8>)
 8000c28:	f002 f838 	bl	8002c9c <HAL_TIM_Base_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c32:	f7ff ff0f 	bl	8000a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c40:	4619      	mov	r1, r3
 8000c42:	481c      	ldr	r0, [pc, #112]	; (8000cb4 <MX_TIM2_Init+0xe8>)
 8000c44:	f002 fad0 	bl	80031e8 <HAL_TIM_ConfigClockSource>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000c4e:	f7ff ff01 	bl	8000a54 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000c52:	4818      	ldr	r0, [pc, #96]	; (8000cb4 <MX_TIM2_Init+0xe8>)
 8000c54:	f002 f8ce 	bl	8002df4 <HAL_TIM_OC_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000c5e:	f7ff fef9 	bl	8000a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4810      	ldr	r0, [pc, #64]	; (8000cb4 <MX_TIM2_Init+0xe8>)
 8000c72:	f002 ff1b 	bl	8003aac <HAL_TIMEx_MasterConfigSynchronization>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000c7c:	f7ff feea 	bl	8000a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8000c80:	2350      	movs	r3, #80	; 0x50
 8000c82:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c90:	463b      	mov	r3, r7
 8000c92:	2200      	movs	r2, #0
 8000c94:	4619      	mov	r1, r3
 8000c96:	4807      	ldr	r0, [pc, #28]	; (8000cb4 <MX_TIM2_Init+0xe8>)
 8000c98:	f002 fa2c 	bl	80030f4 <HAL_TIM_OC_ConfigChannel>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000ca2:	f7ff fed7 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */


  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ca6:	4803      	ldr	r0, [pc, #12]	; (8000cb4 <MX_TIM2_Init+0xe8>)
 8000ca8:	f000 f82a 	bl	8000d00 <HAL_TIM_MspPostInit>

}
 8000cac:	bf00      	nop
 8000cae:	3738      	adds	r7, #56	; 0x38
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000124 	.word	0x20000124

08000cb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cc8:	d113      	bne.n	8000cf2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <HAL_TIM_Base_MspInit+0x44>)
 8000ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cce:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <HAL_TIM_Base_MspInit+0x44>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <HAL_TIM_Base_MspInit+0x44>)
 8000cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	201c      	movs	r0, #28
 8000ce8:	f000 fc6d 	bl	80015c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cec:	201c      	movs	r0, #28
 8000cee:	f000 fc86 	bl	80015fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40021000 	.word	0x40021000

08000d00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d20:	d11c      	bne.n	8000d5c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <HAL_TIM_MspPostInit+0x64>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d26:	4a0f      	ldr	r2, [pc, #60]	; (8000d64 <HAL_TIM_MspPostInit+0x64>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <HAL_TIM_MspPostInit+0x64>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d3a:	2320      	movs	r3, #32
 8000d3c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 030c 	add.w	r3, r7, #12
 8000d52:	4619      	mov	r1, r3
 8000d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d58:	f000 fc6c 	bl	8001634 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d5c:	bf00      	nop
 8000d5e:	3720      	adds	r7, #32
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40021000 	.word	0x40021000

08000d68 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d6e:	4a15      	ldr	r2, [pc, #84]	; (8000dc4 <MX_USART2_UART_Init+0x5c>)
 8000d70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d8e:	220c      	movs	r2, #12
 8000d90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000dac:	f002 ff02 	bl	8003bb4 <HAL_UART_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000db6:	f7ff fe4d 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000170 	.word	0x20000170
 8000dc4:	40004400 	.word	0x40004400

08000dc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b09e      	sub	sp, #120	; 0x78
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	2254      	movs	r2, #84	; 0x54
 8000de6:	2100      	movs	r1, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f003 fbad 	bl	8004548 <memset>
  if(uartHandle->Instance==USART2)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a28      	ldr	r2, [pc, #160]	; (8000e94 <HAL_UART_MspInit+0xcc>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d148      	bne.n	8000e8a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	4618      	mov	r0, r3
 8000e06:	f001 fc57 	bl	80026b8 <HAL_RCCEx_PeriphCLKConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e10:	f7ff fe20 	bl	8000a54 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e14:	4b20      	ldr	r3, [pc, #128]	; (8000e98 <HAL_UART_MspInit+0xd0>)
 8000e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e18:	4a1f      	ldr	r2, [pc, #124]	; (8000e98 <HAL_UART_MspInit+0xd0>)
 8000e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8000e20:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <HAL_UART_MspInit+0xd0>)
 8000e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <HAL_UART_MspInit+0xd0>)
 8000e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e30:	4a19      	ldr	r2, [pc, #100]	; (8000e98 <HAL_UART_MspInit+0xd0>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e38:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <HAL_UART_MspInit+0xd0>)
 8000e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000e44:	2304      	movs	r3, #4
 8000e46:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e54:	2307      	movs	r3, #7
 8000e56:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000e58:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e62:	f000 fbe7 	bl	8001634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e6a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e80:	4619      	mov	r1, r3
 8000e82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e86:	f000 fbd5 	bl	8001634 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	3778      	adds	r7, #120	; 0x78
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40004400 	.word	0x40004400
 8000e98:	40021000 	.word	0x40021000

08000e9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ea0:	f7ff fe82 	bl	8000ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ea6:	490d      	ldr	r1, [pc, #52]	; (8000edc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ea8:	4a0d      	ldr	r2, [pc, #52]	; (8000ee0 <LoopForever+0xe>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eac:	e002      	b.n	8000eb4 <LoopCopyDataInit>

08000eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb2:	3304      	adds	r3, #4

08000eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb8:	d3f9      	bcc.n	8000eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ebc:	4c0a      	ldr	r4, [pc, #40]	; (8000ee8 <LoopForever+0x16>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec0:	e001      	b.n	8000ec6 <LoopFillZerobss>

08000ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec4:	3204      	adds	r2, #4

08000ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec8:	d3fb      	bcc.n	8000ec2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eca:	f003 fb19 	bl	8004500 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ece:	f7ff fca3 	bl	8000818 <main>

08000ed2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ed2:	e7fe      	b.n	8000ed2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ed4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000edc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ee0:	08004e18 	.word	0x08004e18
  ldr r2, =_sbss
 8000ee4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ee8:	200001fc 	.word	0x200001fc

08000eec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000eec:	e7fe      	b.n	8000eec <ADC1_IRQHandler>

08000eee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef8:	2003      	movs	r0, #3
 8000efa:	f000 fb59 	bl	80015b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000efe:	2000      	movs	r0, #0
 8000f00:	f000 f80e 	bl	8000f20 <HAL_InitTick>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d002      	beq.n	8000f10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	71fb      	strb	r3, [r7, #7]
 8000f0e:	e001      	b.n	8000f14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f10:	f7ff fda4 	bl	8000a5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f14:	79fb      	ldrb	r3, [r7, #7]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <HAL_InitTick+0x6c>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d023      	beq.n	8000f7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f34:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <HAL_InitTick+0x70>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <HAL_InitTick+0x6c>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 fb65 	bl	800161a <HAL_SYSTICK_Config>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10f      	bne.n	8000f76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b0f      	cmp	r3, #15
 8000f5a:	d809      	bhi.n	8000f70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	f000 fb2f 	bl	80015c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f68:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <HAL_InitTick+0x74>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	e007      	b.n	8000f80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	73fb      	strb	r3, [r7, #15]
 8000f74:	e004      	b.n	8000f80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	73fb      	strb	r3, [r7, #15]
 8000f7a:	e001      	b.n	8000f80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	20000000 	.word	0x20000000
 8000f94:	20000004 	.word	0x20000004

08000f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x20>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_IncTick+0x24>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <HAL_IncTick+0x24>)
 8000faa:	6013      	str	r3, [r2, #0]
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	200001f4 	.word	0x200001f4

08000fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <HAL_GetTick+0x14>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	200001f4 	.word	0x200001f4

08000fd8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e0ed      	b.n	80011c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d102      	bne.n	8000ffc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff faf8 	bl	80005ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f042 0201 	orr.w	r2, r2, #1
 800100a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800100c:	f7ff ffd8 	bl	8000fc0 <HAL_GetTick>
 8001010:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001012:	e012      	b.n	800103a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001014:	f7ff ffd4 	bl	8000fc0 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b0a      	cmp	r3, #10
 8001020:	d90b      	bls.n	800103a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001026:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2205      	movs	r2, #5
 8001032:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e0c5      	b.n	80011c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0e5      	beq.n	8001014 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 0202 	bic.w	r2, r2, #2
 8001056:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001058:	f7ff ffb2 	bl	8000fc0 <HAL_GetTick>
 800105c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800105e:	e012      	b.n	8001086 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001060:	f7ff ffae 	bl	8000fc0 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b0a      	cmp	r3, #10
 800106c:	d90b      	bls.n	8001086 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001072:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2205      	movs	r2, #5
 800107e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e09f      	b.n	80011c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1e5      	bne.n	8001060 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	7e1b      	ldrb	r3, [r3, #24]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d108      	bne.n	80010ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	e007      	b.n	80010be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	7e5b      	ldrb	r3, [r3, #25]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d108      	bne.n	80010d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	e007      	b.n	80010e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7e9b      	ldrb	r3, [r3, #26]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d108      	bne.n	8001102 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f042 0220 	orr.w	r2, r2, #32
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	e007      	b.n	8001112 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f022 0220 	bic.w	r2, r2, #32
 8001110:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	7edb      	ldrb	r3, [r3, #27]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d108      	bne.n	800112c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f022 0210 	bic.w	r2, r2, #16
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	e007      	b.n	800113c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f042 0210 	orr.w	r2, r2, #16
 800113a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	7f1b      	ldrb	r3, [r3, #28]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d108      	bne.n	8001156 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 0208 	orr.w	r2, r2, #8
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	e007      	b.n	8001166 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f022 0208 	bic.w	r2, r2, #8
 8001164:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	7f5b      	ldrb	r3, [r3, #29]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d108      	bne.n	8001180 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f042 0204 	orr.w	r2, r2, #4
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	e007      	b.n	8001190 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 0204 	bic.w	r2, r2, #4
 800118e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	431a      	orrs	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	431a      	orrs	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	ea42 0103 	orr.w	r1, r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	1e5a      	subs	r2, r3, #1
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2201      	movs	r2, #1
 80011c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d12e      	bne.n	8001240 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2202      	movs	r2, #2
 80011e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 0201 	bic.w	r2, r2, #1
 80011f8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80011fa:	f7ff fee1 	bl	8000fc0 <HAL_GetTick>
 80011fe:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001200:	e012      	b.n	8001228 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001202:	f7ff fedd 	bl	8000fc0 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b0a      	cmp	r3, #10
 800120e:	d90b      	bls.n	8001228 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2205      	movs	r2, #5
 8001220:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e012      	b.n	800124e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1e5      	bne.n	8001202 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800123c:	2300      	movs	r3, #0
 800123e:	e006      	b.n	800124e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
  }
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001256:	b480      	push	{r7}
 8001258:	b089      	sub	sp, #36	; 0x24
 800125a:	af00      	add	r7, sp, #0
 800125c:	60f8      	str	r0, [r7, #12]
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
 8001262:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f893 3020 	ldrb.w	r3, [r3, #32]
 800126a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001274:	7ffb      	ldrb	r3, [r7, #31]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d003      	beq.n	8001282 <HAL_CAN_AddTxMessage+0x2c>
 800127a:	7ffb      	ldrb	r3, [r7, #31]
 800127c:	2b02      	cmp	r3, #2
 800127e:	f040 80ad 	bne.w	80013dc <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d10a      	bne.n	80012a2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001292:	2b00      	cmp	r3, #0
 8001294:	d105      	bne.n	80012a2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 8095 	beq.w	80013cc <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	0e1b      	lsrs	r3, r3, #24
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80012ac:	2201      	movs	r2, #1
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	409a      	lsls	r2, r3
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10d      	bne.n	80012da <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012c8:	68f9      	ldr	r1, [r7, #12]
 80012ca:	6809      	ldr	r1, [r1, #0]
 80012cc:	431a      	orrs	r2, r3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	3318      	adds	r3, #24
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	440b      	add	r3, r1
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	e00f      	b.n	80012fa <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012e4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012ea:	68f9      	ldr	r1, [r7, #12]
 80012ec:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80012ee:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	3318      	adds	r3, #24
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	440b      	add	r3, r1
 80012f8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6819      	ldr	r1, [r3, #0]
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	691a      	ldr	r2, [r3, #16]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3318      	adds	r3, #24
 8001306:	011b      	lsls	r3, r3, #4
 8001308:	440b      	add	r3, r1
 800130a:	3304      	adds	r3, #4
 800130c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	7d1b      	ldrb	r3, [r3, #20]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d111      	bne.n	800133a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3318      	adds	r3, #24
 800131e:	011b      	lsls	r3, r3, #4
 8001320:	4413      	add	r3, r2
 8001322:	3304      	adds	r3, #4
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	6811      	ldr	r1, [r2, #0]
 800132a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	3318      	adds	r3, #24
 8001332:	011b      	lsls	r3, r3, #4
 8001334:	440b      	add	r3, r1
 8001336:	3304      	adds	r3, #4
 8001338:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3307      	adds	r3, #7
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	061a      	lsls	r2, r3, #24
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3306      	adds	r3, #6
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	041b      	lsls	r3, r3, #16
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3305      	adds	r3, #5
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	021b      	lsls	r3, r3, #8
 8001354:	4313      	orrs	r3, r2
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	3204      	adds	r2, #4
 800135a:	7812      	ldrb	r2, [r2, #0]
 800135c:	4610      	mov	r0, r2
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	6811      	ldr	r1, [r2, #0]
 8001362:	ea43 0200 	orr.w	r2, r3, r0
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	440b      	add	r3, r1
 800136c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001370:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3303      	adds	r3, #3
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	061a      	lsls	r2, r3, #24
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3302      	adds	r3, #2
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	041b      	lsls	r3, r3, #16
 8001382:	431a      	orrs	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3301      	adds	r3, #1
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	021b      	lsls	r3, r3, #8
 800138c:	4313      	orrs	r3, r2
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	7812      	ldrb	r2, [r2, #0]
 8001392:	4610      	mov	r0, r2
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	6811      	ldr	r1, [r2, #0]
 8001398:	ea43 0200 	orr.w	r2, r3, r0
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	011b      	lsls	r3, r3, #4
 80013a0:	440b      	add	r3, r1
 80013a2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80013a6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	3318      	adds	r3, #24
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	4413      	add	r3, r2
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	6811      	ldr	r1, [r2, #0]
 80013ba:	f043 0201 	orr.w	r2, r3, #1
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	3318      	adds	r3, #24
 80013c2:	011b      	lsls	r3, r3, #4
 80013c4:	440b      	add	r3, r1
 80013c6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	e00e      	b.n	80013ea <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e006      	b.n	80013ea <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
  }
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3724      	adds	r7, #36	; 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <__NVIC_SetPriorityGrouping>:
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800142c:	4013      	ands	r3, r2
 800142e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800143c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001442:	4a04      	ldr	r2, [pc, #16]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	60d3      	str	r3, [r2, #12]
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_GetPriorityGrouping>:
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <__NVIC_GetPriorityGrouping+0x18>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	0a1b      	lsrs	r3, r3, #8
 8001462:	f003 0307 	and.w	r3, r3, #7
}
 8001466:	4618      	mov	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <__NVIC_EnableIRQ>:
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	2b00      	cmp	r3, #0
 8001484:	db0b      	blt.n	800149e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	f003 021f 	and.w	r2, r3, #31
 800148c:	4907      	ldr	r1, [pc, #28]	; (80014ac <__NVIC_EnableIRQ+0x38>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	095b      	lsrs	r3, r3, #5
 8001494:	2001      	movs	r0, #1
 8001496:	fa00 f202 	lsl.w	r2, r0, r2
 800149a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000e100 	.word	0xe000e100

080014b0 <__NVIC_SetPriority>:
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	db0a      	blt.n	80014da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	490c      	ldr	r1, [pc, #48]	; (80014fc <__NVIC_SetPriority+0x4c>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	0112      	lsls	r2, r2, #4
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	440b      	add	r3, r1
 80014d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80014d8:	e00a      	b.n	80014f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4908      	ldr	r1, [pc, #32]	; (8001500 <__NVIC_SetPriority+0x50>)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	3b04      	subs	r3, #4
 80014e8:	0112      	lsls	r2, r2, #4
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	440b      	add	r3, r1
 80014ee:	761a      	strb	r2, [r3, #24]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000e100 	.word	0xe000e100
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <NVIC_EncodePriority>:
{
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	; 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f1c3 0307 	rsb	r3, r3, #7
 800151e:	2b04      	cmp	r3, #4
 8001520:	bf28      	it	cs
 8001522:	2304      	movcs	r3, #4
 8001524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3304      	adds	r3, #4
 800152a:	2b06      	cmp	r3, #6
 800152c:	d902      	bls.n	8001534 <NVIC_EncodePriority+0x30>
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3b03      	subs	r3, #3
 8001532:	e000      	b.n	8001536 <NVIC_EncodePriority+0x32>
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	f04f 32ff 	mov.w	r2, #4294967295
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43da      	mvns	r2, r3
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	401a      	ands	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800154c:	f04f 31ff 	mov.w	r1, #4294967295
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa01 f303 	lsl.w	r3, r1, r3
 8001556:	43d9      	mvns	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	4313      	orrs	r3, r2
}
 800155e:	4618      	mov	r0, r3
 8001560:	3724      	adds	r7, #36	; 0x24
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <SysTick_Config>:
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3b01      	subs	r3, #1
 8001578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800157c:	d301      	bcc.n	8001582 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800157e:	2301      	movs	r3, #1
 8001580:	e00f      	b.n	80015a2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <SysTick_Config+0x40>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3b01      	subs	r3, #1
 8001588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158a:	210f      	movs	r1, #15
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	f7ff ff8e 	bl	80014b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <SysTick_Config+0x40>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159a:	4b04      	ldr	r3, [pc, #16]	; (80015ac <SysTick_Config+0x40>)
 800159c:	2207      	movs	r2, #7
 800159e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	e000e010 	.word	0xe000e010

080015b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff ff29 	bl	8001410 <__NVIC_SetPriorityGrouping>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b086      	sub	sp, #24
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4603      	mov	r3, r0
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
 80015d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015d8:	f7ff ff3e 	bl	8001458 <__NVIC_GetPriorityGrouping>
 80015dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	6978      	ldr	r0, [r7, #20]
 80015e4:	f7ff ff8e 	bl	8001504 <NVIC_EncodePriority>
 80015e8:	4602      	mov	r2, r0
 80015ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ee:	4611      	mov	r1, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff5d 	bl	80014b0 <__NVIC_SetPriority>
}
 80015f6:	bf00      	nop
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	4603      	mov	r3, r0
 8001606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff31 	bl	8001474 <__NVIC_EnableIRQ>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ffa2 	bl	800156c <SysTick_Config>
 8001628:	4603      	mov	r3, r0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001634:	b480      	push	{r7}
 8001636:	b087      	sub	sp, #28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001642:	e148      	b.n	80018d6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	2101      	movs	r1, #1
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	fa01 f303 	lsl.w	r3, r1, r3
 8001650:	4013      	ands	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 813a 	beq.w	80018d0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b01      	cmp	r3, #1
 8001666:	d005      	beq.n	8001674 <HAL_GPIO_Init+0x40>
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d130      	bne.n	80016d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	2203      	movs	r2, #3
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	68da      	ldr	r2, [r3, #12]
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016aa:	2201      	movs	r2, #1
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43db      	mvns	r3, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4013      	ands	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	091b      	lsrs	r3, r3, #4
 80016c0:	f003 0201 	and.w	r2, r3, #1
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d017      	beq.n	8001712 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	2203      	movs	r2, #3
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	4313      	orrs	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d123      	bne.n	8001766 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	08da      	lsrs	r2, r3, #3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3208      	adds	r2, #8
 8001726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	220f      	movs	r2, #15
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	4013      	ands	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	691a      	ldr	r2, [r3, #16]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	08da      	lsrs	r2, r3, #3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3208      	adds	r2, #8
 8001760:	6939      	ldr	r1, [r7, #16]
 8001762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	2203      	movs	r2, #3
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 0203 	and.w	r2, r3, #3
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 8094 	beq.w	80018d0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a8:	4b52      	ldr	r3, [pc, #328]	; (80018f4 <HAL_GPIO_Init+0x2c0>)
 80017aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ac:	4a51      	ldr	r2, [pc, #324]	; (80018f4 <HAL_GPIO_Init+0x2c0>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6613      	str	r3, [r2, #96]	; 0x60
 80017b4:	4b4f      	ldr	r3, [pc, #316]	; (80018f4 <HAL_GPIO_Init+0x2c0>)
 80017b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017c0:	4a4d      	ldr	r2, [pc, #308]	; (80018f8 <HAL_GPIO_Init+0x2c4>)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	089b      	lsrs	r3, r3, #2
 80017c6:	3302      	adds	r3, #2
 80017c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	220f      	movs	r2, #15
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017ea:	d00d      	beq.n	8001808 <HAL_GPIO_Init+0x1d4>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a43      	ldr	r2, [pc, #268]	; (80018fc <HAL_GPIO_Init+0x2c8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d007      	beq.n	8001804 <HAL_GPIO_Init+0x1d0>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a42      	ldr	r2, [pc, #264]	; (8001900 <HAL_GPIO_Init+0x2cc>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d101      	bne.n	8001800 <HAL_GPIO_Init+0x1cc>
 80017fc:	2302      	movs	r3, #2
 80017fe:	e004      	b.n	800180a <HAL_GPIO_Init+0x1d6>
 8001800:	2307      	movs	r3, #7
 8001802:	e002      	b.n	800180a <HAL_GPIO_Init+0x1d6>
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <HAL_GPIO_Init+0x1d6>
 8001808:	2300      	movs	r3, #0
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	f002 0203 	and.w	r2, r2, #3
 8001810:	0092      	lsls	r2, r2, #2
 8001812:	4093      	lsls	r3, r2
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4313      	orrs	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800181a:	4937      	ldr	r1, [pc, #220]	; (80018f8 <HAL_GPIO_Init+0x2c4>)
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	089b      	lsrs	r3, r3, #2
 8001820:	3302      	adds	r3, #2
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001828:	4b36      	ldr	r3, [pc, #216]	; (8001904 <HAL_GPIO_Init+0x2d0>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	43db      	mvns	r3, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4313      	orrs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800184c:	4a2d      	ldr	r2, [pc, #180]	; (8001904 <HAL_GPIO_Init+0x2d0>)
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001852:	4b2c      	ldr	r3, [pc, #176]	; (8001904 <HAL_GPIO_Init+0x2d0>)
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001876:	4a23      	ldr	r2, [pc, #140]	; (8001904 <HAL_GPIO_Init+0x2d0>)
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800187c:	4b21      	ldr	r3, [pc, #132]	; (8001904 <HAL_GPIO_Init+0x2d0>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	43db      	mvns	r3, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018a0:	4a18      	ldr	r2, [pc, #96]	; (8001904 <HAL_GPIO_Init+0x2d0>)
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <HAL_GPIO_Init+0x2d0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	43db      	mvns	r3, r3
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4013      	ands	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018ca:	4a0e      	ldr	r2, [pc, #56]	; (8001904 <HAL_GPIO_Init+0x2d0>)
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	3301      	adds	r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	fa22 f303 	lsr.w	r3, r2, r3
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f47f aeaf 	bne.w	8001644 <HAL_GPIO_Init+0x10>
  }
}
 80018e6:	bf00      	nop
 80018e8:	371c      	adds	r7, #28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40010000 	.word	0x40010000
 80018fc:	48000400 	.word	0x48000400
 8001900:	48000800 	.word	0x48000800
 8001904:	40010400 	.word	0x40010400

08001908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	807b      	strh	r3, [r7, #2]
 8001914:	4613      	mov	r3, r2
 8001916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001918:	787b      	ldrb	r3, [r7, #1]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800191e:	887a      	ldrh	r2, [r7, #2]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001924:	e002      	b.n	800192c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001926:	887a      	ldrh	r2, [r7, #2]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001944:	695a      	ldr	r2, [r3, #20]
 8001946:	88fb      	ldrh	r3, [r7, #6]
 8001948:	4013      	ands	r3, r2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d006      	beq.n	800195c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800194e:	4a05      	ldr	r2, [pc, #20]	; (8001964 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff f838 	bl	80009cc <HAL_GPIO_EXTI_Callback>
  }
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40010400 	.word	0x40010400

08001968 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a04      	ldr	r2, [pc, #16]	; (8001984 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001976:	6013      	str	r3, [r2, #0]
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40007000 	.word	0x40007000

08001988 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800198c:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40007000 	.word	0x40007000

080019a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019b2:	d130      	bne.n	8001a16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019b4:	4b23      	ldr	r3, [pc, #140]	; (8001a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019c0:	d038      	beq.n	8001a34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019ca:	4a1e      	ldr	r2, [pc, #120]	; (8001a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019d2:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2232      	movs	r2, #50	; 0x32
 80019d8:	fb02 f303 	mul.w	r3, r2, r3
 80019dc:	4a1b      	ldr	r2, [pc, #108]	; (8001a4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019de:	fba2 2303 	umull	r2, r3, r2, r3
 80019e2:	0c9b      	lsrs	r3, r3, #18
 80019e4:	3301      	adds	r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019e8:	e002      	b.n	80019f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	3b01      	subs	r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019fc:	d102      	bne.n	8001a04 <HAL_PWREx_ControlVoltageScaling+0x60>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1f2      	bne.n	80019ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a10:	d110      	bne.n	8001a34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e00f      	b.n	8001a36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a22:	d007      	beq.n	8001a34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a24:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a2c:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40007000 	.word	0x40007000
 8001a48:	20000000 	.word	0x20000000
 8001a4c:	431bde83 	.word	0x431bde83

08001a50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e3fe      	b.n	8002260 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a62:	4ba1      	ldr	r3, [pc, #644]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a6c:	4b9e      	ldr	r3, [pc, #632]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 80e4 	beq.w	8001c4c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d007      	beq.n	8001a9a <HAL_RCC_OscConfig+0x4a>
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	2b0c      	cmp	r3, #12
 8001a8e:	f040 808b 	bne.w	8001ba8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	f040 8087 	bne.w	8001ba8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a9a:	4b93      	ldr	r3, [pc, #588]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d005      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x62>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e3d6      	b.n	8002260 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a1a      	ldr	r2, [r3, #32]
 8001ab6:	4b8c      	ldr	r3, [pc, #560]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d004      	beq.n	8001acc <HAL_RCC_OscConfig+0x7c>
 8001ac2:	4b89      	ldr	r3, [pc, #548]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aca:	e005      	b.n	8001ad8 <HAL_RCC_OscConfig+0x88>
 8001acc:	4b86      	ldr	r3, [pc, #536]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad2:	091b      	lsrs	r3, r3, #4
 8001ad4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d223      	bcs.n	8001b24 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 fd89 	bl	80025f8 <RCC_SetFlashLatencyFromMSIRange>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e3b7      	b.n	8002260 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001af0:	4b7d      	ldr	r3, [pc, #500]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a7c      	ldr	r2, [pc, #496]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001af6:	f043 0308 	orr.w	r3, r3, #8
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	4b7a      	ldr	r3, [pc, #488]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	4977      	ldr	r1, [pc, #476]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b0e:	4b76      	ldr	r3, [pc, #472]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	021b      	lsls	r3, r3, #8
 8001b1c:	4972      	ldr	r1, [pc, #456]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	604b      	str	r3, [r1, #4]
 8001b22:	e025      	b.n	8001b70 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b24:	4b70      	ldr	r3, [pc, #448]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a6f      	ldr	r2, [pc, #444]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001b2a:	f043 0308 	orr.w	r3, r3, #8
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b6d      	ldr	r3, [pc, #436]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	496a      	ldr	r1, [pc, #424]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b42:	4b69      	ldr	r3, [pc, #420]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	4965      	ldr	r1, [pc, #404]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d109      	bne.n	8001b70 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 fd49 	bl	80025f8 <RCC_SetFlashLatencyFromMSIRange>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e377      	b.n	8002260 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b70:	f000 fc80 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 8001b74:	4601      	mov	r1, r0
 8001b76:	4b5c      	ldr	r3, [pc, #368]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	091b      	lsrs	r3, r3, #4
 8001b7c:	f003 030f 	and.w	r3, r3, #15
 8001b80:	4a5a      	ldr	r2, [pc, #360]	; (8001cec <HAL_RCC_OscConfig+0x29c>)
 8001b82:	5cd3      	ldrb	r3, [r2, r3]
 8001b84:	f003 031f 	and.w	r3, r3, #31
 8001b88:	fa21 f303 	lsr.w	r3, r1, r3
 8001b8c:	4a58      	ldr	r2, [pc, #352]	; (8001cf0 <HAL_RCC_OscConfig+0x2a0>)
 8001b8e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b90:	4b58      	ldr	r3, [pc, #352]	; (8001cf4 <HAL_RCC_OscConfig+0x2a4>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff f9c3 	bl	8000f20 <HAL_InitTick>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d052      	beq.n	8001c4a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	e35b      	b.n	8002260 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d032      	beq.n	8001c16 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bb0:	4b4d      	ldr	r3, [pc, #308]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a4c      	ldr	r2, [pc, #304]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bbc:	f7ff fa00 	bl	8000fc0 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bc4:	f7ff f9fc 	bl	8000fc0 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e344      	b.n	8002260 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bd6:	4b44      	ldr	r3, [pc, #272]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001be2:	4b41      	ldr	r3, [pc, #260]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a40      	ldr	r2, [pc, #256]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001be8:	f043 0308 	orr.w	r3, r3, #8
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b3e      	ldr	r3, [pc, #248]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	493b      	ldr	r1, [pc, #236]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c00:	4b39      	ldr	r3, [pc, #228]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	021b      	lsls	r3, r3, #8
 8001c0e:	4936      	ldr	r1, [pc, #216]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	604b      	str	r3, [r1, #4]
 8001c14:	e01a      	b.n	8001c4c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c16:	4b34      	ldr	r3, [pc, #208]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a33      	ldr	r2, [pc, #204]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001c1c:	f023 0301 	bic.w	r3, r3, #1
 8001c20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c22:	f7ff f9cd 	bl	8000fc0 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c2a:	f7ff f9c9 	bl	8000fc0 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e311      	b.n	8002260 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1f0      	bne.n	8001c2a <HAL_RCC_OscConfig+0x1da>
 8001c48:	e000      	b.n	8001c4c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c4a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d074      	beq.n	8001d42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d005      	beq.n	8001c6a <HAL_RCC_OscConfig+0x21a>
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	2b0c      	cmp	r3, #12
 8001c62:	d10e      	bne.n	8001c82 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d10b      	bne.n	8001c82 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d064      	beq.n	8001d40 <HAL_RCC_OscConfig+0x2f0>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d160      	bne.n	8001d40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e2ee      	b.n	8002260 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c8a:	d106      	bne.n	8001c9a <HAL_RCC_OscConfig+0x24a>
 8001c8c:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a15      	ldr	r2, [pc, #84]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	e01d      	b.n	8001cd6 <HAL_RCC_OscConfig+0x286>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca2:	d10c      	bne.n	8001cbe <HAL_RCC_OscConfig+0x26e>
 8001ca4:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0f      	ldr	r2, [pc, #60]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001caa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0c      	ldr	r2, [pc, #48]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	e00b      	b.n	8001cd6 <HAL_RCC_OscConfig+0x286>
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a09      	ldr	r2, [pc, #36]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a06      	ldr	r2, [pc, #24]	; (8001ce8 <HAL_RCC_OscConfig+0x298>)
 8001cd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d01c      	beq.n	8001d18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cde:	f7ff f96f 	bl	8000fc0 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ce4:	e011      	b.n	8001d0a <HAL_RCC_OscConfig+0x2ba>
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	08004d8c 	.word	0x08004d8c
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf8:	f7ff f962 	bl	8000fc0 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b64      	cmp	r3, #100	; 0x64
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e2aa      	b.n	8002260 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d0a:	4baf      	ldr	r3, [pc, #700]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x2a8>
 8001d16:	e014      	b.n	8001d42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d18:	f7ff f952 	bl	8000fc0 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d20:	f7ff f94e 	bl	8000fc0 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b64      	cmp	r3, #100	; 0x64
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e296      	b.n	8002260 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d32:	4ba5      	ldr	r3, [pc, #660]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x2d0>
 8001d3e:	e000      	b.n	8001d42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d060      	beq.n	8001e10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_OscConfig+0x310>
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	2b0c      	cmp	r3, #12
 8001d58:	d119      	bne.n	8001d8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d116      	bne.n	8001d8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d60:	4b99      	ldr	r3, [pc, #612]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_OscConfig+0x328>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e273      	b.n	8002260 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d78:	4b93      	ldr	r3, [pc, #588]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	061b      	lsls	r3, r3, #24
 8001d86:	4990      	ldr	r1, [pc, #576]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d8c:	e040      	b.n	8001e10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d023      	beq.n	8001dde <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d96:	4b8c      	ldr	r3, [pc, #560]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a8b      	ldr	r2, [pc, #556]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da2:	f7ff f90d 	bl	8000fc0 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001daa:	f7ff f909 	bl	8000fc0 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e251      	b.n	8002260 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dbc:	4b82      	ldr	r3, [pc, #520]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f0      	beq.n	8001daa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc8:	4b7f      	ldr	r3, [pc, #508]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	061b      	lsls	r3, r3, #24
 8001dd6:	497c      	ldr	r1, [pc, #496]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
 8001ddc:	e018      	b.n	8001e10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dde:	4b7a      	ldr	r3, [pc, #488]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a79      	ldr	r2, [pc, #484]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff f8e9 	bl	8000fc0 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df2:	f7ff f8e5 	bl	8000fc0 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e22d      	b.n	8002260 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e04:	4b70      	ldr	r3, [pc, #448]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d03c      	beq.n	8001e96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d01c      	beq.n	8001e5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e24:	4b68      	ldr	r3, [pc, #416]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e2a:	4a67      	ldr	r2, [pc, #412]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e34:	f7ff f8c4 	bl	8000fc0 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e3c:	f7ff f8c0 	bl	8000fc0 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e208      	b.n	8002260 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e4e:	4b5e      	ldr	r3, [pc, #376]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0ef      	beq.n	8001e3c <HAL_RCC_OscConfig+0x3ec>
 8001e5c:	e01b      	b.n	8001e96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e5e:	4b5a      	ldr	r3, [pc, #360]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e64:	4a58      	ldr	r2, [pc, #352]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001e66:	f023 0301 	bic.w	r3, r3, #1
 8001e6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6e:	f7ff f8a7 	bl	8000fc0 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e76:	f7ff f8a3 	bl	8000fc0 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e1eb      	b.n	8002260 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e88:	4b4f      	ldr	r3, [pc, #316]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1ef      	bne.n	8001e76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0304 	and.w	r3, r3, #4
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 80a6 	beq.w	8001ff0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ea8:	4b47      	ldr	r3, [pc, #284]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10d      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb4:	4b44      	ldr	r3, [pc, #272]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb8:	4a43      	ldr	r2, [pc, #268]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	6593      	str	r3, [r2, #88]	; 0x58
 8001ec0:	4b41      	ldr	r3, [pc, #260]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed0:	4b3e      	ldr	r3, [pc, #248]	; (8001fcc <HAL_RCC_OscConfig+0x57c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d118      	bne.n	8001f0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001edc:	4b3b      	ldr	r3, [pc, #236]	; (8001fcc <HAL_RCC_OscConfig+0x57c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a3a      	ldr	r2, [pc, #232]	; (8001fcc <HAL_RCC_OscConfig+0x57c>)
 8001ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ee8:	f7ff f86a 	bl	8000fc0 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef0:	f7ff f866 	bl	8000fc0 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e1ae      	b.n	8002260 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f02:	4b32      	ldr	r3, [pc, #200]	; (8001fcc <HAL_RCC_OscConfig+0x57c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d108      	bne.n	8001f28 <HAL_RCC_OscConfig+0x4d8>
 8001f16:	4b2c      	ldr	r3, [pc, #176]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1c:	4a2a      	ldr	r2, [pc, #168]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f26:	e024      	b.n	8001f72 <HAL_RCC_OscConfig+0x522>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2b05      	cmp	r3, #5
 8001f2e:	d110      	bne.n	8001f52 <HAL_RCC_OscConfig+0x502>
 8001f30:	4b25      	ldr	r3, [pc, #148]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f36:	4a24      	ldr	r2, [pc, #144]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001f38:	f043 0304 	orr.w	r3, r3, #4
 8001f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f40:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f46:	4a20      	ldr	r2, [pc, #128]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f50:	e00f      	b.n	8001f72 <HAL_RCC_OscConfig+0x522>
 8001f52:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f58:	4a1b      	ldr	r2, [pc, #108]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001f5a:	f023 0301 	bic.w	r3, r3, #1
 8001f5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f62:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f68:	4a17      	ldr	r2, [pc, #92]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001f6a:	f023 0304 	bic.w	r3, r3, #4
 8001f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d016      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7a:	f7ff f821 	bl	8000fc0 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f80:	e00a      	b.n	8001f98 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f82:	f7ff f81d 	bl	8000fc0 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e163      	b.n	8002260 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_RCC_OscConfig+0x578>)
 8001f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0ed      	beq.n	8001f82 <HAL_RCC_OscConfig+0x532>
 8001fa6:	e01a      	b.n	8001fde <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa8:	f7ff f80a 	bl	8000fc0 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fae:	e00f      	b.n	8001fd0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb0:	f7ff f806 	bl	8000fc0 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d906      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e14c      	b.n	8002260 <HAL_RCC_OscConfig+0x810>
 8001fc6:	bf00      	nop
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fd0:	4ba5      	ldr	r3, [pc, #660]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 8001fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1e8      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fde:	7ffb      	ldrb	r3, [r7, #31]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d105      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe4:	4ba0      	ldr	r3, [pc, #640]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe8:	4a9f      	ldr	r2, [pc, #636]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 8001fea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0320 	and.w	r3, r3, #32
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d03c      	beq.n	8002076 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	2b00      	cmp	r3, #0
 8002002:	d01c      	beq.n	800203e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002004:	4b98      	ldr	r3, [pc, #608]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 8002006:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800200a:	4a97      	ldr	r2, [pc, #604]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002014:	f7fe ffd4 	bl	8000fc0 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800201c:	f7fe ffd0 	bl	8000fc0 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e118      	b.n	8002260 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800202e:	4b8e      	ldr	r3, [pc, #568]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 8002030:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0ef      	beq.n	800201c <HAL_RCC_OscConfig+0x5cc>
 800203c:	e01b      	b.n	8002076 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800203e:	4b8a      	ldr	r3, [pc, #552]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 8002040:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002044:	4a88      	ldr	r2, [pc, #544]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 8002046:	f023 0301 	bic.w	r3, r3, #1
 800204a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204e:	f7fe ffb7 	bl	8000fc0 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002056:	f7fe ffb3 	bl	8000fc0 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e0fb      	b.n	8002260 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002068:	4b7f      	ldr	r3, [pc, #508]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 800206a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1ef      	bne.n	8002056 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 80ef 	beq.w	800225e <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	2b02      	cmp	r3, #2
 8002086:	f040 80c5 	bne.w	8002214 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800208a:	4b77      	ldr	r3, [pc, #476]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f003 0203 	and.w	r2, r3, #3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209a:	429a      	cmp	r2, r3
 800209c:	d12c      	bne.n	80020f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	3b01      	subs	r3, #1
 80020aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d123      	bne.n	80020f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020bc:	429a      	cmp	r2, r3
 80020be:	d11b      	bne.n	80020f8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d113      	bne.n	80020f8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020da:	085b      	lsrs	r3, r3, #1
 80020dc:	3b01      	subs	r3, #1
 80020de:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d109      	bne.n	80020f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	085b      	lsrs	r3, r3, #1
 80020f0:	3b01      	subs	r3, #1
 80020f2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d067      	beq.n	80021c8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2b0c      	cmp	r3, #12
 80020fc:	d062      	beq.n	80021c4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020fe:	4b5a      	ldr	r3, [pc, #360]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e0a8      	b.n	8002260 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800210e:	4b56      	ldr	r3, [pc, #344]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a55      	ldr	r2, [pc, #340]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 8002114:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002118:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800211a:	f7fe ff51 	bl	8000fc0 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002122:	f7fe ff4d 	bl	8000fc0 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e095      	b.n	8002260 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002134:	4b4c      	ldr	r3, [pc, #304]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f0      	bne.n	8002122 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002140:	4b49      	ldr	r3, [pc, #292]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	4b49      	ldr	r3, [pc, #292]	; (800226c <HAL_RCC_OscConfig+0x81c>)
 8002146:	4013      	ands	r3, r2
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002150:	3a01      	subs	r2, #1
 8002152:	0112      	lsls	r2, r2, #4
 8002154:	4311      	orrs	r1, r2
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800215a:	0212      	lsls	r2, r2, #8
 800215c:	4311      	orrs	r1, r2
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002162:	0852      	lsrs	r2, r2, #1
 8002164:	3a01      	subs	r2, #1
 8002166:	0552      	lsls	r2, r2, #21
 8002168:	4311      	orrs	r1, r2
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800216e:	0852      	lsrs	r2, r2, #1
 8002170:	3a01      	subs	r2, #1
 8002172:	0652      	lsls	r2, r2, #25
 8002174:	4311      	orrs	r1, r2
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800217a:	06d2      	lsls	r2, r2, #27
 800217c:	430a      	orrs	r2, r1
 800217e:	493a      	ldr	r1, [pc, #232]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 8002180:	4313      	orrs	r3, r2
 8002182:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002184:	4b38      	ldr	r3, [pc, #224]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a37      	ldr	r2, [pc, #220]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 800218a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800218e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002190:	4b35      	ldr	r3, [pc, #212]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4a34      	ldr	r2, [pc, #208]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 8002196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800219a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800219c:	f7fe ff10 	bl	8000fc0 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a4:	f7fe ff0c 	bl	8000fc0 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e054      	b.n	8002260 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b6:	4b2c      	ldr	r3, [pc, #176]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021c2:	e04c      	b.n	800225e <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e04b      	b.n	8002260 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c8:	4b27      	ldr	r3, [pc, #156]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d144      	bne.n	800225e <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021d4:	4b24      	ldr	r3, [pc, #144]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a23      	ldr	r2, [pc, #140]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 80021da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021e0:	4b21      	ldr	r3, [pc, #132]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	4a20      	ldr	r2, [pc, #128]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 80021e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021ec:	f7fe fee8 	bl	8000fc0 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f4:	f7fe fee4 	bl	8000fc0 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e02c      	b.n	8002260 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002206:	4b18      	ldr	r3, [pc, #96]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0x7a4>
 8002212:	e024      	b.n	800225e <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	2b0c      	cmp	r3, #12
 8002218:	d01f      	beq.n	800225a <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221a:	4b13      	ldr	r3, [pc, #76]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a12      	ldr	r2, [pc, #72]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 8002220:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002226:	f7fe fecb 	bl	8000fc0 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222e:	f7fe fec7 	bl	8000fc0 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e00f      	b.n	8002260 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002240:	4b09      	ldr	r3, [pc, #36]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1f0      	bne.n	800222e <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	4905      	ldr	r1, [pc, #20]	; (8002268 <HAL_RCC_OscConfig+0x818>)
 8002252:	4b07      	ldr	r3, [pc, #28]	; (8002270 <HAL_RCC_OscConfig+0x820>)
 8002254:	4013      	ands	r3, r2
 8002256:	60cb      	str	r3, [r1, #12]
 8002258:	e001      	b.n	800225e <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3720      	adds	r7, #32
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40021000 	.word	0x40021000
 800226c:	019d808c 	.word	0x019d808c
 8002270:	feeefffc 	.word	0xfeeefffc

08002274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0e7      	b.n	8002458 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002288:	4b75      	ldr	r3, [pc, #468]	; (8002460 <HAL_RCC_ClockConfig+0x1ec>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	d910      	bls.n	80022b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002296:	4b72      	ldr	r3, [pc, #456]	; (8002460 <HAL_RCC_ClockConfig+0x1ec>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 0207 	bic.w	r2, r3, #7
 800229e:	4970      	ldr	r1, [pc, #448]	; (8002460 <HAL_RCC_ClockConfig+0x1ec>)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a6:	4b6e      	ldr	r3, [pc, #440]	; (8002460 <HAL_RCC_ClockConfig+0x1ec>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d001      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0cf      	b.n	8002458 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d010      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	4b66      	ldr	r3, [pc, #408]	; (8002464 <HAL_RCC_ClockConfig+0x1f0>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d908      	bls.n	80022e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d4:	4b63      	ldr	r3, [pc, #396]	; (8002464 <HAL_RCC_ClockConfig+0x1f0>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	4960      	ldr	r1, [pc, #384]	; (8002464 <HAL_RCC_ClockConfig+0x1f0>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d04c      	beq.n	800238c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d107      	bne.n	800230a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022fa:	4b5a      	ldr	r3, [pc, #360]	; (8002464 <HAL_RCC_ClockConfig+0x1f0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d121      	bne.n	800234a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e0a6      	b.n	8002458 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d107      	bne.n	8002322 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002312:	4b54      	ldr	r3, [pc, #336]	; (8002464 <HAL_RCC_ClockConfig+0x1f0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d115      	bne.n	800234a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e09a      	b.n	8002458 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d107      	bne.n	800233a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800232a:	4b4e      	ldr	r3, [pc, #312]	; (8002464 <HAL_RCC_ClockConfig+0x1f0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d109      	bne.n	800234a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e08e      	b.n	8002458 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800233a:	4b4a      	ldr	r3, [pc, #296]	; (8002464 <HAL_RCC_ClockConfig+0x1f0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e086      	b.n	8002458 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800234a:	4b46      	ldr	r3, [pc, #280]	; (8002464 <HAL_RCC_ClockConfig+0x1f0>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f023 0203 	bic.w	r2, r3, #3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	4943      	ldr	r1, [pc, #268]	; (8002464 <HAL_RCC_ClockConfig+0x1f0>)
 8002358:	4313      	orrs	r3, r2
 800235a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800235c:	f7fe fe30 	bl	8000fc0 <HAL_GetTick>
 8002360:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002362:	e00a      	b.n	800237a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002364:	f7fe fe2c 	bl	8000fc0 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002372:	4293      	cmp	r3, r2
 8002374:	d901      	bls.n	800237a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e06e      	b.n	8002458 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800237a:	4b3a      	ldr	r3, [pc, #232]	; (8002464 <HAL_RCC_ClockConfig+0x1f0>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 020c 	and.w	r2, r3, #12
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	429a      	cmp	r2, r3
 800238a:	d1eb      	bne.n	8002364 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d010      	beq.n	80023ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	4b31      	ldr	r3, [pc, #196]	; (8002464 <HAL_RCC_ClockConfig+0x1f0>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d208      	bcs.n	80023ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a8:	4b2e      	ldr	r3, [pc, #184]	; (8002464 <HAL_RCC_ClockConfig+0x1f0>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	492b      	ldr	r1, [pc, #172]	; (8002464 <HAL_RCC_ClockConfig+0x1f0>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023ba:	4b29      	ldr	r3, [pc, #164]	; (8002460 <HAL_RCC_ClockConfig+0x1ec>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d210      	bcs.n	80023ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c8:	4b25      	ldr	r3, [pc, #148]	; (8002460 <HAL_RCC_ClockConfig+0x1ec>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f023 0207 	bic.w	r2, r3, #7
 80023d0:	4923      	ldr	r1, [pc, #140]	; (8002460 <HAL_RCC_ClockConfig+0x1ec>)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d8:	4b21      	ldr	r3, [pc, #132]	; (8002460 <HAL_RCC_ClockConfig+0x1ec>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d001      	beq.n	80023ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e036      	b.n	8002458 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d008      	beq.n	8002408 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023f6:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <HAL_RCC_ClockConfig+0x1f0>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	4918      	ldr	r1, [pc, #96]	; (8002464 <HAL_RCC_ClockConfig+0x1f0>)
 8002404:	4313      	orrs	r3, r2
 8002406:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	d009      	beq.n	8002428 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002414:	4b13      	ldr	r3, [pc, #76]	; (8002464 <HAL_RCC_ClockConfig+0x1f0>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	4910      	ldr	r1, [pc, #64]	; (8002464 <HAL_RCC_ClockConfig+0x1f0>)
 8002424:	4313      	orrs	r3, r2
 8002426:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002428:	f000 f824 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 800242c:	4601      	mov	r1, r0
 800242e:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <HAL_RCC_ClockConfig+0x1f0>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	091b      	lsrs	r3, r3, #4
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	4a0b      	ldr	r2, [pc, #44]	; (8002468 <HAL_RCC_ClockConfig+0x1f4>)
 800243a:	5cd3      	ldrb	r3, [r2, r3]
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	fa21 f303 	lsr.w	r3, r1, r3
 8002444:	4a09      	ldr	r2, [pc, #36]	; (800246c <HAL_RCC_ClockConfig+0x1f8>)
 8002446:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002448:	4b09      	ldr	r3, [pc, #36]	; (8002470 <HAL_RCC_ClockConfig+0x1fc>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe fd67 	bl	8000f20 <HAL_InitTick>
 8002452:	4603      	mov	r3, r0
 8002454:	72fb      	strb	r3, [r7, #11]

  return status;
 8002456:	7afb      	ldrb	r3, [r7, #11]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40022000 	.word	0x40022000
 8002464:	40021000 	.word	0x40021000
 8002468:	08004d8c 	.word	0x08004d8c
 800246c:	20000000 	.word	0x20000000
 8002470:	20000004 	.word	0x20000004

08002474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002474:	b480      	push	{r7}
 8002476:	b089      	sub	sp, #36	; 0x24
 8002478:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
 800247e:	2300      	movs	r3, #0
 8002480:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002482:	4b3d      	ldr	r3, [pc, #244]	; (8002578 <HAL_RCC_GetSysClockFreq+0x104>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800248c:	4b3a      	ldr	r3, [pc, #232]	; (8002578 <HAL_RCC_GetSysClockFreq+0x104>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0x34>
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	2b0c      	cmp	r3, #12
 80024a0:	d121      	bne.n	80024e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d11e      	bne.n	80024e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024a8:	4b33      	ldr	r3, [pc, #204]	; (8002578 <HAL_RCC_GetSysClockFreq+0x104>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d107      	bne.n	80024c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024b4:	4b30      	ldr	r3, [pc, #192]	; (8002578 <HAL_RCC_GetSysClockFreq+0x104>)
 80024b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ba:	0a1b      	lsrs	r3, r3, #8
 80024bc:	f003 030f 	and.w	r3, r3, #15
 80024c0:	61fb      	str	r3, [r7, #28]
 80024c2:	e005      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024c4:	4b2c      	ldr	r3, [pc, #176]	; (8002578 <HAL_RCC_GetSysClockFreq+0x104>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024d0:	4a2a      	ldr	r2, [pc, #168]	; (800257c <HAL_RCC_GetSysClockFreq+0x108>)
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10d      	bne.n	80024fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024e4:	e00a      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d102      	bne.n	80024f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024ec:	4b24      	ldr	r3, [pc, #144]	; (8002580 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024ee:	61bb      	str	r3, [r7, #24]
 80024f0:	e004      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d101      	bne.n	80024fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024f8:	4b22      	ldr	r3, [pc, #136]	; (8002584 <HAL_RCC_GetSysClockFreq+0x110>)
 80024fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	2b0c      	cmp	r3, #12
 8002500:	d133      	bne.n	800256a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002502:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <HAL_RCC_GetSysClockFreq+0x104>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d002      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0xa4>
 8002512:	2b03      	cmp	r3, #3
 8002514:	d003      	beq.n	800251e <HAL_RCC_GetSysClockFreq+0xaa>
 8002516:	e005      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002518:	4b19      	ldr	r3, [pc, #100]	; (8002580 <HAL_RCC_GetSysClockFreq+0x10c>)
 800251a:	617b      	str	r3, [r7, #20]
      break;
 800251c:	e005      	b.n	800252a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800251e:	4b19      	ldr	r3, [pc, #100]	; (8002584 <HAL_RCC_GetSysClockFreq+0x110>)
 8002520:	617b      	str	r3, [r7, #20]
      break;
 8002522:	e002      	b.n	800252a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	617b      	str	r3, [r7, #20]
      break;
 8002528:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800252a:	4b13      	ldr	r3, [pc, #76]	; (8002578 <HAL_RCC_GetSysClockFreq+0x104>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	091b      	lsrs	r3, r3, #4
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	3301      	adds	r3, #1
 8002536:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <HAL_RCC_GetSysClockFreq+0x104>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	0a1b      	lsrs	r3, r3, #8
 800253e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	fb02 f203 	mul.w	r2, r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	fbb2 f3f3 	udiv	r3, r2, r3
 800254e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002550:	4b09      	ldr	r3, [pc, #36]	; (8002578 <HAL_RCC_GetSysClockFreq+0x104>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	0e5b      	lsrs	r3, r3, #25
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	3301      	adds	r3, #1
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	fbb2 f3f3 	udiv	r3, r2, r3
 8002568:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800256a:	69bb      	ldr	r3, [r7, #24]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3724      	adds	r7, #36	; 0x24
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	40021000 	.word	0x40021000
 800257c:	08004da4 	.word	0x08004da4
 8002580:	00f42400 	.word	0x00f42400
 8002584:	007a1200 	.word	0x007a1200

08002588 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800258c:	4b03      	ldr	r3, [pc, #12]	; (800259c <HAL_RCC_GetHCLKFreq+0x14>)
 800258e:	681b      	ldr	r3, [r3, #0]
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	20000000 	.word	0x20000000

080025a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025a4:	f7ff fff0 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025a8:	4601      	mov	r1, r0
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	0a1b      	lsrs	r3, r3, #8
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025b6:	5cd3      	ldrb	r3, [r2, r3]
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	08004d9c 	.word	0x08004d9c

080025cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025d0:	f7ff ffda 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025d4:	4601      	mov	r1, r0
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	0adb      	lsrs	r3, r3, #11
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	4a04      	ldr	r2, [pc, #16]	; (80025f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025e2:	5cd3      	ldrb	r3, [r2, r3]
 80025e4:	f003 031f 	and.w	r3, r3, #31
 80025e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000
 80025f4:	08004d9c 	.word	0x08004d9c

080025f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002600:	2300      	movs	r3, #0
 8002602:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002604:	4b2a      	ldr	r3, [pc, #168]	; (80026b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002610:	f7ff f9ba 	bl	8001988 <HAL_PWREx_GetVoltageRange>
 8002614:	6178      	str	r0, [r7, #20]
 8002616:	e014      	b.n	8002642 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002618:	4b25      	ldr	r3, [pc, #148]	; (80026b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800261a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261c:	4a24      	ldr	r2, [pc, #144]	; (80026b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800261e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002622:	6593      	str	r3, [r2, #88]	; 0x58
 8002624:	4b22      	ldr	r3, [pc, #136]	; (80026b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002630:	f7ff f9aa 	bl	8001988 <HAL_PWREx_GetVoltageRange>
 8002634:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002636:	4b1e      	ldr	r3, [pc, #120]	; (80026b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263a:	4a1d      	ldr	r2, [pc, #116]	; (80026b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800263c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002640:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002648:	d10b      	bne.n	8002662 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b80      	cmp	r3, #128	; 0x80
 800264e:	d919      	bls.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2ba0      	cmp	r3, #160	; 0xa0
 8002654:	d902      	bls.n	800265c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002656:	2302      	movs	r3, #2
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	e013      	b.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800265c:	2301      	movs	r3, #1
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	e010      	b.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b80      	cmp	r3, #128	; 0x80
 8002666:	d902      	bls.n	800266e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002668:	2303      	movs	r3, #3
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	e00a      	b.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b80      	cmp	r3, #128	; 0x80
 8002672:	d102      	bne.n	800267a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002674:	2302      	movs	r3, #2
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	e004      	b.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b70      	cmp	r3, #112	; 0x70
 800267e:	d101      	bne.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002680:	2301      	movs	r3, #1
 8002682:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f023 0207 	bic.w	r2, r3, #7
 800268c:	4909      	ldr	r1, [pc, #36]	; (80026b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002694:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d001      	beq.n	80026a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40022000 	.word	0x40022000

080026b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026c0:	2300      	movs	r3, #0
 80026c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026c4:	2300      	movs	r3, #0
 80026c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d02f      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026dc:	d005      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x32>
 80026de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026e2:	d015      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d007      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80026e8:	e00f      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80026ea:	4bac      	ldr	r3, [pc, #688]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	4aab      	ldr	r2, [pc, #684]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026f6:	e00c      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3304      	adds	r3, #4
 80026fc:	2100      	movs	r1, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 f9dc 	bl	8002abc <RCCEx_PLLSAI1_Config>
 8002704:	4603      	mov	r3, r0
 8002706:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002708:	e003      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	74fb      	strb	r3, [r7, #19]
      break;
 800270e:	e000      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002710:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002712:	7cfb      	ldrb	r3, [r7, #19]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10b      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002718:	4ba0      	ldr	r3, [pc, #640]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002726:	499d      	ldr	r1, [pc, #628]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800272e:	e001      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002730:	7cfb      	ldrb	r3, [r7, #19]
 8002732:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 8099 	beq.w	8002874 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002742:	2300      	movs	r3, #0
 8002744:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002746:	4b95      	ldr	r3, [pc, #596]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002756:	2300      	movs	r3, #0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00d      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800275c:	4b8f      	ldr	r3, [pc, #572]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800275e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002760:	4a8e      	ldr	r2, [pc, #568]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002766:	6593      	str	r3, [r2, #88]	; 0x58
 8002768:	4b8c      	ldr	r3, [pc, #560]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800276a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002774:	2301      	movs	r3, #1
 8002776:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002778:	4b89      	ldr	r3, [pc, #548]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a88      	ldr	r2, [pc, #544]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800277e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002782:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002784:	f7fe fc1c 	bl	8000fc0 <HAL_GetTick>
 8002788:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800278a:	e009      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278c:	f7fe fc18 	bl	8000fc0 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d902      	bls.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	74fb      	strb	r3, [r7, #19]
        break;
 800279e:	e005      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027a0:	4b7f      	ldr	r3, [pc, #508]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0ef      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80027ac:	7cfb      	ldrb	r3, [r7, #19]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d155      	bne.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027b2:	4b7a      	ldr	r3, [pc, #488]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d01e      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d019      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027ce:	4b73      	ldr	r3, [pc, #460]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027da:	4b70      	ldr	r3, [pc, #448]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e0:	4a6e      	ldr	r2, [pc, #440]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027ea:	4b6c      	ldr	r3, [pc, #432]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f0:	4a6a      	ldr	r2, [pc, #424]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027fa:	4a68      	ldr	r2, [pc, #416]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b00      	cmp	r3, #0
 800280a:	d016      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280c:	f7fe fbd8 	bl	8000fc0 <HAL_GetTick>
 8002810:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002812:	e00b      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002814:	f7fe fbd4 	bl	8000fc0 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002822:	4293      	cmp	r3, r2
 8002824:	d902      	bls.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	74fb      	strb	r3, [r7, #19]
            break;
 800282a:	e006      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800282c:	4b5b      	ldr	r3, [pc, #364]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800282e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0ec      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800283a:	7cfb      	ldrb	r3, [r7, #19]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10b      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002840:	4b56      	ldr	r3, [pc, #344]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002846:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800284e:	4953      	ldr	r1, [pc, #332]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002850:	4313      	orrs	r3, r2
 8002852:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002856:	e004      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002858:	7cfb      	ldrb	r3, [r7, #19]
 800285a:	74bb      	strb	r3, [r7, #18]
 800285c:	e001      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800285e:	7cfb      	ldrb	r3, [r7, #19]
 8002860:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002862:	7c7b      	ldrb	r3, [r7, #17]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d105      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002868:	4b4c      	ldr	r3, [pc, #304]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800286a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286c:	4a4b      	ldr	r2, [pc, #300]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800286e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002872:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00a      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002880:	4b46      	ldr	r3, [pc, #280]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002886:	f023 0203 	bic.w	r2, r3, #3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	4943      	ldr	r1, [pc, #268]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028a2:	4b3e      	ldr	r3, [pc, #248]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a8:	f023 020c 	bic.w	r2, r3, #12
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	493a      	ldr	r1, [pc, #232]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0320 	and.w	r3, r3, #32
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028c4:	4b35      	ldr	r3, [pc, #212]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d2:	4932      	ldr	r1, [pc, #200]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028e6:	4b2d      	ldr	r3, [pc, #180]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f4:	4929      	ldr	r1, [pc, #164]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002908:	4b24      	ldr	r3, [pc, #144]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002916:	4921      	ldr	r1, [pc, #132]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800292a:	4b1c      	ldr	r3, [pc, #112]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002930:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	4918      	ldr	r1, [pc, #96]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00a      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800294c:	4b13      	ldr	r3, [pc, #76]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	4910      	ldr	r1, [pc, #64]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d02c      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800296e:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002974:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	4907      	ldr	r1, [pc, #28]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800298c:	d10a      	bne.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800298e:	4b03      	ldr	r3, [pc, #12]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	4a02      	ldr	r2, [pc, #8]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002994:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002998:	60d3      	str	r3, [r2, #12]
 800299a:	e015      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800299c:	40021000 	.word	0x40021000
 80029a0:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029ac:	d10c      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3304      	adds	r3, #4
 80029b2:	2101      	movs	r1, #1
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 f881 	bl	8002abc <RCCEx_PLLSAI1_Config>
 80029ba:	4603      	mov	r3, r0
 80029bc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029be:	7cfb      	ldrb	r3, [r7, #19]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 80029c4:	7cfb      	ldrb	r3, [r7, #19]
 80029c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d028      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029d4:	4b30      	ldr	r3, [pc, #192]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	492d      	ldr	r1, [pc, #180]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029f2:	d106      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029f4:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	4a27      	ldr	r2, [pc, #156]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029fe:	60d3      	str	r3, [r2, #12]
 8002a00:	e011      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a0a:	d10c      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3304      	adds	r3, #4
 8002a10:	2101      	movs	r1, #1
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 f852 	bl	8002abc <RCCEx_PLLSAI1_Config>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a1c:	7cfb      	ldrb	r3, [r7, #19]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8002a22:	7cfb      	ldrb	r3, [r7, #19]
 8002a24:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d01c      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a32:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a38:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a40:	4915      	ldr	r1, [pc, #84]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3304      	adds	r3, #4
 8002a56:	2102      	movs	r1, #2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 f82f 	bl	8002abc <RCCEx_PLLSAI1_Config>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a62:	7cfb      	ldrb	r3, [r7, #19]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002a68:	7cfb      	ldrb	r3, [r7, #19]
 8002a6a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a78:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a86:	4904      	ldr	r1, [pc, #16]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a8e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40021000 	.word	0x40021000

08002a9c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002aa0:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002aa6:	f043 0304 	orr.w	r3, r3, #4
 8002aaa:	6013      	str	r3, [r2, #0]
}
 8002aac:	bf00      	nop
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40021000 	.word	0x40021000

08002abc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002aca:	4b73      	ldr	r3, [pc, #460]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d018      	beq.n	8002b08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ad6:	4b70      	ldr	r3, [pc, #448]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f003 0203 	and.w	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d10d      	bne.n	8002b02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
       ||
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d009      	beq.n	8002b02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002aee:	4b6a      	ldr	r3, [pc, #424]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	091b      	lsrs	r3, r3, #4
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
       ||
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d044      	beq.n	8002b8c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
 8002b06:	e041      	b.n	8002b8c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d00c      	beq.n	8002b2a <RCCEx_PLLSAI1_Config+0x6e>
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d013      	beq.n	8002b3c <RCCEx_PLLSAI1_Config+0x80>
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d120      	bne.n	8002b5a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b18:	4b5f      	ldr	r3, [pc, #380]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d11d      	bne.n	8002b60 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b28:	e01a      	b.n	8002b60 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b2a:	4b5b      	ldr	r3, [pc, #364]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d116      	bne.n	8002b64 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b3a:	e013      	b.n	8002b64 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b3c:	4b56      	ldr	r3, [pc, #344]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10f      	bne.n	8002b68 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b48:	4b53      	ldr	r3, [pc, #332]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d109      	bne.n	8002b68 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b58:	e006      	b.n	8002b68 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b5e:	e004      	b.n	8002b6a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002b60:	bf00      	nop
 8002b62:	e002      	b.n	8002b6a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002b64:	bf00      	nop
 8002b66:	e000      	b.n	8002b6a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002b68:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10d      	bne.n	8002b8c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b70:	4b49      	ldr	r3, [pc, #292]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6819      	ldr	r1, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	3b01      	subs	r3, #1
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	430b      	orrs	r3, r1
 8002b86:	4944      	ldr	r1, [pc, #272]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d17c      	bne.n	8002c8c <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b92:	4b41      	ldr	r3, [pc, #260]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a40      	ldr	r2, [pc, #256]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b9e:	f7fe fa0f 	bl	8000fc0 <HAL_GetTick>
 8002ba2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ba4:	e009      	b.n	8002bba <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ba6:	f7fe fa0b 	bl	8000fc0 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d902      	bls.n	8002bba <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	73fb      	strb	r3, [r7, #15]
        break;
 8002bb8:	e005      	b.n	8002bc6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bba:	4b37      	ldr	r3, [pc, #220]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1ef      	bne.n	8002ba6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d15f      	bne.n	8002c8c <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d110      	bne.n	8002bf4 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bd2:	4b31      	ldr	r3, [pc, #196]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002bda:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6892      	ldr	r2, [r2, #8]
 8002be2:	0211      	lsls	r1, r2, #8
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	68d2      	ldr	r2, [r2, #12]
 8002be8:	06d2      	lsls	r2, r2, #27
 8002bea:	430a      	orrs	r2, r1
 8002bec:	492a      	ldr	r1, [pc, #168]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	610b      	str	r3, [r1, #16]
 8002bf2:	e027      	b.n	8002c44 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d112      	bne.n	8002c20 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bfa:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c02:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6892      	ldr	r2, [r2, #8]
 8002c0a:	0211      	lsls	r1, r2, #8
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6912      	ldr	r2, [r2, #16]
 8002c10:	0852      	lsrs	r2, r2, #1
 8002c12:	3a01      	subs	r2, #1
 8002c14:	0552      	lsls	r2, r2, #21
 8002c16:	430a      	orrs	r2, r1
 8002c18:	491f      	ldr	r1, [pc, #124]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	610b      	str	r3, [r1, #16]
 8002c1e:	e011      	b.n	8002c44 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c20:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6892      	ldr	r2, [r2, #8]
 8002c30:	0211      	lsls	r1, r2, #8
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6952      	ldr	r2, [r2, #20]
 8002c36:	0852      	lsrs	r2, r2, #1
 8002c38:	3a01      	subs	r2, #1
 8002c3a:	0652      	lsls	r2, r2, #25
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	4916      	ldr	r1, [pc, #88]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c44:	4b14      	ldr	r3, [pc, #80]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a13      	ldr	r2, [pc, #76]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c50:	f7fe f9b6 	bl	8000fc0 <HAL_GetTick>
 8002c54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c56:	e009      	b.n	8002c6c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c58:	f7fe f9b2 	bl	8000fc0 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d902      	bls.n	8002c6c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	73fb      	strb	r3, [r7, #15]
          break;
 8002c6a:	e005      	b.n	8002c78 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0ef      	beq.n	8002c58 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d106      	bne.n	8002c8c <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c80:	691a      	ldr	r2, [r3, #16]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	4904      	ldr	r1, [pc, #16]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000

08002c9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e049      	b.n	8002d42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fd fff8 	bl	8000cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4610      	mov	r0, r2
 8002cdc:	f000 fb6a 	bl	80033b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d001      	beq.n	8002d64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e03b      	b.n	8002ddc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2202      	movs	r2, #2
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 0201 	orr.w	r2, r2, #1
 8002d7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a19      	ldr	r2, [pc, #100]	; (8002de8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d009      	beq.n	8002d9a <HAL_TIM_Base_Start_IT+0x4e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8e:	d004      	beq.n	8002d9a <HAL_TIM_Base_Start_IT+0x4e>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a15      	ldr	r2, [pc, #84]	; (8002dec <HAL_TIM_Base_Start_IT+0xa0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d115      	bne.n	8002dc6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	4b13      	ldr	r3, [pc, #76]	; (8002df0 <HAL_TIM_Base_Start_IT+0xa4>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2b06      	cmp	r3, #6
 8002daa:	d015      	beq.n	8002dd8 <HAL_TIM_Base_Start_IT+0x8c>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db2:	d011      	beq.n	8002dd8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0201 	orr.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc4:	e008      	b.n	8002dd8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f042 0201 	orr.w	r2, r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	e000      	b.n	8002dda <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	40012c00 	.word	0x40012c00
 8002dec:	40014000 	.word	0x40014000
 8002df0:	00010007 	.word	0x00010007

08002df4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e049      	b.n	8002e9a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d106      	bne.n	8002e20 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f841 	bl	8002ea2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3304      	adds	r3, #4
 8002e30:	4619      	mov	r1, r3
 8002e32:	4610      	mov	r0, r2
 8002e34:	f000 fabe 	bl	80033b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d122      	bne.n	8002f12 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d11b      	bne.n	8002f12 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f06f 0202 	mvn.w	r2, #2
 8002ee2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fa3d 	bl	8003378 <HAL_TIM_IC_CaptureCallback>
 8002efe:	e005      	b.n	8002f0c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 fa2f 	bl	8003364 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 fa40 	bl	800338c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	d122      	bne.n	8002f66 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d11b      	bne.n	8002f66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f06f 0204 	mvn.w	r2, #4
 8002f36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 fa13 	bl	8003378 <HAL_TIM_IC_CaptureCallback>
 8002f52:	e005      	b.n	8002f60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 fa05 	bl	8003364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fa16 	bl	800338c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d122      	bne.n	8002fba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d11b      	bne.n	8002fba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f06f 0208 	mvn.w	r2, #8
 8002f8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2204      	movs	r2, #4
 8002f90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f9e9 	bl	8003378 <HAL_TIM_IC_CaptureCallback>
 8002fa6:	e005      	b.n	8002fb4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f9db 	bl	8003364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f9ec 	bl	800338c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b10      	cmp	r3, #16
 8002fc6:	d122      	bne.n	800300e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	2b10      	cmp	r3, #16
 8002fd4:	d11b      	bne.n	800300e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f06f 0210 	mvn.w	r2, #16
 8002fde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2208      	movs	r2, #8
 8002fe4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f9bf 	bl	8003378 <HAL_TIM_IC_CaptureCallback>
 8002ffa:	e005      	b.n	8003008 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f9b1 	bl	8003364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f9c2 	bl	800338c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b01      	cmp	r3, #1
 800301a:	d10e      	bne.n	800303a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b01      	cmp	r3, #1
 8003028:	d107      	bne.n	800303a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f06f 0201 	mvn.w	r2, #1
 8003032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7fd fcbf 	bl	80009b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003044:	2b80      	cmp	r3, #128	; 0x80
 8003046:	d10e      	bne.n	8003066 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003052:	2b80      	cmp	r3, #128	; 0x80
 8003054:	d107      	bne.n	8003066 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800305e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 fd93 	bl	8003b8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003074:	d10e      	bne.n	8003094 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003080:	2b80      	cmp	r3, #128	; 0x80
 8003082:	d107      	bne.n	8003094 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800308c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 fd86 	bl	8003ba0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309e:	2b40      	cmp	r3, #64	; 0x40
 80030a0:	d10e      	bne.n	80030c0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ac:	2b40      	cmp	r3, #64	; 0x40
 80030ae:	d107      	bne.n	80030c0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f970 	bl	80033a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	f003 0320 	and.w	r3, r3, #32
 80030ca:	2b20      	cmp	r3, #32
 80030cc:	d10e      	bne.n	80030ec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	2b20      	cmp	r3, #32
 80030da:	d107      	bne.n	80030ec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f06f 0220 	mvn.w	r2, #32
 80030e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 fd46 	bl	8003b78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030ec:	bf00      	nop
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_TIM_OC_ConfigChannel+0x1e>
 800310e:	2302      	movs	r3, #2
 8003110:	e066      	b.n	80031e0 <HAL_TIM_OC_ConfigChannel+0xec>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b14      	cmp	r3, #20
 800311e:	d857      	bhi.n	80031d0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003120:	a201      	add	r2, pc, #4	; (adr r2, 8003128 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003126:	bf00      	nop
 8003128:	0800317d 	.word	0x0800317d
 800312c:	080031d1 	.word	0x080031d1
 8003130:	080031d1 	.word	0x080031d1
 8003134:	080031d1 	.word	0x080031d1
 8003138:	0800318b 	.word	0x0800318b
 800313c:	080031d1 	.word	0x080031d1
 8003140:	080031d1 	.word	0x080031d1
 8003144:	080031d1 	.word	0x080031d1
 8003148:	08003199 	.word	0x08003199
 800314c:	080031d1 	.word	0x080031d1
 8003150:	080031d1 	.word	0x080031d1
 8003154:	080031d1 	.word	0x080031d1
 8003158:	080031a7 	.word	0x080031a7
 800315c:	080031d1 	.word	0x080031d1
 8003160:	080031d1 	.word	0x080031d1
 8003164:	080031d1 	.word	0x080031d1
 8003168:	080031b5 	.word	0x080031b5
 800316c:	080031d1 	.word	0x080031d1
 8003170:	080031d1 	.word	0x080031d1
 8003174:	080031d1 	.word	0x080031d1
 8003178:	080031c3 	.word	0x080031c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68b9      	ldr	r1, [r7, #8]
 8003182:	4618      	mov	r0, r3
 8003184:	f000 f97a 	bl	800347c <TIM_OC1_SetConfig>
      break;
 8003188:	e025      	b.n	80031d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68b9      	ldr	r1, [r7, #8]
 8003190:	4618      	mov	r0, r3
 8003192:	f000 f9ef 	bl	8003574 <TIM_OC2_SetConfig>
      break;
 8003196:	e01e      	b.n	80031d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68b9      	ldr	r1, [r7, #8]
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fa62 	bl	8003668 <TIM_OC3_SetConfig>
      break;
 80031a4:	e017      	b.n	80031d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68b9      	ldr	r1, [r7, #8]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 fad3 	bl	8003758 <TIM_OC4_SetConfig>
      break;
 80031b2:	e010      	b.n	80031d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fb2a 	bl	8003814 <TIM_OC5_SetConfig>
      break;
 80031c0:	e009      	b.n	80031d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68b9      	ldr	r1, [r7, #8]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 fb7b 	bl	80038c4 <TIM_OC6_SetConfig>
      break;
 80031ce:	e002      	b.n	80031d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	75fb      	strb	r3, [r7, #23]
      break;
 80031d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031de:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <HAL_TIM_ConfigClockSource+0x1c>
 8003200:	2302      	movs	r3, #2
 8003202:	e0ab      	b.n	800335c <HAL_TIM_ConfigClockSource+0x174>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003222:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800322e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b40      	cmp	r3, #64	; 0x40
 800323e:	d067      	beq.n	8003310 <HAL_TIM_ConfigClockSource+0x128>
 8003240:	2b40      	cmp	r3, #64	; 0x40
 8003242:	d80b      	bhi.n	800325c <HAL_TIM_ConfigClockSource+0x74>
 8003244:	2b10      	cmp	r3, #16
 8003246:	d073      	beq.n	8003330 <HAL_TIM_ConfigClockSource+0x148>
 8003248:	2b10      	cmp	r3, #16
 800324a:	d802      	bhi.n	8003252 <HAL_TIM_ConfigClockSource+0x6a>
 800324c:	2b00      	cmp	r3, #0
 800324e:	d06f      	beq.n	8003330 <HAL_TIM_ConfigClockSource+0x148>
 8003250:	e077      	b.n	8003342 <HAL_TIM_ConfigClockSource+0x15a>
 8003252:	2b20      	cmp	r3, #32
 8003254:	d06c      	beq.n	8003330 <HAL_TIM_ConfigClockSource+0x148>
 8003256:	2b30      	cmp	r3, #48	; 0x30
 8003258:	d06a      	beq.n	8003330 <HAL_TIM_ConfigClockSource+0x148>
 800325a:	e072      	b.n	8003342 <HAL_TIM_ConfigClockSource+0x15a>
 800325c:	2b70      	cmp	r3, #112	; 0x70
 800325e:	d00d      	beq.n	800327c <HAL_TIM_ConfigClockSource+0x94>
 8003260:	2b70      	cmp	r3, #112	; 0x70
 8003262:	d804      	bhi.n	800326e <HAL_TIM_ConfigClockSource+0x86>
 8003264:	2b50      	cmp	r3, #80	; 0x50
 8003266:	d033      	beq.n	80032d0 <HAL_TIM_ConfigClockSource+0xe8>
 8003268:	2b60      	cmp	r3, #96	; 0x60
 800326a:	d041      	beq.n	80032f0 <HAL_TIM_ConfigClockSource+0x108>
 800326c:	e069      	b.n	8003342 <HAL_TIM_ConfigClockSource+0x15a>
 800326e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003272:	d069      	beq.n	8003348 <HAL_TIM_ConfigClockSource+0x160>
 8003274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003278:	d017      	beq.n	80032aa <HAL_TIM_ConfigClockSource+0xc2>
 800327a:	e062      	b.n	8003342 <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	6899      	ldr	r1, [r3, #8]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f000 fbee 	bl	8003a6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800329e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	609a      	str	r2, [r3, #8]
      break;
 80032a8:	e04f      	b.n	800334a <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	6899      	ldr	r1, [r3, #8]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f000 fbd7 	bl	8003a6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032cc:	609a      	str	r2, [r3, #8]
      break;
 80032ce:	e03c      	b.n	800334a <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6818      	ldr	r0, [r3, #0]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	6859      	ldr	r1, [r3, #4]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	461a      	mov	r2, r3
 80032de:	f000 fb4b 	bl	8003978 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2150      	movs	r1, #80	; 0x50
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 fba4 	bl	8003a36 <TIM_ITRx_SetConfig>
      break;
 80032ee:	e02c      	b.n	800334a <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	6859      	ldr	r1, [r3, #4]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	461a      	mov	r2, r3
 80032fe:	f000 fb6a 	bl	80039d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2160      	movs	r1, #96	; 0x60
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fb94 	bl	8003a36 <TIM_ITRx_SetConfig>
      break;
 800330e:	e01c      	b.n	800334a <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	6859      	ldr	r1, [r3, #4]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	461a      	mov	r2, r3
 800331e:	f000 fb2b 	bl	8003978 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2140      	movs	r1, #64	; 0x40
 8003328:	4618      	mov	r0, r3
 800332a:	f000 fb84 	bl	8003a36 <TIM_ITRx_SetConfig>
      break;
 800332e:	e00c      	b.n	800334a <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4619      	mov	r1, r3
 800333a:	4610      	mov	r0, r2
 800333c:	f000 fb7b 	bl	8003a36 <TIM_ITRx_SetConfig>
      break;
 8003340:	e003      	b.n	800334a <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	73fb      	strb	r3, [r7, #15]
      break;
 8003346:	e000      	b.n	800334a <HAL_TIM_ConfigClockSource+0x162>
      break;
 8003348:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800335a:	7bfb      	ldrb	r3, [r7, #15]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a2a      	ldr	r2, [pc, #168]	; (8003470 <TIM_Base_SetConfig+0xbc>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d003      	beq.n	80033d4 <TIM_Base_SetConfig+0x20>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d2:	d108      	bne.n	80033e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a21      	ldr	r2, [pc, #132]	; (8003470 <TIM_Base_SetConfig+0xbc>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00b      	beq.n	8003406 <TIM_Base_SetConfig+0x52>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f4:	d007      	beq.n	8003406 <TIM_Base_SetConfig+0x52>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a1e      	ldr	r2, [pc, #120]	; (8003474 <TIM_Base_SetConfig+0xc0>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d003      	beq.n	8003406 <TIM_Base_SetConfig+0x52>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a1d      	ldr	r2, [pc, #116]	; (8003478 <TIM_Base_SetConfig+0xc4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d108      	bne.n	8003418 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800340c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	4313      	orrs	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a0c      	ldr	r2, [pc, #48]	; (8003470 <TIM_Base_SetConfig+0xbc>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d007      	beq.n	8003454 <TIM_Base_SetConfig+0xa0>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a0b      	ldr	r2, [pc, #44]	; (8003474 <TIM_Base_SetConfig+0xc0>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d003      	beq.n	8003454 <TIM_Base_SetConfig+0xa0>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a0a      	ldr	r2, [pc, #40]	; (8003478 <TIM_Base_SetConfig+0xc4>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d103      	bne.n	800345c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	615a      	str	r2, [r3, #20]
}
 8003462:	bf00      	nop
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40012c00 	.word	0x40012c00
 8003474:	40014000 	.word	0x40014000
 8003478:	40014400 	.word	0x40014400

0800347c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	f023 0201 	bic.w	r2, r3, #1
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 0303 	bic.w	r3, r3, #3
 80034b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	4313      	orrs	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f023 0302 	bic.w	r3, r3, #2
 80034c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a24      	ldr	r2, [pc, #144]	; (8003568 <TIM_OC1_SetConfig+0xec>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d007      	beq.n	80034ec <TIM_OC1_SetConfig+0x70>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a23      	ldr	r2, [pc, #140]	; (800356c <TIM_OC1_SetConfig+0xf0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d003      	beq.n	80034ec <TIM_OC1_SetConfig+0x70>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a22      	ldr	r2, [pc, #136]	; (8003570 <TIM_OC1_SetConfig+0xf4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d10c      	bne.n	8003506 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f023 0308 	bic.w	r3, r3, #8
 80034f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f023 0304 	bic.w	r3, r3, #4
 8003504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a17      	ldr	r2, [pc, #92]	; (8003568 <TIM_OC1_SetConfig+0xec>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d007      	beq.n	800351e <TIM_OC1_SetConfig+0xa2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a16      	ldr	r2, [pc, #88]	; (800356c <TIM_OC1_SetConfig+0xf0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d003      	beq.n	800351e <TIM_OC1_SetConfig+0xa2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a15      	ldr	r2, [pc, #84]	; (8003570 <TIM_OC1_SetConfig+0xf4>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d111      	bne.n	8003542 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003524:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800352c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	621a      	str	r2, [r3, #32]
}
 800355c:	bf00      	nop
 800355e:	371c      	adds	r7, #28
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	40012c00 	.word	0x40012c00
 800356c:	40014000 	.word	0x40014000
 8003570:	40014400 	.word	0x40014400

08003574 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	f023 0210 	bic.w	r2, r3, #16
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	021b      	lsls	r3, r3, #8
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f023 0320 	bic.w	r3, r3, #32
 80035c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a22      	ldr	r2, [pc, #136]	; (800365c <TIM_OC2_SetConfig+0xe8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d10d      	bne.n	80035f4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a19      	ldr	r2, [pc, #100]	; (800365c <TIM_OC2_SetConfig+0xe8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d007      	beq.n	800360c <TIM_OC2_SetConfig+0x98>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a18      	ldr	r2, [pc, #96]	; (8003660 <TIM_OC2_SetConfig+0xec>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d003      	beq.n	800360c <TIM_OC2_SetConfig+0x98>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a17      	ldr	r2, [pc, #92]	; (8003664 <TIM_OC2_SetConfig+0xf0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d113      	bne.n	8003634 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003612:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800361a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	621a      	str	r2, [r3, #32]
}
 800364e:	bf00      	nop
 8003650:	371c      	adds	r7, #28
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	40012c00 	.word	0x40012c00
 8003660:	40014000 	.word	0x40014000
 8003664:	40014400 	.word	0x40014400

08003668 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800369a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f023 0303 	bic.w	r3, r3, #3
 80036a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	021b      	lsls	r3, r3, #8
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	4313      	orrs	r3, r2
 80036c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a21      	ldr	r2, [pc, #132]	; (800374c <TIM_OC3_SetConfig+0xe4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d10d      	bne.n	80036e6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	021b      	lsls	r3, r3, #8
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	4313      	orrs	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a18      	ldr	r2, [pc, #96]	; (800374c <TIM_OC3_SetConfig+0xe4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d007      	beq.n	80036fe <TIM_OC3_SetConfig+0x96>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a17      	ldr	r2, [pc, #92]	; (8003750 <TIM_OC3_SetConfig+0xe8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d003      	beq.n	80036fe <TIM_OC3_SetConfig+0x96>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a16      	ldr	r2, [pc, #88]	; (8003754 <TIM_OC3_SetConfig+0xec>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d113      	bne.n	8003726 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800370c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	4313      	orrs	r3, r2
 8003718:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4313      	orrs	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	621a      	str	r2, [r3, #32]
}
 8003740:	bf00      	nop
 8003742:	371c      	adds	r7, #28
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	40012c00 	.word	0x40012c00
 8003750:	40014000 	.word	0x40014000
 8003754:	40014400 	.word	0x40014400

08003758 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800378a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	021b      	lsls	r3, r3, #8
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	4313      	orrs	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	031b      	lsls	r3, r3, #12
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a14      	ldr	r2, [pc, #80]	; (8003808 <TIM_OC4_SetConfig+0xb0>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d007      	beq.n	80037cc <TIM_OC4_SetConfig+0x74>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a13      	ldr	r2, [pc, #76]	; (800380c <TIM_OC4_SetConfig+0xb4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d003      	beq.n	80037cc <TIM_OC4_SetConfig+0x74>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a12      	ldr	r2, [pc, #72]	; (8003810 <TIM_OC4_SetConfig+0xb8>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d109      	bne.n	80037e0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	019b      	lsls	r3, r3, #6
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	4313      	orrs	r3, r2
 80037de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	621a      	str	r2, [r3, #32]
}
 80037fa:	bf00      	nop
 80037fc:	371c      	adds	r7, #28
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40012c00 	.word	0x40012c00
 800380c:	40014000 	.word	0x40014000
 8003810:	40014400 	.word	0x40014400

08003814 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	4313      	orrs	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003858:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	041b      	lsls	r3, r3, #16
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a13      	ldr	r2, [pc, #76]	; (80038b8 <TIM_OC5_SetConfig+0xa4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d007      	beq.n	800387e <TIM_OC5_SetConfig+0x6a>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a12      	ldr	r2, [pc, #72]	; (80038bc <TIM_OC5_SetConfig+0xa8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d003      	beq.n	800387e <TIM_OC5_SetConfig+0x6a>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a11      	ldr	r2, [pc, #68]	; (80038c0 <TIM_OC5_SetConfig+0xac>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d109      	bne.n	8003892 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003884:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	021b      	lsls	r3, r3, #8
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	4313      	orrs	r3, r2
 8003890:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	621a      	str	r2, [r3, #32]
}
 80038ac:	bf00      	nop
 80038ae:	371c      	adds	r7, #28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	40012c00 	.word	0x40012c00
 80038bc:	40014000 	.word	0x40014000
 80038c0:	40014400 	.word	0x40014400

080038c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	021b      	lsls	r3, r3, #8
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800390a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	051b      	lsls	r3, r3, #20
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a14      	ldr	r2, [pc, #80]	; (800396c <TIM_OC6_SetConfig+0xa8>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d007      	beq.n	8003930 <TIM_OC6_SetConfig+0x6c>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a13      	ldr	r2, [pc, #76]	; (8003970 <TIM_OC6_SetConfig+0xac>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d003      	beq.n	8003930 <TIM_OC6_SetConfig+0x6c>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a12      	ldr	r2, [pc, #72]	; (8003974 <TIM_OC6_SetConfig+0xb0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d109      	bne.n	8003944 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003936:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	029b      	lsls	r3, r3, #10
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	621a      	str	r2, [r3, #32]
}
 800395e:	bf00      	nop
 8003960:	371c      	adds	r7, #28
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40012c00 	.word	0x40012c00
 8003970:	40014000 	.word	0x40014000
 8003974:	40014400 	.word	0x40014400

08003978 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	f023 0201 	bic.w	r2, r3, #1
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f023 030a 	bic.w	r3, r3, #10
 80039b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	621a      	str	r2, [r3, #32]
}
 80039ca:	bf00      	nop
 80039cc:	371c      	adds	r7, #28
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b087      	sub	sp, #28
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	f023 0210 	bic.w	r2, r3, #16
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	031b      	lsls	r3, r3, #12
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	621a      	str	r2, [r3, #32]
}
 8003a2a:	bf00      	nop
 8003a2c:	371c      	adds	r7, #28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b085      	sub	sp, #20
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	f043 0307 	orr.w	r3, r3, #7
 8003a58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	609a      	str	r2, [r3, #8]
}
 8003a60:	bf00      	nop
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
 8003a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	021a      	lsls	r2, r3, #8
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	609a      	str	r2, [r3, #8]
}
 8003aa0:	bf00      	nop
 8003aa2:	371c      	adds	r7, #28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e04f      	b.n	8003b64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a21      	ldr	r2, [pc, #132]	; (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d108      	bne.n	8003b00 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003af4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a14      	ldr	r2, [pc, #80]	; (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d009      	beq.n	8003b38 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b2c:	d004      	beq.n	8003b38 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a10      	ldr	r2, [pc, #64]	; (8003b74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d10c      	bne.n	8003b52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	40012c00 	.word	0x40012c00
 8003b74:	40014000 	.word	0x40014000

08003b78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e040      	b.n	8003c48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7fd f8f6 	bl	8000dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2224      	movs	r2, #36	; 0x24
 8003be0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0201 	bic.w	r2, r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f8c0 	bl	8003d78 <UART_SetConfig>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d101      	bne.n	8003c02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e022      	b.n	8003c48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 fac2 	bl	8004194 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0201 	orr.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 fb49 	bl	80042d8 <UART_CheckIdleState>
 8003c46:	4603      	mov	r3, r0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08a      	sub	sp, #40	; 0x28
 8003c54:	af02      	add	r7, sp, #8
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	f040 8082 	bne.w	8003d6e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <HAL_UART_Transmit+0x26>
 8003c70:	88fb      	ldrh	r3, [r7, #6]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e07a      	b.n	8003d70 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_UART_Transmit+0x38>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e073      	b.n	8003d70 <HAL_UART_Transmit+0x120>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2221      	movs	r2, #33	; 0x21
 8003c9c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c9e:	f7fd f98f 	bl	8000fc0 <HAL_GetTick>
 8003ca2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	88fa      	ldrh	r2, [r7, #6]
 8003ca8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	88fa      	ldrh	r2, [r7, #6]
 8003cb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cbc:	d108      	bne.n	8003cd0 <HAL_UART_Transmit+0x80>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d104      	bne.n	8003cd0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	61bb      	str	r3, [r7, #24]
 8003cce:	e003      	b.n	8003cd8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003ce0:	e02d      	b.n	8003d3e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	2180      	movs	r1, #128	; 0x80
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 fb3c 	bl	800436a <UART_WaitOnFlagUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e039      	b.n	8003d70 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10b      	bne.n	8003d1a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	881a      	ldrh	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d0e:	b292      	uxth	r2, r2
 8003d10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	3302      	adds	r3, #2
 8003d16:	61bb      	str	r3, [r7, #24]
 8003d18:	e008      	b.n	8003d2c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	781a      	ldrb	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	b292      	uxth	r2, r2
 8003d24:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1cb      	bne.n	8003ce2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2200      	movs	r2, #0
 8003d52:	2140      	movs	r1, #64	; 0x40
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 fb08 	bl	800436a <UART_WaitOnFlagUntilTimeout>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e005      	b.n	8003d70 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2220      	movs	r2, #32
 8003d68:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	e000      	b.n	8003d70 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003d6e:	2302      	movs	r3, #2
  }
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3720      	adds	r7, #32
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d78:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003d7c:	b088      	sub	sp, #32
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	4bb0      	ldr	r3, [pc, #704]	; (8004068 <UART_SetConfig+0x2f0>)
 8003da6:	4013      	ands	r3, r2
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	69f9      	ldr	r1, [r7, #28]
 8003dae:	430b      	orrs	r3, r1
 8003db0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4aa6      	ldr	r2, [pc, #664]	; (800406c <UART_SetConfig+0x2f4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d004      	beq.n	8003de2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	69fa      	ldr	r2, [r7, #28]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a9d      	ldr	r2, [pc, #628]	; (8004070 <UART_SetConfig+0x2f8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d121      	bne.n	8003e44 <UART_SetConfig+0xcc>
 8003e00:	4b9c      	ldr	r3, [pc, #624]	; (8004074 <UART_SetConfig+0x2fc>)
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d816      	bhi.n	8003e3c <UART_SetConfig+0xc4>
 8003e0e:	a201      	add	r2, pc, #4	; (adr r2, 8003e14 <UART_SetConfig+0x9c>)
 8003e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e14:	08003e25 	.word	0x08003e25
 8003e18:	08003e31 	.word	0x08003e31
 8003e1c:	08003e2b 	.word	0x08003e2b
 8003e20:	08003e37 	.word	0x08003e37
 8003e24:	2301      	movs	r3, #1
 8003e26:	76fb      	strb	r3, [r7, #27]
 8003e28:	e072      	b.n	8003f10 <UART_SetConfig+0x198>
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	76fb      	strb	r3, [r7, #27]
 8003e2e:	e06f      	b.n	8003f10 <UART_SetConfig+0x198>
 8003e30:	2304      	movs	r3, #4
 8003e32:	76fb      	strb	r3, [r7, #27]
 8003e34:	e06c      	b.n	8003f10 <UART_SetConfig+0x198>
 8003e36:	2308      	movs	r3, #8
 8003e38:	76fb      	strb	r3, [r7, #27]
 8003e3a:	e069      	b.n	8003f10 <UART_SetConfig+0x198>
 8003e3c:	2310      	movs	r3, #16
 8003e3e:	76fb      	strb	r3, [r7, #27]
 8003e40:	bf00      	nop
 8003e42:	e065      	b.n	8003f10 <UART_SetConfig+0x198>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a8b      	ldr	r2, [pc, #556]	; (8004078 <UART_SetConfig+0x300>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d134      	bne.n	8003eb8 <UART_SetConfig+0x140>
 8003e4e:	4b89      	ldr	r3, [pc, #548]	; (8004074 <UART_SetConfig+0x2fc>)
 8003e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e54:	f003 030c 	and.w	r3, r3, #12
 8003e58:	2b0c      	cmp	r3, #12
 8003e5a:	d829      	bhi.n	8003eb0 <UART_SetConfig+0x138>
 8003e5c:	a201      	add	r2, pc, #4	; (adr r2, 8003e64 <UART_SetConfig+0xec>)
 8003e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e62:	bf00      	nop
 8003e64:	08003e99 	.word	0x08003e99
 8003e68:	08003eb1 	.word	0x08003eb1
 8003e6c:	08003eb1 	.word	0x08003eb1
 8003e70:	08003eb1 	.word	0x08003eb1
 8003e74:	08003ea5 	.word	0x08003ea5
 8003e78:	08003eb1 	.word	0x08003eb1
 8003e7c:	08003eb1 	.word	0x08003eb1
 8003e80:	08003eb1 	.word	0x08003eb1
 8003e84:	08003e9f 	.word	0x08003e9f
 8003e88:	08003eb1 	.word	0x08003eb1
 8003e8c:	08003eb1 	.word	0x08003eb1
 8003e90:	08003eb1 	.word	0x08003eb1
 8003e94:	08003eab 	.word	0x08003eab
 8003e98:	2300      	movs	r3, #0
 8003e9a:	76fb      	strb	r3, [r7, #27]
 8003e9c:	e038      	b.n	8003f10 <UART_SetConfig+0x198>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	76fb      	strb	r3, [r7, #27]
 8003ea2:	e035      	b.n	8003f10 <UART_SetConfig+0x198>
 8003ea4:	2304      	movs	r3, #4
 8003ea6:	76fb      	strb	r3, [r7, #27]
 8003ea8:	e032      	b.n	8003f10 <UART_SetConfig+0x198>
 8003eaa:	2308      	movs	r3, #8
 8003eac:	76fb      	strb	r3, [r7, #27]
 8003eae:	e02f      	b.n	8003f10 <UART_SetConfig+0x198>
 8003eb0:	2310      	movs	r3, #16
 8003eb2:	76fb      	strb	r3, [r7, #27]
 8003eb4:	bf00      	nop
 8003eb6:	e02b      	b.n	8003f10 <UART_SetConfig+0x198>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a6b      	ldr	r2, [pc, #428]	; (800406c <UART_SetConfig+0x2f4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d124      	bne.n	8003f0c <UART_SetConfig+0x194>
 8003ec2:	4b6c      	ldr	r3, [pc, #432]	; (8004074 <UART_SetConfig+0x2fc>)
 8003ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed0:	d012      	beq.n	8003ef8 <UART_SetConfig+0x180>
 8003ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed6:	d802      	bhi.n	8003ede <UART_SetConfig+0x166>
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d007      	beq.n	8003eec <UART_SetConfig+0x174>
 8003edc:	e012      	b.n	8003f04 <UART_SetConfig+0x18c>
 8003ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee2:	d006      	beq.n	8003ef2 <UART_SetConfig+0x17a>
 8003ee4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ee8:	d009      	beq.n	8003efe <UART_SetConfig+0x186>
 8003eea:	e00b      	b.n	8003f04 <UART_SetConfig+0x18c>
 8003eec:	2300      	movs	r3, #0
 8003eee:	76fb      	strb	r3, [r7, #27]
 8003ef0:	e00e      	b.n	8003f10 <UART_SetConfig+0x198>
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	76fb      	strb	r3, [r7, #27]
 8003ef6:	e00b      	b.n	8003f10 <UART_SetConfig+0x198>
 8003ef8:	2304      	movs	r3, #4
 8003efa:	76fb      	strb	r3, [r7, #27]
 8003efc:	e008      	b.n	8003f10 <UART_SetConfig+0x198>
 8003efe:	2308      	movs	r3, #8
 8003f00:	76fb      	strb	r3, [r7, #27]
 8003f02:	e005      	b.n	8003f10 <UART_SetConfig+0x198>
 8003f04:	2310      	movs	r3, #16
 8003f06:	76fb      	strb	r3, [r7, #27]
 8003f08:	bf00      	nop
 8003f0a:	e001      	b.n	8003f10 <UART_SetConfig+0x198>
 8003f0c:	2310      	movs	r3, #16
 8003f0e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a55      	ldr	r2, [pc, #340]	; (800406c <UART_SetConfig+0x2f4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d174      	bne.n	8004004 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f1a:	7efb      	ldrb	r3, [r7, #27]
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d824      	bhi.n	8003f6a <UART_SetConfig+0x1f2>
 8003f20:	a201      	add	r2, pc, #4	; (adr r2, 8003f28 <UART_SetConfig+0x1b0>)
 8003f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f26:	bf00      	nop
 8003f28:	08003f4d 	.word	0x08003f4d
 8003f2c:	08003f6b 	.word	0x08003f6b
 8003f30:	08003f55 	.word	0x08003f55
 8003f34:	08003f6b 	.word	0x08003f6b
 8003f38:	08003f5b 	.word	0x08003f5b
 8003f3c:	08003f6b 	.word	0x08003f6b
 8003f40:	08003f6b 	.word	0x08003f6b
 8003f44:	08003f6b 	.word	0x08003f6b
 8003f48:	08003f63 	.word	0x08003f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f4c:	f7fe fb28 	bl	80025a0 <HAL_RCC_GetPCLK1Freq>
 8003f50:	6178      	str	r0, [r7, #20]
        break;
 8003f52:	e00f      	b.n	8003f74 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f54:	4b49      	ldr	r3, [pc, #292]	; (800407c <UART_SetConfig+0x304>)
 8003f56:	617b      	str	r3, [r7, #20]
        break;
 8003f58:	e00c      	b.n	8003f74 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f5a:	f7fe fa8b 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 8003f5e:	6178      	str	r0, [r7, #20]
        break;
 8003f60:	e008      	b.n	8003f74 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f66:	617b      	str	r3, [r7, #20]
        break;
 8003f68:	e004      	b.n	8003f74 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	76bb      	strb	r3, [r7, #26]
        break;
 8003f72:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 80fe 	beq.w	8004178 <UART_SetConfig+0x400>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	4613      	mov	r3, r2
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	4413      	add	r3, r2
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d305      	bcc.n	8003f98 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d902      	bls.n	8003f9e <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	76bb      	strb	r3, [r7, #26]
 8003f9c:	e0ec      	b.n	8004178 <UART_SetConfig+0x400>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	f04f 0400 	mov.w	r4, #0
 8003fae:	0214      	lsls	r4, r2, #8
 8003fb0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003fb4:	020b      	lsls	r3, r1, #8
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6852      	ldr	r2, [r2, #4]
 8003fba:	0852      	lsrs	r2, r2, #1
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	eb13 0b01 	adds.w	fp, r3, r1
 8003fc6:	eb44 0c02 	adc.w	ip, r4, r2
 8003fca:	4658      	mov	r0, fp
 8003fcc:	4661      	mov	r1, ip
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f04f 0400 	mov.w	r4, #0
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	4623      	mov	r3, r4
 8003fda:	f7fc f949 	bl	8000270 <__aeabi_uldivmod>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	460c      	mov	r4, r1
 8003fe2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fea:	d308      	bcc.n	8003ffe <UART_SetConfig+0x286>
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ff2:	d204      	bcs.n	8003ffe <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	60da      	str	r2, [r3, #12]
 8003ffc:	e0bc      	b.n	8004178 <UART_SetConfig+0x400>
        }
        else
        {
          ret = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	76bb      	strb	r3, [r7, #26]
 8004002:	e0b9      	b.n	8004178 <UART_SetConfig+0x400>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800400c:	d168      	bne.n	80040e0 <UART_SetConfig+0x368>
  {
    switch (clocksource)
 800400e:	7efb      	ldrb	r3, [r7, #27]
 8004010:	2b08      	cmp	r3, #8
 8004012:	d835      	bhi.n	8004080 <UART_SetConfig+0x308>
 8004014:	a201      	add	r2, pc, #4	; (adr r2, 800401c <UART_SetConfig+0x2a4>)
 8004016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401a:	bf00      	nop
 800401c:	08004041 	.word	0x08004041
 8004020:	08004049 	.word	0x08004049
 8004024:	08004051 	.word	0x08004051
 8004028:	08004081 	.word	0x08004081
 800402c:	08004057 	.word	0x08004057
 8004030:	08004081 	.word	0x08004081
 8004034:	08004081 	.word	0x08004081
 8004038:	08004081 	.word	0x08004081
 800403c:	0800405f 	.word	0x0800405f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004040:	f7fe faae 	bl	80025a0 <HAL_RCC_GetPCLK1Freq>
 8004044:	6178      	str	r0, [r7, #20]
        break;
 8004046:	e020      	b.n	800408a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004048:	f7fe fac0 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 800404c:	6178      	str	r0, [r7, #20]
        break;
 800404e:	e01c      	b.n	800408a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004050:	4b0a      	ldr	r3, [pc, #40]	; (800407c <UART_SetConfig+0x304>)
 8004052:	617b      	str	r3, [r7, #20]
        break;
 8004054:	e019      	b.n	800408a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004056:	f7fe fa0d 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 800405a:	6178      	str	r0, [r7, #20]
        break;
 800405c:	e015      	b.n	800408a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800405e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004062:	617b      	str	r3, [r7, #20]
        break;
 8004064:	e011      	b.n	800408a <UART_SetConfig+0x312>
 8004066:	bf00      	nop
 8004068:	efff69f3 	.word	0xefff69f3
 800406c:	40008000 	.word	0x40008000
 8004070:	40013800 	.word	0x40013800
 8004074:	40021000 	.word	0x40021000
 8004078:	40004400 	.word	0x40004400
 800407c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	76bb      	strb	r3, [r7, #26]
        break;
 8004088:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d073      	beq.n	8004178 <UART_SetConfig+0x400>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	005a      	lsls	r2, r3, #1
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	085b      	lsrs	r3, r3, #1
 800409a:	441a      	add	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	2b0f      	cmp	r3, #15
 80040aa:	d916      	bls.n	80040da <UART_SetConfig+0x362>
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b2:	d212      	bcs.n	80040da <UART_SetConfig+0x362>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	f023 030f 	bic.w	r3, r3, #15
 80040bc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	085b      	lsrs	r3, r3, #1
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	89fb      	ldrh	r3, [r7, #14]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	89fa      	ldrh	r2, [r7, #14]
 80040d6:	60da      	str	r2, [r3, #12]
 80040d8:	e04e      	b.n	8004178 <UART_SetConfig+0x400>
      }
      else
      {
        ret = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	76bb      	strb	r3, [r7, #26]
 80040de:	e04b      	b.n	8004178 <UART_SetConfig+0x400>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040e0:	7efb      	ldrb	r3, [r7, #27]
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d827      	bhi.n	8004136 <UART_SetConfig+0x3be>
 80040e6:	a201      	add	r2, pc, #4	; (adr r2, 80040ec <UART_SetConfig+0x374>)
 80040e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ec:	08004111 	.word	0x08004111
 80040f0:	08004119 	.word	0x08004119
 80040f4:	08004121 	.word	0x08004121
 80040f8:	08004137 	.word	0x08004137
 80040fc:	08004127 	.word	0x08004127
 8004100:	08004137 	.word	0x08004137
 8004104:	08004137 	.word	0x08004137
 8004108:	08004137 	.word	0x08004137
 800410c:	0800412f 	.word	0x0800412f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004110:	f7fe fa46 	bl	80025a0 <HAL_RCC_GetPCLK1Freq>
 8004114:	6178      	str	r0, [r7, #20]
        break;
 8004116:	e013      	b.n	8004140 <UART_SetConfig+0x3c8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004118:	f7fe fa58 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 800411c:	6178      	str	r0, [r7, #20]
        break;
 800411e:	e00f      	b.n	8004140 <UART_SetConfig+0x3c8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004120:	4b1b      	ldr	r3, [pc, #108]	; (8004190 <UART_SetConfig+0x418>)
 8004122:	617b      	str	r3, [r7, #20]
        break;
 8004124:	e00c      	b.n	8004140 <UART_SetConfig+0x3c8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004126:	f7fe f9a5 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 800412a:	6178      	str	r0, [r7, #20]
        break;
 800412c:	e008      	b.n	8004140 <UART_SetConfig+0x3c8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800412e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004132:	617b      	str	r3, [r7, #20]
        break;
 8004134:	e004      	b.n	8004140 <UART_SetConfig+0x3c8>
      default:
        pclk = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	76bb      	strb	r3, [r7, #26]
        break;
 800413e:	bf00      	nop
    }

    if (pclk != 0U)
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d018      	beq.n	8004178 <UART_SetConfig+0x400>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	085a      	lsrs	r2, r3, #1
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	441a      	add	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	fbb2 f3f3 	udiv	r3, r2, r3
 8004158:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	2b0f      	cmp	r3, #15
 800415e:	d909      	bls.n	8004174 <UART_SetConfig+0x3fc>
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004166:	d205      	bcs.n	8004174 <UART_SetConfig+0x3fc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	b29a      	uxth	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	60da      	str	r2, [r3, #12]
 8004172:	e001      	b.n	8004178 <UART_SetConfig+0x400>
      }
      else
      {
        ret = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004184:	7ebb      	ldrb	r3, [r7, #26]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3720      	adds	r7, #32
 800418a:	46bd      	mov	sp, r7
 800418c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004190:	00f42400 	.word	0x00f42400

08004194 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00a      	beq.n	80041be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004270:	2b00      	cmp	r3, #0
 8004272:	d01a      	beq.n	80042aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004292:	d10a      	bne.n	80042aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	605a      	str	r2, [r3, #4]
  }
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af02      	add	r7, sp, #8
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042e8:	f7fc fe6a 	bl	8000fc0 <HAL_GetTick>
 80042ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d10e      	bne.n	800431a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f82d 	bl	800436a <UART_WaitOnFlagUntilTimeout>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e023      	b.n	8004362 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b04      	cmp	r3, #4
 8004326:	d10e      	bne.n	8004346 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004328:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f817 	bl	800436a <UART_WaitOnFlagUntilTimeout>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e00d      	b.n	8004362 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2220      	movs	r2, #32
 800434a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2220      	movs	r2, #32
 8004350:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b09c      	sub	sp, #112	; 0x70
 800436e:	af00      	add	r7, sp, #0
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	603b      	str	r3, [r7, #0]
 8004376:	4613      	mov	r3, r2
 8004378:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800437a:	e0a5      	b.n	80044c8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800437c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800437e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004382:	f000 80a1 	beq.w	80044c8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004386:	f7fc fe1b 	bl	8000fc0 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004392:	429a      	cmp	r2, r3
 8004394:	d302      	bcc.n	800439c <UART_WaitOnFlagUntilTimeout+0x32>
 8004396:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004398:	2b00      	cmp	r3, #0
 800439a:	d13e      	bne.n	800441a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043a4:	e853 3f00 	ldrex	r3, [r3]
 80043a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80043aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043b0:	667b      	str	r3, [r7, #100]	; 0x64
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80043c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043c2:	e841 2300 	strex	r3, r2, [r1]
 80043c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80043c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1e6      	bne.n	800439c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3308      	adds	r3, #8
 80043d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043d8:	e853 3f00 	ldrex	r3, [r3]
 80043dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e0:	f023 0301 	bic.w	r3, r3, #1
 80043e4:	663b      	str	r3, [r7, #96]	; 0x60
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3308      	adds	r3, #8
 80043ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80043f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043f6:	e841 2300 	strex	r3, r2, [r1]
 80043fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80043fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1e5      	bne.n	80043ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2220      	movs	r2, #32
 8004406:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e067      	b.n	80044ea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	d04f      	beq.n	80044c8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004436:	d147      	bne.n	80044c8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004440:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444a:	e853 3f00 	ldrex	r3, [r3]
 800444e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004456:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004460:	637b      	str	r3, [r7, #52]	; 0x34
 8004462:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004464:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004466:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004468:	e841 2300 	strex	r3, r2, [r1]
 800446c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800446e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1e6      	bne.n	8004442 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3308      	adds	r3, #8
 800447a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	e853 3f00 	ldrex	r3, [r3]
 8004482:	613b      	str	r3, [r7, #16]
   return(result);
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f023 0301 	bic.w	r3, r3, #1
 800448a:	66bb      	str	r3, [r7, #104]	; 0x68
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3308      	adds	r3, #8
 8004492:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004494:	623a      	str	r2, [r7, #32]
 8004496:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004498:	69f9      	ldr	r1, [r7, #28]
 800449a:	6a3a      	ldr	r2, [r7, #32]
 800449c:	e841 2300 	strex	r3, r2, [r1]
 80044a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e5      	bne.n	8004474 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2220      	movs	r2, #32
 80044ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2220      	movs	r2, #32
 80044b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e010      	b.n	80044ea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	69da      	ldr	r2, [r3, #28]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	4013      	ands	r3, r2
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	bf0c      	ite	eq
 80044d8:	2301      	moveq	r3, #1
 80044da:	2300      	movne	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	461a      	mov	r2, r3
 80044e0:	79fb      	ldrb	r3, [r7, #7]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	f43f af4a 	beq.w	800437c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3770      	adds	r7, #112	; 0x70
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <__errno>:
 80044f4:	4b01      	ldr	r3, [pc, #4]	; (80044fc <__errno+0x8>)
 80044f6:	6818      	ldr	r0, [r3, #0]
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	2000000c 	.word	0x2000000c

08004500 <__libc_init_array>:
 8004500:	b570      	push	{r4, r5, r6, lr}
 8004502:	4e0d      	ldr	r6, [pc, #52]	; (8004538 <__libc_init_array+0x38>)
 8004504:	4c0d      	ldr	r4, [pc, #52]	; (800453c <__libc_init_array+0x3c>)
 8004506:	1ba4      	subs	r4, r4, r6
 8004508:	10a4      	asrs	r4, r4, #2
 800450a:	2500      	movs	r5, #0
 800450c:	42a5      	cmp	r5, r4
 800450e:	d109      	bne.n	8004524 <__libc_init_array+0x24>
 8004510:	4e0b      	ldr	r6, [pc, #44]	; (8004540 <__libc_init_array+0x40>)
 8004512:	4c0c      	ldr	r4, [pc, #48]	; (8004544 <__libc_init_array+0x44>)
 8004514:	f000 fc26 	bl	8004d64 <_init>
 8004518:	1ba4      	subs	r4, r4, r6
 800451a:	10a4      	asrs	r4, r4, #2
 800451c:	2500      	movs	r5, #0
 800451e:	42a5      	cmp	r5, r4
 8004520:	d105      	bne.n	800452e <__libc_init_array+0x2e>
 8004522:	bd70      	pop	{r4, r5, r6, pc}
 8004524:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004528:	4798      	blx	r3
 800452a:	3501      	adds	r5, #1
 800452c:	e7ee      	b.n	800450c <__libc_init_array+0xc>
 800452e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004532:	4798      	blx	r3
 8004534:	3501      	adds	r5, #1
 8004536:	e7f2      	b.n	800451e <__libc_init_array+0x1e>
 8004538:	08004e10 	.word	0x08004e10
 800453c:	08004e10 	.word	0x08004e10
 8004540:	08004e10 	.word	0x08004e10
 8004544:	08004e14 	.word	0x08004e14

08004548 <memset>:
 8004548:	4402      	add	r2, r0
 800454a:	4603      	mov	r3, r0
 800454c:	4293      	cmp	r3, r2
 800454e:	d100      	bne.n	8004552 <memset+0xa>
 8004550:	4770      	bx	lr
 8004552:	f803 1b01 	strb.w	r1, [r3], #1
 8004556:	e7f9      	b.n	800454c <memset+0x4>

08004558 <siprintf>:
 8004558:	b40e      	push	{r1, r2, r3}
 800455a:	b500      	push	{lr}
 800455c:	b09c      	sub	sp, #112	; 0x70
 800455e:	ab1d      	add	r3, sp, #116	; 0x74
 8004560:	9002      	str	r0, [sp, #8]
 8004562:	9006      	str	r0, [sp, #24]
 8004564:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004568:	4809      	ldr	r0, [pc, #36]	; (8004590 <siprintf+0x38>)
 800456a:	9107      	str	r1, [sp, #28]
 800456c:	9104      	str	r1, [sp, #16]
 800456e:	4909      	ldr	r1, [pc, #36]	; (8004594 <siprintf+0x3c>)
 8004570:	f853 2b04 	ldr.w	r2, [r3], #4
 8004574:	9105      	str	r1, [sp, #20]
 8004576:	6800      	ldr	r0, [r0, #0]
 8004578:	9301      	str	r3, [sp, #4]
 800457a:	a902      	add	r1, sp, #8
 800457c:	f000 f866 	bl	800464c <_svfiprintf_r>
 8004580:	9b02      	ldr	r3, [sp, #8]
 8004582:	2200      	movs	r2, #0
 8004584:	701a      	strb	r2, [r3, #0]
 8004586:	b01c      	add	sp, #112	; 0x70
 8004588:	f85d eb04 	ldr.w	lr, [sp], #4
 800458c:	b003      	add	sp, #12
 800458e:	4770      	bx	lr
 8004590:	2000000c 	.word	0x2000000c
 8004594:	ffff0208 	.word	0xffff0208

08004598 <__ssputs_r>:
 8004598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800459c:	688e      	ldr	r6, [r1, #8]
 800459e:	429e      	cmp	r6, r3
 80045a0:	4682      	mov	sl, r0
 80045a2:	460c      	mov	r4, r1
 80045a4:	4690      	mov	r8, r2
 80045a6:	4699      	mov	r9, r3
 80045a8:	d837      	bhi.n	800461a <__ssputs_r+0x82>
 80045aa:	898a      	ldrh	r2, [r1, #12]
 80045ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045b0:	d031      	beq.n	8004616 <__ssputs_r+0x7e>
 80045b2:	6825      	ldr	r5, [r4, #0]
 80045b4:	6909      	ldr	r1, [r1, #16]
 80045b6:	1a6f      	subs	r7, r5, r1
 80045b8:	6965      	ldr	r5, [r4, #20]
 80045ba:	2302      	movs	r3, #2
 80045bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80045c4:	f109 0301 	add.w	r3, r9, #1
 80045c8:	443b      	add	r3, r7
 80045ca:	429d      	cmp	r5, r3
 80045cc:	bf38      	it	cc
 80045ce:	461d      	movcc	r5, r3
 80045d0:	0553      	lsls	r3, r2, #21
 80045d2:	d530      	bpl.n	8004636 <__ssputs_r+0x9e>
 80045d4:	4629      	mov	r1, r5
 80045d6:	f000 fb2b 	bl	8004c30 <_malloc_r>
 80045da:	4606      	mov	r6, r0
 80045dc:	b950      	cbnz	r0, 80045f4 <__ssputs_r+0x5c>
 80045de:	230c      	movs	r3, #12
 80045e0:	f8ca 3000 	str.w	r3, [sl]
 80045e4:	89a3      	ldrh	r3, [r4, #12]
 80045e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045ea:	81a3      	strh	r3, [r4, #12]
 80045ec:	f04f 30ff 	mov.w	r0, #4294967295
 80045f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045f4:	463a      	mov	r2, r7
 80045f6:	6921      	ldr	r1, [r4, #16]
 80045f8:	f000 faa8 	bl	8004b4c <memcpy>
 80045fc:	89a3      	ldrh	r3, [r4, #12]
 80045fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004606:	81a3      	strh	r3, [r4, #12]
 8004608:	6126      	str	r6, [r4, #16]
 800460a:	6165      	str	r5, [r4, #20]
 800460c:	443e      	add	r6, r7
 800460e:	1bed      	subs	r5, r5, r7
 8004610:	6026      	str	r6, [r4, #0]
 8004612:	60a5      	str	r5, [r4, #8]
 8004614:	464e      	mov	r6, r9
 8004616:	454e      	cmp	r6, r9
 8004618:	d900      	bls.n	800461c <__ssputs_r+0x84>
 800461a:	464e      	mov	r6, r9
 800461c:	4632      	mov	r2, r6
 800461e:	4641      	mov	r1, r8
 8004620:	6820      	ldr	r0, [r4, #0]
 8004622:	f000 fa9e 	bl	8004b62 <memmove>
 8004626:	68a3      	ldr	r3, [r4, #8]
 8004628:	1b9b      	subs	r3, r3, r6
 800462a:	60a3      	str	r3, [r4, #8]
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	441e      	add	r6, r3
 8004630:	6026      	str	r6, [r4, #0]
 8004632:	2000      	movs	r0, #0
 8004634:	e7dc      	b.n	80045f0 <__ssputs_r+0x58>
 8004636:	462a      	mov	r2, r5
 8004638:	f000 fb54 	bl	8004ce4 <_realloc_r>
 800463c:	4606      	mov	r6, r0
 800463e:	2800      	cmp	r0, #0
 8004640:	d1e2      	bne.n	8004608 <__ssputs_r+0x70>
 8004642:	6921      	ldr	r1, [r4, #16]
 8004644:	4650      	mov	r0, sl
 8004646:	f000 faa5 	bl	8004b94 <_free_r>
 800464a:	e7c8      	b.n	80045de <__ssputs_r+0x46>

0800464c <_svfiprintf_r>:
 800464c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004650:	461d      	mov	r5, r3
 8004652:	898b      	ldrh	r3, [r1, #12]
 8004654:	061f      	lsls	r7, r3, #24
 8004656:	b09d      	sub	sp, #116	; 0x74
 8004658:	4680      	mov	r8, r0
 800465a:	460c      	mov	r4, r1
 800465c:	4616      	mov	r6, r2
 800465e:	d50f      	bpl.n	8004680 <_svfiprintf_r+0x34>
 8004660:	690b      	ldr	r3, [r1, #16]
 8004662:	b96b      	cbnz	r3, 8004680 <_svfiprintf_r+0x34>
 8004664:	2140      	movs	r1, #64	; 0x40
 8004666:	f000 fae3 	bl	8004c30 <_malloc_r>
 800466a:	6020      	str	r0, [r4, #0]
 800466c:	6120      	str	r0, [r4, #16]
 800466e:	b928      	cbnz	r0, 800467c <_svfiprintf_r+0x30>
 8004670:	230c      	movs	r3, #12
 8004672:	f8c8 3000 	str.w	r3, [r8]
 8004676:	f04f 30ff 	mov.w	r0, #4294967295
 800467a:	e0c8      	b.n	800480e <_svfiprintf_r+0x1c2>
 800467c:	2340      	movs	r3, #64	; 0x40
 800467e:	6163      	str	r3, [r4, #20]
 8004680:	2300      	movs	r3, #0
 8004682:	9309      	str	r3, [sp, #36]	; 0x24
 8004684:	2320      	movs	r3, #32
 8004686:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800468a:	2330      	movs	r3, #48	; 0x30
 800468c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004690:	9503      	str	r5, [sp, #12]
 8004692:	f04f 0b01 	mov.w	fp, #1
 8004696:	4637      	mov	r7, r6
 8004698:	463d      	mov	r5, r7
 800469a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800469e:	b10b      	cbz	r3, 80046a4 <_svfiprintf_r+0x58>
 80046a0:	2b25      	cmp	r3, #37	; 0x25
 80046a2:	d13e      	bne.n	8004722 <_svfiprintf_r+0xd6>
 80046a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80046a8:	d00b      	beq.n	80046c2 <_svfiprintf_r+0x76>
 80046aa:	4653      	mov	r3, sl
 80046ac:	4632      	mov	r2, r6
 80046ae:	4621      	mov	r1, r4
 80046b0:	4640      	mov	r0, r8
 80046b2:	f7ff ff71 	bl	8004598 <__ssputs_r>
 80046b6:	3001      	adds	r0, #1
 80046b8:	f000 80a4 	beq.w	8004804 <_svfiprintf_r+0x1b8>
 80046bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046be:	4453      	add	r3, sl
 80046c0:	9309      	str	r3, [sp, #36]	; 0x24
 80046c2:	783b      	ldrb	r3, [r7, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 809d 	beq.w	8004804 <_svfiprintf_r+0x1b8>
 80046ca:	2300      	movs	r3, #0
 80046cc:	f04f 32ff 	mov.w	r2, #4294967295
 80046d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046d4:	9304      	str	r3, [sp, #16]
 80046d6:	9307      	str	r3, [sp, #28]
 80046d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046dc:	931a      	str	r3, [sp, #104]	; 0x68
 80046de:	462f      	mov	r7, r5
 80046e0:	2205      	movs	r2, #5
 80046e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80046e6:	4850      	ldr	r0, [pc, #320]	; (8004828 <_svfiprintf_r+0x1dc>)
 80046e8:	f7fb fd72 	bl	80001d0 <memchr>
 80046ec:	9b04      	ldr	r3, [sp, #16]
 80046ee:	b9d0      	cbnz	r0, 8004726 <_svfiprintf_r+0xda>
 80046f0:	06d9      	lsls	r1, r3, #27
 80046f2:	bf44      	itt	mi
 80046f4:	2220      	movmi	r2, #32
 80046f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80046fa:	071a      	lsls	r2, r3, #28
 80046fc:	bf44      	itt	mi
 80046fe:	222b      	movmi	r2, #43	; 0x2b
 8004700:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004704:	782a      	ldrb	r2, [r5, #0]
 8004706:	2a2a      	cmp	r2, #42	; 0x2a
 8004708:	d015      	beq.n	8004736 <_svfiprintf_r+0xea>
 800470a:	9a07      	ldr	r2, [sp, #28]
 800470c:	462f      	mov	r7, r5
 800470e:	2000      	movs	r0, #0
 8004710:	250a      	movs	r5, #10
 8004712:	4639      	mov	r1, r7
 8004714:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004718:	3b30      	subs	r3, #48	; 0x30
 800471a:	2b09      	cmp	r3, #9
 800471c:	d94d      	bls.n	80047ba <_svfiprintf_r+0x16e>
 800471e:	b1b8      	cbz	r0, 8004750 <_svfiprintf_r+0x104>
 8004720:	e00f      	b.n	8004742 <_svfiprintf_r+0xf6>
 8004722:	462f      	mov	r7, r5
 8004724:	e7b8      	b.n	8004698 <_svfiprintf_r+0x4c>
 8004726:	4a40      	ldr	r2, [pc, #256]	; (8004828 <_svfiprintf_r+0x1dc>)
 8004728:	1a80      	subs	r0, r0, r2
 800472a:	fa0b f000 	lsl.w	r0, fp, r0
 800472e:	4318      	orrs	r0, r3
 8004730:	9004      	str	r0, [sp, #16]
 8004732:	463d      	mov	r5, r7
 8004734:	e7d3      	b.n	80046de <_svfiprintf_r+0x92>
 8004736:	9a03      	ldr	r2, [sp, #12]
 8004738:	1d11      	adds	r1, r2, #4
 800473a:	6812      	ldr	r2, [r2, #0]
 800473c:	9103      	str	r1, [sp, #12]
 800473e:	2a00      	cmp	r2, #0
 8004740:	db01      	blt.n	8004746 <_svfiprintf_r+0xfa>
 8004742:	9207      	str	r2, [sp, #28]
 8004744:	e004      	b.n	8004750 <_svfiprintf_r+0x104>
 8004746:	4252      	negs	r2, r2
 8004748:	f043 0302 	orr.w	r3, r3, #2
 800474c:	9207      	str	r2, [sp, #28]
 800474e:	9304      	str	r3, [sp, #16]
 8004750:	783b      	ldrb	r3, [r7, #0]
 8004752:	2b2e      	cmp	r3, #46	; 0x2e
 8004754:	d10c      	bne.n	8004770 <_svfiprintf_r+0x124>
 8004756:	787b      	ldrb	r3, [r7, #1]
 8004758:	2b2a      	cmp	r3, #42	; 0x2a
 800475a:	d133      	bne.n	80047c4 <_svfiprintf_r+0x178>
 800475c:	9b03      	ldr	r3, [sp, #12]
 800475e:	1d1a      	adds	r2, r3, #4
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	9203      	str	r2, [sp, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	bfb8      	it	lt
 8004768:	f04f 33ff 	movlt.w	r3, #4294967295
 800476c:	3702      	adds	r7, #2
 800476e:	9305      	str	r3, [sp, #20]
 8004770:	4d2e      	ldr	r5, [pc, #184]	; (800482c <_svfiprintf_r+0x1e0>)
 8004772:	7839      	ldrb	r1, [r7, #0]
 8004774:	2203      	movs	r2, #3
 8004776:	4628      	mov	r0, r5
 8004778:	f7fb fd2a 	bl	80001d0 <memchr>
 800477c:	b138      	cbz	r0, 800478e <_svfiprintf_r+0x142>
 800477e:	2340      	movs	r3, #64	; 0x40
 8004780:	1b40      	subs	r0, r0, r5
 8004782:	fa03 f000 	lsl.w	r0, r3, r0
 8004786:	9b04      	ldr	r3, [sp, #16]
 8004788:	4303      	orrs	r3, r0
 800478a:	3701      	adds	r7, #1
 800478c:	9304      	str	r3, [sp, #16]
 800478e:	7839      	ldrb	r1, [r7, #0]
 8004790:	4827      	ldr	r0, [pc, #156]	; (8004830 <_svfiprintf_r+0x1e4>)
 8004792:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004796:	2206      	movs	r2, #6
 8004798:	1c7e      	adds	r6, r7, #1
 800479a:	f7fb fd19 	bl	80001d0 <memchr>
 800479e:	2800      	cmp	r0, #0
 80047a0:	d038      	beq.n	8004814 <_svfiprintf_r+0x1c8>
 80047a2:	4b24      	ldr	r3, [pc, #144]	; (8004834 <_svfiprintf_r+0x1e8>)
 80047a4:	bb13      	cbnz	r3, 80047ec <_svfiprintf_r+0x1a0>
 80047a6:	9b03      	ldr	r3, [sp, #12]
 80047a8:	3307      	adds	r3, #7
 80047aa:	f023 0307 	bic.w	r3, r3, #7
 80047ae:	3308      	adds	r3, #8
 80047b0:	9303      	str	r3, [sp, #12]
 80047b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047b4:	444b      	add	r3, r9
 80047b6:	9309      	str	r3, [sp, #36]	; 0x24
 80047b8:	e76d      	b.n	8004696 <_svfiprintf_r+0x4a>
 80047ba:	fb05 3202 	mla	r2, r5, r2, r3
 80047be:	2001      	movs	r0, #1
 80047c0:	460f      	mov	r7, r1
 80047c2:	e7a6      	b.n	8004712 <_svfiprintf_r+0xc6>
 80047c4:	2300      	movs	r3, #0
 80047c6:	3701      	adds	r7, #1
 80047c8:	9305      	str	r3, [sp, #20]
 80047ca:	4619      	mov	r1, r3
 80047cc:	250a      	movs	r5, #10
 80047ce:	4638      	mov	r0, r7
 80047d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047d4:	3a30      	subs	r2, #48	; 0x30
 80047d6:	2a09      	cmp	r2, #9
 80047d8:	d903      	bls.n	80047e2 <_svfiprintf_r+0x196>
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0c8      	beq.n	8004770 <_svfiprintf_r+0x124>
 80047de:	9105      	str	r1, [sp, #20]
 80047e0:	e7c6      	b.n	8004770 <_svfiprintf_r+0x124>
 80047e2:	fb05 2101 	mla	r1, r5, r1, r2
 80047e6:	2301      	movs	r3, #1
 80047e8:	4607      	mov	r7, r0
 80047ea:	e7f0      	b.n	80047ce <_svfiprintf_r+0x182>
 80047ec:	ab03      	add	r3, sp, #12
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	4622      	mov	r2, r4
 80047f2:	4b11      	ldr	r3, [pc, #68]	; (8004838 <_svfiprintf_r+0x1ec>)
 80047f4:	a904      	add	r1, sp, #16
 80047f6:	4640      	mov	r0, r8
 80047f8:	f3af 8000 	nop.w
 80047fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004800:	4681      	mov	r9, r0
 8004802:	d1d6      	bne.n	80047b2 <_svfiprintf_r+0x166>
 8004804:	89a3      	ldrh	r3, [r4, #12]
 8004806:	065b      	lsls	r3, r3, #25
 8004808:	f53f af35 	bmi.w	8004676 <_svfiprintf_r+0x2a>
 800480c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800480e:	b01d      	add	sp, #116	; 0x74
 8004810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004814:	ab03      	add	r3, sp, #12
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	4622      	mov	r2, r4
 800481a:	4b07      	ldr	r3, [pc, #28]	; (8004838 <_svfiprintf_r+0x1ec>)
 800481c:	a904      	add	r1, sp, #16
 800481e:	4640      	mov	r0, r8
 8004820:	f000 f882 	bl	8004928 <_printf_i>
 8004824:	e7ea      	b.n	80047fc <_svfiprintf_r+0x1b0>
 8004826:	bf00      	nop
 8004828:	08004dd4 	.word	0x08004dd4
 800482c:	08004dda 	.word	0x08004dda
 8004830:	08004dde 	.word	0x08004dde
 8004834:	00000000 	.word	0x00000000
 8004838:	08004599 	.word	0x08004599

0800483c <_printf_common>:
 800483c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004840:	4691      	mov	r9, r2
 8004842:	461f      	mov	r7, r3
 8004844:	688a      	ldr	r2, [r1, #8]
 8004846:	690b      	ldr	r3, [r1, #16]
 8004848:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800484c:	4293      	cmp	r3, r2
 800484e:	bfb8      	it	lt
 8004850:	4613      	movlt	r3, r2
 8004852:	f8c9 3000 	str.w	r3, [r9]
 8004856:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800485a:	4606      	mov	r6, r0
 800485c:	460c      	mov	r4, r1
 800485e:	b112      	cbz	r2, 8004866 <_printf_common+0x2a>
 8004860:	3301      	adds	r3, #1
 8004862:	f8c9 3000 	str.w	r3, [r9]
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	0699      	lsls	r1, r3, #26
 800486a:	bf42      	ittt	mi
 800486c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004870:	3302      	addmi	r3, #2
 8004872:	f8c9 3000 	strmi.w	r3, [r9]
 8004876:	6825      	ldr	r5, [r4, #0]
 8004878:	f015 0506 	ands.w	r5, r5, #6
 800487c:	d107      	bne.n	800488e <_printf_common+0x52>
 800487e:	f104 0a19 	add.w	sl, r4, #25
 8004882:	68e3      	ldr	r3, [r4, #12]
 8004884:	f8d9 2000 	ldr.w	r2, [r9]
 8004888:	1a9b      	subs	r3, r3, r2
 800488a:	42ab      	cmp	r3, r5
 800488c:	dc28      	bgt.n	80048e0 <_printf_common+0xa4>
 800488e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004892:	6822      	ldr	r2, [r4, #0]
 8004894:	3300      	adds	r3, #0
 8004896:	bf18      	it	ne
 8004898:	2301      	movne	r3, #1
 800489a:	0692      	lsls	r2, r2, #26
 800489c:	d42d      	bmi.n	80048fa <_printf_common+0xbe>
 800489e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048a2:	4639      	mov	r1, r7
 80048a4:	4630      	mov	r0, r6
 80048a6:	47c0      	blx	r8
 80048a8:	3001      	adds	r0, #1
 80048aa:	d020      	beq.n	80048ee <_printf_common+0xb2>
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	68e5      	ldr	r5, [r4, #12]
 80048b0:	f8d9 2000 	ldr.w	r2, [r9]
 80048b4:	f003 0306 	and.w	r3, r3, #6
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	bf08      	it	eq
 80048bc:	1aad      	subeq	r5, r5, r2
 80048be:	68a3      	ldr	r3, [r4, #8]
 80048c0:	6922      	ldr	r2, [r4, #16]
 80048c2:	bf0c      	ite	eq
 80048c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048c8:	2500      	movne	r5, #0
 80048ca:	4293      	cmp	r3, r2
 80048cc:	bfc4      	itt	gt
 80048ce:	1a9b      	subgt	r3, r3, r2
 80048d0:	18ed      	addgt	r5, r5, r3
 80048d2:	f04f 0900 	mov.w	r9, #0
 80048d6:	341a      	adds	r4, #26
 80048d8:	454d      	cmp	r5, r9
 80048da:	d11a      	bne.n	8004912 <_printf_common+0xd6>
 80048dc:	2000      	movs	r0, #0
 80048de:	e008      	b.n	80048f2 <_printf_common+0xb6>
 80048e0:	2301      	movs	r3, #1
 80048e2:	4652      	mov	r2, sl
 80048e4:	4639      	mov	r1, r7
 80048e6:	4630      	mov	r0, r6
 80048e8:	47c0      	blx	r8
 80048ea:	3001      	adds	r0, #1
 80048ec:	d103      	bne.n	80048f6 <_printf_common+0xba>
 80048ee:	f04f 30ff 	mov.w	r0, #4294967295
 80048f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f6:	3501      	adds	r5, #1
 80048f8:	e7c3      	b.n	8004882 <_printf_common+0x46>
 80048fa:	18e1      	adds	r1, r4, r3
 80048fc:	1c5a      	adds	r2, r3, #1
 80048fe:	2030      	movs	r0, #48	; 0x30
 8004900:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004904:	4422      	add	r2, r4
 8004906:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800490a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800490e:	3302      	adds	r3, #2
 8004910:	e7c5      	b.n	800489e <_printf_common+0x62>
 8004912:	2301      	movs	r3, #1
 8004914:	4622      	mov	r2, r4
 8004916:	4639      	mov	r1, r7
 8004918:	4630      	mov	r0, r6
 800491a:	47c0      	blx	r8
 800491c:	3001      	adds	r0, #1
 800491e:	d0e6      	beq.n	80048ee <_printf_common+0xb2>
 8004920:	f109 0901 	add.w	r9, r9, #1
 8004924:	e7d8      	b.n	80048d8 <_printf_common+0x9c>
	...

08004928 <_printf_i>:
 8004928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800492c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004930:	460c      	mov	r4, r1
 8004932:	7e09      	ldrb	r1, [r1, #24]
 8004934:	b085      	sub	sp, #20
 8004936:	296e      	cmp	r1, #110	; 0x6e
 8004938:	4617      	mov	r7, r2
 800493a:	4606      	mov	r6, r0
 800493c:	4698      	mov	r8, r3
 800493e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004940:	f000 80b3 	beq.w	8004aaa <_printf_i+0x182>
 8004944:	d822      	bhi.n	800498c <_printf_i+0x64>
 8004946:	2963      	cmp	r1, #99	; 0x63
 8004948:	d036      	beq.n	80049b8 <_printf_i+0x90>
 800494a:	d80a      	bhi.n	8004962 <_printf_i+0x3a>
 800494c:	2900      	cmp	r1, #0
 800494e:	f000 80b9 	beq.w	8004ac4 <_printf_i+0x19c>
 8004952:	2958      	cmp	r1, #88	; 0x58
 8004954:	f000 8083 	beq.w	8004a5e <_printf_i+0x136>
 8004958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800495c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004960:	e032      	b.n	80049c8 <_printf_i+0xa0>
 8004962:	2964      	cmp	r1, #100	; 0x64
 8004964:	d001      	beq.n	800496a <_printf_i+0x42>
 8004966:	2969      	cmp	r1, #105	; 0x69
 8004968:	d1f6      	bne.n	8004958 <_printf_i+0x30>
 800496a:	6820      	ldr	r0, [r4, #0]
 800496c:	6813      	ldr	r3, [r2, #0]
 800496e:	0605      	lsls	r5, r0, #24
 8004970:	f103 0104 	add.w	r1, r3, #4
 8004974:	d52a      	bpl.n	80049cc <_printf_i+0xa4>
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6011      	str	r1, [r2, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	da03      	bge.n	8004986 <_printf_i+0x5e>
 800497e:	222d      	movs	r2, #45	; 0x2d
 8004980:	425b      	negs	r3, r3
 8004982:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004986:	486f      	ldr	r0, [pc, #444]	; (8004b44 <_printf_i+0x21c>)
 8004988:	220a      	movs	r2, #10
 800498a:	e039      	b.n	8004a00 <_printf_i+0xd8>
 800498c:	2973      	cmp	r1, #115	; 0x73
 800498e:	f000 809d 	beq.w	8004acc <_printf_i+0x1a4>
 8004992:	d808      	bhi.n	80049a6 <_printf_i+0x7e>
 8004994:	296f      	cmp	r1, #111	; 0x6f
 8004996:	d020      	beq.n	80049da <_printf_i+0xb2>
 8004998:	2970      	cmp	r1, #112	; 0x70
 800499a:	d1dd      	bne.n	8004958 <_printf_i+0x30>
 800499c:	6823      	ldr	r3, [r4, #0]
 800499e:	f043 0320 	orr.w	r3, r3, #32
 80049a2:	6023      	str	r3, [r4, #0]
 80049a4:	e003      	b.n	80049ae <_printf_i+0x86>
 80049a6:	2975      	cmp	r1, #117	; 0x75
 80049a8:	d017      	beq.n	80049da <_printf_i+0xb2>
 80049aa:	2978      	cmp	r1, #120	; 0x78
 80049ac:	d1d4      	bne.n	8004958 <_printf_i+0x30>
 80049ae:	2378      	movs	r3, #120	; 0x78
 80049b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049b4:	4864      	ldr	r0, [pc, #400]	; (8004b48 <_printf_i+0x220>)
 80049b6:	e055      	b.n	8004a64 <_printf_i+0x13c>
 80049b8:	6813      	ldr	r3, [r2, #0]
 80049ba:	1d19      	adds	r1, r3, #4
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6011      	str	r1, [r2, #0]
 80049c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049c8:	2301      	movs	r3, #1
 80049ca:	e08c      	b.n	8004ae6 <_printf_i+0x1be>
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6011      	str	r1, [r2, #0]
 80049d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049d4:	bf18      	it	ne
 80049d6:	b21b      	sxthne	r3, r3
 80049d8:	e7cf      	b.n	800497a <_printf_i+0x52>
 80049da:	6813      	ldr	r3, [r2, #0]
 80049dc:	6825      	ldr	r5, [r4, #0]
 80049de:	1d18      	adds	r0, r3, #4
 80049e0:	6010      	str	r0, [r2, #0]
 80049e2:	0628      	lsls	r0, r5, #24
 80049e4:	d501      	bpl.n	80049ea <_printf_i+0xc2>
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	e002      	b.n	80049f0 <_printf_i+0xc8>
 80049ea:	0668      	lsls	r0, r5, #25
 80049ec:	d5fb      	bpl.n	80049e6 <_printf_i+0xbe>
 80049ee:	881b      	ldrh	r3, [r3, #0]
 80049f0:	4854      	ldr	r0, [pc, #336]	; (8004b44 <_printf_i+0x21c>)
 80049f2:	296f      	cmp	r1, #111	; 0x6f
 80049f4:	bf14      	ite	ne
 80049f6:	220a      	movne	r2, #10
 80049f8:	2208      	moveq	r2, #8
 80049fa:	2100      	movs	r1, #0
 80049fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a00:	6865      	ldr	r5, [r4, #4]
 8004a02:	60a5      	str	r5, [r4, #8]
 8004a04:	2d00      	cmp	r5, #0
 8004a06:	f2c0 8095 	blt.w	8004b34 <_printf_i+0x20c>
 8004a0a:	6821      	ldr	r1, [r4, #0]
 8004a0c:	f021 0104 	bic.w	r1, r1, #4
 8004a10:	6021      	str	r1, [r4, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d13d      	bne.n	8004a92 <_printf_i+0x16a>
 8004a16:	2d00      	cmp	r5, #0
 8004a18:	f040 808e 	bne.w	8004b38 <_printf_i+0x210>
 8004a1c:	4665      	mov	r5, ip
 8004a1e:	2a08      	cmp	r2, #8
 8004a20:	d10b      	bne.n	8004a3a <_printf_i+0x112>
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	07db      	lsls	r3, r3, #31
 8004a26:	d508      	bpl.n	8004a3a <_printf_i+0x112>
 8004a28:	6923      	ldr	r3, [r4, #16]
 8004a2a:	6862      	ldr	r2, [r4, #4]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	bfde      	ittt	le
 8004a30:	2330      	movle	r3, #48	; 0x30
 8004a32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a3a:	ebac 0305 	sub.w	r3, ip, r5
 8004a3e:	6123      	str	r3, [r4, #16]
 8004a40:	f8cd 8000 	str.w	r8, [sp]
 8004a44:	463b      	mov	r3, r7
 8004a46:	aa03      	add	r2, sp, #12
 8004a48:	4621      	mov	r1, r4
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	f7ff fef6 	bl	800483c <_printf_common>
 8004a50:	3001      	adds	r0, #1
 8004a52:	d14d      	bne.n	8004af0 <_printf_i+0x1c8>
 8004a54:	f04f 30ff 	mov.w	r0, #4294967295
 8004a58:	b005      	add	sp, #20
 8004a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a5e:	4839      	ldr	r0, [pc, #228]	; (8004b44 <_printf_i+0x21c>)
 8004a60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004a64:	6813      	ldr	r3, [r2, #0]
 8004a66:	6821      	ldr	r1, [r4, #0]
 8004a68:	1d1d      	adds	r5, r3, #4
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6015      	str	r5, [r2, #0]
 8004a6e:	060a      	lsls	r2, r1, #24
 8004a70:	d50b      	bpl.n	8004a8a <_printf_i+0x162>
 8004a72:	07ca      	lsls	r2, r1, #31
 8004a74:	bf44      	itt	mi
 8004a76:	f041 0120 	orrmi.w	r1, r1, #32
 8004a7a:	6021      	strmi	r1, [r4, #0]
 8004a7c:	b91b      	cbnz	r3, 8004a86 <_printf_i+0x15e>
 8004a7e:	6822      	ldr	r2, [r4, #0]
 8004a80:	f022 0220 	bic.w	r2, r2, #32
 8004a84:	6022      	str	r2, [r4, #0]
 8004a86:	2210      	movs	r2, #16
 8004a88:	e7b7      	b.n	80049fa <_printf_i+0xd2>
 8004a8a:	064d      	lsls	r5, r1, #25
 8004a8c:	bf48      	it	mi
 8004a8e:	b29b      	uxthmi	r3, r3
 8004a90:	e7ef      	b.n	8004a72 <_printf_i+0x14a>
 8004a92:	4665      	mov	r5, ip
 8004a94:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a98:	fb02 3311 	mls	r3, r2, r1, r3
 8004a9c:	5cc3      	ldrb	r3, [r0, r3]
 8004a9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	2900      	cmp	r1, #0
 8004aa6:	d1f5      	bne.n	8004a94 <_printf_i+0x16c>
 8004aa8:	e7b9      	b.n	8004a1e <_printf_i+0xf6>
 8004aaa:	6813      	ldr	r3, [r2, #0]
 8004aac:	6825      	ldr	r5, [r4, #0]
 8004aae:	6961      	ldr	r1, [r4, #20]
 8004ab0:	1d18      	adds	r0, r3, #4
 8004ab2:	6010      	str	r0, [r2, #0]
 8004ab4:	0628      	lsls	r0, r5, #24
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	d501      	bpl.n	8004abe <_printf_i+0x196>
 8004aba:	6019      	str	r1, [r3, #0]
 8004abc:	e002      	b.n	8004ac4 <_printf_i+0x19c>
 8004abe:	066a      	lsls	r2, r5, #25
 8004ac0:	d5fb      	bpl.n	8004aba <_printf_i+0x192>
 8004ac2:	8019      	strh	r1, [r3, #0]
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	6123      	str	r3, [r4, #16]
 8004ac8:	4665      	mov	r5, ip
 8004aca:	e7b9      	b.n	8004a40 <_printf_i+0x118>
 8004acc:	6813      	ldr	r3, [r2, #0]
 8004ace:	1d19      	adds	r1, r3, #4
 8004ad0:	6011      	str	r1, [r2, #0]
 8004ad2:	681d      	ldr	r5, [r3, #0]
 8004ad4:	6862      	ldr	r2, [r4, #4]
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	4628      	mov	r0, r5
 8004ada:	f7fb fb79 	bl	80001d0 <memchr>
 8004ade:	b108      	cbz	r0, 8004ae4 <_printf_i+0x1bc>
 8004ae0:	1b40      	subs	r0, r0, r5
 8004ae2:	6060      	str	r0, [r4, #4]
 8004ae4:	6863      	ldr	r3, [r4, #4]
 8004ae6:	6123      	str	r3, [r4, #16]
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aee:	e7a7      	b.n	8004a40 <_printf_i+0x118>
 8004af0:	6923      	ldr	r3, [r4, #16]
 8004af2:	462a      	mov	r2, r5
 8004af4:	4639      	mov	r1, r7
 8004af6:	4630      	mov	r0, r6
 8004af8:	47c0      	blx	r8
 8004afa:	3001      	adds	r0, #1
 8004afc:	d0aa      	beq.n	8004a54 <_printf_i+0x12c>
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	079b      	lsls	r3, r3, #30
 8004b02:	d413      	bmi.n	8004b2c <_printf_i+0x204>
 8004b04:	68e0      	ldr	r0, [r4, #12]
 8004b06:	9b03      	ldr	r3, [sp, #12]
 8004b08:	4298      	cmp	r0, r3
 8004b0a:	bfb8      	it	lt
 8004b0c:	4618      	movlt	r0, r3
 8004b0e:	e7a3      	b.n	8004a58 <_printf_i+0x130>
 8004b10:	2301      	movs	r3, #1
 8004b12:	464a      	mov	r2, r9
 8004b14:	4639      	mov	r1, r7
 8004b16:	4630      	mov	r0, r6
 8004b18:	47c0      	blx	r8
 8004b1a:	3001      	adds	r0, #1
 8004b1c:	d09a      	beq.n	8004a54 <_printf_i+0x12c>
 8004b1e:	3501      	adds	r5, #1
 8004b20:	68e3      	ldr	r3, [r4, #12]
 8004b22:	9a03      	ldr	r2, [sp, #12]
 8004b24:	1a9b      	subs	r3, r3, r2
 8004b26:	42ab      	cmp	r3, r5
 8004b28:	dcf2      	bgt.n	8004b10 <_printf_i+0x1e8>
 8004b2a:	e7eb      	b.n	8004b04 <_printf_i+0x1dc>
 8004b2c:	2500      	movs	r5, #0
 8004b2e:	f104 0919 	add.w	r9, r4, #25
 8004b32:	e7f5      	b.n	8004b20 <_printf_i+0x1f8>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1ac      	bne.n	8004a92 <_printf_i+0x16a>
 8004b38:	7803      	ldrb	r3, [r0, #0]
 8004b3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b42:	e76c      	b.n	8004a1e <_printf_i+0xf6>
 8004b44:	08004de5 	.word	0x08004de5
 8004b48:	08004df6 	.word	0x08004df6

08004b4c <memcpy>:
 8004b4c:	b510      	push	{r4, lr}
 8004b4e:	1e43      	subs	r3, r0, #1
 8004b50:	440a      	add	r2, r1
 8004b52:	4291      	cmp	r1, r2
 8004b54:	d100      	bne.n	8004b58 <memcpy+0xc>
 8004b56:	bd10      	pop	{r4, pc}
 8004b58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b60:	e7f7      	b.n	8004b52 <memcpy+0x6>

08004b62 <memmove>:
 8004b62:	4288      	cmp	r0, r1
 8004b64:	b510      	push	{r4, lr}
 8004b66:	eb01 0302 	add.w	r3, r1, r2
 8004b6a:	d807      	bhi.n	8004b7c <memmove+0x1a>
 8004b6c:	1e42      	subs	r2, r0, #1
 8004b6e:	4299      	cmp	r1, r3
 8004b70:	d00a      	beq.n	8004b88 <memmove+0x26>
 8004b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b76:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004b7a:	e7f8      	b.n	8004b6e <memmove+0xc>
 8004b7c:	4283      	cmp	r3, r0
 8004b7e:	d9f5      	bls.n	8004b6c <memmove+0xa>
 8004b80:	1881      	adds	r1, r0, r2
 8004b82:	1ad2      	subs	r2, r2, r3
 8004b84:	42d3      	cmn	r3, r2
 8004b86:	d100      	bne.n	8004b8a <memmove+0x28>
 8004b88:	bd10      	pop	{r4, pc}
 8004b8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b8e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004b92:	e7f7      	b.n	8004b84 <memmove+0x22>

08004b94 <_free_r>:
 8004b94:	b538      	push	{r3, r4, r5, lr}
 8004b96:	4605      	mov	r5, r0
 8004b98:	2900      	cmp	r1, #0
 8004b9a:	d045      	beq.n	8004c28 <_free_r+0x94>
 8004b9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ba0:	1f0c      	subs	r4, r1, #4
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	bfb8      	it	lt
 8004ba6:	18e4      	addlt	r4, r4, r3
 8004ba8:	f000 f8d2 	bl	8004d50 <__malloc_lock>
 8004bac:	4a1f      	ldr	r2, [pc, #124]	; (8004c2c <_free_r+0x98>)
 8004bae:	6813      	ldr	r3, [r2, #0]
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	b933      	cbnz	r3, 8004bc2 <_free_r+0x2e>
 8004bb4:	6063      	str	r3, [r4, #4]
 8004bb6:	6014      	str	r4, [r2, #0]
 8004bb8:	4628      	mov	r0, r5
 8004bba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bbe:	f000 b8c8 	b.w	8004d52 <__malloc_unlock>
 8004bc2:	42a3      	cmp	r3, r4
 8004bc4:	d90c      	bls.n	8004be0 <_free_r+0x4c>
 8004bc6:	6821      	ldr	r1, [r4, #0]
 8004bc8:	1862      	adds	r2, r4, r1
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	bf04      	itt	eq
 8004bce:	681a      	ldreq	r2, [r3, #0]
 8004bd0:	685b      	ldreq	r3, [r3, #4]
 8004bd2:	6063      	str	r3, [r4, #4]
 8004bd4:	bf04      	itt	eq
 8004bd6:	1852      	addeq	r2, r2, r1
 8004bd8:	6022      	streq	r2, [r4, #0]
 8004bda:	6004      	str	r4, [r0, #0]
 8004bdc:	e7ec      	b.n	8004bb8 <_free_r+0x24>
 8004bde:	4613      	mov	r3, r2
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	b10a      	cbz	r2, 8004be8 <_free_r+0x54>
 8004be4:	42a2      	cmp	r2, r4
 8004be6:	d9fa      	bls.n	8004bde <_free_r+0x4a>
 8004be8:	6819      	ldr	r1, [r3, #0]
 8004bea:	1858      	adds	r0, r3, r1
 8004bec:	42a0      	cmp	r0, r4
 8004bee:	d10b      	bne.n	8004c08 <_free_r+0x74>
 8004bf0:	6820      	ldr	r0, [r4, #0]
 8004bf2:	4401      	add	r1, r0
 8004bf4:	1858      	adds	r0, r3, r1
 8004bf6:	4282      	cmp	r2, r0
 8004bf8:	6019      	str	r1, [r3, #0]
 8004bfa:	d1dd      	bne.n	8004bb8 <_free_r+0x24>
 8004bfc:	6810      	ldr	r0, [r2, #0]
 8004bfe:	6852      	ldr	r2, [r2, #4]
 8004c00:	605a      	str	r2, [r3, #4]
 8004c02:	4401      	add	r1, r0
 8004c04:	6019      	str	r1, [r3, #0]
 8004c06:	e7d7      	b.n	8004bb8 <_free_r+0x24>
 8004c08:	d902      	bls.n	8004c10 <_free_r+0x7c>
 8004c0a:	230c      	movs	r3, #12
 8004c0c:	602b      	str	r3, [r5, #0]
 8004c0e:	e7d3      	b.n	8004bb8 <_free_r+0x24>
 8004c10:	6820      	ldr	r0, [r4, #0]
 8004c12:	1821      	adds	r1, r4, r0
 8004c14:	428a      	cmp	r2, r1
 8004c16:	bf04      	itt	eq
 8004c18:	6811      	ldreq	r1, [r2, #0]
 8004c1a:	6852      	ldreq	r2, [r2, #4]
 8004c1c:	6062      	str	r2, [r4, #4]
 8004c1e:	bf04      	itt	eq
 8004c20:	1809      	addeq	r1, r1, r0
 8004c22:	6021      	streq	r1, [r4, #0]
 8004c24:	605c      	str	r4, [r3, #4]
 8004c26:	e7c7      	b.n	8004bb8 <_free_r+0x24>
 8004c28:	bd38      	pop	{r3, r4, r5, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20000090 	.word	0x20000090

08004c30 <_malloc_r>:
 8004c30:	b570      	push	{r4, r5, r6, lr}
 8004c32:	1ccd      	adds	r5, r1, #3
 8004c34:	f025 0503 	bic.w	r5, r5, #3
 8004c38:	3508      	adds	r5, #8
 8004c3a:	2d0c      	cmp	r5, #12
 8004c3c:	bf38      	it	cc
 8004c3e:	250c      	movcc	r5, #12
 8004c40:	2d00      	cmp	r5, #0
 8004c42:	4606      	mov	r6, r0
 8004c44:	db01      	blt.n	8004c4a <_malloc_r+0x1a>
 8004c46:	42a9      	cmp	r1, r5
 8004c48:	d903      	bls.n	8004c52 <_malloc_r+0x22>
 8004c4a:	230c      	movs	r3, #12
 8004c4c:	6033      	str	r3, [r6, #0]
 8004c4e:	2000      	movs	r0, #0
 8004c50:	bd70      	pop	{r4, r5, r6, pc}
 8004c52:	f000 f87d 	bl	8004d50 <__malloc_lock>
 8004c56:	4a21      	ldr	r2, [pc, #132]	; (8004cdc <_malloc_r+0xac>)
 8004c58:	6814      	ldr	r4, [r2, #0]
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	b991      	cbnz	r1, 8004c84 <_malloc_r+0x54>
 8004c5e:	4c20      	ldr	r4, [pc, #128]	; (8004ce0 <_malloc_r+0xb0>)
 8004c60:	6823      	ldr	r3, [r4, #0]
 8004c62:	b91b      	cbnz	r3, 8004c6c <_malloc_r+0x3c>
 8004c64:	4630      	mov	r0, r6
 8004c66:	f000 f863 	bl	8004d30 <_sbrk_r>
 8004c6a:	6020      	str	r0, [r4, #0]
 8004c6c:	4629      	mov	r1, r5
 8004c6e:	4630      	mov	r0, r6
 8004c70:	f000 f85e 	bl	8004d30 <_sbrk_r>
 8004c74:	1c43      	adds	r3, r0, #1
 8004c76:	d124      	bne.n	8004cc2 <_malloc_r+0x92>
 8004c78:	230c      	movs	r3, #12
 8004c7a:	6033      	str	r3, [r6, #0]
 8004c7c:	4630      	mov	r0, r6
 8004c7e:	f000 f868 	bl	8004d52 <__malloc_unlock>
 8004c82:	e7e4      	b.n	8004c4e <_malloc_r+0x1e>
 8004c84:	680b      	ldr	r3, [r1, #0]
 8004c86:	1b5b      	subs	r3, r3, r5
 8004c88:	d418      	bmi.n	8004cbc <_malloc_r+0x8c>
 8004c8a:	2b0b      	cmp	r3, #11
 8004c8c:	d90f      	bls.n	8004cae <_malloc_r+0x7e>
 8004c8e:	600b      	str	r3, [r1, #0]
 8004c90:	50cd      	str	r5, [r1, r3]
 8004c92:	18cc      	adds	r4, r1, r3
 8004c94:	4630      	mov	r0, r6
 8004c96:	f000 f85c 	bl	8004d52 <__malloc_unlock>
 8004c9a:	f104 000b 	add.w	r0, r4, #11
 8004c9e:	1d23      	adds	r3, r4, #4
 8004ca0:	f020 0007 	bic.w	r0, r0, #7
 8004ca4:	1ac3      	subs	r3, r0, r3
 8004ca6:	d0d3      	beq.n	8004c50 <_malloc_r+0x20>
 8004ca8:	425a      	negs	r2, r3
 8004caa:	50e2      	str	r2, [r4, r3]
 8004cac:	e7d0      	b.n	8004c50 <_malloc_r+0x20>
 8004cae:	428c      	cmp	r4, r1
 8004cb0:	684b      	ldr	r3, [r1, #4]
 8004cb2:	bf16      	itet	ne
 8004cb4:	6063      	strne	r3, [r4, #4]
 8004cb6:	6013      	streq	r3, [r2, #0]
 8004cb8:	460c      	movne	r4, r1
 8004cba:	e7eb      	b.n	8004c94 <_malloc_r+0x64>
 8004cbc:	460c      	mov	r4, r1
 8004cbe:	6849      	ldr	r1, [r1, #4]
 8004cc0:	e7cc      	b.n	8004c5c <_malloc_r+0x2c>
 8004cc2:	1cc4      	adds	r4, r0, #3
 8004cc4:	f024 0403 	bic.w	r4, r4, #3
 8004cc8:	42a0      	cmp	r0, r4
 8004cca:	d005      	beq.n	8004cd8 <_malloc_r+0xa8>
 8004ccc:	1a21      	subs	r1, r4, r0
 8004cce:	4630      	mov	r0, r6
 8004cd0:	f000 f82e 	bl	8004d30 <_sbrk_r>
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	d0cf      	beq.n	8004c78 <_malloc_r+0x48>
 8004cd8:	6025      	str	r5, [r4, #0]
 8004cda:	e7db      	b.n	8004c94 <_malloc_r+0x64>
 8004cdc:	20000090 	.word	0x20000090
 8004ce0:	20000094 	.word	0x20000094

08004ce4 <_realloc_r>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	4607      	mov	r7, r0
 8004ce8:	4614      	mov	r4, r2
 8004cea:	460e      	mov	r6, r1
 8004cec:	b921      	cbnz	r1, 8004cf8 <_realloc_r+0x14>
 8004cee:	4611      	mov	r1, r2
 8004cf0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004cf4:	f7ff bf9c 	b.w	8004c30 <_malloc_r>
 8004cf8:	b922      	cbnz	r2, 8004d04 <_realloc_r+0x20>
 8004cfa:	f7ff ff4b 	bl	8004b94 <_free_r>
 8004cfe:	4625      	mov	r5, r4
 8004d00:	4628      	mov	r0, r5
 8004d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d04:	f000 f826 	bl	8004d54 <_malloc_usable_size_r>
 8004d08:	42a0      	cmp	r0, r4
 8004d0a:	d20f      	bcs.n	8004d2c <_realloc_r+0x48>
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	4638      	mov	r0, r7
 8004d10:	f7ff ff8e 	bl	8004c30 <_malloc_r>
 8004d14:	4605      	mov	r5, r0
 8004d16:	2800      	cmp	r0, #0
 8004d18:	d0f2      	beq.n	8004d00 <_realloc_r+0x1c>
 8004d1a:	4631      	mov	r1, r6
 8004d1c:	4622      	mov	r2, r4
 8004d1e:	f7ff ff15 	bl	8004b4c <memcpy>
 8004d22:	4631      	mov	r1, r6
 8004d24:	4638      	mov	r0, r7
 8004d26:	f7ff ff35 	bl	8004b94 <_free_r>
 8004d2a:	e7e9      	b.n	8004d00 <_realloc_r+0x1c>
 8004d2c:	4635      	mov	r5, r6
 8004d2e:	e7e7      	b.n	8004d00 <_realloc_r+0x1c>

08004d30 <_sbrk_r>:
 8004d30:	b538      	push	{r3, r4, r5, lr}
 8004d32:	4c06      	ldr	r4, [pc, #24]	; (8004d4c <_sbrk_r+0x1c>)
 8004d34:	2300      	movs	r3, #0
 8004d36:	4605      	mov	r5, r0
 8004d38:	4608      	mov	r0, r1
 8004d3a:	6023      	str	r3, [r4, #0]
 8004d3c:	f7fb fefe 	bl	8000b3c <_sbrk>
 8004d40:	1c43      	adds	r3, r0, #1
 8004d42:	d102      	bne.n	8004d4a <_sbrk_r+0x1a>
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	b103      	cbz	r3, 8004d4a <_sbrk_r+0x1a>
 8004d48:	602b      	str	r3, [r5, #0]
 8004d4a:	bd38      	pop	{r3, r4, r5, pc}
 8004d4c:	200001f8 	.word	0x200001f8

08004d50 <__malloc_lock>:
 8004d50:	4770      	bx	lr

08004d52 <__malloc_unlock>:
 8004d52:	4770      	bx	lr

08004d54 <_malloc_usable_size_r>:
 8004d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d58:	1f18      	subs	r0, r3, #4
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	bfbc      	itt	lt
 8004d5e:	580b      	ldrlt	r3, [r1, r0]
 8004d60:	18c0      	addlt	r0, r0, r3
 8004d62:	4770      	bx	lr

08004d64 <_init>:
 8004d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d66:	bf00      	nop
 8004d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6a:	bc08      	pop	{r3}
 8004d6c:	469e      	mov	lr, r3
 8004d6e:	4770      	bx	lr

08004d70 <_fini>:
 8004d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d72:	bf00      	nop
 8004d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d76:	bc08      	pop	{r3}
 8004d78:	469e      	mov	lr, r3
 8004d7a:	4770      	bx	lr
