
SolarBoatCockpitButtons.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000558c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  0800571c  0800571c  0000671c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ad0  08005ad0  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005ad0  08005ad0  00006ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ad8  08005ad8  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ad8  08005ad8  00006ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005adc  08005adc  00006adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005ae0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000060  08005b40  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08005b40  00007368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013886  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b19  00000000  00000000  0001a916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  0001d430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d20  00000000  00000000  0001e520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c74  00000000  00000000  0001f240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014635  00000000  00000000  00040eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc46d  00000000  00000000  000554e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00121956  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b50  00000000  00000000  0012199c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  001264ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005704 	.word	0x08005704

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005704 	.word	0x08005704

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_CAN1_Init>:
/* USER CODE END 0 */

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0
    /* USER CODE END CAN1_Init 0 */

    /* USER CODE BEGIN CAN1_Init 1 */

    /* USER CODE END CAN1_Init 1 */
    hcan1.Instance = CAN1;
 8000566:	4b33      	ldr	r3, [pc, #204]	@ (8000634 <MX_CAN1_Init+0xd4>)
 8000568:	4a33      	ldr	r2, [pc, #204]	@ (8000638 <MX_CAN1_Init+0xd8>)
 800056a:	601a      	str	r2, [r3, #0]
    hcan1.Init.Prescaler = 8;
 800056c:	4b31      	ldr	r3, [pc, #196]	@ (8000634 <MX_CAN1_Init+0xd4>)
 800056e:	2208      	movs	r2, #8
 8000570:	605a      	str	r2, [r3, #4]
    hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000572:	4b30      	ldr	r3, [pc, #192]	@ (8000634 <MX_CAN1_Init+0xd4>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
    hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000578:	4b2e      	ldr	r3, [pc, #184]	@ (8000634 <MX_CAN1_Init+0xd4>)
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
    hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800057e:	4b2d      	ldr	r3, [pc, #180]	@ (8000634 <MX_CAN1_Init+0xd4>)
 8000580:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000584:	611a      	str	r2, [r3, #16]
    hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 8000586:	4b2b      	ldr	r3, [pc, #172]	@ (8000634 <MX_CAN1_Init+0xd4>)
 8000588:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 800058c:	615a      	str	r2, [r3, #20]
    hcan1.Init.TimeTriggeredMode = DISABLE;
 800058e:	4b29      	ldr	r3, [pc, #164]	@ (8000634 <MX_CAN1_Init+0xd4>)
 8000590:	2200      	movs	r2, #0
 8000592:	761a      	strb	r2, [r3, #24]
    hcan1.Init.AutoBusOff = ENABLE;
 8000594:	4b27      	ldr	r3, [pc, #156]	@ (8000634 <MX_CAN1_Init+0xd4>)
 8000596:	2201      	movs	r2, #1
 8000598:	765a      	strb	r2, [r3, #25]
    hcan1.Init.AutoWakeUp = DISABLE;
 800059a:	4b26      	ldr	r3, [pc, #152]	@ (8000634 <MX_CAN1_Init+0xd4>)
 800059c:	2200      	movs	r2, #0
 800059e:	769a      	strb	r2, [r3, #26]
    hcan1.Init.AutoRetransmission = ENABLE;
 80005a0:	4b24      	ldr	r3, [pc, #144]	@ (8000634 <MX_CAN1_Init+0xd4>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	76da      	strb	r2, [r3, #27]
    hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005a6:	4b23      	ldr	r3, [pc, #140]	@ (8000634 <MX_CAN1_Init+0xd4>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	771a      	strb	r2, [r3, #28]
    hcan1.Init.TransmitFifoPriority = DISABLE;
 80005ac:	4b21      	ldr	r3, [pc, #132]	@ (8000634 <MX_CAN1_Init+0xd4>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	775a      	strb	r2, [r3, #29]
    if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 80005b2:	4820      	ldr	r0, [pc, #128]	@ (8000634 <MX_CAN1_Init+0xd4>)
 80005b4:	f000 ffee 	bl	8001594 <HAL_CAN_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_CAN1_Init+0x62>
        Error_Handler();
 80005be:	f000 fca7 	bl	8000f10 <Error_Handler>
    }
    /* USER CODE BEGIN CAN1_Init 2 */

    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	2014      	movs	r0, #20
 80005c8:	f001 ff1b 	bl	8002402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80005cc:	2014      	movs	r0, #20
 80005ce:	f001 ff34 	bl	800243a <HAL_NVIC_EnableIRQ>

    CAN_FilterTypeDef sFilterConfig;

    sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterIdHigh = 0x1 << 5;
 80005d6:	2320      	movs	r3, #32
 80005d8:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 80005da:	2300      	movs	r3, #0
 80005dc:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = 0x7F << 5;
 80005de:	f44f 637e 	mov.w	r3, #4064	@ 0xfe0
 80005e2:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005e8:	2301      	movs	r3, #1
 80005ea:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterActivation = ENABLE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterBank = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
    sFilterConfig.SlaveStartFilterBank = 14;
 80005f8:	230e      	movs	r3, #14
 80005fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80005fc:	463b      	mov	r3, r7
 80005fe:	4619      	mov	r1, r3
 8000600:	480c      	ldr	r0, [pc, #48]	@ (8000634 <MX_CAN1_Init+0xd4>)
 8000602:	f001 f8c2 	bl	800178a <HAL_CAN_ConfigFilter>


    if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000606:	480b      	ldr	r0, [pc, #44]	@ (8000634 <MX_CAN1_Init+0xd4>)
 8000608:	f001 f989 	bl	800191e <HAL_CAN_Start>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_CAN1_Init+0xb6>
        Error_Handler();
 8000612:	f000 fc7d 	bl	8000f10 <Error_Handler>
    }

    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8000616:	2102      	movs	r1, #2
 8000618:	4806      	ldr	r0, [pc, #24]	@ (8000634 <MX_CAN1_Init+0xd4>)
 800061a:	f001 fbb6 	bl	8001d8a <HAL_CAN_ActivateNotification>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_CAN1_Init+0xc8>
        Error_Handler();
 8000624:	f000 fc74 	bl	8000f10 <Error_Handler>
    }

    CAN_TX_filter_init();
 8000628:	f000 f854 	bl	80006d4 <CAN_TX_filter_init>


    /* USER CODE END CAN1_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	3728      	adds	r7, #40	@ 0x28
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	200000c4 	.word	0x200000c4
 8000638:	40006400 	.word	0x40006400

0800063c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	@ 0x28
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
    if (canHandle->Instance == CAN1) {
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a1c      	ldr	r2, [pc, #112]	@ (80006cc <HAL_CAN_MspInit+0x90>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d131      	bne.n	80006c2 <HAL_CAN_MspInit+0x86>
        /* USER CODE BEGIN CAN1_MspInit 0 */

        /* USER CODE END CAN1_MspInit 0 */
        /* CAN1 clock enable */
        __HAL_RCC_CAN1_CLK_ENABLE();
 800065e:	4b1c      	ldr	r3, [pc, #112]	@ (80006d0 <HAL_CAN_MspInit+0x94>)
 8000660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000662:	4a1b      	ldr	r2, [pc, #108]	@ (80006d0 <HAL_CAN_MspInit+0x94>)
 8000664:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000668:	6593      	str	r3, [r2, #88]	@ 0x58
 800066a:	4b19      	ldr	r3, [pc, #100]	@ (80006d0 <HAL_CAN_MspInit+0x94>)
 800066c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800066e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	4b16      	ldr	r3, [pc, #88]	@ (80006d0 <HAL_CAN_MspInit+0x94>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067a:	4a15      	ldr	r2, [pc, #84]	@ (80006d0 <HAL_CAN_MspInit+0x94>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000682:	4b13      	ldr	r3, [pc, #76]	@ (80006d0 <HAL_CAN_MspInit+0x94>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
        /**CAN1 GPIO Configuration
        PA11     ------> CAN1_RX
        PA12     ------> CAN1_TX
        */
        GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 800068e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000692:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000694:	2302      	movs	r3, #2
 8000696:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800069c:	2303      	movs	r3, #3
 800069e:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006a0:	2309      	movs	r3, #9
 80006a2:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4619      	mov	r1, r3
 80006aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ae:	f001 fedf 	bl	8002470 <HAL_GPIO_Init>

        /* CAN1 interrupt Init */
        HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 3, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2103      	movs	r1, #3
 80006b6:	2014      	movs	r0, #20
 80006b8:	f001 fea3 	bl	8002402 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006bc:	2014      	movs	r0, #20
 80006be:	f001 febc 	bl	800243a <HAL_NVIC_EnableIRQ>
        /* USER CODE BEGIN CAN1_MspInit 1 */

        /* USER CODE END CAN1_MspInit 1 */
    }
}
 80006c2:	bf00      	nop
 80006c4:	3728      	adds	r7, #40	@ 0x28
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40006400 	.word	0x40006400
 80006d0:	40021000 	.word	0x40021000

080006d4 <CAN_TX_filter_init>:
    }
}

/* USER CODE BEGIN 1 */

void CAN_TX_filter_init(void) {
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
    TxHeader.StdId = 0x360;
 80006d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <CAN_TX_filter_init+0x34>)
 80006da:	f44f 7258 	mov.w	r2, #864	@ 0x360
 80006de:	601a      	str	r2, [r3, #0]
    TxHeader.ExtId = 0;
 80006e0:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <CAN_TX_filter_init+0x34>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
    TxHeader.IDE = CAN_ID_STD;
 80006e6:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <CAN_TX_filter_init+0x34>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <CAN_TX_filter_init+0x34>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
    TxHeader.DLC = 8;
 80006f2:	4b05      	ldr	r3, [pc, #20]	@ (8000708 <CAN_TX_filter_init+0x34>)
 80006f4:	2208      	movs	r2, #8
 80006f6:	611a      	str	r2, [r3, #16]
    TxHeader.TransmitGlobalTime = DISABLE;
 80006f8:	4b03      	ldr	r3, [pc, #12]	@ (8000708 <CAN_TX_filter_init+0x34>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	751a      	strb	r2, [r3, #20]
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	200000a0 	.word	0x200000a0

0800070c <CAN_SendState>:


void CAN_SendState(int state) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
    TxData[0] = (state & 0xFF00) >> 8;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	121b      	asrs	r3, r3, #8
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <CAN_SendState+0x5c>)
 800071c:	701a      	strb	r2, [r3, #0]
    TxData[1] = state & 0x00FF;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <CAN_SendState+0x5c>)
 8000724:	705a      	strb	r2, [r3, #1]
    TxData[2] = 0;
 8000726:	4b10      	ldr	r3, [pc, #64]	@ (8000768 <CAN_SendState+0x5c>)
 8000728:	2200      	movs	r2, #0
 800072a:	709a      	strb	r2, [r3, #2]
    TxData[3] = 0;
 800072c:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <CAN_SendState+0x5c>)
 800072e:	2200      	movs	r2, #0
 8000730:	70da      	strb	r2, [r3, #3]
    TxData[4] = 0;
 8000732:	4b0d      	ldr	r3, [pc, #52]	@ (8000768 <CAN_SendState+0x5c>)
 8000734:	2200      	movs	r2, #0
 8000736:	711a      	strb	r2, [r3, #4]
    TxData[5] = 0;
 8000738:	4b0b      	ldr	r3, [pc, #44]	@ (8000768 <CAN_SendState+0x5c>)
 800073a:	2200      	movs	r2, #0
 800073c:	715a      	strb	r2, [r3, #5]
    TxData[6] = 0;
 800073e:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <CAN_SendState+0x5c>)
 8000740:	2200      	movs	r2, #0
 8000742:	719a      	strb	r2, [r3, #6]
    TxData[7] = 0;
 8000744:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <CAN_SendState+0x5c>)
 8000746:	2200      	movs	r2, #0
 8000748:	71da      	strb	r2, [r3, #7]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, (uint8_t *) TxData, &TxMailbox) != HAL_OK) {
 800074a:	4b08      	ldr	r3, [pc, #32]	@ (800076c <CAN_SendState+0x60>)
 800074c:	4a06      	ldr	r2, [pc, #24]	@ (8000768 <CAN_SendState+0x5c>)
 800074e:	4908      	ldr	r1, [pc, #32]	@ (8000770 <CAN_SendState+0x64>)
 8000750:	4808      	ldr	r0, [pc, #32]	@ (8000774 <CAN_SendState+0x68>)
 8000752:	f001 f928 	bl	80019a6 <HAL_CAN_AddTxMessage>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <CAN_SendState+0x54>
        Error_Handler();
 800075c:	f000 fbd8 	bl	8000f10 <Error_Handler>
    }
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200000b8 	.word	0x200000b8
 800076c:	200000c0 	.word	0x200000c0
 8000770:	200000a0 	.word	0x200000a0
 8000774:	200000c4 	.word	0x200000c4

08000778 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000780:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000782:	4a0b      	ldr	r2, [pc, #44]	@ (80007b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000784:	2100      	movs	r1, #0
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f001 f9dd 	bl	8001b46 <HAL_CAN_GetRxMessage>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
        Error_Handler();
 8000792:	f000 fbbd 	bl	8000f10 <Error_Handler>
    }

    __HAL_TIM_SET_COUNTER(&htim7, 0);
 8000796:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2200      	movs	r2, #0
 800079c:	625a      	str	r2, [r3, #36]	@ 0x24
    timExpired = 0;
 800079e:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000098 	.word	0x20000098
 80007b0:	2000007c 	.word	0x2000007c
 80007b4:	20000148 	.word	0x20000148
 80007b8:	20000000 	.word	0x20000000

080007bc <CAN_Print_Errors>:

void CAN_Print_Errors(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	@ 0x38
 80007c0:	af00      	add	r7, sp, #0
    char uart_buf[50];
    uint8_t uart_buf_len;
    uint32_t error_code = HAL_CAN_GetError(&hcan1);
 80007c2:	4876      	ldr	r0, [pc, #472]	@ (800099c <CAN_Print_Errors+0x1e0>)
 80007c4:	f001 fd36 	bl	8002234 <HAL_CAN_GetError>
 80007c8:	6378      	str	r0, [r7, #52]	@ 0x34

    // Log the error code (Optional, use UART or a debugger)
    uart_buf_len = sprintf(uart_buf, "CAN Error Code: 0x%08lX\n\r", error_code);
 80007ca:	463b      	mov	r3, r7
 80007cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80007ce:	4974      	ldr	r1, [pc, #464]	@ (80009a0 <CAN_Print_Errors+0x1e4>)
 80007d0:	4618      	mov	r0, r3
 80007d2:	f004 faf7 	bl	8004dc4 <siprintf>
 80007d6:	4603      	mov	r3, r0
 80007d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    UART_Send(uart_buf, uart_buf_len);
 80007dc:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80007e0:	463b      	mov	r3, r7
 80007e2:	4611      	mov	r1, r2
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 fdff 	bl	80013e8 <UART_Send>

    // Error Handling
    if (error_code == HAL_CAN_ERROR_NONE) {
 80007ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	f000 80d0 	beq.w	8000992 <CAN_Print_Errors+0x1d6>
        // No error, do nothing
        return;
    }

    if (error_code & HAL_CAN_ERROR_EWG) {
 80007f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007f4:	f003 0301 	and.w	r3, r3, #1
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d003      	beq.n	8000804 <CAN_Print_Errors+0x48>
        SEND_STRING("Protocol Error Warning detected.\n\r");
 80007fc:	2122      	movs	r1, #34	@ 0x22
 80007fe:	4869      	ldr	r0, [pc, #420]	@ (80009a4 <CAN_Print_Errors+0x1e8>)
 8000800:	f000 fdf2 	bl	80013e8 <UART_Send>
    }

    if (error_code & HAL_CAN_ERROR_EPV) {
 8000804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	2b00      	cmp	r3, #0
 800080c:	d003      	beq.n	8000816 <CAN_Print_Errors+0x5a>
        SEND_STRING("Error Passive state detected.\n\r");
 800080e:	211f      	movs	r1, #31
 8000810:	4865      	ldr	r0, [pc, #404]	@ (80009a8 <CAN_Print_Errors+0x1ec>)
 8000812:	f000 fde9 	bl	80013e8 <UART_Send>
    }

    if (error_code & HAL_CAN_ERROR_BOF) {
 8000816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000818:	f003 0304 	and.w	r3, r3, #4
 800081c:	2b00      	cmp	r3, #0
 800081e:	d003      	beq.n	8000828 <CAN_Print_Errors+0x6c>
        SEND_STRING("Bus-Off error detected.\n\r");
 8000820:	2119      	movs	r1, #25
 8000822:	4862      	ldr	r0, [pc, #392]	@ (80009ac <CAN_Print_Errors+0x1f0>)
 8000824:	f000 fde0 	bl	80013e8 <UART_Send>
    }

    if (error_code & HAL_CAN_ERROR_STF) {
 8000828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800082a:	f003 0308 	and.w	r3, r3, #8
 800082e:	2b00      	cmp	r3, #0
 8000830:	d003      	beq.n	800083a <CAN_Print_Errors+0x7e>
        SEND_STRING("Stuff error detected.\n\r");
 8000832:	2117      	movs	r1, #23
 8000834:	485e      	ldr	r0, [pc, #376]	@ (80009b0 <CAN_Print_Errors+0x1f4>)
 8000836:	f000 fdd7 	bl	80013e8 <UART_Send>
    }

    if (error_code & HAL_CAN_ERROR_FOR) {
 800083a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800083c:	f003 0310 	and.w	r3, r3, #16
 8000840:	2b00      	cmp	r3, #0
 8000842:	d003      	beq.n	800084c <CAN_Print_Errors+0x90>
        SEND_STRING("Form error detected.\n\r");
 8000844:	2116      	movs	r1, #22
 8000846:	485b      	ldr	r0, [pc, #364]	@ (80009b4 <CAN_Print_Errors+0x1f8>)
 8000848:	f000 fdce 	bl	80013e8 <UART_Send>
    }

    if (error_code & HAL_CAN_ERROR_ACK) {
 800084c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800084e:	f003 0320 	and.w	r3, r3, #32
 8000852:	2b00      	cmp	r3, #0
 8000854:	d003      	beq.n	800085e <CAN_Print_Errors+0xa2>
        SEND_STRING("Acknowledgment error detected.\n\r");
 8000856:	2120      	movs	r1, #32
 8000858:	4857      	ldr	r0, [pc, #348]	@ (80009b8 <CAN_Print_Errors+0x1fc>)
 800085a:	f000 fdc5 	bl	80013e8 <UART_Send>
    }

    if (error_code & HAL_CAN_ERROR_BR) {
 800085e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000864:	2b00      	cmp	r3, #0
 8000866:	d003      	beq.n	8000870 <CAN_Print_Errors+0xb4>
        SEND_STRING("Bit Recessive error detected.\n\r");
 8000868:	211f      	movs	r1, #31
 800086a:	4854      	ldr	r0, [pc, #336]	@ (80009bc <CAN_Print_Errors+0x200>)
 800086c:	f000 fdbc 	bl	80013e8 <UART_Send>
    }

    if (error_code & HAL_CAN_ERROR_BD) {
 8000870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000876:	2b00      	cmp	r3, #0
 8000878:	d003      	beq.n	8000882 <CAN_Print_Errors+0xc6>
        SEND_STRING("Bit Dominant error detected.\n\r");
 800087a:	211e      	movs	r1, #30
 800087c:	4850      	ldr	r0, [pc, #320]	@ (80009c0 <CAN_Print_Errors+0x204>)
 800087e:	f000 fdb3 	bl	80013e8 <UART_Send>
    }

    if (error_code & HAL_CAN_ERROR_CRC) {
 8000882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000888:	2b00      	cmp	r3, #0
 800088a:	d003      	beq.n	8000894 <CAN_Print_Errors+0xd8>
        SEND_STRING("CRC error detected.\n\r");
 800088c:	2115      	movs	r1, #21
 800088e:	484d      	ldr	r0, [pc, #308]	@ (80009c4 <CAN_Print_Errors+0x208>)
 8000890:	f000 fdaa 	bl	80013e8 <UART_Send>
    }

    if (error_code & HAL_CAN_ERROR_RX_FOV0) {
 8000894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000896:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800089a:	2b00      	cmp	r3, #0
 800089c:	d003      	beq.n	80008a6 <CAN_Print_Errors+0xea>
        SEND_STRING("RX FIFO0 Overrun detected.\n\r");
 800089e:	211c      	movs	r1, #28
 80008a0:	4849      	ldr	r0, [pc, #292]	@ (80009c8 <CAN_Print_Errors+0x20c>)
 80008a2:	f000 fda1 	bl	80013e8 <UART_Send>
    }

    if (error_code & HAL_CAN_ERROR_RX_FOV1) {
 80008a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d003      	beq.n	80008b8 <CAN_Print_Errors+0xfc>
        SEND_STRING("RX FIFO1 Overrun detected.\n\r");
 80008b0:	211c      	movs	r1, #28
 80008b2:	4846      	ldr	r0, [pc, #280]	@ (80009cc <CAN_Print_Errors+0x210>)
 80008b4:	f000 fd98 	bl	80013e8 <UART_Send>
    }

    if (error_code & HAL_CAN_ERROR_TX_ALST0) {
 80008b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d003      	beq.n	80008ca <CAN_Print_Errors+0x10e>
        SEND_STRING("TX Mailbox 0 Arbitration lost.\n\r");
 80008c2:	2120      	movs	r1, #32
 80008c4:	4842      	ldr	r0, [pc, #264]	@ (80009d0 <CAN_Print_Errors+0x214>)
 80008c6:	f000 fd8f 	bl	80013e8 <UART_Send>
    }

    if (error_code & HAL_CAN_ERROR_TX_TERR0) {
 80008ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d003      	beq.n	80008dc <CAN_Print_Errors+0x120>
        SEND_STRING("TX Mailbox 0 Transmission error.\n\r");
 80008d4:	2122      	movs	r1, #34	@ 0x22
 80008d6:	483f      	ldr	r0, [pc, #252]	@ (80009d4 <CAN_Print_Errors+0x218>)
 80008d8:	f000 fd86 	bl	80013e8 <UART_Send>
    }

    if (error_code & HAL_CAN_ERROR_TX_ALST1) {
 80008dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d003      	beq.n	80008ee <CAN_Print_Errors+0x132>
        SEND_STRING("TX Mailbox 1 Arbitration lost.\n\r");
 80008e6:	2120      	movs	r1, #32
 80008e8:	483b      	ldr	r0, [pc, #236]	@ (80009d8 <CAN_Print_Errors+0x21c>)
 80008ea:	f000 fd7d 	bl	80013e8 <UART_Send>
    }

    if (error_code & HAL_CAN_ERROR_TX_TERR1) {
 80008ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d003      	beq.n	8000900 <CAN_Print_Errors+0x144>
        SEND_STRING("TX Mailbox 1 Transmission error.\n\r");
 80008f8:	2122      	movs	r1, #34	@ 0x22
 80008fa:	4838      	ldr	r0, [pc, #224]	@ (80009dc <CAN_Print_Errors+0x220>)
 80008fc:	f000 fd74 	bl	80013e8 <UART_Send>
    }

    if (error_code & HAL_CAN_ERROR_TX_ALST2) {
 8000900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000902:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000906:	2b00      	cmp	r3, #0
 8000908:	d003      	beq.n	8000912 <CAN_Print_Errors+0x156>
        SEND_STRING("TX Mailbox 2 Arbitration lost.\n\r");
 800090a:	2120      	movs	r1, #32
 800090c:	4834      	ldr	r0, [pc, #208]	@ (80009e0 <CAN_Print_Errors+0x224>)
 800090e:	f000 fd6b 	bl	80013e8 <UART_Send>
    }

    if (error_code & HAL_CAN_ERROR_TX_TERR2) {
 8000912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000918:	2b00      	cmp	r3, #0
 800091a:	d003      	beq.n	8000924 <CAN_Print_Errors+0x168>
        SEND_STRING("TX Mailbox 2 Transmission error.\n\r");
 800091c:	2122      	movs	r1, #34	@ 0x22
 800091e:	4831      	ldr	r0, [pc, #196]	@ (80009e4 <CAN_Print_Errors+0x228>)
 8000920:	f000 fd62 	bl	80013e8 <UART_Send>
    }

    if (error_code & HAL_CAN_ERROR_TIMEOUT) {
 8000924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800092a:	2b00      	cmp	r3, #0
 800092c:	d003      	beq.n	8000936 <CAN_Print_Errors+0x17a>
        SEND_STRING("Timeout error detected.\n\r");
 800092e:	2119      	movs	r1, #25
 8000930:	482d      	ldr	r0, [pc, #180]	@ (80009e8 <CAN_Print_Errors+0x22c>)
 8000932:	f000 fd59 	bl	80013e8 <UART_Send>
    }

    if (error_code & HAL_CAN_ERROR_NOT_INITIALIZED) {
 8000936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000938:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800093c:	2b00      	cmp	r3, #0
 800093e:	d003      	beq.n	8000948 <CAN_Print_Errors+0x18c>
        SEND_STRING("CAN Peripheral not initialized.\n\r");
 8000940:	2121      	movs	r1, #33	@ 0x21
 8000942:	482a      	ldr	r0, [pc, #168]	@ (80009ec <CAN_Print_Errors+0x230>)
 8000944:	f000 fd50 	bl	80013e8 <UART_Send>
    }

    if (error_code & HAL_CAN_ERROR_NOT_READY) {
 8000948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800094a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800094e:	2b00      	cmp	r3, #0
 8000950:	d003      	beq.n	800095a <CAN_Print_Errors+0x19e>
        SEND_STRING("CAN Peripheral not ready.\n\r");
 8000952:	211b      	movs	r1, #27
 8000954:	4826      	ldr	r0, [pc, #152]	@ (80009f0 <CAN_Print_Errors+0x234>)
 8000956:	f000 fd47 	bl	80013e8 <UART_Send>
    }

    if (error_code & HAL_CAN_ERROR_NOT_STARTED) {
 800095a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800095c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000960:	2b00      	cmp	r3, #0
 8000962:	d003      	beq.n	800096c <CAN_Print_Errors+0x1b0>
        SEND_STRING("CAN Peripheral not started.\n\r");
 8000964:	211d      	movs	r1, #29
 8000966:	4823      	ldr	r0, [pc, #140]	@ (80009f4 <CAN_Print_Errors+0x238>)
 8000968:	f000 fd3e 	bl	80013e8 <UART_Send>
    }

    if (error_code & HAL_CAN_ERROR_PARAM) {
 800096c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800096e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000972:	2b00      	cmp	r3, #0
 8000974:	d003      	beq.n	800097e <CAN_Print_Errors+0x1c2>
        SEND_STRING("Parameter error detected.\n\r");
 8000976:	211b      	movs	r1, #27
 8000978:	481f      	ldr	r0, [pc, #124]	@ (80009f8 <CAN_Print_Errors+0x23c>)
 800097a:	f000 fd35 	bl	80013e8 <UART_Send>
    if (error_code & HAL_CAN_ERROR_INVALID_CALLBACK) {
        SEND_STRING("Invalid callback error detected.\n\r");
    }
#endif

    if (error_code & HAL_CAN_ERROR_INTERNAL) {
 800097e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000980:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000984:	2b00      	cmp	r3, #0
 8000986:	d005      	beq.n	8000994 <CAN_Print_Errors+0x1d8>
        SEND_STRING("Internal error detected.\n\r");
 8000988:	211a      	movs	r1, #26
 800098a:	481c      	ldr	r0, [pc, #112]	@ (80009fc <CAN_Print_Errors+0x240>)
 800098c:	f000 fd2c 	bl	80013e8 <UART_Send>
 8000990:	e000      	b.n	8000994 <CAN_Print_Errors+0x1d8>
        return;
 8000992:	bf00      	nop
    }
}
 8000994:	3738      	adds	r7, #56	@ 0x38
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200000c4 	.word	0x200000c4
 80009a0:	0800571c 	.word	0x0800571c
 80009a4:	08005738 	.word	0x08005738
 80009a8:	0800575c 	.word	0x0800575c
 80009ac:	0800577c 	.word	0x0800577c
 80009b0:	08005798 	.word	0x08005798
 80009b4:	080057b0 	.word	0x080057b0
 80009b8:	080057c8 	.word	0x080057c8
 80009bc:	080057ec 	.word	0x080057ec
 80009c0:	0800580c 	.word	0x0800580c
 80009c4:	0800582c 	.word	0x0800582c
 80009c8:	08005844 	.word	0x08005844
 80009cc:	08005864 	.word	0x08005864
 80009d0:	08005884 	.word	0x08005884
 80009d4:	080058a8 	.word	0x080058a8
 80009d8:	080058cc 	.word	0x080058cc
 80009dc:	080058f0 	.word	0x080058f0
 80009e0:	08005914 	.word	0x08005914
 80009e4:	08005938 	.word	0x08005938
 80009e8:	0800595c 	.word	0x0800595c
 80009ec:	08005978 	.word	0x08005978
 80009f0:	0800599c 	.word	0x0800599c
 80009f4:	080059b8 	.word	0x080059b8
 80009f8:	080059d8 	.word	0x080059d8
 80009fc:	080059f4 	.word	0x080059f4

08000a00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	4b37      	ldr	r3, [pc, #220]	@ (8000af4 <MX_GPIO_Init+0xf4>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1a:	4a36      	ldr	r2, [pc, #216]	@ (8000af4 <MX_GPIO_Init+0xf4>)
 8000a1c:	f043 0304 	orr.w	r3, r3, #4
 8000a20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a22:	4b34      	ldr	r3, [pc, #208]	@ (8000af4 <MX_GPIO_Init+0xf4>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a26:	f003 0304 	and.w	r3, r3, #4
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	4b31      	ldr	r3, [pc, #196]	@ (8000af4 <MX_GPIO_Init+0xf4>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a32:	4a30      	ldr	r2, [pc, #192]	@ (8000af4 <MX_GPIO_Init+0xf4>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3a:	4b2e      	ldr	r3, [pc, #184]	@ (8000af4 <MX_GPIO_Init+0xf4>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a46:	4b2b      	ldr	r3, [pc, #172]	@ (8000af4 <MX_GPIO_Init+0xf4>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4a:	4a2a      	ldr	r2, [pc, #168]	@ (8000af4 <MX_GPIO_Init+0xf4>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a52:	4b28      	ldr	r3, [pc, #160]	@ (8000af4 <MX_GPIO_Init+0xf4>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2101      	movs	r1, #1
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a66:	f001 fe6d 	bl	8002744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RedLed_Pin|LD3_Pin|GreenLed_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2129      	movs	r1, #41	@ 0x29
 8000a6e:	4822      	ldr	r0, [pc, #136]	@ (8000af8 <MX_GPIO_Init+0xf8>)
 8000a70:	f001 fe68 	bl	8002744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8000a74:	2301      	movs	r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a8e:	f001 fcef 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ButtonDown_Pin|ButtonUp_Pin;
 8000a92:	2328      	movs	r3, #40	@ 0x28
 8000a94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a96:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aaa:	f001 fce1 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RedLed_Pin|LD3_Pin|GreenLed_Pin;
 8000aae:	2329      	movs	r3, #41	@ 0x29
 8000ab0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480c      	ldr	r0, [pc, #48]	@ (8000af8 <MX_GPIO_Init+0xf8>)
 8000ac6:	f001 fcd3 	bl	8002470 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2101      	movs	r1, #1
 8000ace:	2009      	movs	r0, #9
 8000ad0:	f001 fc97 	bl	8002402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000ad4:	2009      	movs	r0, #9
 8000ad6:	f001 fcb0 	bl	800243a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2101      	movs	r1, #1
 8000ade:	2017      	movs	r0, #23
 8000ae0:	f001 fc8f 	bl	8002402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ae4:	2017      	movs	r0, #23
 8000ae6:	f001 fca8 	bl	800243a <HAL_NVIC_EnableIRQ>

}
 8000aea:	bf00      	nop
 8000aec:	3720      	adds	r7, #32
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000
 8000af8:	48000400 	.word	0x48000400

08000afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	6039      	str	r1, [r7, #0]
 8000b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	db0a      	blt.n	8000b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	490c      	ldr	r1, [pc, #48]	@ (8000b48 <__NVIC_SetPriority+0x4c>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	0112      	lsls	r2, r2, #4
 8000b1c:	b2d2      	uxtb	r2, r2
 8000b1e:	440b      	add	r3, r1
 8000b20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b24:	e00a      	b.n	8000b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4908      	ldr	r1, [pc, #32]	@ (8000b4c <__NVIC_SetPriority+0x50>)
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	f003 030f 	and.w	r3, r3, #15
 8000b32:	3b04      	subs	r3, #4
 8000b34:	0112      	lsls	r2, r2, #4
 8000b36:	b2d2      	uxtb	r2, r2
 8000b38:	440b      	add	r3, r1
 8000b3a:	761a      	strb	r2, [r3, #24]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000e100 	.word	0xe000e100
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b54:	f3bf 8f4f 	dsb	sy
}
 8000b58:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000b5a:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <__NVIC_SystemReset+0x24>)
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000b62:	4904      	ldr	r1, [pc, #16]	@ (8000b74 <__NVIC_SystemReset+0x24>)
 8000b64:	4b04      	ldr	r3, [pc, #16]	@ (8000b78 <__NVIC_SystemReset+0x28>)
 8000b66:	4313      	orrs	r3, r2
 8000b68:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b6a:	f3bf 8f4f 	dsb	sy
}
 8000b6e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <__NVIC_SystemReset+0x20>
 8000b74:	e000ed00 	.word	0xe000ed00
 8000b78:	05fa0004 	.word	0x05fa0004

08000b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b8c:	d301      	bcc.n	8000b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e00f      	b.n	8000bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b92:	4a0a      	ldr	r2, [pc, #40]	@ (8000bbc <SysTick_Config+0x40>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b9a:	210f      	movs	r1, #15
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	f7ff ffac 	bl	8000afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba4:	4b05      	ldr	r3, [pc, #20]	@ (8000bbc <SysTick_Config+0x40>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000baa:	4b04      	ldr	r3, [pc, #16]	@ (8000bbc <SysTick_Config+0x40>)
 8000bac:	2207      	movs	r2, #7
 8000bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	e000e010 	.word	0xe000e010

08000bc0 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000bc6:	f000 fc4c 	bl	8001462 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000bca:	f000 f877 	bl	8000cbc <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    SysTick_Config(SystemCoreClock / 1000);
 8000bce:	4b33      	ldr	r3, [pc, #204]	@ (8000c9c <main+0xdc>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a33      	ldr	r2, [pc, #204]	@ (8000ca0 <main+0xe0>)
 8000bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd8:	099b      	lsrs	r3, r3, #6
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ffce 	bl	8000b7c <SysTick_Config>

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000be0:	f7ff ff0e 	bl	8000a00 <MX_GPIO_Init>
    MX_CAN1_Init();
 8000be4:	f7ff fcbc 	bl	8000560 <MX_CAN1_Init>
    MX_TIM2_Init();
 8000be8:	f000 fa9e 	bl	8001128 <MX_TIM2_Init>
    MX_USART2_UART_Init();
 8000bec:	f000 fb62 	bl	80012b4 <MX_USART2_UART_Init>
    MX_TIM7_Init();
 8000bf0:	f000 fae8 	bl	80011c4 <MX_TIM7_Init>
    /* USER CODE BEGIN 2 */

    SEND_STRING("Completed init\n\r");
 8000bf4:	2110      	movs	r1, #16
 8000bf6:	482b      	ldr	r0, [pc, #172]	@ (8000ca4 <main+0xe4>)
 8000bf8:	f000 fbf6 	bl	80013e8 <UART_Send>

    CAN_TX_filter_init();
 8000bfc:	f7ff fd6a 	bl	80006d4 <CAN_TX_filter_init>
    servoState = 8;
 8000c00:	4b29      	ldr	r3, [pc, #164]	@ (8000ca8 <main+0xe8>)
 8000c02:	2208      	movs	r2, #8
 8000c04:	701a      	strb	r2, [r3, #0]
    CAN_SendState(servoState);
 8000c06:	4b28      	ldr	r3, [pc, #160]	@ (8000ca8 <main+0xe8>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fd7d 	bl	800070c <CAN_SendState>

    if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 8000c12:	4826      	ldr	r0, [pc, #152]	@ (8000cac <main+0xec>)
 8000c14:	f002 ffdc 	bl	8003bd0 <HAL_TIM_Base_Start_IT>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <main+0x62>
        Error_Handler();
 8000c1e:	f000 f977 	bl	8000f10 <Error_Handler>
    }
    if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK) {
 8000c22:	4823      	ldr	r0, [pc, #140]	@ (8000cb0 <main+0xf0>)
 8000c24:	f002 ffd4 	bl	8003bd0 <HAL_TIM_Base_Start_IT>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <main+0x72>
        Error_Handler();
 8000c2e:	f000 f96f 	bl	8000f10 <Error_Handler>
    }

    //Testfunction leds
    HAL_GPIO_WritePin(GPIOB, GreenLed_Pin, RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2120      	movs	r1, #32
 8000c36:	481f      	ldr	r0, [pc, #124]	@ (8000cb4 <main+0xf4>)
 8000c38:	f001 fd84 	bl	8002744 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, RedLed_Pin, SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2101      	movs	r1, #1
 8000c40:	481c      	ldr	r0, [pc, #112]	@ (8000cb4 <main+0xf4>)
 8000c42:	f001 fd7f 	bl	8002744 <HAL_GPIO_WritePin>
    for (int i = 0; i < 6; i++) {
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	e00e      	b.n	8000c6a <main+0xaa>
        HAL_GPIO_TogglePin(GPIOB, GreenLed_Pin);
 8000c4c:	2120      	movs	r1, #32
 8000c4e:	4819      	ldr	r0, [pc, #100]	@ (8000cb4 <main+0xf4>)
 8000c50:	f001 fd90 	bl	8002774 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(GPIOB, RedLed_Pin);
 8000c54:	2101      	movs	r1, #1
 8000c56:	4817      	ldr	r0, [pc, #92]	@ (8000cb4 <main+0xf4>)
 8000c58:	f001 fd8c 	bl	8002774 <HAL_GPIO_TogglePin>
        HAL_Delay(500);
 8000c5c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c60:	f000 fc74 	bl	800154c <HAL_Delay>
    for (int i = 0; i < 6; i++) {
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3301      	adds	r3, #1
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b05      	cmp	r3, #5
 8000c6e:	dded      	ble.n	8000c4c <main+0x8c>
    }
    ledState = RED;
 8000c70:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <main+0xf8>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOB, GreenLed_Pin, RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2120      	movs	r1, #32
 8000c7a:	480e      	ldr	r0, [pc, #56]	@ (8000cb4 <main+0xf4>)
 8000c7c:	f001 fd62 	bl	8002744 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, RedLed_Pin, SET);
 8000c80:	2201      	movs	r2, #1
 8000c82:	2101      	movs	r1, #1
 8000c84:	480b      	ldr	r0, [pc, #44]	@ (8000cb4 <main+0xf4>)
 8000c86:	f001 fd5d 	bl	8002744 <HAL_GPIO_WritePin>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    HAL_GPIO_WritePin(GPIOB, LD3_Pin, SET);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	2108      	movs	r1, #8
 8000c8e:	4809      	ldr	r0, [pc, #36]	@ (8000cb4 <main+0xf4>)
 8000c90:	f001 fd58 	bl	8002744 <HAL_GPIO_WritePin>

    while (1) {
        /* USER CODE END WHILE */
        MainLoop();
 8000c94:	f000 f874 	bl	8000d80 <MainLoop>
 8000c98:	e7fc      	b.n	8000c94 <main+0xd4>
 8000c9a:	bf00      	nop
 8000c9c:	20000004 	.word	0x20000004
 8000ca0:	10624dd3 	.word	0x10624dd3
 8000ca4:	08005a10 	.word	0x08005a10
 8000ca8:	200000ec 	.word	0x200000ec
 8000cac:	200000fc 	.word	0x200000fc
 8000cb0:	20000148 	.word	0x20000148
 8000cb4:	48000400 	.word	0x48000400
 8000cb8:	200000f0 	.word	0x200000f0

08000cbc <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b096      	sub	sp, #88	@ 0x58
 8000cc0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	2244      	movs	r2, #68	@ 0x44
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f004 f89a 	bl	8004e04 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 8000cde:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ce2:	f001 fd97 	bl	8002814 <HAL_PWREx_ControlVoltageScaling>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <SystemClock_Config+0x34>
        Error_Handler();
 8000cec:	f000 f910 	bl	8000f10 <Error_Handler>
    }

    /** Configure LSE Drive Capability
    */
    HAL_PWR_EnableBkUpAccess();
 8000cf0:	f001 fd72 	bl	80027d8 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000cf4:	4b21      	ldr	r3, [pc, #132]	@ (8000d7c <SystemClock_Config+0xc0>)
 8000cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000cfa:	4a20      	ldr	r2, [pc, #128]	@ (8000d7c <SystemClock_Config+0xc0>)
 8000cfc:	f023 0318 	bic.w	r3, r3, #24
 8000d00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
 8000d04:	2314      	movs	r3, #20
 8000d06:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d14:	2360      	movs	r3, #96	@ 0x60
 8000d16:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLM = 1;
 8000d20:	2301      	movs	r3, #1
 8000d22:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLN = 16;
 8000d24:	2310      	movs	r3, #16
 8000d26:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d28:	2307      	movs	r3, #7
 8000d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d30:	2302      	movs	r3, #2
 8000d32:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f001 fdc1 	bl	80028c0 <HAL_RCC_OscConfig>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <SystemClock_Config+0x8c>
        Error_Handler();
 8000d44:	f000 f8e4 	bl	8000f10 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d48:	230f      	movs	r3, #15
 8000d4a:	603b      	str	r3, [r7, #0]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	613b      	str	r3, [r7, #16]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	2101      	movs	r1, #1
 8000d60:	4618      	mov	r0, r3
 8000d62:	f002 f9c1 	bl	80030e8 <HAL_RCC_ClockConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <SystemClock_Config+0xb4>
        Error_Handler();
 8000d6c:	f000 f8d0 	bl	8000f10 <Error_Handler>
    }

    /** Enable MSI Auto calibration
    */
    HAL_RCCEx_EnableMSIPLLMode();
 8000d70:	f002 fdd4 	bl	800391c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000d74:	bf00      	nop
 8000d76:	3758      	adds	r7, #88	@ 0x58
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40021000 	.word	0x40021000

08000d80 <MainLoop>:

/* USER CODE BEGIN 4 */

void MainLoop(void) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
    static uint32_t stoptime;
    if (ledState != RED && timExpired == 1) {
 8000d84:	4b28      	ldr	r3, [pc, #160]	@ (8000e28 <MainLoop+0xa8>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d018      	beq.n	8000dbe <MainLoop+0x3e>
 8000d8c:	4b27      	ldr	r3, [pc, #156]	@ (8000e2c <MainLoop+0xac>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d013      	beq.n	8000dbe <MainLoop+0x3e>
        ledState = RED;
 8000d96:	4b24      	ldr	r3, [pc, #144]	@ (8000e28 <MainLoop+0xa8>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOB, RedLed_Pin, SET);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2101      	movs	r1, #1
 8000da0:	4823      	ldr	r0, [pc, #140]	@ (8000e30 <MainLoop+0xb0>)
 8000da2:	f001 fccf 	bl	8002744 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GreenLed_Pin, RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2120      	movs	r1, #32
 8000daa:	4821      	ldr	r0, [pc, #132]	@ (8000e30 <MainLoop+0xb0>)
 8000dac:	f001 fcca 	bl	8002744 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, Buzzer_Pin, RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2101      	movs	r1, #1
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db8:	f001 fcc4 	bl	8002744 <HAL_GPIO_WritePin>
 8000dbc:	e023      	b.n	8000e06 <MainLoop+0x86>
    } else if (ledState != GREEN && timExpired == 0) {
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <MainLoop+0xa8>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d01f      	beq.n	8000e06 <MainLoop+0x86>
 8000dc6:	4b19      	ldr	r3, [pc, #100]	@ (8000e2c <MainLoop+0xac>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	f083 0301 	eor.w	r3, r3, #1
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d017      	beq.n	8000e06 <MainLoop+0x86>
        ledState = GREEN;
 8000dd6:	4b14      	ldr	r3, [pc, #80]	@ (8000e28 <MainLoop+0xa8>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOB, RedLed_Pin, RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2101      	movs	r1, #1
 8000de0:	4813      	ldr	r0, [pc, #76]	@ (8000e30 <MainLoop+0xb0>)
 8000de2:	f001 fcaf 	bl	8002744 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GreenLed_Pin, SET);
 8000de6:	2201      	movs	r2, #1
 8000de8:	2120      	movs	r1, #32
 8000dea:	4811      	ldr	r0, [pc, #68]	@ (8000e30 <MainLoop+0xb0>)
 8000dec:	f001 fcaa 	bl	8002744 <HAL_GPIO_WritePin>
        stoptime = HAL_GetTick();
 8000df0:	f000 fba0 	bl	8001534 <HAL_GetTick>
 8000df4:	4603      	mov	r3, r0
 8000df6:	4a0f      	ldr	r2, [pc, #60]	@ (8000e34 <MainLoop+0xb4>)
 8000df8:	6013      	str	r3, [r2, #0]
        HAL_GPIO_WritePin(GPIOA, Buzzer_Pin, SET);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e02:	f001 fc9f 	bl	8002744 <HAL_GPIO_WritePin>
    }

    if (HAL_GetTick() > (stoptime + TIMEBUZZER)) {
 8000e06:	f000 fb95 	bl	8001534 <HAL_GetTick>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	4b09      	ldr	r3, [pc, #36]	@ (8000e34 <MainLoop+0xb4>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d905      	bls.n	8000e24 <MainLoop+0xa4>
        HAL_GPIO_WritePin(GPIOA, Buzzer_Pin, RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e20:	f001 fc90 	bl	8002744 <HAL_GPIO_WritePin>
    }
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	200000f0 	.word	0x200000f0
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	48000400 	.word	0x48000400
 8000e34:	200000f4 	.word	0x200000f4

08000e38 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
    if (htim == &htim2) {
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a0a      	ldr	r2, [pc, #40]	@ (8000e6c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d105      	bne.n	8000e54 <HAL_TIM_PeriodElapsedCallback+0x1c>
        CAN_SendState(servoState);
 8000e48:	4b09      	ldr	r3, [pc, #36]	@ (8000e70 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fc5c 	bl	800070c <CAN_SendState>
    }
    if (htim == &htim7) {
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a07      	ldr	r2, [pc, #28]	@ (8000e74 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d102      	bne.n	8000e62 <HAL_TIM_PeriodElapsedCallback+0x2a>
        timExpired = 1;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
    }
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200000fc 	.word	0x200000fc
 8000e70:	200000ec 	.word	0x200000ec
 8000e74:	20000148 	.word	0x20000148
 8000e78:	20000000 	.word	0x20000000

08000e7c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b090      	sub	sp, #64	@ 0x40
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	80fb      	strh	r3, [r7, #6]
    char uart_buf[50];
    uint8_t uart_buf_len;

    if (GPIO_Pin == ButtonDown_Pin) {
 8000e86:	88fb      	ldrh	r3, [r7, #6]
 8000e88:	2b08      	cmp	r3, #8
 8000e8a:	d10c      	bne.n	8000ea6 <HAL_GPIO_EXTI_Callback+0x2a>
        if (servoState > MIN_STATE) {
 8000e8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f08 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d018      	beq.n	8000ec8 <HAL_GPIO_EXTI_Callback+0x4c>
            servoState -= 1;
 8000e96:	4b1c      	ldr	r3, [pc, #112]	@ (8000f08 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	4b19      	ldr	r3, [pc, #100]	@ (8000f08 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000ea2:	701a      	strb	r2, [r3, #0]
 8000ea4:	e010      	b.n	8000ec8 <HAL_GPIO_EXTI_Callback+0x4c>
        }
    } else if (GPIO_Pin == ButtonUp_Pin) {
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	2b20      	cmp	r3, #32
 8000eaa:	d10c      	bne.n	8000ec6 <HAL_GPIO_EXTI_Callback+0x4a>
        if (servoState < MAX_STATE) {
 8000eac:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b0b      	cmp	r3, #11
 8000eb4:	d808      	bhi.n	8000ec8 <HAL_GPIO_EXTI_Callback+0x4c>
            servoState += 1;
 8000eb6:	4b14      	ldr	r3, [pc, #80]	@ (8000f08 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000ec2:	701a      	strb	r2, [r3, #0]
 8000ec4:	e000      	b.n	8000ec8 <HAL_GPIO_EXTI_Callback+0x4c>
        }
    } else {
        __NOP();
 8000ec6:	bf00      	nop
    }

    uart_buf_len = sprintf(uart_buf, "servoState : %u\n\r", servoState);
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f08 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	461a      	mov	r2, r3
 8000ed0:	f107 030c 	add.w	r3, r7, #12
 8000ed4:	490d      	ldr	r1, [pc, #52]	@ (8000f0c <HAL_GPIO_EXTI_Callback+0x90>)
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f003 ff74 	bl	8004dc4 <siprintf>
 8000edc:	4603      	mov	r3, r0
 8000ede:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    UART_Send(uart_buf, uart_buf_len);
 8000ee2:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000ee6:	f107 030c 	add.w	r3, r7, #12
 8000eea:	4611      	mov	r1, r2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 fa7b 	bl	80013e8 <UART_Send>
    CAN_SendState(servoState);
 8000ef2:	4b05      	ldr	r3, [pc, #20]	@ (8000f08 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fc07 	bl	800070c <CAN_SendState>
}
 8000efe:	bf00      	nop
 8000f00:	3740      	adds	r7, #64	@ 0x40
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200000ec 	.word	0x200000ec
 8000f0c:	08005a24 	.word	0x08005a24

08000f10 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    HAL_GPIO_WritePin(GPIOB, RedLed_Pin, RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2101      	movs	r1, #1
 8000f18:	480b      	ldr	r0, [pc, #44]	@ (8000f48 <Error_Handler+0x38>)
 8000f1a:	f001 fc13 	bl	8002744 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, Buzzer_Pin, RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2101      	movs	r1, #1
 8000f22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f26:	f001 fc0d 	bl	8002744 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LD3_Pin, RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2108      	movs	r1, #8
 8000f2e:	4806      	ldr	r0, [pc, #24]	@ (8000f48 <Error_Handler+0x38>)
 8000f30:	f001 fc08 	bl	8002744 <HAL_GPIO_WritePin>
    CAN_Print_Errors();
 8000f34:	f7ff fc42 	bl	80007bc <CAN_Print_Errors>

    SEND_STRING("Resetting due to error\n\r");
 8000f38:	2118      	movs	r1, #24
 8000f3a:	4804      	ldr	r0, [pc, #16]	@ (8000f4c <Error_Handler+0x3c>)
 8000f3c:	f000 fa54 	bl	80013e8 <UART_Send>
  __ASM volatile ("cpsid i" : : : "memory");
 8000f40:	b672      	cpsid	i
}
 8000f42:	bf00      	nop

    __disable_irq();  // Ensure no interrupts interfere
    NVIC_SystemReset(); // Software reset
 8000f44:	f7ff fe04 	bl	8000b50 <__NVIC_SystemReset>
 8000f48:	48000400 	.word	0x48000400
 8000f4c:	08005a38 	.word	0x08005a38

08000f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f56:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <HAL_MspInit+0x50>)
 8000f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f5a:	4a11      	ldr	r2, [pc, #68]	@ (8000fa0 <HAL_MspInit+0x50>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f62:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa0 <HAL_MspInit+0x50>)
 8000f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <HAL_MspInit+0x50>)
 8000f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f72:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa0 <HAL_MspInit+0x50>)
 8000f74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f78:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f7a:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <HAL_MspInit+0x50>)
 8000f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 1, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2101      	movs	r1, #1
 8000f8a:	2005      	movs	r0, #5
 8000f8c:	f001 fa39 	bl	8002402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000f90:	2005      	movs	r0, #5
 8000f92:	f001 fa52 	bl	800243a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <__NVIC_SystemReset>:
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa8:	f3bf 8f4f 	dsb	sy
}
 8000fac:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000fae:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <__NVIC_SystemReset+0x24>)
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000fb6:	4904      	ldr	r1, [pc, #16]	@ (8000fc8 <__NVIC_SystemReset+0x24>)
 8000fb8:	4b04      	ldr	r3, [pc, #16]	@ (8000fcc <__NVIC_SystemReset+0x28>)
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fbe:	f3bf 8f4f 	dsb	sy
}
 8000fc2:	bf00      	nop
    __NOP();
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <__NVIC_SystemReset+0x20>
 8000fc8:	e000ed00 	.word	0xe000ed00
 8000fcc:	05fa0004 	.word	0x05fa0004

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <NMI_Handler+0x4>

08000fd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  NVIC_SystemReset();
 8000fdc:	f7ff ffe2 	bl	8000fa4 <__NVIC_SystemReset>

08000fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <MemManage_Handler+0x4>

08000fe8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <BusFault_Handler+0x4>

08000ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <UsageFault_Handler+0x4>

08000ff8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001026:	f000 fa71 	bl	800150c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}

0800102e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ButtonDown_Pin);
 8001040:	2008      	movs	r0, #8
 8001042:	f001 fbb1 	bl	80027a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001050:	4802      	ldr	r0, [pc, #8]	@ (800105c <CAN1_RX0_IRQHandler+0x10>)
 8001052:	f000 fec0 	bl	8001dd6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200000c4 	.word	0x200000c4

08001060 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ButtonUp_Pin);
 8001064:	2020      	movs	r0, #32
 8001066:	f001 fb9f 	bl	80027a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001074:	4802      	ldr	r0, [pc, #8]	@ (8001080 <TIM2_IRQHandler+0x10>)
 8001076:	f002 fdff 	bl	8003c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200000fc 	.word	0x200000fc

08001084 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001088:	4802      	ldr	r0, [pc, #8]	@ (8001094 <TIM7_IRQHandler+0x10>)
 800108a:	f002 fdf5 	bl	8003c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000148 	.word	0x20000148

08001098 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a0:	4a14      	ldr	r2, [pc, #80]	@ (80010f4 <_sbrk+0x5c>)
 80010a2:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <_sbrk+0x60>)
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010ac:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <_sbrk+0x64>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d102      	bne.n	80010ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b4:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <_sbrk+0x64>)
 80010b6:	4a12      	ldr	r2, [pc, #72]	@ (8001100 <_sbrk+0x68>)
 80010b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ba:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <_sbrk+0x64>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d207      	bcs.n	80010d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c8:	f003 fea4 	bl	8004e14 <__errno>
 80010cc:	4603      	mov	r3, r0
 80010ce:	220c      	movs	r2, #12
 80010d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
 80010d6:	e009      	b.n	80010ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d8:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <_sbrk+0x64>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010de:	4b07      	ldr	r3, [pc, #28]	@ (80010fc <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	4a05      	ldr	r2, [pc, #20]	@ (80010fc <_sbrk+0x64>)
 80010e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ea:	68fb      	ldr	r3, [r7, #12]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20010000 	.word	0x20010000
 80010f8:	00000400 	.word	0x00000400
 80010fc:	200000f8 	.word	0x200000f8
 8001100:	20000368 	.word	0x20000368

08001104 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <SystemInit+0x20>)
 800110a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800110e:	4a05      	ldr	r2, [pc, #20]	@ (8001124 <SystemInit+0x20>)
 8001110:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001114:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112e:	f107 0310 	add.w	r3, r7, #16
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001146:	4b1e      	ldr	r3, [pc, #120]	@ (80011c0 <MX_TIM2_Init+0x98>)
 8001148:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800114c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000 - 1;
 800114e:	4b1c      	ldr	r3, [pc, #112]	@ (80011c0 <MX_TIM2_Init+0x98>)
 8001150:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8001154:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001156:	4b1a      	ldr	r3, [pc, #104]	@ (80011c0 <MX_TIM2_Init+0x98>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800115c:	4b18      	ldr	r3, [pc, #96]	@ (80011c0 <MX_TIM2_Init+0x98>)
 800115e:	2264      	movs	r2, #100	@ 0x64
 8001160:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001162:	4b17      	ldr	r3, [pc, #92]	@ (80011c0 <MX_TIM2_Init+0x98>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001168:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <MX_TIM2_Init+0x98>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800116e:	4814      	ldr	r0, [pc, #80]	@ (80011c0 <MX_TIM2_Init+0x98>)
 8001170:	f002 fcd6 	bl	8003b20 <HAL_TIM_Base_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800117a:	f7ff fec9 	bl	8000f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800117e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001182:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	4619      	mov	r1, r3
 800118a:	480d      	ldr	r0, [pc, #52]	@ (80011c0 <MX_TIM2_Init+0x98>)
 800118c:	f002 fe7b 	bl	8003e86 <HAL_TIM_ConfigClockSource>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001196:	f7ff febb 	bl	8000f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	4619      	mov	r1, r3
 80011a6:	4806      	ldr	r0, [pc, #24]	@ (80011c0 <MX_TIM2_Init+0x98>)
 80011a8:	f003 f868 	bl	800427c <HAL_TIMEx_MasterConfigSynchronization>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80011b2:	f7ff fead 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	3720      	adds	r7, #32
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200000fc 	.word	0x200000fc

080011c4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80011d4:	4b15      	ldr	r3, [pc, #84]	@ (800122c <MX_TIM7_Init+0x68>)
 80011d6:	4a16      	ldr	r2, [pc, #88]	@ (8001230 <MX_TIM7_Init+0x6c>)
 80011d8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 32000-1;
 80011da:	4b14      	ldr	r3, [pc, #80]	@ (800122c <MX_TIM7_Init+0x68>)
 80011dc:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 80011e0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e2:	4b12      	ldr	r3, [pc, #72]	@ (800122c <MX_TIM7_Init+0x68>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200;
 80011e8:	4b10      	ldr	r3, [pc, #64]	@ (800122c <MX_TIM7_Init+0x68>)
 80011ea:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80011ee:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f0:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <MX_TIM7_Init+0x68>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80011f6:	480d      	ldr	r0, [pc, #52]	@ (800122c <MX_TIM7_Init+0x68>)
 80011f8:	f002 fc92 	bl	8003b20 <HAL_TIM_Base_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001202:	f7ff fe85 	bl	8000f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	4619      	mov	r1, r3
 8001212:	4806      	ldr	r0, [pc, #24]	@ (800122c <MX_TIM7_Init+0x68>)
 8001214:	f003 f832 	bl	800427c <HAL_TIMEx_MasterConfigSynchronization>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800121e:	f7ff fe77 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000148 	.word	0x20000148
 8001230:	40001400 	.word	0x40001400

08001234 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001244:	d114      	bne.n	8001270 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001246:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <HAL_TIM_Base_MspInit+0x78>)
 8001248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800124a:	4a18      	ldr	r2, [pc, #96]	@ (80012ac <HAL_TIM_Base_MspInit+0x78>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6593      	str	r3, [r2, #88]	@ 0x58
 8001252:	4b16      	ldr	r3, [pc, #88]	@ (80012ac <HAL_TIM_Base_MspInit+0x78>)
 8001254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2102      	movs	r1, #2
 8001262:	201c      	movs	r0, #28
 8001264:	f001 f8cd 	bl	8002402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001268:	201c      	movs	r0, #28
 800126a:	f001 f8e6 	bl	800243a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800126e:	e018      	b.n	80012a2 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0e      	ldr	r2, [pc, #56]	@ (80012b0 <HAL_TIM_Base_MspInit+0x7c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d113      	bne.n	80012a2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800127a:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <HAL_TIM_Base_MspInit+0x78>)
 800127c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127e:	4a0b      	ldr	r2, [pc, #44]	@ (80012ac <HAL_TIM_Base_MspInit+0x78>)
 8001280:	f043 0320 	orr.w	r3, r3, #32
 8001284:	6593      	str	r3, [r2, #88]	@ 0x58
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <HAL_TIM_Base_MspInit+0x78>)
 8001288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800128a:	f003 0320 	and.w	r3, r3, #32
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2102      	movs	r1, #2
 8001296:	2037      	movs	r0, #55	@ 0x37
 8001298:	f001 f8b3 	bl	8002402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800129c:	2037      	movs	r0, #55	@ 0x37
 800129e:	f001 f8cc 	bl	800243a <HAL_NVIC_EnableIRQ>
}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40001400 	.word	0x40001400

080012b4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012b8:	4b14      	ldr	r3, [pc, #80]	@ (800130c <MX_USART2_UART_Init+0x58>)
 80012ba:	4a15      	ldr	r2, [pc, #84]	@ (8001310 <MX_USART2_UART_Init+0x5c>)
 80012bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012be:	4b13      	ldr	r3, [pc, #76]	@ (800130c <MX_USART2_UART_Init+0x58>)
 80012c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012c6:	4b11      	ldr	r3, [pc, #68]	@ (800130c <MX_USART2_UART_Init+0x58>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <MX_USART2_UART_Init+0x58>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <MX_USART2_UART_Init+0x58>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <MX_USART2_UART_Init+0x58>)
 80012da:	220c      	movs	r2, #12
 80012dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012de:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <MX_USART2_UART_Init+0x58>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e4:	4b09      	ldr	r3, [pc, #36]	@ (800130c <MX_USART2_UART_Init+0x58>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ea:	4b08      	ldr	r3, [pc, #32]	@ (800130c <MX_USART2_UART_Init+0x58>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f0:	4b06      	ldr	r3, [pc, #24]	@ (800130c <MX_USART2_UART_Init+0x58>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	@ (800130c <MX_USART2_UART_Init+0x58>)
 80012f8:	f003 f844 	bl	8004384 <HAL_UART_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001302:	f7ff fe05 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000194 	.word	0x20000194
 8001310:	40004400 	.word	0x40004400

08001314 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b09e      	sub	sp, #120	@ 0x78
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	2254      	movs	r2, #84	@ 0x54
 8001332:	2100      	movs	r1, #0
 8001334:	4618      	mov	r0, r3
 8001336:	f003 fd65 	bl	8004e04 <memset>
  if(uartHandle->Instance==USART2)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a28      	ldr	r2, [pc, #160]	@ (80013e0 <HAL_UART_MspInit+0xcc>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d148      	bne.n	80013d6 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001344:	2302      	movs	r3, #2
 8001346:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001348:	2300      	movs	r3, #0
 800134a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	4618      	mov	r0, r3
 8001352:	f002 f8ed 	bl	8003530 <HAL_RCCEx_PeriphCLKConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800135c:	f7ff fdd8 	bl	8000f10 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001360:	4b20      	ldr	r3, [pc, #128]	@ (80013e4 <HAL_UART_MspInit+0xd0>)
 8001362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001364:	4a1f      	ldr	r2, [pc, #124]	@ (80013e4 <HAL_UART_MspInit+0xd0>)
 8001366:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800136a:	6593      	str	r3, [r2, #88]	@ 0x58
 800136c:	4b1d      	ldr	r3, [pc, #116]	@ (80013e4 <HAL_UART_MspInit+0xd0>)
 800136e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001378:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <HAL_UART_MspInit+0xd0>)
 800137a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137c:	4a19      	ldr	r2, [pc, #100]	@ (80013e4 <HAL_UART_MspInit+0xd0>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001384:	4b17      	ldr	r3, [pc, #92]	@ (80013e4 <HAL_UART_MspInit+0xd0>)
 8001386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001390:	2304      	movs	r3, #4
 8001392:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013a0:	2307      	movs	r3, #7
 80013a2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80013a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013a8:	4619      	mov	r1, r3
 80013aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ae:	f001 f85f 	bl	8002470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80013b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013b6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c0:	2303      	movs	r3, #3
 80013c2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80013c4:	2303      	movs	r3, #3
 80013c6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013cc:	4619      	mov	r1, r3
 80013ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013d2:	f001 f84d 	bl	8002470 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013d6:	bf00      	nop
 80013d8:	3778      	adds	r7, #120	@ 0x78
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40004400 	.word	0x40004400
 80013e4:	40021000 	.word	0x40021000

080013e8 <UART_Send>:
  }
}

/* USER CODE BEGIN 1 */
void UART_Send(char* buf, uint8_t len)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(&huart2, (uint8_t *)buf, len, 100);
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	2364      	movs	r3, #100	@ 0x64
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	4803      	ldr	r0, [pc, #12]	@ (800140c <UART_Send+0x24>)
 80013fe:	f003 f80f 	bl	8004420 <HAL_UART_Transmit>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000194 	.word	0x20000194

08001410 <Reset_Handler>:
 8001410:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001448 <LoopForever+0x2>
 8001414:	f7ff fe76 	bl	8001104 <SystemInit>
 8001418:	480c      	ldr	r0, [pc, #48]	@ (800144c <LoopForever+0x6>)
 800141a:	490d      	ldr	r1, [pc, #52]	@ (8001450 <LoopForever+0xa>)
 800141c:	4a0d      	ldr	r2, [pc, #52]	@ (8001454 <LoopForever+0xe>)
 800141e:	2300      	movs	r3, #0
 8001420:	e002      	b.n	8001428 <LoopCopyDataInit>

08001422 <CopyDataInit>:
 8001422:	58d4      	ldr	r4, [r2, r3]
 8001424:	50c4      	str	r4, [r0, r3]
 8001426:	3304      	adds	r3, #4

08001428 <LoopCopyDataInit>:
 8001428:	18c4      	adds	r4, r0, r3
 800142a:	428c      	cmp	r4, r1
 800142c:	d3f9      	bcc.n	8001422 <CopyDataInit>
 800142e:	4a0a      	ldr	r2, [pc, #40]	@ (8001458 <LoopForever+0x12>)
 8001430:	4c0a      	ldr	r4, [pc, #40]	@ (800145c <LoopForever+0x16>)
 8001432:	2300      	movs	r3, #0
 8001434:	e001      	b.n	800143a <LoopFillZerobss>

08001436 <FillZerobss>:
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	3204      	adds	r2, #4

0800143a <LoopFillZerobss>:
 800143a:	42a2      	cmp	r2, r4
 800143c:	d3fb      	bcc.n	8001436 <FillZerobss>
 800143e:	f003 fcef 	bl	8004e20 <__libc_init_array>
 8001442:	f7ff fbbd 	bl	8000bc0 <main>

08001446 <LoopForever>:
 8001446:	e7fe      	b.n	8001446 <LoopForever>
 8001448:	20010000 	.word	0x20010000
 800144c:	20000000 	.word	0x20000000
 8001450:	20000060 	.word	0x20000060
 8001454:	08005ae0 	.word	0x08005ae0
 8001458:	20000060 	.word	0x20000060
 800145c:	20000368 	.word	0x20000368

08001460 <ADC1_IRQHandler>:
 8001460:	e7fe      	b.n	8001460 <ADC1_IRQHandler>

08001462 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001468:	2300      	movs	r3, #0
 800146a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146c:	2003      	movs	r0, #3
 800146e:	f000 ffbd 	bl	80023ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001472:	2000      	movs	r0, #0
 8001474:	f000 f80e 	bl	8001494 <HAL_InitTick>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d002      	beq.n	8001484 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	71fb      	strb	r3, [r7, #7]
 8001482:	e001      	b.n	8001488 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001484:	f7ff fd64 	bl	8000f50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001488:	79fb      	ldrb	r3, [r7, #7]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014a0:	4b17      	ldr	r3, [pc, #92]	@ (8001500 <HAL_InitTick+0x6c>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d023      	beq.n	80014f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014a8:	4b16      	ldr	r3, [pc, #88]	@ (8001504 <HAL_InitTick+0x70>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <HAL_InitTick+0x6c>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	4619      	mov	r1, r3
 80014b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 ffc9 	bl	8002456 <HAL_SYSTICK_Config>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10f      	bne.n	80014ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b0f      	cmp	r3, #15
 80014ce:	d809      	bhi.n	80014e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d0:	2200      	movs	r2, #0
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295
 80014d8:	f000 ff93 	bl	8002402 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001508 <HAL_InitTick+0x74>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e007      	b.n	80014f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	73fb      	strb	r3, [r7, #15]
 80014e8:	e004      	b.n	80014f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	73fb      	strb	r3, [r7, #15]
 80014ee:	e001      	b.n	80014f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	2000000c 	.word	0x2000000c
 8001504:	20000004 	.word	0x20000004
 8001508:	20000008 	.word	0x20000008

0800150c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001510:	4b06      	ldr	r3, [pc, #24]	@ (800152c <HAL_IncTick+0x20>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <HAL_IncTick+0x24>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4413      	add	r3, r2
 800151c:	4a04      	ldr	r2, [pc, #16]	@ (8001530 <HAL_IncTick+0x24>)
 800151e:	6013      	str	r3, [r2, #0]
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	2000000c 	.word	0x2000000c
 8001530:	2000021c 	.word	0x2000021c

08001534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return uwTick;
 8001538:	4b03      	ldr	r3, [pc, #12]	@ (8001548 <HAL_GetTick+0x14>)
 800153a:	681b      	ldr	r3, [r3, #0]
}
 800153c:	4618      	mov	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	2000021c 	.word	0x2000021c

0800154c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001554:	f7ff ffee 	bl	8001534 <HAL_GetTick>
 8001558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001564:	d005      	beq.n	8001572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001566:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <HAL_Delay+0x44>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001572:	bf00      	nop
 8001574:	f7ff ffde 	bl	8001534 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	429a      	cmp	r2, r3
 8001582:	d8f7      	bhi.n	8001574 <HAL_Delay+0x28>
  {
  }
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	2000000c 	.word	0x2000000c

08001594 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e0ed      	b.n	8001782 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff f842 	bl	800063c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0201 	orr.w	r2, r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015c8:	f7ff ffb4 	bl	8001534 <HAL_GetTick>
 80015cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015ce:	e012      	b.n	80015f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015d0:	f7ff ffb0 	bl	8001534 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b0a      	cmp	r3, #10
 80015dc:	d90b      	bls.n	80015f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2205      	movs	r2, #5
 80015ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e0c5      	b.n	8001782 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0e5      	beq.n	80015d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 0202 	bic.w	r2, r2, #2
 8001612:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001614:	f7ff ff8e 	bl	8001534 <HAL_GetTick>
 8001618:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800161a:	e012      	b.n	8001642 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800161c:	f7ff ff8a 	bl	8001534 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b0a      	cmp	r3, #10
 8001628:	d90b      	bls.n	8001642 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2205      	movs	r2, #5
 800163a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e09f      	b.n	8001782 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1e5      	bne.n	800161c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	7e1b      	ldrb	r3, [r3, #24]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d108      	bne.n	800166a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	e007      	b.n	800167a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001678:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7e5b      	ldrb	r3, [r3, #25]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d108      	bne.n	8001694 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	e007      	b.n	80016a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80016a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	7e9b      	ldrb	r3, [r3, #26]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d108      	bne.n	80016be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 0220 	orr.w	r2, r2, #32
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	e007      	b.n	80016ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0220 	bic.w	r2, r2, #32
 80016cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	7edb      	ldrb	r3, [r3, #27]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d108      	bne.n	80016e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 0210 	bic.w	r2, r2, #16
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	e007      	b.n	80016f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 0210 	orr.w	r2, r2, #16
 80016f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7f1b      	ldrb	r3, [r3, #28]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d108      	bne.n	8001712 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0208 	orr.w	r2, r2, #8
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e007      	b.n	8001722 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0208 	bic.w	r2, r2, #8
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	7f5b      	ldrb	r3, [r3, #29]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d108      	bne.n	800173c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f042 0204 	orr.w	r2, r2, #4
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	e007      	b.n	800174c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0204 	bic.w	r2, r2, #4
 800174a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	431a      	orrs	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	ea42 0103 	orr.w	r1, r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	1e5a      	subs	r2, r3, #1
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800178a:	b480      	push	{r7}
 800178c:	b087      	sub	sp, #28
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017a0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80017a2:	7cfb      	ldrb	r3, [r7, #19]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d003      	beq.n	80017b0 <HAL_CAN_ConfigFilter+0x26>
 80017a8:	7cfb      	ldrb	r3, [r7, #19]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	f040 80aa 	bne.w	8001904 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017b6:	f043 0201 	orr.w	r2, r3, #1
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	f003 031f 	and.w	r3, r3, #31
 80017c8:	2201      	movs	r2, #1
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	43db      	mvns	r3, r3
 80017da:	401a      	ands	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d123      	bne.n	8001832 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	43db      	mvns	r3, r3
 80017f4:	401a      	ands	r2, r3
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800180c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3248      	adds	r2, #72	@ 0x48
 8001812:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001826:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001828:	6979      	ldr	r1, [r7, #20]
 800182a:	3348      	adds	r3, #72	@ 0x48
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	440b      	add	r3, r1
 8001830:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d122      	bne.n	8001880 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	431a      	orrs	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800185a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3248      	adds	r2, #72	@ 0x48
 8001860:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001874:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001876:	6979      	ldr	r1, [r7, #20]
 8001878:	3348      	adds	r3, #72	@ 0x48
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	440b      	add	r3, r1
 800187e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d109      	bne.n	800189c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	43db      	mvns	r3, r3
 8001892:	401a      	ands	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800189a:	e007      	b.n	80018ac <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	431a      	orrs	r2, r3
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d109      	bne.n	80018c8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	43db      	mvns	r3, r3
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80018c6:	e007      	b.n	80018d8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	431a      	orrs	r2, r3
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d107      	bne.n	80018f0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	431a      	orrs	r2, r3
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80018f6:	f023 0201 	bic.w	r2, r3, #1
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	e006      	b.n	8001912 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001908:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
  }
}
 8001912:	4618      	mov	r0, r3
 8001914:	371c      	adds	r7, #28
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b084      	sub	sp, #16
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 3020 	ldrb.w	r3, [r3, #32]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b01      	cmp	r3, #1
 8001930:	d12e      	bne.n	8001990 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2202      	movs	r2, #2
 8001936:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 0201 	bic.w	r2, r2, #1
 8001948:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800194a:	f7ff fdf3 	bl	8001534 <HAL_GetTick>
 800194e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001950:	e012      	b.n	8001978 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001952:	f7ff fdef 	bl	8001534 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b0a      	cmp	r3, #10
 800195e:	d90b      	bls.n	8001978 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001964:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2205      	movs	r2, #5
 8001970:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e012      	b.n	800199e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1e5      	bne.n	8001952 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	e006      	b.n	800199e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001994:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
  }
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b089      	sub	sp, #36	@ 0x24
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	60f8      	str	r0, [r7, #12]
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	607a      	str	r2, [r7, #4]
 80019b2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80019c4:	7ffb      	ldrb	r3, [r7, #31]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d003      	beq.n	80019d2 <HAL_CAN_AddTxMessage+0x2c>
 80019ca:	7ffb      	ldrb	r3, [r7, #31]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	f040 80ad 	bne.w	8001b2c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d10a      	bne.n	80019f2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d105      	bne.n	80019f2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 8095 	beq.w	8001b1c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	0e1b      	lsrs	r3, r3, #24
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80019fc:	2201      	movs	r2, #1
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	409a      	lsls	r2, r3
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10d      	bne.n	8001a2a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a18:	68f9      	ldr	r1, [r7, #12]
 8001a1a:	6809      	ldr	r1, [r1, #0]
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	3318      	adds	r3, #24
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	440b      	add	r3, r1
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	e00f      	b.n	8001a4a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a34:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a3a:	68f9      	ldr	r1, [r7, #12]
 8001a3c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a3e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	3318      	adds	r3, #24
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	440b      	add	r3, r1
 8001a48:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6819      	ldr	r1, [r3, #0]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	691a      	ldr	r2, [r3, #16]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	3318      	adds	r3, #24
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	440b      	add	r3, r1
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	7d1b      	ldrb	r3, [r3, #20]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d111      	bne.n	8001a8a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	3318      	adds	r3, #24
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	4413      	add	r3, r2
 8001a72:	3304      	adds	r3, #4
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	6811      	ldr	r1, [r2, #0]
 8001a7a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	3318      	adds	r3, #24
 8001a82:	011b      	lsls	r3, r3, #4
 8001a84:	440b      	add	r3, r1
 8001a86:	3304      	adds	r3, #4
 8001a88:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3307      	adds	r3, #7
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	061a      	lsls	r2, r3, #24
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3306      	adds	r3, #6
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	041b      	lsls	r3, r3, #16
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3305      	adds	r3, #5
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	021b      	lsls	r3, r3, #8
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	3204      	adds	r2, #4
 8001aaa:	7812      	ldrb	r2, [r2, #0]
 8001aac:	4610      	mov	r0, r2
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	6811      	ldr	r1, [r2, #0]
 8001ab2:	ea43 0200 	orr.w	r2, r3, r0
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	440b      	add	r3, r1
 8001abc:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001ac0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3303      	adds	r3, #3
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	061a      	lsls	r2, r3, #24
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3302      	adds	r3, #2
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	041b      	lsls	r3, r3, #16
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	021b      	lsls	r3, r3, #8
 8001adc:	4313      	orrs	r3, r2
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	7812      	ldrb	r2, [r2, #0]
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	6811      	ldr	r1, [r2, #0]
 8001ae8:	ea43 0200 	orr.w	r2, r3, r0
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	011b      	lsls	r3, r3, #4
 8001af0:	440b      	add	r3, r1
 8001af2:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001af6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	3318      	adds	r3, #24
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	4413      	add	r3, r2
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	6811      	ldr	r1, [r2, #0]
 8001b0a:	f043 0201 	orr.w	r2, r3, #1
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	3318      	adds	r3, #24
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	440b      	add	r3, r1
 8001b16:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	e00e      	b.n	8001b3a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b20:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e006      	b.n	8001b3a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b30:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
  }
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3724      	adds	r7, #36	@ 0x24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001b46:	b480      	push	{r7}
 8001b48:	b087      	sub	sp, #28
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b5a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b5c:	7dfb      	ldrb	r3, [r7, #23]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d003      	beq.n	8001b6a <HAL_CAN_GetRxMessage+0x24>
 8001b62:	7dfb      	ldrb	r3, [r7, #23]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	f040 8103 	bne.w	8001d70 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10e      	bne.n	8001b8e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d116      	bne.n	8001bac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b82:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e0f7      	b.n	8001d7e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d107      	bne.n	8001bac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0e8      	b.n	8001d7e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	331b      	adds	r3, #27
 8001bb4:	011b      	lsls	r3, r3, #4
 8001bb6:	4413      	add	r3, r2
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0204 	and.w	r2, r3, #4
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10c      	bne.n	8001be4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	331b      	adds	r3, #27
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	4413      	add	r3, r2
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	0d5b      	lsrs	r3, r3, #21
 8001bda:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	e00b      	b.n	8001bfc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	331b      	adds	r3, #27
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	4413      	add	r3, r2
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	08db      	lsrs	r3, r3, #3
 8001bf4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	331b      	adds	r3, #27
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	4413      	add	r3, r2
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0202 	and.w	r2, r3, #2
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	331b      	adds	r3, #27
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3304      	adds	r3, #4
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2208      	movs	r2, #8
 8001c2e:	611a      	str	r2, [r3, #16]
 8001c30:	e00b      	b.n	8001c4a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	331b      	adds	r3, #27
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3304      	adds	r3, #4
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 020f 	and.w	r2, r3, #15
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	331b      	adds	r3, #27
 8001c52:	011b      	lsls	r3, r3, #4
 8001c54:	4413      	add	r3, r2
 8001c56:	3304      	adds	r3, #4
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	0a1b      	lsrs	r3, r3, #8
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	331b      	adds	r3, #27
 8001c6a:	011b      	lsls	r3, r3, #4
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3304      	adds	r3, #4
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	0c1b      	lsrs	r3, r3, #16
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	011b      	lsls	r3, r3, #4
 8001c82:	4413      	add	r3, r2
 8001c84:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	4413      	add	r3, r2
 8001c9a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	0a1a      	lsrs	r2, r3, #8
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	011b      	lsls	r3, r3, #4
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	0c1a      	lsrs	r2, r3, #16
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	0e1a      	lsrs	r2, r3, #24
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	3303      	adds	r3, #3
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	4413      	add	r3, r2
 8001d00:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	0a1a      	lsrs	r2, r3, #8
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	3305      	adds	r3, #5
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	4413      	add	r3, r2
 8001d1a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	0c1a      	lsrs	r2, r3, #16
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	3306      	adds	r3, #6
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	4413      	add	r3, r2
 8001d34:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	0e1a      	lsrs	r2, r3, #24
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	3307      	adds	r3, #7
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d108      	bne.n	8001d5c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 0220 	orr.w	r2, r2, #32
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	e007      	b.n	8001d6c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691a      	ldr	r2, [r3, #16]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0220 	orr.w	r2, r2, #32
 8001d6a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	e006      	b.n	8001d7e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d74:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
  }
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	371c      	adds	r7, #28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b085      	sub	sp, #20
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d9a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d002      	beq.n	8001da8 <HAL_CAN_ActivateNotification+0x1e>
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d109      	bne.n	8001dbc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6959      	ldr	r1, [r3, #20]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	e006      	b.n	8001dca <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
  }
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b08a      	sub	sp, #40	@ 0x28
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d07c      	beq.n	8001f16 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d023      	beq.n	8001e6e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f983 	bl	8002144 <HAL_CAN_TxMailbox0CompleteCallback>
 8001e3e:	e016      	b.n	8001e6e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d004      	beq.n	8001e54 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e50:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e52:	e00c      	b.n	8001e6e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d004      	beq.n	8001e68 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e66:	e002      	b.n	8001e6e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f989 	bl	8002180 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d024      	beq.n	8001ec2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e80:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f963 	bl	8002158 <HAL_CAN_TxMailbox1CompleteCallback>
 8001e92:	e016      	b.n	8001ec2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d004      	beq.n	8001ea8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ea6:	e00c      	b.n	8001ec2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d004      	beq.n	8001ebc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eba:	e002      	b.n	8001ec2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f969 	bl	8002194 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d024      	beq.n	8001f16 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ed4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f943 	bl	800216c <HAL_CAN_TxMailbox2CompleteCallback>
 8001ee6:	e016      	b.n	8001f16 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d004      	beq.n	8001efc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001efa:	e00c      	b.n	8001f16 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d004      	beq.n	8001f10 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f0e:	e002      	b.n	8001f16 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f949 	bl	80021a8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00c      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d007      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f30:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2210      	movs	r2, #16
 8001f38:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00b      	beq.n	8001f5c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d006      	beq.n	8001f5c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2208      	movs	r2, #8
 8001f54:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f930 	bl	80021bc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d009      	beq.n	8001f7a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d002      	beq.n	8001f7a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7fe fbff 	bl	8000778 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00c      	beq.n	8001f9e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	f003 0310 	and.w	r3, r3, #16
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d007      	beq.n	8001f9e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f94:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2210      	movs	r2, #16
 8001f9c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	f003 0320 	and.w	r3, r3, #32
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00b      	beq.n	8001fc0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d006      	beq.n	8001fc0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2208      	movs	r2, #8
 8001fb8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f912 	bl	80021e4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	f003 0310 	and.w	r3, r3, #16
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d009      	beq.n	8001fde <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d002      	beq.n	8001fde <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f8f9 	bl	80021d0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001fde:	6a3b      	ldr	r3, [r7, #32]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00b      	beq.n	8002000 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d006      	beq.n	8002000 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2210      	movs	r2, #16
 8001ff8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f8fc 	bl	80021f8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002000:	6a3b      	ldr	r3, [r7, #32]
 8002002:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00b      	beq.n	8002022 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	2b00      	cmp	r3, #0
 8002012:	d006      	beq.n	8002022 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2208      	movs	r2, #8
 800201a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f8f5 	bl	800220c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d07b      	beq.n	8002124 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	2b00      	cmp	r3, #0
 8002034:	d072      	beq.n	800211c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203c:	2b00      	cmp	r3, #0
 800203e:	d008      	beq.n	8002052 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800204a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002058:	2b00      	cmp	r3, #0
 800205a:	d008      	beq.n	800206e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002074:	2b00      	cmp	r3, #0
 8002076:	d008      	beq.n	800208a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002084:	f043 0304 	orr.w	r3, r3, #4
 8002088:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002090:	2b00      	cmp	r3, #0
 8002092:	d043      	beq.n	800211c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800209a:	2b00      	cmp	r3, #0
 800209c:	d03e      	beq.n	800211c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020a4:	2b60      	cmp	r3, #96	@ 0x60
 80020a6:	d02b      	beq.n	8002100 <HAL_CAN_IRQHandler+0x32a>
 80020a8:	2b60      	cmp	r3, #96	@ 0x60
 80020aa:	d82e      	bhi.n	800210a <HAL_CAN_IRQHandler+0x334>
 80020ac:	2b50      	cmp	r3, #80	@ 0x50
 80020ae:	d022      	beq.n	80020f6 <HAL_CAN_IRQHandler+0x320>
 80020b0:	2b50      	cmp	r3, #80	@ 0x50
 80020b2:	d82a      	bhi.n	800210a <HAL_CAN_IRQHandler+0x334>
 80020b4:	2b40      	cmp	r3, #64	@ 0x40
 80020b6:	d019      	beq.n	80020ec <HAL_CAN_IRQHandler+0x316>
 80020b8:	2b40      	cmp	r3, #64	@ 0x40
 80020ba:	d826      	bhi.n	800210a <HAL_CAN_IRQHandler+0x334>
 80020bc:	2b30      	cmp	r3, #48	@ 0x30
 80020be:	d010      	beq.n	80020e2 <HAL_CAN_IRQHandler+0x30c>
 80020c0:	2b30      	cmp	r3, #48	@ 0x30
 80020c2:	d822      	bhi.n	800210a <HAL_CAN_IRQHandler+0x334>
 80020c4:	2b10      	cmp	r3, #16
 80020c6:	d002      	beq.n	80020ce <HAL_CAN_IRQHandler+0x2f8>
 80020c8:	2b20      	cmp	r3, #32
 80020ca:	d005      	beq.n	80020d8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80020cc:	e01d      	b.n	800210a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80020ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d0:	f043 0308 	orr.w	r3, r3, #8
 80020d4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020d6:	e019      	b.n	800210c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80020d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020da:	f043 0310 	orr.w	r3, r3, #16
 80020de:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020e0:	e014      	b.n	800210c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80020e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e4:	f043 0320 	orr.w	r3, r3, #32
 80020e8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020ea:	e00f      	b.n	800210c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80020ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020f2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020f4:	e00a      	b.n	800210c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80020f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020fc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020fe:	e005      	b.n	800210c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002102:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002106:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002108:	e000      	b.n	800210c <HAL_CAN_IRQHandler+0x336>
            break;
 800210a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	699a      	ldr	r2, [r3, #24]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800211a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2204      	movs	r2, #4
 8002122:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002126:	2b00      	cmp	r3, #0
 8002128:	d008      	beq.n	800213c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f872 	bl	8002220 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800213c:	bf00      	nop
 800213e:	3728      	adds	r7, #40	@ 0x28
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <__NVIC_SetPriorityGrouping>:
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800225c:	4b0c      	ldr	r3, [pc, #48]	@ (8002290 <__NVIC_SetPriorityGrouping+0x44>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002268:	4013      	ands	r3, r2
 800226a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002274:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800227c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800227e:	4a04      	ldr	r2, [pc, #16]	@ (8002290 <__NVIC_SetPriorityGrouping+0x44>)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	60d3      	str	r3, [r2, #12]
}
 8002284:	bf00      	nop
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <__NVIC_GetPriorityGrouping>:
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002298:	4b04      	ldr	r3, [pc, #16]	@ (80022ac <__NVIC_GetPriorityGrouping+0x18>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	0a1b      	lsrs	r3, r3, #8
 800229e:	f003 0307 	and.w	r3, r3, #7
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <__NVIC_EnableIRQ>:
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	db0b      	blt.n	80022da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	f003 021f 	and.w	r2, r3, #31
 80022c8:	4907      	ldr	r1, [pc, #28]	@ (80022e8 <__NVIC_EnableIRQ+0x38>)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	2001      	movs	r0, #1
 80022d2:	fa00 f202 	lsl.w	r2, r0, r2
 80022d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	e000e100 	.word	0xe000e100

080022ec <__NVIC_SetPriority>:
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	6039      	str	r1, [r7, #0]
 80022f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	db0a      	blt.n	8002316 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	b2da      	uxtb	r2, r3
 8002304:	490c      	ldr	r1, [pc, #48]	@ (8002338 <__NVIC_SetPriority+0x4c>)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	0112      	lsls	r2, r2, #4
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	440b      	add	r3, r1
 8002310:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002314:	e00a      	b.n	800232c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	b2da      	uxtb	r2, r3
 800231a:	4908      	ldr	r1, [pc, #32]	@ (800233c <__NVIC_SetPriority+0x50>)
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	3b04      	subs	r3, #4
 8002324:	0112      	lsls	r2, r2, #4
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	440b      	add	r3, r1
 800232a:	761a      	strb	r2, [r3, #24]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000e100 	.word	0xe000e100
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <NVIC_EncodePriority>:
{
 8002340:	b480      	push	{r7}
 8002342:	b089      	sub	sp, #36	@ 0x24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f1c3 0307 	rsb	r3, r3, #7
 800235a:	2b04      	cmp	r3, #4
 800235c:	bf28      	it	cs
 800235e:	2304      	movcs	r3, #4
 8002360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3304      	adds	r3, #4
 8002366:	2b06      	cmp	r3, #6
 8002368:	d902      	bls.n	8002370 <NVIC_EncodePriority+0x30>
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3b03      	subs	r3, #3
 800236e:	e000      	b.n	8002372 <NVIC_EncodePriority+0x32>
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002374:	f04f 32ff 	mov.w	r2, #4294967295
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43da      	mvns	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	401a      	ands	r2, r3
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002388:	f04f 31ff 	mov.w	r1, #4294967295
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	fa01 f303 	lsl.w	r3, r1, r3
 8002392:	43d9      	mvns	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002398:	4313      	orrs	r3, r2
}
 800239a:	4618      	mov	r0, r3
 800239c:	3724      	adds	r7, #36	@ 0x24
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <SysTick_Config>:
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023b8:	d301      	bcc.n	80023be <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80023ba:	2301      	movs	r3, #1
 80023bc:	e00f      	b.n	80023de <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023be:	4a0a      	ldr	r2, [pc, #40]	@ (80023e8 <SysTick_Config+0x40>)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023c6:	210f      	movs	r1, #15
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295
 80023cc:	f7ff ff8e 	bl	80022ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d0:	4b05      	ldr	r3, [pc, #20]	@ (80023e8 <SysTick_Config+0x40>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023d6:	4b04      	ldr	r3, [pc, #16]	@ (80023e8 <SysTick_Config+0x40>)
 80023d8:	2207      	movs	r2, #7
 80023da:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	e000e010 	.word	0xe000e010

080023ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ff29 	bl	800224c <__NVIC_SetPriorityGrouping>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	4603      	mov	r3, r0
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002414:	f7ff ff3e 	bl	8002294 <__NVIC_GetPriorityGrouping>
 8002418:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	6978      	ldr	r0, [r7, #20]
 8002420:	f7ff ff8e 	bl	8002340 <NVIC_EncodePriority>
 8002424:	4602      	mov	r2, r0
 8002426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff5d 	bl	80022ec <__NVIC_SetPriority>
}
 8002432:	bf00      	nop
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff31 	bl	80022b0 <__NVIC_EnableIRQ>
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff ffa2 	bl	80023a8 <SysTick_Config>
 8002464:	4603      	mov	r3, r0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800247a:	2300      	movs	r3, #0
 800247c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800247e:	e148      	b.n	8002712 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	2101      	movs	r1, #1
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	fa01 f303 	lsl.w	r3, r1, r3
 800248c:	4013      	ands	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 813a 	beq.w	800270c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d005      	beq.n	80024b0 <HAL_GPIO_Init+0x40>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d130      	bne.n	8002512 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	2203      	movs	r2, #3
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024e6:	2201      	movs	r2, #1
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4013      	ands	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	091b      	lsrs	r3, r3, #4
 80024fc:	f003 0201 	and.w	r2, r3, #1
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b03      	cmp	r3, #3
 800251c:	d017      	beq.n	800254e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	2203      	movs	r2, #3
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4013      	ands	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d123      	bne.n	80025a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	08da      	lsrs	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3208      	adds	r2, #8
 8002562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002566:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	220f      	movs	r2, #15
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4013      	ands	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	691a      	ldr	r2, [r3, #16]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	08da      	lsrs	r2, r3, #3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3208      	adds	r2, #8
 800259c:	6939      	ldr	r1, [r7, #16]
 800259e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	2203      	movs	r2, #3
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4013      	ands	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 0203 	and.w	r2, r3, #3
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 8094 	beq.w	800270c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e4:	4b52      	ldr	r3, [pc, #328]	@ (8002730 <HAL_GPIO_Init+0x2c0>)
 80025e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025e8:	4a51      	ldr	r2, [pc, #324]	@ (8002730 <HAL_GPIO_Init+0x2c0>)
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80025f0:	4b4f      	ldr	r3, [pc, #316]	@ (8002730 <HAL_GPIO_Init+0x2c0>)
 80025f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002734 <HAL_GPIO_Init+0x2c4>)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	089b      	lsrs	r3, r3, #2
 8002602:	3302      	adds	r3, #2
 8002604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002608:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	220f      	movs	r2, #15
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4013      	ands	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002626:	d00d      	beq.n	8002644 <HAL_GPIO_Init+0x1d4>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a43      	ldr	r2, [pc, #268]	@ (8002738 <HAL_GPIO_Init+0x2c8>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d007      	beq.n	8002640 <HAL_GPIO_Init+0x1d0>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a42      	ldr	r2, [pc, #264]	@ (800273c <HAL_GPIO_Init+0x2cc>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d101      	bne.n	800263c <HAL_GPIO_Init+0x1cc>
 8002638:	2302      	movs	r3, #2
 800263a:	e004      	b.n	8002646 <HAL_GPIO_Init+0x1d6>
 800263c:	2307      	movs	r3, #7
 800263e:	e002      	b.n	8002646 <HAL_GPIO_Init+0x1d6>
 8002640:	2301      	movs	r3, #1
 8002642:	e000      	b.n	8002646 <HAL_GPIO_Init+0x1d6>
 8002644:	2300      	movs	r3, #0
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	f002 0203 	and.w	r2, r2, #3
 800264c:	0092      	lsls	r2, r2, #2
 800264e:	4093      	lsls	r3, r2
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002656:	4937      	ldr	r1, [pc, #220]	@ (8002734 <HAL_GPIO_Init+0x2c4>)
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	089b      	lsrs	r3, r3, #2
 800265c:	3302      	adds	r3, #2
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002664:	4b36      	ldr	r3, [pc, #216]	@ (8002740 <HAL_GPIO_Init+0x2d0>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	43db      	mvns	r3, r3
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002688:	4a2d      	ldr	r2, [pc, #180]	@ (8002740 <HAL_GPIO_Init+0x2d0>)
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800268e:	4b2c      	ldr	r3, [pc, #176]	@ (8002740 <HAL_GPIO_Init+0x2d0>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	43db      	mvns	r3, r3
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4013      	ands	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026b2:	4a23      	ldr	r2, [pc, #140]	@ (8002740 <HAL_GPIO_Init+0x2d0>)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026b8:	4b21      	ldr	r3, [pc, #132]	@ (8002740 <HAL_GPIO_Init+0x2d0>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4013      	ands	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026dc:	4a18      	ldr	r2, [pc, #96]	@ (8002740 <HAL_GPIO_Init+0x2d0>)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80026e2:	4b17      	ldr	r3, [pc, #92]	@ (8002740 <HAL_GPIO_Init+0x2d0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4013      	ands	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002706:	4a0e      	ldr	r2, [pc, #56]	@ (8002740 <HAL_GPIO_Init+0x2d0>)
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	3301      	adds	r3, #1
 8002710:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	fa22 f303 	lsr.w	r3, r2, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	f47f aeaf 	bne.w	8002480 <HAL_GPIO_Init+0x10>
  }
}
 8002722:	bf00      	nop
 8002724:	bf00      	nop
 8002726:	371c      	adds	r7, #28
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	40021000 	.word	0x40021000
 8002734:	40010000 	.word	0x40010000
 8002738:	48000400 	.word	0x48000400
 800273c:	48000800 	.word	0x48000800
 8002740:	40010400 	.word	0x40010400

08002744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	807b      	strh	r3, [r7, #2]
 8002750:	4613      	mov	r3, r2
 8002752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002754:	787b      	ldrb	r3, [r7, #1]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800275a:	887a      	ldrh	r2, [r7, #2]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002760:	e002      	b.n	8002768 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002762:	887a      	ldrh	r2, [r7, #2]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002786:	887a      	ldrh	r2, [r7, #2]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4013      	ands	r3, r2
 800278c:	041a      	lsls	r2, r3, #16
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	43d9      	mvns	r1, r3
 8002792:	887b      	ldrh	r3, [r7, #2]
 8002794:	400b      	ands	r3, r1
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	619a      	str	r2, [r3, #24]
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027b2:	4b08      	ldr	r3, [pc, #32]	@ (80027d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027b4:	695a      	ldr	r2, [r3, #20]
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d006      	beq.n	80027cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027be:	4a05      	ldr	r2, [pc, #20]	@ (80027d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027c4:	88fb      	ldrh	r3, [r7, #6]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fe fb58 	bl	8000e7c <HAL_GPIO_EXTI_Callback>
  }
}
 80027cc:	bf00      	nop
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40010400 	.word	0x40010400

080027d8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027dc:	4b05      	ldr	r3, [pc, #20]	@ (80027f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a04      	ldr	r2, [pc, #16]	@ (80027f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027e6:	6013      	str	r3, [r2, #0]
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40007000 	.word	0x40007000

080027f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027fc:	4b04      	ldr	r3, [pc, #16]	@ (8002810 <HAL_PWREx_GetVoltageRange+0x18>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40007000 	.word	0x40007000

08002814 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002822:	d130      	bne.n	8002886 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002824:	4b23      	ldr	r3, [pc, #140]	@ (80028b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800282c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002830:	d038      	beq.n	80028a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002832:	4b20      	ldr	r3, [pc, #128]	@ (80028b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800283a:	4a1e      	ldr	r2, [pc, #120]	@ (80028b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800283c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002840:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002842:	4b1d      	ldr	r3, [pc, #116]	@ (80028b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2232      	movs	r2, #50	@ 0x32
 8002848:	fb02 f303 	mul.w	r3, r2, r3
 800284c:	4a1b      	ldr	r2, [pc, #108]	@ (80028bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	0c9b      	lsrs	r3, r3, #18
 8002854:	3301      	adds	r3, #1
 8002856:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002858:	e002      	b.n	8002860 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	3b01      	subs	r3, #1
 800285e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002860:	4b14      	ldr	r3, [pc, #80]	@ (80028b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002868:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800286c:	d102      	bne.n	8002874 <HAL_PWREx_ControlVoltageScaling+0x60>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1f2      	bne.n	800285a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002874:	4b0f      	ldr	r3, [pc, #60]	@ (80028b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800287c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002880:	d110      	bne.n	80028a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e00f      	b.n	80028a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002886:	4b0b      	ldr	r3, [pc, #44]	@ (80028b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800288e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002892:	d007      	beq.n	80028a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002894:	4b07      	ldr	r3, [pc, #28]	@ (80028b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800289c:	4a05      	ldr	r2, [pc, #20]	@ (80028b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800289e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40007000 	.word	0x40007000
 80028b8:	20000004 	.word	0x20000004
 80028bc:	431bde83 	.word	0x431bde83

080028c0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d102      	bne.n	80028d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	f000 bc02 	b.w	80030d8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028d4:	4b96      	ldr	r3, [pc, #600]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028de:	4b94      	ldr	r3, [pc, #592]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80e4 	beq.w	8002abe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d007      	beq.n	800290c <HAL_RCC_OscConfig+0x4c>
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	2b0c      	cmp	r3, #12
 8002900:	f040 808b 	bne.w	8002a1a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	2b01      	cmp	r3, #1
 8002908:	f040 8087 	bne.w	8002a1a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800290c:	4b88      	ldr	r3, [pc, #544]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_OscConfig+0x64>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e3d9      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1a      	ldr	r2, [r3, #32]
 8002928:	4b81      	ldr	r3, [pc, #516]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d004      	beq.n	800293e <HAL_RCC_OscConfig+0x7e>
 8002934:	4b7e      	ldr	r3, [pc, #504]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800293c:	e005      	b.n	800294a <HAL_RCC_OscConfig+0x8a>
 800293e:	4b7c      	ldr	r3, [pc, #496]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002940:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800294a:	4293      	cmp	r3, r2
 800294c:	d223      	bcs.n	8002996 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	4618      	mov	r0, r3
 8002954:	f000 fd8c 	bl	8003470 <RCC_SetFlashLatencyFromMSIRange>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e3ba      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002962:	4b73      	ldr	r3, [pc, #460]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a72      	ldr	r2, [pc, #456]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002968:	f043 0308 	orr.w	r3, r3, #8
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	4b70      	ldr	r3, [pc, #448]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	496d      	ldr	r1, [pc, #436]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 800297c:	4313      	orrs	r3, r2
 800297e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002980:	4b6b      	ldr	r3, [pc, #428]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	021b      	lsls	r3, r3, #8
 800298e:	4968      	ldr	r1, [pc, #416]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002990:	4313      	orrs	r3, r2
 8002992:	604b      	str	r3, [r1, #4]
 8002994:	e025      	b.n	80029e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002996:	4b66      	ldr	r3, [pc, #408]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a65      	ldr	r2, [pc, #404]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 800299c:	f043 0308 	orr.w	r3, r3, #8
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	4b63      	ldr	r3, [pc, #396]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	4960      	ldr	r1, [pc, #384]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029b4:	4b5e      	ldr	r3, [pc, #376]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	021b      	lsls	r3, r3, #8
 80029c2:	495b      	ldr	r1, [pc, #364]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fd4c 	bl	8003470 <RCC_SetFlashLatencyFromMSIRange>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e37a      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029e2:	f000 fc81 	bl	80032e8 <HAL_RCC_GetSysClockFreq>
 80029e6:	4602      	mov	r2, r0
 80029e8:	4b51      	ldr	r3, [pc, #324]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	091b      	lsrs	r3, r3, #4
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	4950      	ldr	r1, [pc, #320]	@ (8002b34 <HAL_RCC_OscConfig+0x274>)
 80029f4:	5ccb      	ldrb	r3, [r1, r3]
 80029f6:	f003 031f 	and.w	r3, r3, #31
 80029fa:	fa22 f303 	lsr.w	r3, r2, r3
 80029fe:	4a4e      	ldr	r2, [pc, #312]	@ (8002b38 <HAL_RCC_OscConfig+0x278>)
 8002a00:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a02:	4b4e      	ldr	r3, [pc, #312]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fe fd44 	bl	8001494 <HAL_InitTick>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d052      	beq.n	8002abc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	e35e      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d032      	beq.n	8002a88 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a22:	4b43      	ldr	r3, [pc, #268]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a42      	ldr	r2, [pc, #264]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a2e:	f7fe fd81 	bl	8001534 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a36:	f7fe fd7d 	bl	8001534 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e347      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a48:	4b39      	ldr	r3, [pc, #228]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f0      	beq.n	8002a36 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a54:	4b36      	ldr	r3, [pc, #216]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a35      	ldr	r2, [pc, #212]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002a5a:	f043 0308 	orr.w	r3, r3, #8
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	4b33      	ldr	r3, [pc, #204]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	4930      	ldr	r1, [pc, #192]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a72:	4b2f      	ldr	r3, [pc, #188]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	021b      	lsls	r3, r3, #8
 8002a80:	492b      	ldr	r1, [pc, #172]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	604b      	str	r3, [r1, #4]
 8002a86:	e01a      	b.n	8002abe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a88:	4b29      	ldr	r3, [pc, #164]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a28      	ldr	r2, [pc, #160]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002a8e:	f023 0301 	bic.w	r3, r3, #1
 8002a92:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a94:	f7fe fd4e 	bl	8001534 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a9c:	f7fe fd4a 	bl	8001534 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e314      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002aae:	4b20      	ldr	r3, [pc, #128]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x1dc>
 8002aba:	e000      	b.n	8002abe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002abc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d073      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d005      	beq.n	8002adc <HAL_RCC_OscConfig+0x21c>
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	2b0c      	cmp	r3, #12
 8002ad4:	d10e      	bne.n	8002af4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d10b      	bne.n	8002af4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002adc:	4b14      	ldr	r3, [pc, #80]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d063      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x2f0>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d15f      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e2f1      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002afc:	d106      	bne.n	8002b0c <HAL_RCC_OscConfig+0x24c>
 8002afe:	4b0c      	ldr	r3, [pc, #48]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a0b      	ldr	r2, [pc, #44]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	e025      	b.n	8002b58 <HAL_RCC_OscConfig+0x298>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b14:	d114      	bne.n	8002b40 <HAL_RCC_OscConfig+0x280>
 8002b16:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a05      	ldr	r2, [pc, #20]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002b1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	4b03      	ldr	r3, [pc, #12]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a02      	ldr	r2, [pc, #8]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002b28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	e013      	b.n	8002b58 <HAL_RCC_OscConfig+0x298>
 8002b30:	40021000 	.word	0x40021000
 8002b34:	08005a54 	.word	0x08005a54
 8002b38:	20000004 	.word	0x20000004
 8002b3c:	20000008 	.word	0x20000008
 8002b40:	4ba0      	ldr	r3, [pc, #640]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a9f      	ldr	r2, [pc, #636]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002b46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b4a:	6013      	str	r3, [r2, #0]
 8002b4c:	4b9d      	ldr	r3, [pc, #628]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a9c      	ldr	r2, [pc, #624]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002b52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d013      	beq.n	8002b88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7fe fce8 	bl	8001534 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b68:	f7fe fce4 	bl	8001534 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b64      	cmp	r3, #100	@ 0x64
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e2ae      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b7a:	4b92      	ldr	r3, [pc, #584]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f0      	beq.n	8002b68 <HAL_RCC_OscConfig+0x2a8>
 8002b86:	e014      	b.n	8002bb2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b88:	f7fe fcd4 	bl	8001534 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b90:	f7fe fcd0 	bl	8001534 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b64      	cmp	r3, #100	@ 0x64
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e29a      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ba2:	4b88      	ldr	r3, [pc, #544]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x2d0>
 8002bae:	e000      	b.n	8002bb2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d060      	beq.n	8002c80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x310>
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2b0c      	cmp	r3, #12
 8002bc8:	d119      	bne.n	8002bfe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d116      	bne.n	8002bfe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bd0:	4b7c      	ldr	r3, [pc, #496]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <HAL_RCC_OscConfig+0x328>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e277      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be8:	4b76      	ldr	r3, [pc, #472]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	061b      	lsls	r3, r3, #24
 8002bf6:	4973      	ldr	r1, [pc, #460]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bfc:	e040      	b.n	8002c80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d023      	beq.n	8002c4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c06:	4b6f      	ldr	r3, [pc, #444]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a6e      	ldr	r2, [pc, #440]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002c0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c12:	f7fe fc8f 	bl	8001534 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c1a:	f7fe fc8b 	bl	8001534 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e255      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c2c:	4b65      	ldr	r3, [pc, #404]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f0      	beq.n	8002c1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c38:	4b62      	ldr	r3, [pc, #392]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	061b      	lsls	r3, r3, #24
 8002c46:	495f      	ldr	r1, [pc, #380]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	604b      	str	r3, [r1, #4]
 8002c4c:	e018      	b.n	8002c80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c4e:	4b5d      	ldr	r3, [pc, #372]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a5c      	ldr	r2, [pc, #368]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002c54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5a:	f7fe fc6b 	bl	8001534 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c62:	f7fe fc67 	bl	8001534 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e231      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c74:	4b53      	ldr	r3, [pc, #332]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1f0      	bne.n	8002c62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d03c      	beq.n	8002d06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d01c      	beq.n	8002cce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c94:	4b4b      	ldr	r3, [pc, #300]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c9a:	4a4a      	ldr	r2, [pc, #296]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca4:	f7fe fc46 	bl	8001534 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cac:	f7fe fc42 	bl	8001534 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e20c      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cbe:	4b41      	ldr	r3, [pc, #260]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0ef      	beq.n	8002cac <HAL_RCC_OscConfig+0x3ec>
 8002ccc:	e01b      	b.n	8002d06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cce:	4b3d      	ldr	r3, [pc, #244]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cd4:	4a3b      	ldr	r2, [pc, #236]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002cd6:	f023 0301 	bic.w	r3, r3, #1
 8002cda:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cde:	f7fe fc29 	bl	8001534 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce6:	f7fe fc25 	bl	8001534 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e1ef      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cf8:	4b32      	ldr	r3, [pc, #200]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1ef      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 80a6 	beq.w	8002e60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d14:	2300      	movs	r3, #0
 8002d16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d18:	4b2a      	ldr	r3, [pc, #168]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10d      	bne.n	8002d40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d24:	4b27      	ldr	r3, [pc, #156]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d28:	4a26      	ldr	r2, [pc, #152]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002d2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d30:	4b24      	ldr	r3, [pc, #144]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d40:	4b21      	ldr	r3, [pc, #132]	@ (8002dc8 <HAL_RCC_OscConfig+0x508>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d118      	bne.n	8002d7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc8 <HAL_RCC_OscConfig+0x508>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a1d      	ldr	r2, [pc, #116]	@ (8002dc8 <HAL_RCC_OscConfig+0x508>)
 8002d52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d58:	f7fe fbec 	bl	8001534 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d60:	f7fe fbe8 	bl	8001534 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e1b2      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d72:	4b15      	ldr	r3, [pc, #84]	@ (8002dc8 <HAL_RCC_OscConfig+0x508>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d108      	bne.n	8002d98 <HAL_RCC_OscConfig+0x4d8>
 8002d86:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d96:	e029      	b.n	8002dec <HAL_RCC_OscConfig+0x52c>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b05      	cmp	r3, #5
 8002d9e:	d115      	bne.n	8002dcc <HAL_RCC_OscConfig+0x50c>
 8002da0:	4b08      	ldr	r3, [pc, #32]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da6:	4a07      	ldr	r2, [pc, #28]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002db0:	4b04      	ldr	r3, [pc, #16]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db6:	4a03      	ldr	r2, [pc, #12]	@ (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dc0:	e014      	b.n	8002dec <HAL_RCC_OscConfig+0x52c>
 8002dc2:	bf00      	nop
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40007000 	.word	0x40007000
 8002dcc:	4b9a      	ldr	r3, [pc, #616]	@ (8003038 <HAL_RCC_OscConfig+0x778>)
 8002dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd2:	4a99      	ldr	r2, [pc, #612]	@ (8003038 <HAL_RCC_OscConfig+0x778>)
 8002dd4:	f023 0301 	bic.w	r3, r3, #1
 8002dd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ddc:	4b96      	ldr	r3, [pc, #600]	@ (8003038 <HAL_RCC_OscConfig+0x778>)
 8002dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002de2:	4a95      	ldr	r2, [pc, #596]	@ (8003038 <HAL_RCC_OscConfig+0x778>)
 8002de4:	f023 0304 	bic.w	r3, r3, #4
 8002de8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d016      	beq.n	8002e22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df4:	f7fe fb9e 	bl	8001534 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dfa:	e00a      	b.n	8002e12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfc:	f7fe fb9a 	bl	8001534 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e162      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e12:	4b89      	ldr	r3, [pc, #548]	@ (8003038 <HAL_RCC_OscConfig+0x778>)
 8002e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0ed      	beq.n	8002dfc <HAL_RCC_OscConfig+0x53c>
 8002e20:	e015      	b.n	8002e4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e22:	f7fe fb87 	bl	8001534 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e28:	e00a      	b.n	8002e40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2a:	f7fe fb83 	bl	8001534 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e14b      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e40:	4b7d      	ldr	r3, [pc, #500]	@ (8003038 <HAL_RCC_OscConfig+0x778>)
 8002e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1ed      	bne.n	8002e2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e4e:	7ffb      	ldrb	r3, [r7, #31]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d105      	bne.n	8002e60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e54:	4b78      	ldr	r3, [pc, #480]	@ (8003038 <HAL_RCC_OscConfig+0x778>)
 8002e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e58:	4a77      	ldr	r2, [pc, #476]	@ (8003038 <HAL_RCC_OscConfig+0x778>)
 8002e5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e5e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d03c      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d01c      	beq.n	8002eae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e74:	4b70      	ldr	r3, [pc, #448]	@ (8003038 <HAL_RCC_OscConfig+0x778>)
 8002e76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e7a:	4a6f      	ldr	r2, [pc, #444]	@ (8003038 <HAL_RCC_OscConfig+0x778>)
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	f7fe fb56 	bl	8001534 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e8c:	f7fe fb52 	bl	8001534 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e11c      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e9e:	4b66      	ldr	r3, [pc, #408]	@ (8003038 <HAL_RCC_OscConfig+0x778>)
 8002ea0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0ef      	beq.n	8002e8c <HAL_RCC_OscConfig+0x5cc>
 8002eac:	e01b      	b.n	8002ee6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002eae:	4b62      	ldr	r3, [pc, #392]	@ (8003038 <HAL_RCC_OscConfig+0x778>)
 8002eb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002eb4:	4a60      	ldr	r2, [pc, #384]	@ (8003038 <HAL_RCC_OscConfig+0x778>)
 8002eb6:	f023 0301 	bic.w	r3, r3, #1
 8002eba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ebe:	f7fe fb39 	bl	8001534 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ec6:	f7fe fb35 	bl	8001534 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e0ff      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ed8:	4b57      	ldr	r3, [pc, #348]	@ (8003038 <HAL_RCC_OscConfig+0x778>)
 8002eda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1ef      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 80f3 	beq.w	80030d6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	f040 80c9 	bne.w	800308c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002efa:	4b4f      	ldr	r3, [pc, #316]	@ (8003038 <HAL_RCC_OscConfig+0x778>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f003 0203 	and.w	r2, r3, #3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d12c      	bne.n	8002f68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d123      	bne.n	8002f68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f2a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d11b      	bne.n	8002f68 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f3a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d113      	bne.n	8002f68 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f4a:	085b      	lsrs	r3, r3, #1
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d109      	bne.n	8002f68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5e:	085b      	lsrs	r3, r3, #1
 8002f60:	3b01      	subs	r3, #1
 8002f62:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d06b      	beq.n	8003040 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	2b0c      	cmp	r3, #12
 8002f6c:	d062      	beq.n	8003034 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f6e:	4b32      	ldr	r3, [pc, #200]	@ (8003038 <HAL_RCC_OscConfig+0x778>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e0ac      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f7e:	4b2e      	ldr	r3, [pc, #184]	@ (8003038 <HAL_RCC_OscConfig+0x778>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a2d      	ldr	r2, [pc, #180]	@ (8003038 <HAL_RCC_OscConfig+0x778>)
 8002f84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f88:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f8a:	f7fe fad3 	bl	8001534 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f92:	f7fe facf 	bl	8001534 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e099      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fa4:	4b24      	ldr	r3, [pc, #144]	@ (8003038 <HAL_RCC_OscConfig+0x778>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1f0      	bne.n	8002f92 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fb0:	4b21      	ldr	r3, [pc, #132]	@ (8003038 <HAL_RCC_OscConfig+0x778>)
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	4b21      	ldr	r3, [pc, #132]	@ (800303c <HAL_RCC_OscConfig+0x77c>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002fc0:	3a01      	subs	r2, #1
 8002fc2:	0112      	lsls	r2, r2, #4
 8002fc4:	4311      	orrs	r1, r2
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002fca:	0212      	lsls	r2, r2, #8
 8002fcc:	4311      	orrs	r1, r2
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002fd2:	0852      	lsrs	r2, r2, #1
 8002fd4:	3a01      	subs	r2, #1
 8002fd6:	0552      	lsls	r2, r2, #21
 8002fd8:	4311      	orrs	r1, r2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002fde:	0852      	lsrs	r2, r2, #1
 8002fe0:	3a01      	subs	r2, #1
 8002fe2:	0652      	lsls	r2, r2, #25
 8002fe4:	4311      	orrs	r1, r2
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002fea:	06d2      	lsls	r2, r2, #27
 8002fec:	430a      	orrs	r2, r1
 8002fee:	4912      	ldr	r1, [pc, #72]	@ (8003038 <HAL_RCC_OscConfig+0x778>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ff4:	4b10      	ldr	r3, [pc, #64]	@ (8003038 <HAL_RCC_OscConfig+0x778>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a0f      	ldr	r2, [pc, #60]	@ (8003038 <HAL_RCC_OscConfig+0x778>)
 8002ffa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ffe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003000:	4b0d      	ldr	r3, [pc, #52]	@ (8003038 <HAL_RCC_OscConfig+0x778>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	4a0c      	ldr	r2, [pc, #48]	@ (8003038 <HAL_RCC_OscConfig+0x778>)
 8003006:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800300a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800300c:	f7fe fa92 	bl	8001534 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003014:	f7fe fa8e 	bl	8001534 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e058      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003026:	4b04      	ldr	r3, [pc, #16]	@ (8003038 <HAL_RCC_OscConfig+0x778>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0f0      	beq.n	8003014 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003032:	e050      	b.n	80030d6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e04f      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
 8003038:	40021000 	.word	0x40021000
 800303c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003040:	4b27      	ldr	r3, [pc, #156]	@ (80030e0 <HAL_RCC_OscConfig+0x820>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d144      	bne.n	80030d6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800304c:	4b24      	ldr	r3, [pc, #144]	@ (80030e0 <HAL_RCC_OscConfig+0x820>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a23      	ldr	r2, [pc, #140]	@ (80030e0 <HAL_RCC_OscConfig+0x820>)
 8003052:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003056:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003058:	4b21      	ldr	r3, [pc, #132]	@ (80030e0 <HAL_RCC_OscConfig+0x820>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	4a20      	ldr	r2, [pc, #128]	@ (80030e0 <HAL_RCC_OscConfig+0x820>)
 800305e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003062:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003064:	f7fe fa66 	bl	8001534 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800306c:	f7fe fa62 	bl	8001534 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e02c      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800307e:	4b18      	ldr	r3, [pc, #96]	@ (80030e0 <HAL_RCC_OscConfig+0x820>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0x7ac>
 800308a:	e024      	b.n	80030d6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	2b0c      	cmp	r3, #12
 8003090:	d01f      	beq.n	80030d2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003092:	4b13      	ldr	r3, [pc, #76]	@ (80030e0 <HAL_RCC_OscConfig+0x820>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a12      	ldr	r2, [pc, #72]	@ (80030e0 <HAL_RCC_OscConfig+0x820>)
 8003098:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800309c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309e:	f7fe fa49 	bl	8001534 <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a6:	f7fe fa45 	bl	8001534 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e00f      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030b8:	4b09      	ldr	r3, [pc, #36]	@ (80030e0 <HAL_RCC_OscConfig+0x820>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1f0      	bne.n	80030a6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80030c4:	4b06      	ldr	r3, [pc, #24]	@ (80030e0 <HAL_RCC_OscConfig+0x820>)
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	4905      	ldr	r1, [pc, #20]	@ (80030e0 <HAL_RCC_OscConfig+0x820>)
 80030ca:	4b06      	ldr	r3, [pc, #24]	@ (80030e4 <HAL_RCC_OscConfig+0x824>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	60cb      	str	r3, [r1, #12]
 80030d0:	e001      	b.n	80030d6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3720      	adds	r7, #32
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40021000 	.word	0x40021000
 80030e4:	feeefffc 	.word	0xfeeefffc

080030e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0e7      	b.n	80032cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030fc:	4b75      	ldr	r3, [pc, #468]	@ (80032d4 <HAL_RCC_ClockConfig+0x1ec>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	429a      	cmp	r2, r3
 8003108:	d910      	bls.n	800312c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310a:	4b72      	ldr	r3, [pc, #456]	@ (80032d4 <HAL_RCC_ClockConfig+0x1ec>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f023 0207 	bic.w	r2, r3, #7
 8003112:	4970      	ldr	r1, [pc, #448]	@ (80032d4 <HAL_RCC_ClockConfig+0x1ec>)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	4313      	orrs	r3, r2
 8003118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800311a:	4b6e      	ldr	r3, [pc, #440]	@ (80032d4 <HAL_RCC_ClockConfig+0x1ec>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d001      	beq.n	800312c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0cf      	b.n	80032cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d010      	beq.n	800315a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	4b66      	ldr	r3, [pc, #408]	@ (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003144:	429a      	cmp	r2, r3
 8003146:	d908      	bls.n	800315a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003148:	4b63      	ldr	r3, [pc, #396]	@ (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	4960      	ldr	r1, [pc, #384]	@ (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003156:	4313      	orrs	r3, r2
 8003158:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d04c      	beq.n	8003200 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b03      	cmp	r3, #3
 800316c:	d107      	bne.n	800317e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800316e:	4b5a      	ldr	r3, [pc, #360]	@ (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d121      	bne.n	80031be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e0a6      	b.n	80032cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d107      	bne.n	8003196 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003186:	4b54      	ldr	r3, [pc, #336]	@ (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d115      	bne.n	80031be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e09a      	b.n	80032cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d107      	bne.n	80031ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800319e:	4b4e      	ldr	r3, [pc, #312]	@ (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d109      	bne.n	80031be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e08e      	b.n	80032cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031ae:	4b4a      	ldr	r3, [pc, #296]	@ (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e086      	b.n	80032cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031be:	4b46      	ldr	r3, [pc, #280]	@ (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f023 0203 	bic.w	r2, r3, #3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4943      	ldr	r1, [pc, #268]	@ (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d0:	f7fe f9b0 	bl	8001534 <HAL_GetTick>
 80031d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d6:	e00a      	b.n	80031ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d8:	f7fe f9ac 	bl	8001534 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e06e      	b.n	80032cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ee:	4b3a      	ldr	r3, [pc, #232]	@ (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 020c 	and.w	r2, r3, #12
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d1eb      	bne.n	80031d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d010      	beq.n	800322e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	4b31      	ldr	r3, [pc, #196]	@ (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003218:	429a      	cmp	r2, r3
 800321a:	d208      	bcs.n	800322e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800321c:	4b2e      	ldr	r3, [pc, #184]	@ (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	492b      	ldr	r1, [pc, #172]	@ (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 800322a:	4313      	orrs	r3, r2
 800322c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800322e:	4b29      	ldr	r3, [pc, #164]	@ (80032d4 <HAL_RCC_ClockConfig+0x1ec>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d210      	bcs.n	800325e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323c:	4b25      	ldr	r3, [pc, #148]	@ (80032d4 <HAL_RCC_ClockConfig+0x1ec>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f023 0207 	bic.w	r2, r3, #7
 8003244:	4923      	ldr	r1, [pc, #140]	@ (80032d4 <HAL_RCC_ClockConfig+0x1ec>)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	4313      	orrs	r3, r2
 800324a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324c:	4b21      	ldr	r3, [pc, #132]	@ (80032d4 <HAL_RCC_ClockConfig+0x1ec>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d001      	beq.n	800325e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e036      	b.n	80032cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b00      	cmp	r3, #0
 8003268:	d008      	beq.n	800327c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800326a:	4b1b      	ldr	r3, [pc, #108]	@ (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	4918      	ldr	r1, [pc, #96]	@ (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003278:	4313      	orrs	r3, r2
 800327a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b00      	cmp	r3, #0
 8003286:	d009      	beq.n	800329c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003288:	4b13      	ldr	r3, [pc, #76]	@ (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	4910      	ldr	r1, [pc, #64]	@ (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003298:	4313      	orrs	r3, r2
 800329a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800329c:	f000 f824 	bl	80032e8 <HAL_RCC_GetSysClockFreq>
 80032a0:	4602      	mov	r2, r0
 80032a2:	4b0d      	ldr	r3, [pc, #52]	@ (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	f003 030f 	and.w	r3, r3, #15
 80032ac:	490b      	ldr	r1, [pc, #44]	@ (80032dc <HAL_RCC_ClockConfig+0x1f4>)
 80032ae:	5ccb      	ldrb	r3, [r1, r3]
 80032b0:	f003 031f 	and.w	r3, r3, #31
 80032b4:	fa22 f303 	lsr.w	r3, r2, r3
 80032b8:	4a09      	ldr	r2, [pc, #36]	@ (80032e0 <HAL_RCC_ClockConfig+0x1f8>)
 80032ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032bc:	4b09      	ldr	r3, [pc, #36]	@ (80032e4 <HAL_RCC_ClockConfig+0x1fc>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fe f8e7 	bl	8001494 <HAL_InitTick>
 80032c6:	4603      	mov	r3, r0
 80032c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80032ca:	7afb      	ldrb	r3, [r7, #11]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40022000 	.word	0x40022000
 80032d8:	40021000 	.word	0x40021000
 80032dc:	08005a54 	.word	0x08005a54
 80032e0:	20000004 	.word	0x20000004
 80032e4:	20000008 	.word	0x20000008

080032e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b089      	sub	sp, #36	@ 0x24
 80032ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
 80032f2:	2300      	movs	r3, #0
 80032f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032f6:	4b3e      	ldr	r3, [pc, #248]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003300:	4b3b      	ldr	r3, [pc, #236]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0x34>
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	2b0c      	cmp	r3, #12
 8003314:	d121      	bne.n	800335a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d11e      	bne.n	800335a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800331c:	4b34      	ldr	r3, [pc, #208]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b00      	cmp	r3, #0
 8003326:	d107      	bne.n	8003338 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003328:	4b31      	ldr	r3, [pc, #196]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800332a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800332e:	0a1b      	lsrs	r3, r3, #8
 8003330:	f003 030f 	and.w	r3, r3, #15
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	e005      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003338:	4b2d      	ldr	r3, [pc, #180]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	091b      	lsrs	r3, r3, #4
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003344:	4a2b      	ldr	r2, [pc, #172]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800334c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10d      	bne.n	8003370 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003358:	e00a      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	2b04      	cmp	r3, #4
 800335e:	d102      	bne.n	8003366 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003360:	4b25      	ldr	r3, [pc, #148]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003362:	61bb      	str	r3, [r7, #24]
 8003364:	e004      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	2b08      	cmp	r3, #8
 800336a:	d101      	bne.n	8003370 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800336c:	4b23      	ldr	r3, [pc, #140]	@ (80033fc <HAL_RCC_GetSysClockFreq+0x114>)
 800336e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	2b0c      	cmp	r3, #12
 8003374:	d134      	bne.n	80033e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003376:	4b1e      	ldr	r3, [pc, #120]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d003      	beq.n	800338e <HAL_RCC_GetSysClockFreq+0xa6>
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b03      	cmp	r3, #3
 800338a:	d003      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0xac>
 800338c:	e005      	b.n	800339a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800338e:	4b1a      	ldr	r3, [pc, #104]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003390:	617b      	str	r3, [r7, #20]
      break;
 8003392:	e005      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003394:	4b19      	ldr	r3, [pc, #100]	@ (80033fc <HAL_RCC_GetSysClockFreq+0x114>)
 8003396:	617b      	str	r3, [r7, #20]
      break;
 8003398:	e002      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	617b      	str	r3, [r7, #20]
      break;
 800339e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033a0:	4b13      	ldr	r3, [pc, #76]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	3301      	adds	r3, #1
 80033ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033ae:	4b10      	ldr	r3, [pc, #64]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	0a1b      	lsrs	r3, r3, #8
 80033b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	fb03 f202 	mul.w	r2, r3, r2
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033c6:	4b0a      	ldr	r3, [pc, #40]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	0e5b      	lsrs	r3, r3, #25
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	3301      	adds	r3, #1
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	fbb2 f3f3 	udiv	r3, r2, r3
 80033de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033e0:	69bb      	ldr	r3, [r7, #24]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3724      	adds	r7, #36	@ 0x24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40021000 	.word	0x40021000
 80033f4:	08005a6c 	.word	0x08005a6c
 80033f8:	00f42400 	.word	0x00f42400
 80033fc:	007a1200 	.word	0x007a1200

08003400 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003404:	4b03      	ldr	r3, [pc, #12]	@ (8003414 <HAL_RCC_GetHCLKFreq+0x14>)
 8003406:	681b      	ldr	r3, [r3, #0]
}
 8003408:	4618      	mov	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	20000004 	.word	0x20000004

08003418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800341c:	f7ff fff0 	bl	8003400 <HAL_RCC_GetHCLKFreq>
 8003420:	4602      	mov	r2, r0
 8003422:	4b06      	ldr	r3, [pc, #24]	@ (800343c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	0a1b      	lsrs	r3, r3, #8
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	4904      	ldr	r1, [pc, #16]	@ (8003440 <HAL_RCC_GetPCLK1Freq+0x28>)
 800342e:	5ccb      	ldrb	r3, [r1, r3]
 8003430:	f003 031f 	and.w	r3, r3, #31
 8003434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003438:	4618      	mov	r0, r3
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40021000 	.word	0x40021000
 8003440:	08005a64 	.word	0x08005a64

08003444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003448:	f7ff ffda 	bl	8003400 <HAL_RCC_GetHCLKFreq>
 800344c:	4602      	mov	r2, r0
 800344e:	4b06      	ldr	r3, [pc, #24]	@ (8003468 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	0adb      	lsrs	r3, r3, #11
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	4904      	ldr	r1, [pc, #16]	@ (800346c <HAL_RCC_GetPCLK2Freq+0x28>)
 800345a:	5ccb      	ldrb	r3, [r1, r3]
 800345c:	f003 031f 	and.w	r3, r3, #31
 8003460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003464:	4618      	mov	r0, r3
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40021000 	.word	0x40021000
 800346c:	08005a64 	.word	0x08005a64

08003470 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003478:	2300      	movs	r3, #0
 800347a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800347c:	4b2a      	ldr	r3, [pc, #168]	@ (8003528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800347e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003488:	f7ff f9b6 	bl	80027f8 <HAL_PWREx_GetVoltageRange>
 800348c:	6178      	str	r0, [r7, #20]
 800348e:	e014      	b.n	80034ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003490:	4b25      	ldr	r3, [pc, #148]	@ (8003528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003494:	4a24      	ldr	r2, [pc, #144]	@ (8003528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003496:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800349a:	6593      	str	r3, [r2, #88]	@ 0x58
 800349c:	4b22      	ldr	r3, [pc, #136]	@ (8003528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800349e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034a8:	f7ff f9a6 	bl	80027f8 <HAL_PWREx_GetVoltageRange>
 80034ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034c0:	d10b      	bne.n	80034da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b80      	cmp	r3, #128	@ 0x80
 80034c6:	d919      	bls.n	80034fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80034cc:	d902      	bls.n	80034d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034ce:	2302      	movs	r3, #2
 80034d0:	613b      	str	r3, [r7, #16]
 80034d2:	e013      	b.n	80034fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034d4:	2301      	movs	r3, #1
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	e010      	b.n	80034fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b80      	cmp	r3, #128	@ 0x80
 80034de:	d902      	bls.n	80034e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034e0:	2303      	movs	r3, #3
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	e00a      	b.n	80034fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b80      	cmp	r3, #128	@ 0x80
 80034ea:	d102      	bne.n	80034f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034ec:	2302      	movs	r3, #2
 80034ee:	613b      	str	r3, [r7, #16]
 80034f0:	e004      	b.n	80034fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b70      	cmp	r3, #112	@ 0x70
 80034f6:	d101      	bne.n	80034fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034f8:	2301      	movs	r3, #1
 80034fa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034fc:	4b0b      	ldr	r3, [pc, #44]	@ (800352c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f023 0207 	bic.w	r2, r3, #7
 8003504:	4909      	ldr	r1, [pc, #36]	@ (800352c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800350c:	4b07      	ldr	r3, [pc, #28]	@ (800352c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	429a      	cmp	r2, r3
 8003518:	d001      	beq.n	800351e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40021000 	.word	0x40021000
 800352c:	40022000 	.word	0x40022000

08003530 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003538:	2300      	movs	r3, #0
 800353a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800353c:	2300      	movs	r3, #0
 800353e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003548:	2b00      	cmp	r3, #0
 800354a:	d031      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003550:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003554:	d01a      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003556:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800355a:	d814      	bhi.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800355c:	2b00      	cmp	r3, #0
 800355e:	d009      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003560:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003564:	d10f      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003566:	4b5d      	ldr	r3, [pc, #372]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	4a5c      	ldr	r2, [pc, #368]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800356c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003570:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003572:	e00c      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3304      	adds	r3, #4
 8003578:	2100      	movs	r1, #0
 800357a:	4618      	mov	r0, r3
 800357c:	f000 f9de 	bl	800393c <RCCEx_PLLSAI1_Config>
 8003580:	4603      	mov	r3, r0
 8003582:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003584:	e003      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	74fb      	strb	r3, [r7, #19]
      break;
 800358a:	e000      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800358c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800358e:	7cfb      	ldrb	r3, [r7, #19]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10b      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003594:	4b51      	ldr	r3, [pc, #324]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800359a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a2:	494e      	ldr	r1, [pc, #312]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80035aa:	e001      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ac:	7cfb      	ldrb	r3, [r7, #19]
 80035ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 809e 	beq.w	80036fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035be:	2300      	movs	r3, #0
 80035c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035c2:	4b46      	ldr	r3, [pc, #280]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80035d2:	2300      	movs	r3, #0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00d      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d8:	4b40      	ldr	r3, [pc, #256]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035dc:	4a3f      	ldr	r2, [pc, #252]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80035e4:	4b3d      	ldr	r3, [pc, #244]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f0:	2301      	movs	r3, #1
 80035f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035f4:	4b3a      	ldr	r3, [pc, #232]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a39      	ldr	r2, [pc, #228]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003600:	f7fd ff98 	bl	8001534 <HAL_GetTick>
 8003604:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003606:	e009      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003608:	f7fd ff94 	bl	8001534 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d902      	bls.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	74fb      	strb	r3, [r7, #19]
        break;
 800361a:	e005      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800361c:	4b30      	ldr	r3, [pc, #192]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0ef      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003628:	7cfb      	ldrb	r3, [r7, #19]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d15a      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800362e:	4b2b      	ldr	r3, [pc, #172]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003634:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003638:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d01e      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	429a      	cmp	r2, r3
 8003648:	d019      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800364a:	4b24      	ldr	r3, [pc, #144]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800364c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003650:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003654:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003656:	4b21      	ldr	r3, [pc, #132]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800365c:	4a1f      	ldr	r2, [pc, #124]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800365e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003662:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003666:	4b1d      	ldr	r3, [pc, #116]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800366c:	4a1b      	ldr	r2, [pc, #108]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800366e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003672:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003676:	4a19      	ldr	r2, [pc, #100]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d016      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003688:	f7fd ff54 	bl	8001534 <HAL_GetTick>
 800368c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800368e:	e00b      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003690:	f7fd ff50 	bl	8001534 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800369e:	4293      	cmp	r3, r2
 80036a0:	d902      	bls.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	74fb      	strb	r3, [r7, #19]
            break;
 80036a6:	e006      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036a8:	4b0c      	ldr	r3, [pc, #48]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0ec      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80036b6:	7cfb      	ldrb	r3, [r7, #19]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10b      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036bc:	4b07      	ldr	r3, [pc, #28]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ca:	4904      	ldr	r1, [pc, #16]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80036d2:	e009      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036d4:	7cfb      	ldrb	r3, [r7, #19]
 80036d6:	74bb      	strb	r3, [r7, #18]
 80036d8:	e006      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80036da:	bf00      	nop
 80036dc:	40021000 	.word	0x40021000
 80036e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e4:	7cfb      	ldrb	r3, [r7, #19]
 80036e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036e8:	7c7b      	ldrb	r3, [r7, #17]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d105      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ee:	4b8a      	ldr	r3, [pc, #552]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f2:	4a89      	ldr	r2, [pc, #548]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003706:	4b84      	ldr	r3, [pc, #528]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800370c:	f023 0203 	bic.w	r2, r3, #3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	4980      	ldr	r1, [pc, #512]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00a      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003728:	4b7b      	ldr	r3, [pc, #492]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800372e:	f023 020c 	bic.w	r2, r3, #12
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003736:	4978      	ldr	r1, [pc, #480]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800374a:	4b73      	ldr	r3, [pc, #460]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800374c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003750:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003758:	496f      	ldr	r1, [pc, #444]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800375a:	4313      	orrs	r3, r2
 800375c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00a      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800376c:	4b6a      	ldr	r3, [pc, #424]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003772:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800377a:	4967      	ldr	r1, [pc, #412]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800378e:	4b62      	ldr	r3, [pc, #392]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003794:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800379c:	495e      	ldr	r1, [pc, #376]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00a      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037b0:	4b59      	ldr	r3, [pc, #356]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037be:	4956      	ldr	r1, [pc, #344]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00a      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037d2:	4b51      	ldr	r3, [pc, #324]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e0:	494d      	ldr	r1, [pc, #308]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d028      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037f4:	4b48      	ldr	r3, [pc, #288]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003802:	4945      	ldr	r1, [pc, #276]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003804:	4313      	orrs	r3, r2
 8003806:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003812:	d106      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003814:	4b40      	ldr	r3, [pc, #256]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	4a3f      	ldr	r2, [pc, #252]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800381a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800381e:	60d3      	str	r3, [r2, #12]
 8003820:	e011      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003826:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800382a:	d10c      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3304      	adds	r3, #4
 8003830:	2101      	movs	r1, #1
 8003832:	4618      	mov	r0, r3
 8003834:	f000 f882 	bl	800393c <RCCEx_PLLSAI1_Config>
 8003838:	4603      	mov	r3, r0
 800383a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800383c:	7cfb      	ldrb	r3, [r7, #19]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003842:	7cfb      	ldrb	r3, [r7, #19]
 8003844:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d028      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003852:	4b31      	ldr	r3, [pc, #196]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003858:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003860:	492d      	ldr	r1, [pc, #180]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003870:	d106      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003872:	4b29      	ldr	r3, [pc, #164]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	4a28      	ldr	r2, [pc, #160]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003878:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800387c:	60d3      	str	r3, [r2, #12]
 800387e:	e011      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003884:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003888:	d10c      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3304      	adds	r3, #4
 800388e:	2101      	movs	r1, #1
 8003890:	4618      	mov	r0, r3
 8003892:	f000 f853 	bl	800393c <RCCEx_PLLSAI1_Config>
 8003896:	4603      	mov	r3, r0
 8003898:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800389a:	7cfb      	ldrb	r3, [r7, #19]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80038a0:	7cfb      	ldrb	r3, [r7, #19]
 80038a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d01c      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038b0:	4b19      	ldr	r3, [pc, #100]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038be:	4916      	ldr	r1, [pc, #88]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038ce:	d10c      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3304      	adds	r3, #4
 80038d4:	2102      	movs	r1, #2
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 f830 	bl	800393c <RCCEx_PLLSAI1_Config>
 80038dc:	4603      	mov	r3, r0
 80038de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038e0:	7cfb      	ldrb	r3, [r7, #19]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80038e6:	7cfb      	ldrb	r3, [r7, #19]
 80038e8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038f6:	4b08      	ldr	r3, [pc, #32]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038fc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003904:	4904      	ldr	r1, [pc, #16]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800390c:	7cbb      	ldrb	r3, [r7, #18]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40021000 	.word	0x40021000

0800391c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003920:	4b05      	ldr	r3, [pc, #20]	@ (8003938 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a04      	ldr	r2, [pc, #16]	@ (8003938 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003926:	f043 0304 	orr.w	r3, r3, #4
 800392a:	6013      	str	r3, [r2, #0]
}
 800392c:	bf00      	nop
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40021000 	.word	0x40021000

0800393c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800394a:	4b74      	ldr	r3, [pc, #464]	@ (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d018      	beq.n	8003988 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003956:	4b71      	ldr	r3, [pc, #452]	@ (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f003 0203 	and.w	r2, r3, #3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d10d      	bne.n	8003982 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
       ||
 800396a:	2b00      	cmp	r3, #0
 800396c:	d009      	beq.n	8003982 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800396e:	4b6b      	ldr	r3, [pc, #428]	@ (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	091b      	lsrs	r3, r3, #4
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
       ||
 800397e:	429a      	cmp	r2, r3
 8003980:	d047      	beq.n	8003a12 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
 8003986:	e044      	b.n	8003a12 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b03      	cmp	r3, #3
 800398e:	d018      	beq.n	80039c2 <RCCEx_PLLSAI1_Config+0x86>
 8003990:	2b03      	cmp	r3, #3
 8003992:	d825      	bhi.n	80039e0 <RCCEx_PLLSAI1_Config+0xa4>
 8003994:	2b01      	cmp	r3, #1
 8003996:	d002      	beq.n	800399e <RCCEx_PLLSAI1_Config+0x62>
 8003998:	2b02      	cmp	r3, #2
 800399a:	d009      	beq.n	80039b0 <RCCEx_PLLSAI1_Config+0x74>
 800399c:	e020      	b.n	80039e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800399e:	4b5f      	ldr	r3, [pc, #380]	@ (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d11d      	bne.n	80039e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ae:	e01a      	b.n	80039e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039b0:	4b5a      	ldr	r3, [pc, #360]	@ (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d116      	bne.n	80039ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039c0:	e013      	b.n	80039ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039c2:	4b56      	ldr	r3, [pc, #344]	@ (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10f      	bne.n	80039ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039ce:	4b53      	ldr	r3, [pc, #332]	@ (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039de:	e006      	b.n	80039ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	73fb      	strb	r3, [r7, #15]
      break;
 80039e4:	e004      	b.n	80039f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039e6:	bf00      	nop
 80039e8:	e002      	b.n	80039f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039ea:	bf00      	nop
 80039ec:	e000      	b.n	80039f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10d      	bne.n	8003a12 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039f6:	4b49      	ldr	r3, [pc, #292]	@ (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6819      	ldr	r1, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	430b      	orrs	r3, r1
 8003a0c:	4943      	ldr	r1, [pc, #268]	@ (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d17c      	bne.n	8003b12 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a18:	4b40      	ldr	r3, [pc, #256]	@ (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a3f      	ldr	r2, [pc, #252]	@ (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a24:	f7fd fd86 	bl	8001534 <HAL_GetTick>
 8003a28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a2a:	e009      	b.n	8003a40 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a2c:	f7fd fd82 	bl	8001534 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d902      	bls.n	8003a40 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	73fb      	strb	r3, [r7, #15]
        break;
 8003a3e:	e005      	b.n	8003a4c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a40:	4b36      	ldr	r3, [pc, #216]	@ (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1ef      	bne.n	8003a2c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d15f      	bne.n	8003b12 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d110      	bne.n	8003a7a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a58:	4b30      	ldr	r3, [pc, #192]	@ (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003a60:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6892      	ldr	r2, [r2, #8]
 8003a68:	0211      	lsls	r1, r2, #8
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	68d2      	ldr	r2, [r2, #12]
 8003a6e:	06d2      	lsls	r2, r2, #27
 8003a70:	430a      	orrs	r2, r1
 8003a72:	492a      	ldr	r1, [pc, #168]	@ (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	610b      	str	r3, [r1, #16]
 8003a78:	e027      	b.n	8003aca <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d112      	bne.n	8003aa6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a80:	4b26      	ldr	r3, [pc, #152]	@ (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003a88:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6892      	ldr	r2, [r2, #8]
 8003a90:	0211      	lsls	r1, r2, #8
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6912      	ldr	r2, [r2, #16]
 8003a96:	0852      	lsrs	r2, r2, #1
 8003a98:	3a01      	subs	r2, #1
 8003a9a:	0552      	lsls	r2, r2, #21
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	491f      	ldr	r1, [pc, #124]	@ (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	610b      	str	r3, [r1, #16]
 8003aa4:	e011      	b.n	8003aca <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003aae:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6892      	ldr	r2, [r2, #8]
 8003ab6:	0211      	lsls	r1, r2, #8
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6952      	ldr	r2, [r2, #20]
 8003abc:	0852      	lsrs	r2, r2, #1
 8003abe:	3a01      	subs	r2, #1
 8003ac0:	0652      	lsls	r2, r2, #25
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	4915      	ldr	r1, [pc, #84]	@ (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003aca:	4b14      	ldr	r3, [pc, #80]	@ (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a13      	ldr	r2, [pc, #76]	@ (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ad4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad6:	f7fd fd2d 	bl	8001534 <HAL_GetTick>
 8003ada:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003adc:	e009      	b.n	8003af2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ade:	f7fd fd29 	bl	8001534 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d902      	bls.n	8003af2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	73fb      	strb	r3, [r7, #15]
          break;
 8003af0:	e005      	b.n	8003afe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003af2:	4b0a      	ldr	r3, [pc, #40]	@ (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0ef      	beq.n	8003ade <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d106      	bne.n	8003b12 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b04:	4b05      	ldr	r3, [pc, #20]	@ (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	4903      	ldr	r1, [pc, #12]	@ (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40021000 	.word	0x40021000

08003b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e049      	b.n	8003bc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d106      	bne.n	8003b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7fd fb74 	bl	8001234 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4610      	mov	r0, r2
 8003b60:	f000 fa82 	bl	8004068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d001      	beq.n	8003be8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e03b      	b.n	8003c60 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0201 	orr.w	r2, r2, #1
 8003bfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a19      	ldr	r2, [pc, #100]	@ (8003c6c <HAL_TIM_Base_Start_IT+0x9c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d009      	beq.n	8003c1e <HAL_TIM_Base_Start_IT+0x4e>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c12:	d004      	beq.n	8003c1e <HAL_TIM_Base_Start_IT+0x4e>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a15      	ldr	r2, [pc, #84]	@ (8003c70 <HAL_TIM_Base_Start_IT+0xa0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d115      	bne.n	8003c4a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	4b13      	ldr	r3, [pc, #76]	@ (8003c74 <HAL_TIM_Base_Start_IT+0xa4>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2b06      	cmp	r3, #6
 8003c2e:	d015      	beq.n	8003c5c <HAL_TIM_Base_Start_IT+0x8c>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c36:	d011      	beq.n	8003c5c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0201 	orr.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c48:	e008      	b.n	8003c5c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f042 0201 	orr.w	r2, r2, #1
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	e000      	b.n	8003c5e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	40012c00 	.word	0x40012c00
 8003c70:	40014000 	.word	0x40014000
 8003c74:	00010007 	.word	0x00010007

08003c78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d020      	beq.n	8003cdc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d01b      	beq.n	8003cdc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0202 	mvn.w	r2, #2
 8003cac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f9b2 	bl	800402c <HAL_TIM_IC_CaptureCallback>
 8003cc8:	e005      	b.n	8003cd6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f9a4 	bl	8004018 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f9b5 	bl	8004040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d020      	beq.n	8003d28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d01b      	beq.n	8003d28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f06f 0204 	mvn.w	r2, #4
 8003cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f98c 	bl	800402c <HAL_TIM_IC_CaptureCallback>
 8003d14:	e005      	b.n	8003d22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f97e 	bl	8004018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f98f 	bl	8004040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d020      	beq.n	8003d74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d01b      	beq.n	8003d74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f06f 0208 	mvn.w	r2, #8
 8003d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2204      	movs	r2, #4
 8003d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f966 	bl	800402c <HAL_TIM_IC_CaptureCallback>
 8003d60:	e005      	b.n	8003d6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f958 	bl	8004018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f969 	bl	8004040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f003 0310 	and.w	r3, r3, #16
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d020      	beq.n	8003dc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f003 0310 	and.w	r3, r3, #16
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01b      	beq.n	8003dc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f06f 0210 	mvn.w	r2, #16
 8003d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2208      	movs	r2, #8
 8003d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f940 	bl	800402c <HAL_TIM_IC_CaptureCallback>
 8003dac:	e005      	b.n	8003dba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f932 	bl	8004018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f943 	bl	8004040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00c      	beq.n	8003de4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d007      	beq.n	8003de4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f06f 0201 	mvn.w	r2, #1
 8003ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7fd f82a 	bl	8000e38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d104      	bne.n	8003df8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00c      	beq.n	8003e12 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d007      	beq.n	8003e12 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 faa5 	bl	800435c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00c      	beq.n	8003e36 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d007      	beq.n	8003e36 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 fa9d 	bl	8004370 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00c      	beq.n	8003e5a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d007      	beq.n	8003e5a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 f8fd 	bl	8004054 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	f003 0320 	and.w	r3, r3, #32
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00c      	beq.n	8003e7e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 0320 	and.w	r3, r3, #32
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d007      	beq.n	8003e7e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f06f 0220 	mvn.w	r2, #32
 8003e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 fa65 	bl	8004348 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e7e:	bf00      	nop
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <HAL_TIM_ConfigClockSource+0x1c>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e0b6      	b.n	8004010 <HAL_TIM_ConfigClockSource+0x18a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2202      	movs	r2, #2
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ec0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ec4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ecc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ede:	d03e      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0xd8>
 8003ee0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ee4:	f200 8087 	bhi.w	8003ff6 <HAL_TIM_ConfigClockSource+0x170>
 8003ee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eec:	f000 8086 	beq.w	8003ffc <HAL_TIM_ConfigClockSource+0x176>
 8003ef0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ef4:	d87f      	bhi.n	8003ff6 <HAL_TIM_ConfigClockSource+0x170>
 8003ef6:	2b70      	cmp	r3, #112	@ 0x70
 8003ef8:	d01a      	beq.n	8003f30 <HAL_TIM_ConfigClockSource+0xaa>
 8003efa:	2b70      	cmp	r3, #112	@ 0x70
 8003efc:	d87b      	bhi.n	8003ff6 <HAL_TIM_ConfigClockSource+0x170>
 8003efe:	2b60      	cmp	r3, #96	@ 0x60
 8003f00:	d050      	beq.n	8003fa4 <HAL_TIM_ConfigClockSource+0x11e>
 8003f02:	2b60      	cmp	r3, #96	@ 0x60
 8003f04:	d877      	bhi.n	8003ff6 <HAL_TIM_ConfigClockSource+0x170>
 8003f06:	2b50      	cmp	r3, #80	@ 0x50
 8003f08:	d03c      	beq.n	8003f84 <HAL_TIM_ConfigClockSource+0xfe>
 8003f0a:	2b50      	cmp	r3, #80	@ 0x50
 8003f0c:	d873      	bhi.n	8003ff6 <HAL_TIM_ConfigClockSource+0x170>
 8003f0e:	2b40      	cmp	r3, #64	@ 0x40
 8003f10:	d058      	beq.n	8003fc4 <HAL_TIM_ConfigClockSource+0x13e>
 8003f12:	2b40      	cmp	r3, #64	@ 0x40
 8003f14:	d86f      	bhi.n	8003ff6 <HAL_TIM_ConfigClockSource+0x170>
 8003f16:	2b30      	cmp	r3, #48	@ 0x30
 8003f18:	d064      	beq.n	8003fe4 <HAL_TIM_ConfigClockSource+0x15e>
 8003f1a:	2b30      	cmp	r3, #48	@ 0x30
 8003f1c:	d86b      	bhi.n	8003ff6 <HAL_TIM_ConfigClockSource+0x170>
 8003f1e:	2b20      	cmp	r3, #32
 8003f20:	d060      	beq.n	8003fe4 <HAL_TIM_ConfigClockSource+0x15e>
 8003f22:	2b20      	cmp	r3, #32
 8003f24:	d867      	bhi.n	8003ff6 <HAL_TIM_ConfigClockSource+0x170>
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d05c      	beq.n	8003fe4 <HAL_TIM_ConfigClockSource+0x15e>
 8003f2a:	2b10      	cmp	r3, #16
 8003f2c:	d05a      	beq.n	8003fe4 <HAL_TIM_ConfigClockSource+0x15e>
 8003f2e:	e062      	b.n	8003ff6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f40:	f000 f97c 	bl	800423c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f52:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	609a      	str	r2, [r3, #8]
      break;
 8003f5c:	e04f      	b.n	8003ffe <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f6e:	f000 f965 	bl	800423c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f80:	609a      	str	r2, [r3, #8]
      break;
 8003f82:	e03c      	b.n	8003ffe <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f90:	461a      	mov	r2, r3
 8003f92:	f000 f8d9 	bl	8004148 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2150      	movs	r1, #80	@ 0x50
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 f932 	bl	8004206 <TIM_ITRx_SetConfig>
      break;
 8003fa2:	e02c      	b.n	8003ffe <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	f000 f8f8 	bl	80041a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2160      	movs	r1, #96	@ 0x60
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 f922 	bl	8004206 <TIM_ITRx_SetConfig>
      break;
 8003fc2:	e01c      	b.n	8003ffe <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	f000 f8b9 	bl	8004148 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2140      	movs	r1, #64	@ 0x40
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 f912 	bl	8004206 <TIM_ITRx_SetConfig>
      break;
 8003fe2:	e00c      	b.n	8003ffe <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4619      	mov	r1, r3
 8003fee:	4610      	mov	r0, r2
 8003ff0:	f000 f909 	bl	8004206 <TIM_ITRx_SetConfig>
      break;
 8003ff4:	e003      	b.n	8003ffe <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	73fb      	strb	r3, [r7, #15]
      break;
 8003ffa:	e000      	b.n	8003ffe <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003ffc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800400e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a30      	ldr	r2, [pc, #192]	@ (800413c <TIM_Base_SetConfig+0xd4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d003      	beq.n	8004088 <TIM_Base_SetConfig+0x20>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004086:	d108      	bne.n	800409a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800408e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a27      	ldr	r2, [pc, #156]	@ (800413c <TIM_Base_SetConfig+0xd4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d00b      	beq.n	80040ba <TIM_Base_SetConfig+0x52>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040a8:	d007      	beq.n	80040ba <TIM_Base_SetConfig+0x52>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a24      	ldr	r2, [pc, #144]	@ (8004140 <TIM_Base_SetConfig+0xd8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d003      	beq.n	80040ba <TIM_Base_SetConfig+0x52>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a23      	ldr	r2, [pc, #140]	@ (8004144 <TIM_Base_SetConfig+0xdc>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d108      	bne.n	80040cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a12      	ldr	r2, [pc, #72]	@ (800413c <TIM_Base_SetConfig+0xd4>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d007      	beq.n	8004108 <TIM_Base_SetConfig+0xa0>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a11      	ldr	r2, [pc, #68]	@ (8004140 <TIM_Base_SetConfig+0xd8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d003      	beq.n	8004108 <TIM_Base_SetConfig+0xa0>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a10      	ldr	r2, [pc, #64]	@ (8004144 <TIM_Base_SetConfig+0xdc>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d103      	bne.n	8004110 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b01      	cmp	r3, #1
 8004120:	d105      	bne.n	800412e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f023 0201 	bic.w	r2, r3, #1
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	611a      	str	r2, [r3, #16]
  }
}
 800412e:	bf00      	nop
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	40012c00 	.word	0x40012c00
 8004140:	40014000 	.word	0x40014000
 8004144:	40014400 	.word	0x40014400

08004148 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	f023 0201 	bic.w	r2, r3, #1
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	4313      	orrs	r3, r2
 800417c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f023 030a 	bic.w	r3, r3, #10
 8004184:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	4313      	orrs	r3, r2
 800418c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	621a      	str	r2, [r3, #32]
}
 800419a:	bf00      	nop
 800419c:	371c      	adds	r7, #28
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b087      	sub	sp, #28
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	f023 0210 	bic.w	r2, r3, #16
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	031b      	lsls	r3, r3, #12
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4313      	orrs	r3, r2
 80041da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	621a      	str	r2, [r3, #32]
}
 80041fa:	bf00      	nop
 80041fc:	371c      	adds	r7, #28
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004206:	b480      	push	{r7}
 8004208:	b085      	sub	sp, #20
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800421c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	f043 0307 	orr.w	r3, r3, #7
 8004228:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	609a      	str	r2, [r3, #8]
}
 8004230:	bf00      	nop
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004256:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	021a      	lsls	r2, r3, #8
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	431a      	orrs	r2, r3
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4313      	orrs	r3, r2
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	609a      	str	r2, [r3, #8]
}
 8004270:	bf00      	nop
 8004272:	371c      	adds	r7, #28
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004290:	2302      	movs	r3, #2
 8004292:	e04f      	b.n	8004334 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a21      	ldr	r2, [pc, #132]	@ (8004340 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d108      	bne.n	80042d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80042c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a14      	ldr	r2, [pc, #80]	@ (8004340 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d009      	beq.n	8004308 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042fc:	d004      	beq.n	8004308 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a10      	ldr	r2, [pc, #64]	@ (8004344 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d10c      	bne.n	8004322 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800430e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	4313      	orrs	r3, r2
 8004318:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	40012c00 	.word	0x40012c00
 8004344:	40014000 	.word	0x40014000

08004348 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e040      	b.n	8004418 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800439a:	2b00      	cmp	r3, #0
 800439c:	d106      	bne.n	80043ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7fc ffb4 	bl	8001314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2224      	movs	r2, #36	@ 0x24
 80043b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0201 	bic.w	r2, r2, #1
 80043c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d002      	beq.n	80043d0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 fade 	bl	800498c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f8af 	bl	8004534 <UART_SetConfig>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d101      	bne.n	80043e0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e01b      	b.n	8004418 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0201 	orr.w	r2, r2, #1
 800440e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 fb5d 	bl	8004ad0 <UART_CheckIdleState>
 8004416:	4603      	mov	r3, r0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b08a      	sub	sp, #40	@ 0x28
 8004424:	af02      	add	r7, sp, #8
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	603b      	str	r3, [r7, #0]
 800442c:	4613      	mov	r3, r2
 800442e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004434:	2b20      	cmp	r3, #32
 8004436:	d177      	bne.n	8004528 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <HAL_UART_Transmit+0x24>
 800443e:	88fb      	ldrh	r3, [r7, #6]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e070      	b.n	800452a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2221      	movs	r2, #33	@ 0x21
 8004454:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004456:	f7fd f86d 	bl	8001534 <HAL_GetTick>
 800445a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	88fa      	ldrh	r2, [r7, #6]
 8004460:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	88fa      	ldrh	r2, [r7, #6]
 8004468:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004474:	d108      	bne.n	8004488 <HAL_UART_Transmit+0x68>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d104      	bne.n	8004488 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800447e:	2300      	movs	r3, #0
 8004480:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	61bb      	str	r3, [r7, #24]
 8004486:	e003      	b.n	8004490 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800448c:	2300      	movs	r3, #0
 800448e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004490:	e02f      	b.n	80044f2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2200      	movs	r2, #0
 800449a:	2180      	movs	r1, #128	@ 0x80
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 fbbf 	bl	8004c20 <UART_WaitOnFlagUntilTimeout>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d004      	beq.n	80044b2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2220      	movs	r2, #32
 80044ac:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e03b      	b.n	800452a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10b      	bne.n	80044d0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	881a      	ldrh	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044c4:	b292      	uxth	r2, r2
 80044c6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	3302      	adds	r3, #2
 80044cc:	61bb      	str	r3, [r7, #24]
 80044ce:	e007      	b.n	80044e0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	781a      	ldrb	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	3301      	adds	r3, #1
 80044de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1c9      	bne.n	8004492 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2200      	movs	r2, #0
 8004506:	2140      	movs	r1, #64	@ 0x40
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 fb89 	bl	8004c20 <UART_WaitOnFlagUntilTimeout>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d004      	beq.n	800451e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2220      	movs	r2, #32
 8004518:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e005      	b.n	800452a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2220      	movs	r2, #32
 8004522:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004524:	2300      	movs	r3, #0
 8004526:	e000      	b.n	800452a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004528:	2302      	movs	r3, #2
  }
}
 800452a:	4618      	mov	r0, r3
 800452c:	3720      	adds	r7, #32
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
	...

08004534 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004538:	b08a      	sub	sp, #40	@ 0x28
 800453a:	af00      	add	r7, sp, #0
 800453c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	431a      	orrs	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	431a      	orrs	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	4313      	orrs	r3, r2
 800455a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4bb4      	ldr	r3, [pc, #720]	@ (8004834 <UART_SetConfig+0x300>)
 8004564:	4013      	ands	r3, r2
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	6812      	ldr	r2, [r2, #0]
 800456a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800456c:	430b      	orrs	r3, r1
 800456e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4aa9      	ldr	r2, [pc, #676]	@ (8004838 <UART_SetConfig+0x304>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d004      	beq.n	80045a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800459c:	4313      	orrs	r3, r2
 800459e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045b0:	430a      	orrs	r2, r1
 80045b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4aa0      	ldr	r2, [pc, #640]	@ (800483c <UART_SetConfig+0x308>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d126      	bne.n	800460c <UART_SetConfig+0xd8>
 80045be:	4ba0      	ldr	r3, [pc, #640]	@ (8004840 <UART_SetConfig+0x30c>)
 80045c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c4:	f003 0303 	and.w	r3, r3, #3
 80045c8:	2b03      	cmp	r3, #3
 80045ca:	d81b      	bhi.n	8004604 <UART_SetConfig+0xd0>
 80045cc:	a201      	add	r2, pc, #4	@ (adr r2, 80045d4 <UART_SetConfig+0xa0>)
 80045ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d2:	bf00      	nop
 80045d4:	080045e5 	.word	0x080045e5
 80045d8:	080045f5 	.word	0x080045f5
 80045dc:	080045ed 	.word	0x080045ed
 80045e0:	080045fd 	.word	0x080045fd
 80045e4:	2301      	movs	r3, #1
 80045e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ea:	e080      	b.n	80046ee <UART_SetConfig+0x1ba>
 80045ec:	2302      	movs	r3, #2
 80045ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045f2:	e07c      	b.n	80046ee <UART_SetConfig+0x1ba>
 80045f4:	2304      	movs	r3, #4
 80045f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045fa:	e078      	b.n	80046ee <UART_SetConfig+0x1ba>
 80045fc:	2308      	movs	r3, #8
 80045fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004602:	e074      	b.n	80046ee <UART_SetConfig+0x1ba>
 8004604:	2310      	movs	r3, #16
 8004606:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800460a:	e070      	b.n	80046ee <UART_SetConfig+0x1ba>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a8c      	ldr	r2, [pc, #560]	@ (8004844 <UART_SetConfig+0x310>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d138      	bne.n	8004688 <UART_SetConfig+0x154>
 8004616:	4b8a      	ldr	r3, [pc, #552]	@ (8004840 <UART_SetConfig+0x30c>)
 8004618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461c:	f003 030c 	and.w	r3, r3, #12
 8004620:	2b0c      	cmp	r3, #12
 8004622:	d82d      	bhi.n	8004680 <UART_SetConfig+0x14c>
 8004624:	a201      	add	r2, pc, #4	@ (adr r2, 800462c <UART_SetConfig+0xf8>)
 8004626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462a:	bf00      	nop
 800462c:	08004661 	.word	0x08004661
 8004630:	08004681 	.word	0x08004681
 8004634:	08004681 	.word	0x08004681
 8004638:	08004681 	.word	0x08004681
 800463c:	08004671 	.word	0x08004671
 8004640:	08004681 	.word	0x08004681
 8004644:	08004681 	.word	0x08004681
 8004648:	08004681 	.word	0x08004681
 800464c:	08004669 	.word	0x08004669
 8004650:	08004681 	.word	0x08004681
 8004654:	08004681 	.word	0x08004681
 8004658:	08004681 	.word	0x08004681
 800465c:	08004679 	.word	0x08004679
 8004660:	2300      	movs	r3, #0
 8004662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004666:	e042      	b.n	80046ee <UART_SetConfig+0x1ba>
 8004668:	2302      	movs	r3, #2
 800466a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800466e:	e03e      	b.n	80046ee <UART_SetConfig+0x1ba>
 8004670:	2304      	movs	r3, #4
 8004672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004676:	e03a      	b.n	80046ee <UART_SetConfig+0x1ba>
 8004678:	2308      	movs	r3, #8
 800467a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800467e:	e036      	b.n	80046ee <UART_SetConfig+0x1ba>
 8004680:	2310      	movs	r3, #16
 8004682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004686:	e032      	b.n	80046ee <UART_SetConfig+0x1ba>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a6a      	ldr	r2, [pc, #424]	@ (8004838 <UART_SetConfig+0x304>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d12a      	bne.n	80046e8 <UART_SetConfig+0x1b4>
 8004692:	4b6b      	ldr	r3, [pc, #428]	@ (8004840 <UART_SetConfig+0x30c>)
 8004694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004698:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800469c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046a0:	d01a      	beq.n	80046d8 <UART_SetConfig+0x1a4>
 80046a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046a6:	d81b      	bhi.n	80046e0 <UART_SetConfig+0x1ac>
 80046a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046ac:	d00c      	beq.n	80046c8 <UART_SetConfig+0x194>
 80046ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046b2:	d815      	bhi.n	80046e0 <UART_SetConfig+0x1ac>
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <UART_SetConfig+0x18c>
 80046b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046bc:	d008      	beq.n	80046d0 <UART_SetConfig+0x19c>
 80046be:	e00f      	b.n	80046e0 <UART_SetConfig+0x1ac>
 80046c0:	2300      	movs	r3, #0
 80046c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046c6:	e012      	b.n	80046ee <UART_SetConfig+0x1ba>
 80046c8:	2302      	movs	r3, #2
 80046ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ce:	e00e      	b.n	80046ee <UART_SetConfig+0x1ba>
 80046d0:	2304      	movs	r3, #4
 80046d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046d6:	e00a      	b.n	80046ee <UART_SetConfig+0x1ba>
 80046d8:	2308      	movs	r3, #8
 80046da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046de:	e006      	b.n	80046ee <UART_SetConfig+0x1ba>
 80046e0:	2310      	movs	r3, #16
 80046e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046e6:	e002      	b.n	80046ee <UART_SetConfig+0x1ba>
 80046e8:	2310      	movs	r3, #16
 80046ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a51      	ldr	r2, [pc, #324]	@ (8004838 <UART_SetConfig+0x304>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d17a      	bne.n	80047ee <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d824      	bhi.n	800474a <UART_SetConfig+0x216>
 8004700:	a201      	add	r2, pc, #4	@ (adr r2, 8004708 <UART_SetConfig+0x1d4>)
 8004702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004706:	bf00      	nop
 8004708:	0800472d 	.word	0x0800472d
 800470c:	0800474b 	.word	0x0800474b
 8004710:	08004735 	.word	0x08004735
 8004714:	0800474b 	.word	0x0800474b
 8004718:	0800473b 	.word	0x0800473b
 800471c:	0800474b 	.word	0x0800474b
 8004720:	0800474b 	.word	0x0800474b
 8004724:	0800474b 	.word	0x0800474b
 8004728:	08004743 	.word	0x08004743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800472c:	f7fe fe74 	bl	8003418 <HAL_RCC_GetPCLK1Freq>
 8004730:	61f8      	str	r0, [r7, #28]
        break;
 8004732:	e010      	b.n	8004756 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004734:	4b44      	ldr	r3, [pc, #272]	@ (8004848 <UART_SetConfig+0x314>)
 8004736:	61fb      	str	r3, [r7, #28]
        break;
 8004738:	e00d      	b.n	8004756 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800473a:	f7fe fdd5 	bl	80032e8 <HAL_RCC_GetSysClockFreq>
 800473e:	61f8      	str	r0, [r7, #28]
        break;
 8004740:	e009      	b.n	8004756 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004742:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004746:	61fb      	str	r3, [r7, #28]
        break;
 8004748:	e005      	b.n	8004756 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004754:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 8107 	beq.w	800496c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	4613      	mov	r3, r2
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	4413      	add	r3, r2
 8004768:	69fa      	ldr	r2, [r7, #28]
 800476a:	429a      	cmp	r2, r3
 800476c:	d305      	bcc.n	800477a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004774:	69fa      	ldr	r2, [r7, #28]
 8004776:	429a      	cmp	r2, r3
 8004778:	d903      	bls.n	8004782 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004780:	e0f4      	b.n	800496c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	2200      	movs	r2, #0
 8004786:	461c      	mov	r4, r3
 8004788:	4615      	mov	r5, r2
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	f04f 0300 	mov.w	r3, #0
 8004792:	022b      	lsls	r3, r5, #8
 8004794:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004798:	0222      	lsls	r2, r4, #8
 800479a:	68f9      	ldr	r1, [r7, #12]
 800479c:	6849      	ldr	r1, [r1, #4]
 800479e:	0849      	lsrs	r1, r1, #1
 80047a0:	2000      	movs	r0, #0
 80047a2:	4688      	mov	r8, r1
 80047a4:	4681      	mov	r9, r0
 80047a6:	eb12 0a08 	adds.w	sl, r2, r8
 80047aa:	eb43 0b09 	adc.w	fp, r3, r9
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	603b      	str	r3, [r7, #0]
 80047b6:	607a      	str	r2, [r7, #4]
 80047b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047bc:	4650      	mov	r0, sl
 80047be:	4659      	mov	r1, fp
 80047c0:	f7fb fd56 	bl	8000270 <__aeabi_uldivmod>
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4613      	mov	r3, r2
 80047ca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047d2:	d308      	bcc.n	80047e6 <UART_SetConfig+0x2b2>
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047da:	d204      	bcs.n	80047e6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	60da      	str	r2, [r3, #12]
 80047e4:	e0c2      	b.n	800496c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80047ec:	e0be      	b.n	800496c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047f6:	d16a      	bne.n	80048ce <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80047f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d834      	bhi.n	800486a <UART_SetConfig+0x336>
 8004800:	a201      	add	r2, pc, #4	@ (adr r2, 8004808 <UART_SetConfig+0x2d4>)
 8004802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004806:	bf00      	nop
 8004808:	0800482d 	.word	0x0800482d
 800480c:	0800484d 	.word	0x0800484d
 8004810:	08004855 	.word	0x08004855
 8004814:	0800486b 	.word	0x0800486b
 8004818:	0800485b 	.word	0x0800485b
 800481c:	0800486b 	.word	0x0800486b
 8004820:	0800486b 	.word	0x0800486b
 8004824:	0800486b 	.word	0x0800486b
 8004828:	08004863 	.word	0x08004863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800482c:	f7fe fdf4 	bl	8003418 <HAL_RCC_GetPCLK1Freq>
 8004830:	61f8      	str	r0, [r7, #28]
        break;
 8004832:	e020      	b.n	8004876 <UART_SetConfig+0x342>
 8004834:	efff69f3 	.word	0xefff69f3
 8004838:	40008000 	.word	0x40008000
 800483c:	40013800 	.word	0x40013800
 8004840:	40021000 	.word	0x40021000
 8004844:	40004400 	.word	0x40004400
 8004848:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800484c:	f7fe fdfa 	bl	8003444 <HAL_RCC_GetPCLK2Freq>
 8004850:	61f8      	str	r0, [r7, #28]
        break;
 8004852:	e010      	b.n	8004876 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004854:	4b4c      	ldr	r3, [pc, #304]	@ (8004988 <UART_SetConfig+0x454>)
 8004856:	61fb      	str	r3, [r7, #28]
        break;
 8004858:	e00d      	b.n	8004876 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800485a:	f7fe fd45 	bl	80032e8 <HAL_RCC_GetSysClockFreq>
 800485e:	61f8      	str	r0, [r7, #28]
        break;
 8004860:	e009      	b.n	8004876 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004862:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004866:	61fb      	str	r3, [r7, #28]
        break;
 8004868:	e005      	b.n	8004876 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004874:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d077      	beq.n	800496c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	005a      	lsls	r2, r3, #1
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	085b      	lsrs	r3, r3, #1
 8004886:	441a      	add	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004890:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	2b0f      	cmp	r3, #15
 8004896:	d916      	bls.n	80048c6 <UART_SetConfig+0x392>
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800489e:	d212      	bcs.n	80048c6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	f023 030f 	bic.w	r3, r3, #15
 80048a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	085b      	lsrs	r3, r3, #1
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	8afb      	ldrh	r3, [r7, #22]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	8afa      	ldrh	r2, [r7, #22]
 80048c2:	60da      	str	r2, [r3, #12]
 80048c4:	e052      	b.n	800496c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80048cc:	e04e      	b.n	800496c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d827      	bhi.n	8004926 <UART_SetConfig+0x3f2>
 80048d6:	a201      	add	r2, pc, #4	@ (adr r2, 80048dc <UART_SetConfig+0x3a8>)
 80048d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048dc:	08004901 	.word	0x08004901
 80048e0:	08004909 	.word	0x08004909
 80048e4:	08004911 	.word	0x08004911
 80048e8:	08004927 	.word	0x08004927
 80048ec:	08004917 	.word	0x08004917
 80048f0:	08004927 	.word	0x08004927
 80048f4:	08004927 	.word	0x08004927
 80048f8:	08004927 	.word	0x08004927
 80048fc:	0800491f 	.word	0x0800491f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004900:	f7fe fd8a 	bl	8003418 <HAL_RCC_GetPCLK1Freq>
 8004904:	61f8      	str	r0, [r7, #28]
        break;
 8004906:	e014      	b.n	8004932 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004908:	f7fe fd9c 	bl	8003444 <HAL_RCC_GetPCLK2Freq>
 800490c:	61f8      	str	r0, [r7, #28]
        break;
 800490e:	e010      	b.n	8004932 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004910:	4b1d      	ldr	r3, [pc, #116]	@ (8004988 <UART_SetConfig+0x454>)
 8004912:	61fb      	str	r3, [r7, #28]
        break;
 8004914:	e00d      	b.n	8004932 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004916:	f7fe fce7 	bl	80032e8 <HAL_RCC_GetSysClockFreq>
 800491a:	61f8      	str	r0, [r7, #28]
        break;
 800491c:	e009      	b.n	8004932 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800491e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004922:	61fb      	str	r3, [r7, #28]
        break;
 8004924:	e005      	b.n	8004932 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004930:	bf00      	nop
    }

    if (pclk != 0U)
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d019      	beq.n	800496c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	085a      	lsrs	r2, r3, #1
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	441a      	add	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	fbb2 f3f3 	udiv	r3, r2, r3
 800494a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	2b0f      	cmp	r3, #15
 8004950:	d909      	bls.n	8004966 <UART_SetConfig+0x432>
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004958:	d205      	bcs.n	8004966 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	60da      	str	r2, [r3, #12]
 8004964:	e002      	b.n	800496c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004978:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800497c:	4618      	mov	r0, r3
 800497e:	3728      	adds	r7, #40	@ 0x28
 8004980:	46bd      	mov	sp, r7
 8004982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004986:	bf00      	nop
 8004988:	00f42400 	.word	0x00f42400

0800498c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004998:	f003 0308 	and.w	r3, r3, #8
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00a      	beq.n	80049b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fe:	f003 0304 	and.w	r3, r3, #4
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a20:	f003 0310 	and.w	r3, r3, #16
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a42:	f003 0320 	and.w	r3, r3, #32
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01a      	beq.n	8004aa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a8a:	d10a      	bne.n	8004aa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	605a      	str	r2, [r3, #4]
  }
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b098      	sub	sp, #96	@ 0x60
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ae0:	f7fc fd28 	bl	8001534 <HAL_GetTick>
 8004ae4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d12e      	bne.n	8004b52 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004af4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004afc:	2200      	movs	r2, #0
 8004afe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f88c 	bl	8004c20 <UART_WaitOnFlagUntilTimeout>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d021      	beq.n	8004b52 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b16:	e853 3f00 	ldrex	r3, [r3]
 8004b1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b22:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b2e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b34:	e841 2300 	strex	r3, r2, [r1]
 8004b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1e6      	bne.n	8004b0e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2220      	movs	r2, #32
 8004b44:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e062      	b.n	8004c18 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d149      	bne.n	8004bf4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f856 	bl	8004c20 <UART_WaitOnFlagUntilTimeout>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d03c      	beq.n	8004bf4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b82:	e853 3f00 	ldrex	r3, [r3]
 8004b86:	623b      	str	r3, [r7, #32]
   return(result);
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	461a      	mov	r2, r3
 8004b96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b98:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ba0:	e841 2300 	strex	r3, r2, [r1]
 8004ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1e6      	bne.n	8004b7a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3308      	adds	r3, #8
 8004bb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	e853 3f00 	ldrex	r3, [r3]
 8004bba:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 0301 	bic.w	r3, r3, #1
 8004bc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3308      	adds	r3, #8
 8004bca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bcc:	61fa      	str	r2, [r7, #28]
 8004bce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd0:	69b9      	ldr	r1, [r7, #24]
 8004bd2:	69fa      	ldr	r2, [r7, #28]
 8004bd4:	e841 2300 	strex	r3, r2, [r1]
 8004bd8:	617b      	str	r3, [r7, #20]
   return(result);
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1e5      	bne.n	8004bac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e011      	b.n	8004c18 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3758      	adds	r7, #88	@ 0x58
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	603b      	str	r3, [r7, #0]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c30:	e04f      	b.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c38:	d04b      	beq.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c3a:	f7fc fc7b 	bl	8001534 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d302      	bcc.n	8004c50 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e04e      	b.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0304 	and.w	r3, r3, #4
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d037      	beq.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2b80      	cmp	r3, #128	@ 0x80
 8004c66:	d034      	beq.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b40      	cmp	r3, #64	@ 0x40
 8004c6c:	d031      	beq.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d110      	bne.n	8004c9e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2208      	movs	r2, #8
 8004c82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 f838 	bl	8004cfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2208      	movs	r2, #8
 8004c8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e029      	b.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ca8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cac:	d111      	bne.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004cb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 f81e 	bl	8004cfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e00f      	b.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	69da      	ldr	r2, [r3, #28]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	bf0c      	ite	eq
 8004ce2:	2301      	moveq	r3, #1
 8004ce4:	2300      	movne	r3, #0
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	461a      	mov	r2, r3
 8004cea:	79fb      	ldrb	r3, [r7, #7]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d0a0      	beq.n	8004c32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b095      	sub	sp, #84	@ 0x54
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d0a:	e853 3f00 	ldrex	r3, [r3]
 8004d0e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d20:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d22:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d28:	e841 2300 	strex	r3, r2, [r1]
 8004d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1e6      	bne.n	8004d02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	3308      	adds	r3, #8
 8004d3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	e853 3f00 	ldrex	r3, [r3]
 8004d42:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	f023 0301 	bic.w	r3, r3, #1
 8004d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3308      	adds	r3, #8
 8004d52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d5c:	e841 2300 	strex	r3, r2, [r1]
 8004d60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1e5      	bne.n	8004d34 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d118      	bne.n	8004da2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	e853 3f00 	ldrex	r3, [r3]
 8004d7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f023 0310 	bic.w	r3, r3, #16
 8004d84:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d8e:	61bb      	str	r3, [r7, #24]
 8004d90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d92:	6979      	ldr	r1, [r7, #20]
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	e841 2300 	strex	r3, r2, [r1]
 8004d9a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1e6      	bne.n	8004d70 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2220      	movs	r2, #32
 8004da6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004db6:	bf00      	nop
 8004db8:	3754      	adds	r7, #84	@ 0x54
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
	...

08004dc4 <siprintf>:
 8004dc4:	b40e      	push	{r1, r2, r3}
 8004dc6:	b500      	push	{lr}
 8004dc8:	b09c      	sub	sp, #112	@ 0x70
 8004dca:	ab1d      	add	r3, sp, #116	@ 0x74
 8004dcc:	9002      	str	r0, [sp, #8]
 8004dce:	9006      	str	r0, [sp, #24]
 8004dd0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004dd4:	4809      	ldr	r0, [pc, #36]	@ (8004dfc <siprintf+0x38>)
 8004dd6:	9107      	str	r1, [sp, #28]
 8004dd8:	9104      	str	r1, [sp, #16]
 8004dda:	4909      	ldr	r1, [pc, #36]	@ (8004e00 <siprintf+0x3c>)
 8004ddc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004de0:	9105      	str	r1, [sp, #20]
 8004de2:	6800      	ldr	r0, [r0, #0]
 8004de4:	9301      	str	r3, [sp, #4]
 8004de6:	a902      	add	r1, sp, #8
 8004de8:	f000 f994 	bl	8005114 <_svfiprintf_r>
 8004dec:	9b02      	ldr	r3, [sp, #8]
 8004dee:	2200      	movs	r2, #0
 8004df0:	701a      	strb	r2, [r3, #0]
 8004df2:	b01c      	add	sp, #112	@ 0x70
 8004df4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004df8:	b003      	add	sp, #12
 8004dfa:	4770      	bx	lr
 8004dfc:	20000010 	.word	0x20000010
 8004e00:	ffff0208 	.word	0xffff0208

08004e04 <memset>:
 8004e04:	4402      	add	r2, r0
 8004e06:	4603      	mov	r3, r0
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d100      	bne.n	8004e0e <memset+0xa>
 8004e0c:	4770      	bx	lr
 8004e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e12:	e7f9      	b.n	8004e08 <memset+0x4>

08004e14 <__errno>:
 8004e14:	4b01      	ldr	r3, [pc, #4]	@ (8004e1c <__errno+0x8>)
 8004e16:	6818      	ldr	r0, [r3, #0]
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	20000010 	.word	0x20000010

08004e20 <__libc_init_array>:
 8004e20:	b570      	push	{r4, r5, r6, lr}
 8004e22:	4d0d      	ldr	r5, [pc, #52]	@ (8004e58 <__libc_init_array+0x38>)
 8004e24:	4c0d      	ldr	r4, [pc, #52]	@ (8004e5c <__libc_init_array+0x3c>)
 8004e26:	1b64      	subs	r4, r4, r5
 8004e28:	10a4      	asrs	r4, r4, #2
 8004e2a:	2600      	movs	r6, #0
 8004e2c:	42a6      	cmp	r6, r4
 8004e2e:	d109      	bne.n	8004e44 <__libc_init_array+0x24>
 8004e30:	4d0b      	ldr	r5, [pc, #44]	@ (8004e60 <__libc_init_array+0x40>)
 8004e32:	4c0c      	ldr	r4, [pc, #48]	@ (8004e64 <__libc_init_array+0x44>)
 8004e34:	f000 fc66 	bl	8005704 <_init>
 8004e38:	1b64      	subs	r4, r4, r5
 8004e3a:	10a4      	asrs	r4, r4, #2
 8004e3c:	2600      	movs	r6, #0
 8004e3e:	42a6      	cmp	r6, r4
 8004e40:	d105      	bne.n	8004e4e <__libc_init_array+0x2e>
 8004e42:	bd70      	pop	{r4, r5, r6, pc}
 8004e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e48:	4798      	blx	r3
 8004e4a:	3601      	adds	r6, #1
 8004e4c:	e7ee      	b.n	8004e2c <__libc_init_array+0xc>
 8004e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e52:	4798      	blx	r3
 8004e54:	3601      	adds	r6, #1
 8004e56:	e7f2      	b.n	8004e3e <__libc_init_array+0x1e>
 8004e58:	08005ad8 	.word	0x08005ad8
 8004e5c:	08005ad8 	.word	0x08005ad8
 8004e60:	08005ad8 	.word	0x08005ad8
 8004e64:	08005adc 	.word	0x08005adc

08004e68 <__retarget_lock_acquire_recursive>:
 8004e68:	4770      	bx	lr

08004e6a <__retarget_lock_release_recursive>:
 8004e6a:	4770      	bx	lr

08004e6c <_free_r>:
 8004e6c:	b538      	push	{r3, r4, r5, lr}
 8004e6e:	4605      	mov	r5, r0
 8004e70:	2900      	cmp	r1, #0
 8004e72:	d041      	beq.n	8004ef8 <_free_r+0x8c>
 8004e74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e78:	1f0c      	subs	r4, r1, #4
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	bfb8      	it	lt
 8004e7e:	18e4      	addlt	r4, r4, r3
 8004e80:	f000 f8e0 	bl	8005044 <__malloc_lock>
 8004e84:	4a1d      	ldr	r2, [pc, #116]	@ (8004efc <_free_r+0x90>)
 8004e86:	6813      	ldr	r3, [r2, #0]
 8004e88:	b933      	cbnz	r3, 8004e98 <_free_r+0x2c>
 8004e8a:	6063      	str	r3, [r4, #4]
 8004e8c:	6014      	str	r4, [r2, #0]
 8004e8e:	4628      	mov	r0, r5
 8004e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e94:	f000 b8dc 	b.w	8005050 <__malloc_unlock>
 8004e98:	42a3      	cmp	r3, r4
 8004e9a:	d908      	bls.n	8004eae <_free_r+0x42>
 8004e9c:	6820      	ldr	r0, [r4, #0]
 8004e9e:	1821      	adds	r1, r4, r0
 8004ea0:	428b      	cmp	r3, r1
 8004ea2:	bf01      	itttt	eq
 8004ea4:	6819      	ldreq	r1, [r3, #0]
 8004ea6:	685b      	ldreq	r3, [r3, #4]
 8004ea8:	1809      	addeq	r1, r1, r0
 8004eaa:	6021      	streq	r1, [r4, #0]
 8004eac:	e7ed      	b.n	8004e8a <_free_r+0x1e>
 8004eae:	461a      	mov	r2, r3
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	b10b      	cbz	r3, 8004eb8 <_free_r+0x4c>
 8004eb4:	42a3      	cmp	r3, r4
 8004eb6:	d9fa      	bls.n	8004eae <_free_r+0x42>
 8004eb8:	6811      	ldr	r1, [r2, #0]
 8004eba:	1850      	adds	r0, r2, r1
 8004ebc:	42a0      	cmp	r0, r4
 8004ebe:	d10b      	bne.n	8004ed8 <_free_r+0x6c>
 8004ec0:	6820      	ldr	r0, [r4, #0]
 8004ec2:	4401      	add	r1, r0
 8004ec4:	1850      	adds	r0, r2, r1
 8004ec6:	4283      	cmp	r3, r0
 8004ec8:	6011      	str	r1, [r2, #0]
 8004eca:	d1e0      	bne.n	8004e8e <_free_r+0x22>
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	6053      	str	r3, [r2, #4]
 8004ed2:	4408      	add	r0, r1
 8004ed4:	6010      	str	r0, [r2, #0]
 8004ed6:	e7da      	b.n	8004e8e <_free_r+0x22>
 8004ed8:	d902      	bls.n	8004ee0 <_free_r+0x74>
 8004eda:	230c      	movs	r3, #12
 8004edc:	602b      	str	r3, [r5, #0]
 8004ede:	e7d6      	b.n	8004e8e <_free_r+0x22>
 8004ee0:	6820      	ldr	r0, [r4, #0]
 8004ee2:	1821      	adds	r1, r4, r0
 8004ee4:	428b      	cmp	r3, r1
 8004ee6:	bf04      	itt	eq
 8004ee8:	6819      	ldreq	r1, [r3, #0]
 8004eea:	685b      	ldreq	r3, [r3, #4]
 8004eec:	6063      	str	r3, [r4, #4]
 8004eee:	bf04      	itt	eq
 8004ef0:	1809      	addeq	r1, r1, r0
 8004ef2:	6021      	streq	r1, [r4, #0]
 8004ef4:	6054      	str	r4, [r2, #4]
 8004ef6:	e7ca      	b.n	8004e8e <_free_r+0x22>
 8004ef8:	bd38      	pop	{r3, r4, r5, pc}
 8004efa:	bf00      	nop
 8004efc:	20000364 	.word	0x20000364

08004f00 <sbrk_aligned>:
 8004f00:	b570      	push	{r4, r5, r6, lr}
 8004f02:	4e0f      	ldr	r6, [pc, #60]	@ (8004f40 <sbrk_aligned+0x40>)
 8004f04:	460c      	mov	r4, r1
 8004f06:	6831      	ldr	r1, [r6, #0]
 8004f08:	4605      	mov	r5, r0
 8004f0a:	b911      	cbnz	r1, 8004f12 <sbrk_aligned+0x12>
 8004f0c:	f000 fba6 	bl	800565c <_sbrk_r>
 8004f10:	6030      	str	r0, [r6, #0]
 8004f12:	4621      	mov	r1, r4
 8004f14:	4628      	mov	r0, r5
 8004f16:	f000 fba1 	bl	800565c <_sbrk_r>
 8004f1a:	1c43      	adds	r3, r0, #1
 8004f1c:	d103      	bne.n	8004f26 <sbrk_aligned+0x26>
 8004f1e:	f04f 34ff 	mov.w	r4, #4294967295
 8004f22:	4620      	mov	r0, r4
 8004f24:	bd70      	pop	{r4, r5, r6, pc}
 8004f26:	1cc4      	adds	r4, r0, #3
 8004f28:	f024 0403 	bic.w	r4, r4, #3
 8004f2c:	42a0      	cmp	r0, r4
 8004f2e:	d0f8      	beq.n	8004f22 <sbrk_aligned+0x22>
 8004f30:	1a21      	subs	r1, r4, r0
 8004f32:	4628      	mov	r0, r5
 8004f34:	f000 fb92 	bl	800565c <_sbrk_r>
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d1f2      	bne.n	8004f22 <sbrk_aligned+0x22>
 8004f3c:	e7ef      	b.n	8004f1e <sbrk_aligned+0x1e>
 8004f3e:	bf00      	nop
 8004f40:	20000360 	.word	0x20000360

08004f44 <_malloc_r>:
 8004f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f48:	1ccd      	adds	r5, r1, #3
 8004f4a:	f025 0503 	bic.w	r5, r5, #3
 8004f4e:	3508      	adds	r5, #8
 8004f50:	2d0c      	cmp	r5, #12
 8004f52:	bf38      	it	cc
 8004f54:	250c      	movcc	r5, #12
 8004f56:	2d00      	cmp	r5, #0
 8004f58:	4606      	mov	r6, r0
 8004f5a:	db01      	blt.n	8004f60 <_malloc_r+0x1c>
 8004f5c:	42a9      	cmp	r1, r5
 8004f5e:	d904      	bls.n	8004f6a <_malloc_r+0x26>
 8004f60:	230c      	movs	r3, #12
 8004f62:	6033      	str	r3, [r6, #0]
 8004f64:	2000      	movs	r0, #0
 8004f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005040 <_malloc_r+0xfc>
 8004f6e:	f000 f869 	bl	8005044 <__malloc_lock>
 8004f72:	f8d8 3000 	ldr.w	r3, [r8]
 8004f76:	461c      	mov	r4, r3
 8004f78:	bb44      	cbnz	r4, 8004fcc <_malloc_r+0x88>
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	f7ff ffbf 	bl	8004f00 <sbrk_aligned>
 8004f82:	1c43      	adds	r3, r0, #1
 8004f84:	4604      	mov	r4, r0
 8004f86:	d158      	bne.n	800503a <_malloc_r+0xf6>
 8004f88:	f8d8 4000 	ldr.w	r4, [r8]
 8004f8c:	4627      	mov	r7, r4
 8004f8e:	2f00      	cmp	r7, #0
 8004f90:	d143      	bne.n	800501a <_malloc_r+0xd6>
 8004f92:	2c00      	cmp	r4, #0
 8004f94:	d04b      	beq.n	800502e <_malloc_r+0xea>
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	4639      	mov	r1, r7
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	eb04 0903 	add.w	r9, r4, r3
 8004fa0:	f000 fb5c 	bl	800565c <_sbrk_r>
 8004fa4:	4581      	cmp	r9, r0
 8004fa6:	d142      	bne.n	800502e <_malloc_r+0xea>
 8004fa8:	6821      	ldr	r1, [r4, #0]
 8004faa:	1a6d      	subs	r5, r5, r1
 8004fac:	4629      	mov	r1, r5
 8004fae:	4630      	mov	r0, r6
 8004fb0:	f7ff ffa6 	bl	8004f00 <sbrk_aligned>
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	d03a      	beq.n	800502e <_malloc_r+0xea>
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	442b      	add	r3, r5
 8004fbc:	6023      	str	r3, [r4, #0]
 8004fbe:	f8d8 3000 	ldr.w	r3, [r8]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	bb62      	cbnz	r2, 8005020 <_malloc_r+0xdc>
 8004fc6:	f8c8 7000 	str.w	r7, [r8]
 8004fca:	e00f      	b.n	8004fec <_malloc_r+0xa8>
 8004fcc:	6822      	ldr	r2, [r4, #0]
 8004fce:	1b52      	subs	r2, r2, r5
 8004fd0:	d420      	bmi.n	8005014 <_malloc_r+0xd0>
 8004fd2:	2a0b      	cmp	r2, #11
 8004fd4:	d917      	bls.n	8005006 <_malloc_r+0xc2>
 8004fd6:	1961      	adds	r1, r4, r5
 8004fd8:	42a3      	cmp	r3, r4
 8004fda:	6025      	str	r5, [r4, #0]
 8004fdc:	bf18      	it	ne
 8004fde:	6059      	strne	r1, [r3, #4]
 8004fe0:	6863      	ldr	r3, [r4, #4]
 8004fe2:	bf08      	it	eq
 8004fe4:	f8c8 1000 	streq.w	r1, [r8]
 8004fe8:	5162      	str	r2, [r4, r5]
 8004fea:	604b      	str	r3, [r1, #4]
 8004fec:	4630      	mov	r0, r6
 8004fee:	f000 f82f 	bl	8005050 <__malloc_unlock>
 8004ff2:	f104 000b 	add.w	r0, r4, #11
 8004ff6:	1d23      	adds	r3, r4, #4
 8004ff8:	f020 0007 	bic.w	r0, r0, #7
 8004ffc:	1ac2      	subs	r2, r0, r3
 8004ffe:	bf1c      	itt	ne
 8005000:	1a1b      	subne	r3, r3, r0
 8005002:	50a3      	strne	r3, [r4, r2]
 8005004:	e7af      	b.n	8004f66 <_malloc_r+0x22>
 8005006:	6862      	ldr	r2, [r4, #4]
 8005008:	42a3      	cmp	r3, r4
 800500a:	bf0c      	ite	eq
 800500c:	f8c8 2000 	streq.w	r2, [r8]
 8005010:	605a      	strne	r2, [r3, #4]
 8005012:	e7eb      	b.n	8004fec <_malloc_r+0xa8>
 8005014:	4623      	mov	r3, r4
 8005016:	6864      	ldr	r4, [r4, #4]
 8005018:	e7ae      	b.n	8004f78 <_malloc_r+0x34>
 800501a:	463c      	mov	r4, r7
 800501c:	687f      	ldr	r7, [r7, #4]
 800501e:	e7b6      	b.n	8004f8e <_malloc_r+0x4a>
 8005020:	461a      	mov	r2, r3
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	42a3      	cmp	r3, r4
 8005026:	d1fb      	bne.n	8005020 <_malloc_r+0xdc>
 8005028:	2300      	movs	r3, #0
 800502a:	6053      	str	r3, [r2, #4]
 800502c:	e7de      	b.n	8004fec <_malloc_r+0xa8>
 800502e:	230c      	movs	r3, #12
 8005030:	6033      	str	r3, [r6, #0]
 8005032:	4630      	mov	r0, r6
 8005034:	f000 f80c 	bl	8005050 <__malloc_unlock>
 8005038:	e794      	b.n	8004f64 <_malloc_r+0x20>
 800503a:	6005      	str	r5, [r0, #0]
 800503c:	e7d6      	b.n	8004fec <_malloc_r+0xa8>
 800503e:	bf00      	nop
 8005040:	20000364 	.word	0x20000364

08005044 <__malloc_lock>:
 8005044:	4801      	ldr	r0, [pc, #4]	@ (800504c <__malloc_lock+0x8>)
 8005046:	f7ff bf0f 	b.w	8004e68 <__retarget_lock_acquire_recursive>
 800504a:	bf00      	nop
 800504c:	2000035c 	.word	0x2000035c

08005050 <__malloc_unlock>:
 8005050:	4801      	ldr	r0, [pc, #4]	@ (8005058 <__malloc_unlock+0x8>)
 8005052:	f7ff bf0a 	b.w	8004e6a <__retarget_lock_release_recursive>
 8005056:	bf00      	nop
 8005058:	2000035c 	.word	0x2000035c

0800505c <__ssputs_r>:
 800505c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005060:	688e      	ldr	r6, [r1, #8]
 8005062:	461f      	mov	r7, r3
 8005064:	42be      	cmp	r6, r7
 8005066:	680b      	ldr	r3, [r1, #0]
 8005068:	4682      	mov	sl, r0
 800506a:	460c      	mov	r4, r1
 800506c:	4690      	mov	r8, r2
 800506e:	d82d      	bhi.n	80050cc <__ssputs_r+0x70>
 8005070:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005074:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005078:	d026      	beq.n	80050c8 <__ssputs_r+0x6c>
 800507a:	6965      	ldr	r5, [r4, #20]
 800507c:	6909      	ldr	r1, [r1, #16]
 800507e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005082:	eba3 0901 	sub.w	r9, r3, r1
 8005086:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800508a:	1c7b      	adds	r3, r7, #1
 800508c:	444b      	add	r3, r9
 800508e:	106d      	asrs	r5, r5, #1
 8005090:	429d      	cmp	r5, r3
 8005092:	bf38      	it	cc
 8005094:	461d      	movcc	r5, r3
 8005096:	0553      	lsls	r3, r2, #21
 8005098:	d527      	bpl.n	80050ea <__ssputs_r+0x8e>
 800509a:	4629      	mov	r1, r5
 800509c:	f7ff ff52 	bl	8004f44 <_malloc_r>
 80050a0:	4606      	mov	r6, r0
 80050a2:	b360      	cbz	r0, 80050fe <__ssputs_r+0xa2>
 80050a4:	6921      	ldr	r1, [r4, #16]
 80050a6:	464a      	mov	r2, r9
 80050a8:	f000 fae8 	bl	800567c <memcpy>
 80050ac:	89a3      	ldrh	r3, [r4, #12]
 80050ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80050b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050b6:	81a3      	strh	r3, [r4, #12]
 80050b8:	6126      	str	r6, [r4, #16]
 80050ba:	6165      	str	r5, [r4, #20]
 80050bc:	444e      	add	r6, r9
 80050be:	eba5 0509 	sub.w	r5, r5, r9
 80050c2:	6026      	str	r6, [r4, #0]
 80050c4:	60a5      	str	r5, [r4, #8]
 80050c6:	463e      	mov	r6, r7
 80050c8:	42be      	cmp	r6, r7
 80050ca:	d900      	bls.n	80050ce <__ssputs_r+0x72>
 80050cc:	463e      	mov	r6, r7
 80050ce:	6820      	ldr	r0, [r4, #0]
 80050d0:	4632      	mov	r2, r6
 80050d2:	4641      	mov	r1, r8
 80050d4:	f000 faa8 	bl	8005628 <memmove>
 80050d8:	68a3      	ldr	r3, [r4, #8]
 80050da:	1b9b      	subs	r3, r3, r6
 80050dc:	60a3      	str	r3, [r4, #8]
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	4433      	add	r3, r6
 80050e2:	6023      	str	r3, [r4, #0]
 80050e4:	2000      	movs	r0, #0
 80050e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ea:	462a      	mov	r2, r5
 80050ec:	f000 fad4 	bl	8005698 <_realloc_r>
 80050f0:	4606      	mov	r6, r0
 80050f2:	2800      	cmp	r0, #0
 80050f4:	d1e0      	bne.n	80050b8 <__ssputs_r+0x5c>
 80050f6:	6921      	ldr	r1, [r4, #16]
 80050f8:	4650      	mov	r0, sl
 80050fa:	f7ff feb7 	bl	8004e6c <_free_r>
 80050fe:	230c      	movs	r3, #12
 8005100:	f8ca 3000 	str.w	r3, [sl]
 8005104:	89a3      	ldrh	r3, [r4, #12]
 8005106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800510a:	81a3      	strh	r3, [r4, #12]
 800510c:	f04f 30ff 	mov.w	r0, #4294967295
 8005110:	e7e9      	b.n	80050e6 <__ssputs_r+0x8a>
	...

08005114 <_svfiprintf_r>:
 8005114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005118:	4698      	mov	r8, r3
 800511a:	898b      	ldrh	r3, [r1, #12]
 800511c:	061b      	lsls	r3, r3, #24
 800511e:	b09d      	sub	sp, #116	@ 0x74
 8005120:	4607      	mov	r7, r0
 8005122:	460d      	mov	r5, r1
 8005124:	4614      	mov	r4, r2
 8005126:	d510      	bpl.n	800514a <_svfiprintf_r+0x36>
 8005128:	690b      	ldr	r3, [r1, #16]
 800512a:	b973      	cbnz	r3, 800514a <_svfiprintf_r+0x36>
 800512c:	2140      	movs	r1, #64	@ 0x40
 800512e:	f7ff ff09 	bl	8004f44 <_malloc_r>
 8005132:	6028      	str	r0, [r5, #0]
 8005134:	6128      	str	r0, [r5, #16]
 8005136:	b930      	cbnz	r0, 8005146 <_svfiprintf_r+0x32>
 8005138:	230c      	movs	r3, #12
 800513a:	603b      	str	r3, [r7, #0]
 800513c:	f04f 30ff 	mov.w	r0, #4294967295
 8005140:	b01d      	add	sp, #116	@ 0x74
 8005142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005146:	2340      	movs	r3, #64	@ 0x40
 8005148:	616b      	str	r3, [r5, #20]
 800514a:	2300      	movs	r3, #0
 800514c:	9309      	str	r3, [sp, #36]	@ 0x24
 800514e:	2320      	movs	r3, #32
 8005150:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005154:	f8cd 800c 	str.w	r8, [sp, #12]
 8005158:	2330      	movs	r3, #48	@ 0x30
 800515a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80052f8 <_svfiprintf_r+0x1e4>
 800515e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005162:	f04f 0901 	mov.w	r9, #1
 8005166:	4623      	mov	r3, r4
 8005168:	469a      	mov	sl, r3
 800516a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800516e:	b10a      	cbz	r2, 8005174 <_svfiprintf_r+0x60>
 8005170:	2a25      	cmp	r2, #37	@ 0x25
 8005172:	d1f9      	bne.n	8005168 <_svfiprintf_r+0x54>
 8005174:	ebba 0b04 	subs.w	fp, sl, r4
 8005178:	d00b      	beq.n	8005192 <_svfiprintf_r+0x7e>
 800517a:	465b      	mov	r3, fp
 800517c:	4622      	mov	r2, r4
 800517e:	4629      	mov	r1, r5
 8005180:	4638      	mov	r0, r7
 8005182:	f7ff ff6b 	bl	800505c <__ssputs_r>
 8005186:	3001      	adds	r0, #1
 8005188:	f000 80a7 	beq.w	80052da <_svfiprintf_r+0x1c6>
 800518c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800518e:	445a      	add	r2, fp
 8005190:	9209      	str	r2, [sp, #36]	@ 0x24
 8005192:	f89a 3000 	ldrb.w	r3, [sl]
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 809f 	beq.w	80052da <_svfiprintf_r+0x1c6>
 800519c:	2300      	movs	r3, #0
 800519e:	f04f 32ff 	mov.w	r2, #4294967295
 80051a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051a6:	f10a 0a01 	add.w	sl, sl, #1
 80051aa:	9304      	str	r3, [sp, #16]
 80051ac:	9307      	str	r3, [sp, #28]
 80051ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80051b4:	4654      	mov	r4, sl
 80051b6:	2205      	movs	r2, #5
 80051b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051bc:	484e      	ldr	r0, [pc, #312]	@ (80052f8 <_svfiprintf_r+0x1e4>)
 80051be:	f7fb f807 	bl	80001d0 <memchr>
 80051c2:	9a04      	ldr	r2, [sp, #16]
 80051c4:	b9d8      	cbnz	r0, 80051fe <_svfiprintf_r+0xea>
 80051c6:	06d0      	lsls	r0, r2, #27
 80051c8:	bf44      	itt	mi
 80051ca:	2320      	movmi	r3, #32
 80051cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051d0:	0711      	lsls	r1, r2, #28
 80051d2:	bf44      	itt	mi
 80051d4:	232b      	movmi	r3, #43	@ 0x2b
 80051d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051da:	f89a 3000 	ldrb.w	r3, [sl]
 80051de:	2b2a      	cmp	r3, #42	@ 0x2a
 80051e0:	d015      	beq.n	800520e <_svfiprintf_r+0xfa>
 80051e2:	9a07      	ldr	r2, [sp, #28]
 80051e4:	4654      	mov	r4, sl
 80051e6:	2000      	movs	r0, #0
 80051e8:	f04f 0c0a 	mov.w	ip, #10
 80051ec:	4621      	mov	r1, r4
 80051ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051f2:	3b30      	subs	r3, #48	@ 0x30
 80051f4:	2b09      	cmp	r3, #9
 80051f6:	d94b      	bls.n	8005290 <_svfiprintf_r+0x17c>
 80051f8:	b1b0      	cbz	r0, 8005228 <_svfiprintf_r+0x114>
 80051fa:	9207      	str	r2, [sp, #28]
 80051fc:	e014      	b.n	8005228 <_svfiprintf_r+0x114>
 80051fe:	eba0 0308 	sub.w	r3, r0, r8
 8005202:	fa09 f303 	lsl.w	r3, r9, r3
 8005206:	4313      	orrs	r3, r2
 8005208:	9304      	str	r3, [sp, #16]
 800520a:	46a2      	mov	sl, r4
 800520c:	e7d2      	b.n	80051b4 <_svfiprintf_r+0xa0>
 800520e:	9b03      	ldr	r3, [sp, #12]
 8005210:	1d19      	adds	r1, r3, #4
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	9103      	str	r1, [sp, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	bfbb      	ittet	lt
 800521a:	425b      	neglt	r3, r3
 800521c:	f042 0202 	orrlt.w	r2, r2, #2
 8005220:	9307      	strge	r3, [sp, #28]
 8005222:	9307      	strlt	r3, [sp, #28]
 8005224:	bfb8      	it	lt
 8005226:	9204      	strlt	r2, [sp, #16]
 8005228:	7823      	ldrb	r3, [r4, #0]
 800522a:	2b2e      	cmp	r3, #46	@ 0x2e
 800522c:	d10a      	bne.n	8005244 <_svfiprintf_r+0x130>
 800522e:	7863      	ldrb	r3, [r4, #1]
 8005230:	2b2a      	cmp	r3, #42	@ 0x2a
 8005232:	d132      	bne.n	800529a <_svfiprintf_r+0x186>
 8005234:	9b03      	ldr	r3, [sp, #12]
 8005236:	1d1a      	adds	r2, r3, #4
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	9203      	str	r2, [sp, #12]
 800523c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005240:	3402      	adds	r4, #2
 8005242:	9305      	str	r3, [sp, #20]
 8005244:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005308 <_svfiprintf_r+0x1f4>
 8005248:	7821      	ldrb	r1, [r4, #0]
 800524a:	2203      	movs	r2, #3
 800524c:	4650      	mov	r0, sl
 800524e:	f7fa ffbf 	bl	80001d0 <memchr>
 8005252:	b138      	cbz	r0, 8005264 <_svfiprintf_r+0x150>
 8005254:	9b04      	ldr	r3, [sp, #16]
 8005256:	eba0 000a 	sub.w	r0, r0, sl
 800525a:	2240      	movs	r2, #64	@ 0x40
 800525c:	4082      	lsls	r2, r0
 800525e:	4313      	orrs	r3, r2
 8005260:	3401      	adds	r4, #1
 8005262:	9304      	str	r3, [sp, #16]
 8005264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005268:	4824      	ldr	r0, [pc, #144]	@ (80052fc <_svfiprintf_r+0x1e8>)
 800526a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800526e:	2206      	movs	r2, #6
 8005270:	f7fa ffae 	bl	80001d0 <memchr>
 8005274:	2800      	cmp	r0, #0
 8005276:	d036      	beq.n	80052e6 <_svfiprintf_r+0x1d2>
 8005278:	4b21      	ldr	r3, [pc, #132]	@ (8005300 <_svfiprintf_r+0x1ec>)
 800527a:	bb1b      	cbnz	r3, 80052c4 <_svfiprintf_r+0x1b0>
 800527c:	9b03      	ldr	r3, [sp, #12]
 800527e:	3307      	adds	r3, #7
 8005280:	f023 0307 	bic.w	r3, r3, #7
 8005284:	3308      	adds	r3, #8
 8005286:	9303      	str	r3, [sp, #12]
 8005288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800528a:	4433      	add	r3, r6
 800528c:	9309      	str	r3, [sp, #36]	@ 0x24
 800528e:	e76a      	b.n	8005166 <_svfiprintf_r+0x52>
 8005290:	fb0c 3202 	mla	r2, ip, r2, r3
 8005294:	460c      	mov	r4, r1
 8005296:	2001      	movs	r0, #1
 8005298:	e7a8      	b.n	80051ec <_svfiprintf_r+0xd8>
 800529a:	2300      	movs	r3, #0
 800529c:	3401      	adds	r4, #1
 800529e:	9305      	str	r3, [sp, #20]
 80052a0:	4619      	mov	r1, r3
 80052a2:	f04f 0c0a 	mov.w	ip, #10
 80052a6:	4620      	mov	r0, r4
 80052a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052ac:	3a30      	subs	r2, #48	@ 0x30
 80052ae:	2a09      	cmp	r2, #9
 80052b0:	d903      	bls.n	80052ba <_svfiprintf_r+0x1a6>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0c6      	beq.n	8005244 <_svfiprintf_r+0x130>
 80052b6:	9105      	str	r1, [sp, #20]
 80052b8:	e7c4      	b.n	8005244 <_svfiprintf_r+0x130>
 80052ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80052be:	4604      	mov	r4, r0
 80052c0:	2301      	movs	r3, #1
 80052c2:	e7f0      	b.n	80052a6 <_svfiprintf_r+0x192>
 80052c4:	ab03      	add	r3, sp, #12
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	462a      	mov	r2, r5
 80052ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005304 <_svfiprintf_r+0x1f0>)
 80052cc:	a904      	add	r1, sp, #16
 80052ce:	4638      	mov	r0, r7
 80052d0:	f3af 8000 	nop.w
 80052d4:	1c42      	adds	r2, r0, #1
 80052d6:	4606      	mov	r6, r0
 80052d8:	d1d6      	bne.n	8005288 <_svfiprintf_r+0x174>
 80052da:	89ab      	ldrh	r3, [r5, #12]
 80052dc:	065b      	lsls	r3, r3, #25
 80052de:	f53f af2d 	bmi.w	800513c <_svfiprintf_r+0x28>
 80052e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052e4:	e72c      	b.n	8005140 <_svfiprintf_r+0x2c>
 80052e6:	ab03      	add	r3, sp, #12
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	462a      	mov	r2, r5
 80052ec:	4b05      	ldr	r3, [pc, #20]	@ (8005304 <_svfiprintf_r+0x1f0>)
 80052ee:	a904      	add	r1, sp, #16
 80052f0:	4638      	mov	r0, r7
 80052f2:	f000 f879 	bl	80053e8 <_printf_i>
 80052f6:	e7ed      	b.n	80052d4 <_svfiprintf_r+0x1c0>
 80052f8:	08005a9c 	.word	0x08005a9c
 80052fc:	08005aa6 	.word	0x08005aa6
 8005300:	00000000 	.word	0x00000000
 8005304:	0800505d 	.word	0x0800505d
 8005308:	08005aa2 	.word	0x08005aa2

0800530c <_printf_common>:
 800530c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005310:	4616      	mov	r6, r2
 8005312:	4698      	mov	r8, r3
 8005314:	688a      	ldr	r2, [r1, #8]
 8005316:	690b      	ldr	r3, [r1, #16]
 8005318:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800531c:	4293      	cmp	r3, r2
 800531e:	bfb8      	it	lt
 8005320:	4613      	movlt	r3, r2
 8005322:	6033      	str	r3, [r6, #0]
 8005324:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005328:	4607      	mov	r7, r0
 800532a:	460c      	mov	r4, r1
 800532c:	b10a      	cbz	r2, 8005332 <_printf_common+0x26>
 800532e:	3301      	adds	r3, #1
 8005330:	6033      	str	r3, [r6, #0]
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	0699      	lsls	r1, r3, #26
 8005336:	bf42      	ittt	mi
 8005338:	6833      	ldrmi	r3, [r6, #0]
 800533a:	3302      	addmi	r3, #2
 800533c:	6033      	strmi	r3, [r6, #0]
 800533e:	6825      	ldr	r5, [r4, #0]
 8005340:	f015 0506 	ands.w	r5, r5, #6
 8005344:	d106      	bne.n	8005354 <_printf_common+0x48>
 8005346:	f104 0a19 	add.w	sl, r4, #25
 800534a:	68e3      	ldr	r3, [r4, #12]
 800534c:	6832      	ldr	r2, [r6, #0]
 800534e:	1a9b      	subs	r3, r3, r2
 8005350:	42ab      	cmp	r3, r5
 8005352:	dc26      	bgt.n	80053a2 <_printf_common+0x96>
 8005354:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005358:	6822      	ldr	r2, [r4, #0]
 800535a:	3b00      	subs	r3, #0
 800535c:	bf18      	it	ne
 800535e:	2301      	movne	r3, #1
 8005360:	0692      	lsls	r2, r2, #26
 8005362:	d42b      	bmi.n	80053bc <_printf_common+0xb0>
 8005364:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005368:	4641      	mov	r1, r8
 800536a:	4638      	mov	r0, r7
 800536c:	47c8      	blx	r9
 800536e:	3001      	adds	r0, #1
 8005370:	d01e      	beq.n	80053b0 <_printf_common+0xa4>
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	6922      	ldr	r2, [r4, #16]
 8005376:	f003 0306 	and.w	r3, r3, #6
 800537a:	2b04      	cmp	r3, #4
 800537c:	bf02      	ittt	eq
 800537e:	68e5      	ldreq	r5, [r4, #12]
 8005380:	6833      	ldreq	r3, [r6, #0]
 8005382:	1aed      	subeq	r5, r5, r3
 8005384:	68a3      	ldr	r3, [r4, #8]
 8005386:	bf0c      	ite	eq
 8005388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800538c:	2500      	movne	r5, #0
 800538e:	4293      	cmp	r3, r2
 8005390:	bfc4      	itt	gt
 8005392:	1a9b      	subgt	r3, r3, r2
 8005394:	18ed      	addgt	r5, r5, r3
 8005396:	2600      	movs	r6, #0
 8005398:	341a      	adds	r4, #26
 800539a:	42b5      	cmp	r5, r6
 800539c:	d11a      	bne.n	80053d4 <_printf_common+0xc8>
 800539e:	2000      	movs	r0, #0
 80053a0:	e008      	b.n	80053b4 <_printf_common+0xa8>
 80053a2:	2301      	movs	r3, #1
 80053a4:	4652      	mov	r2, sl
 80053a6:	4641      	mov	r1, r8
 80053a8:	4638      	mov	r0, r7
 80053aa:	47c8      	blx	r9
 80053ac:	3001      	adds	r0, #1
 80053ae:	d103      	bne.n	80053b8 <_printf_common+0xac>
 80053b0:	f04f 30ff 	mov.w	r0, #4294967295
 80053b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053b8:	3501      	adds	r5, #1
 80053ba:	e7c6      	b.n	800534a <_printf_common+0x3e>
 80053bc:	18e1      	adds	r1, r4, r3
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	2030      	movs	r0, #48	@ 0x30
 80053c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053c6:	4422      	add	r2, r4
 80053c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80053cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80053d0:	3302      	adds	r3, #2
 80053d2:	e7c7      	b.n	8005364 <_printf_common+0x58>
 80053d4:	2301      	movs	r3, #1
 80053d6:	4622      	mov	r2, r4
 80053d8:	4641      	mov	r1, r8
 80053da:	4638      	mov	r0, r7
 80053dc:	47c8      	blx	r9
 80053de:	3001      	adds	r0, #1
 80053e0:	d0e6      	beq.n	80053b0 <_printf_common+0xa4>
 80053e2:	3601      	adds	r6, #1
 80053e4:	e7d9      	b.n	800539a <_printf_common+0x8e>
	...

080053e8 <_printf_i>:
 80053e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053ec:	7e0f      	ldrb	r7, [r1, #24]
 80053ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80053f0:	2f78      	cmp	r7, #120	@ 0x78
 80053f2:	4691      	mov	r9, r2
 80053f4:	4680      	mov	r8, r0
 80053f6:	460c      	mov	r4, r1
 80053f8:	469a      	mov	sl, r3
 80053fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80053fe:	d807      	bhi.n	8005410 <_printf_i+0x28>
 8005400:	2f62      	cmp	r7, #98	@ 0x62
 8005402:	d80a      	bhi.n	800541a <_printf_i+0x32>
 8005404:	2f00      	cmp	r7, #0
 8005406:	f000 80d2 	beq.w	80055ae <_printf_i+0x1c6>
 800540a:	2f58      	cmp	r7, #88	@ 0x58
 800540c:	f000 80b9 	beq.w	8005582 <_printf_i+0x19a>
 8005410:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005414:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005418:	e03a      	b.n	8005490 <_printf_i+0xa8>
 800541a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800541e:	2b15      	cmp	r3, #21
 8005420:	d8f6      	bhi.n	8005410 <_printf_i+0x28>
 8005422:	a101      	add	r1, pc, #4	@ (adr r1, 8005428 <_printf_i+0x40>)
 8005424:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005428:	08005481 	.word	0x08005481
 800542c:	08005495 	.word	0x08005495
 8005430:	08005411 	.word	0x08005411
 8005434:	08005411 	.word	0x08005411
 8005438:	08005411 	.word	0x08005411
 800543c:	08005411 	.word	0x08005411
 8005440:	08005495 	.word	0x08005495
 8005444:	08005411 	.word	0x08005411
 8005448:	08005411 	.word	0x08005411
 800544c:	08005411 	.word	0x08005411
 8005450:	08005411 	.word	0x08005411
 8005454:	08005595 	.word	0x08005595
 8005458:	080054bf 	.word	0x080054bf
 800545c:	0800554f 	.word	0x0800554f
 8005460:	08005411 	.word	0x08005411
 8005464:	08005411 	.word	0x08005411
 8005468:	080055b7 	.word	0x080055b7
 800546c:	08005411 	.word	0x08005411
 8005470:	080054bf 	.word	0x080054bf
 8005474:	08005411 	.word	0x08005411
 8005478:	08005411 	.word	0x08005411
 800547c:	08005557 	.word	0x08005557
 8005480:	6833      	ldr	r3, [r6, #0]
 8005482:	1d1a      	adds	r2, r3, #4
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6032      	str	r2, [r6, #0]
 8005488:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800548c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005490:	2301      	movs	r3, #1
 8005492:	e09d      	b.n	80055d0 <_printf_i+0x1e8>
 8005494:	6833      	ldr	r3, [r6, #0]
 8005496:	6820      	ldr	r0, [r4, #0]
 8005498:	1d19      	adds	r1, r3, #4
 800549a:	6031      	str	r1, [r6, #0]
 800549c:	0606      	lsls	r6, r0, #24
 800549e:	d501      	bpl.n	80054a4 <_printf_i+0xbc>
 80054a0:	681d      	ldr	r5, [r3, #0]
 80054a2:	e003      	b.n	80054ac <_printf_i+0xc4>
 80054a4:	0645      	lsls	r5, r0, #25
 80054a6:	d5fb      	bpl.n	80054a0 <_printf_i+0xb8>
 80054a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054ac:	2d00      	cmp	r5, #0
 80054ae:	da03      	bge.n	80054b8 <_printf_i+0xd0>
 80054b0:	232d      	movs	r3, #45	@ 0x2d
 80054b2:	426d      	negs	r5, r5
 80054b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054b8:	4859      	ldr	r0, [pc, #356]	@ (8005620 <_printf_i+0x238>)
 80054ba:	230a      	movs	r3, #10
 80054bc:	e011      	b.n	80054e2 <_printf_i+0xfa>
 80054be:	6821      	ldr	r1, [r4, #0]
 80054c0:	6833      	ldr	r3, [r6, #0]
 80054c2:	0608      	lsls	r0, r1, #24
 80054c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80054c8:	d402      	bmi.n	80054d0 <_printf_i+0xe8>
 80054ca:	0649      	lsls	r1, r1, #25
 80054cc:	bf48      	it	mi
 80054ce:	b2ad      	uxthmi	r5, r5
 80054d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80054d2:	4853      	ldr	r0, [pc, #332]	@ (8005620 <_printf_i+0x238>)
 80054d4:	6033      	str	r3, [r6, #0]
 80054d6:	bf14      	ite	ne
 80054d8:	230a      	movne	r3, #10
 80054da:	2308      	moveq	r3, #8
 80054dc:	2100      	movs	r1, #0
 80054de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054e2:	6866      	ldr	r6, [r4, #4]
 80054e4:	60a6      	str	r6, [r4, #8]
 80054e6:	2e00      	cmp	r6, #0
 80054e8:	bfa2      	ittt	ge
 80054ea:	6821      	ldrge	r1, [r4, #0]
 80054ec:	f021 0104 	bicge.w	r1, r1, #4
 80054f0:	6021      	strge	r1, [r4, #0]
 80054f2:	b90d      	cbnz	r5, 80054f8 <_printf_i+0x110>
 80054f4:	2e00      	cmp	r6, #0
 80054f6:	d04b      	beq.n	8005590 <_printf_i+0x1a8>
 80054f8:	4616      	mov	r6, r2
 80054fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80054fe:	fb03 5711 	mls	r7, r3, r1, r5
 8005502:	5dc7      	ldrb	r7, [r0, r7]
 8005504:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005508:	462f      	mov	r7, r5
 800550a:	42bb      	cmp	r3, r7
 800550c:	460d      	mov	r5, r1
 800550e:	d9f4      	bls.n	80054fa <_printf_i+0x112>
 8005510:	2b08      	cmp	r3, #8
 8005512:	d10b      	bne.n	800552c <_printf_i+0x144>
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	07df      	lsls	r7, r3, #31
 8005518:	d508      	bpl.n	800552c <_printf_i+0x144>
 800551a:	6923      	ldr	r3, [r4, #16]
 800551c:	6861      	ldr	r1, [r4, #4]
 800551e:	4299      	cmp	r1, r3
 8005520:	bfde      	ittt	le
 8005522:	2330      	movle	r3, #48	@ 0x30
 8005524:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005528:	f106 36ff 	addle.w	r6, r6, #4294967295
 800552c:	1b92      	subs	r2, r2, r6
 800552e:	6122      	str	r2, [r4, #16]
 8005530:	f8cd a000 	str.w	sl, [sp]
 8005534:	464b      	mov	r3, r9
 8005536:	aa03      	add	r2, sp, #12
 8005538:	4621      	mov	r1, r4
 800553a:	4640      	mov	r0, r8
 800553c:	f7ff fee6 	bl	800530c <_printf_common>
 8005540:	3001      	adds	r0, #1
 8005542:	d14a      	bne.n	80055da <_printf_i+0x1f2>
 8005544:	f04f 30ff 	mov.w	r0, #4294967295
 8005548:	b004      	add	sp, #16
 800554a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	f043 0320 	orr.w	r3, r3, #32
 8005554:	6023      	str	r3, [r4, #0]
 8005556:	4833      	ldr	r0, [pc, #204]	@ (8005624 <_printf_i+0x23c>)
 8005558:	2778      	movs	r7, #120	@ 0x78
 800555a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	6831      	ldr	r1, [r6, #0]
 8005562:	061f      	lsls	r7, r3, #24
 8005564:	f851 5b04 	ldr.w	r5, [r1], #4
 8005568:	d402      	bmi.n	8005570 <_printf_i+0x188>
 800556a:	065f      	lsls	r7, r3, #25
 800556c:	bf48      	it	mi
 800556e:	b2ad      	uxthmi	r5, r5
 8005570:	6031      	str	r1, [r6, #0]
 8005572:	07d9      	lsls	r1, r3, #31
 8005574:	bf44      	itt	mi
 8005576:	f043 0320 	orrmi.w	r3, r3, #32
 800557a:	6023      	strmi	r3, [r4, #0]
 800557c:	b11d      	cbz	r5, 8005586 <_printf_i+0x19e>
 800557e:	2310      	movs	r3, #16
 8005580:	e7ac      	b.n	80054dc <_printf_i+0xf4>
 8005582:	4827      	ldr	r0, [pc, #156]	@ (8005620 <_printf_i+0x238>)
 8005584:	e7e9      	b.n	800555a <_printf_i+0x172>
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	f023 0320 	bic.w	r3, r3, #32
 800558c:	6023      	str	r3, [r4, #0]
 800558e:	e7f6      	b.n	800557e <_printf_i+0x196>
 8005590:	4616      	mov	r6, r2
 8005592:	e7bd      	b.n	8005510 <_printf_i+0x128>
 8005594:	6833      	ldr	r3, [r6, #0]
 8005596:	6825      	ldr	r5, [r4, #0]
 8005598:	6961      	ldr	r1, [r4, #20]
 800559a:	1d18      	adds	r0, r3, #4
 800559c:	6030      	str	r0, [r6, #0]
 800559e:	062e      	lsls	r6, r5, #24
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	d501      	bpl.n	80055a8 <_printf_i+0x1c0>
 80055a4:	6019      	str	r1, [r3, #0]
 80055a6:	e002      	b.n	80055ae <_printf_i+0x1c6>
 80055a8:	0668      	lsls	r0, r5, #25
 80055aa:	d5fb      	bpl.n	80055a4 <_printf_i+0x1bc>
 80055ac:	8019      	strh	r1, [r3, #0]
 80055ae:	2300      	movs	r3, #0
 80055b0:	6123      	str	r3, [r4, #16]
 80055b2:	4616      	mov	r6, r2
 80055b4:	e7bc      	b.n	8005530 <_printf_i+0x148>
 80055b6:	6833      	ldr	r3, [r6, #0]
 80055b8:	1d1a      	adds	r2, r3, #4
 80055ba:	6032      	str	r2, [r6, #0]
 80055bc:	681e      	ldr	r6, [r3, #0]
 80055be:	6862      	ldr	r2, [r4, #4]
 80055c0:	2100      	movs	r1, #0
 80055c2:	4630      	mov	r0, r6
 80055c4:	f7fa fe04 	bl	80001d0 <memchr>
 80055c8:	b108      	cbz	r0, 80055ce <_printf_i+0x1e6>
 80055ca:	1b80      	subs	r0, r0, r6
 80055cc:	6060      	str	r0, [r4, #4]
 80055ce:	6863      	ldr	r3, [r4, #4]
 80055d0:	6123      	str	r3, [r4, #16]
 80055d2:	2300      	movs	r3, #0
 80055d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055d8:	e7aa      	b.n	8005530 <_printf_i+0x148>
 80055da:	6923      	ldr	r3, [r4, #16]
 80055dc:	4632      	mov	r2, r6
 80055de:	4649      	mov	r1, r9
 80055e0:	4640      	mov	r0, r8
 80055e2:	47d0      	blx	sl
 80055e4:	3001      	adds	r0, #1
 80055e6:	d0ad      	beq.n	8005544 <_printf_i+0x15c>
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	079b      	lsls	r3, r3, #30
 80055ec:	d413      	bmi.n	8005616 <_printf_i+0x22e>
 80055ee:	68e0      	ldr	r0, [r4, #12]
 80055f0:	9b03      	ldr	r3, [sp, #12]
 80055f2:	4298      	cmp	r0, r3
 80055f4:	bfb8      	it	lt
 80055f6:	4618      	movlt	r0, r3
 80055f8:	e7a6      	b.n	8005548 <_printf_i+0x160>
 80055fa:	2301      	movs	r3, #1
 80055fc:	4632      	mov	r2, r6
 80055fe:	4649      	mov	r1, r9
 8005600:	4640      	mov	r0, r8
 8005602:	47d0      	blx	sl
 8005604:	3001      	adds	r0, #1
 8005606:	d09d      	beq.n	8005544 <_printf_i+0x15c>
 8005608:	3501      	adds	r5, #1
 800560a:	68e3      	ldr	r3, [r4, #12]
 800560c:	9903      	ldr	r1, [sp, #12]
 800560e:	1a5b      	subs	r3, r3, r1
 8005610:	42ab      	cmp	r3, r5
 8005612:	dcf2      	bgt.n	80055fa <_printf_i+0x212>
 8005614:	e7eb      	b.n	80055ee <_printf_i+0x206>
 8005616:	2500      	movs	r5, #0
 8005618:	f104 0619 	add.w	r6, r4, #25
 800561c:	e7f5      	b.n	800560a <_printf_i+0x222>
 800561e:	bf00      	nop
 8005620:	08005aad 	.word	0x08005aad
 8005624:	08005abe 	.word	0x08005abe

08005628 <memmove>:
 8005628:	4288      	cmp	r0, r1
 800562a:	b510      	push	{r4, lr}
 800562c:	eb01 0402 	add.w	r4, r1, r2
 8005630:	d902      	bls.n	8005638 <memmove+0x10>
 8005632:	4284      	cmp	r4, r0
 8005634:	4623      	mov	r3, r4
 8005636:	d807      	bhi.n	8005648 <memmove+0x20>
 8005638:	1e43      	subs	r3, r0, #1
 800563a:	42a1      	cmp	r1, r4
 800563c:	d008      	beq.n	8005650 <memmove+0x28>
 800563e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005642:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005646:	e7f8      	b.n	800563a <memmove+0x12>
 8005648:	4402      	add	r2, r0
 800564a:	4601      	mov	r1, r0
 800564c:	428a      	cmp	r2, r1
 800564e:	d100      	bne.n	8005652 <memmove+0x2a>
 8005650:	bd10      	pop	{r4, pc}
 8005652:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005656:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800565a:	e7f7      	b.n	800564c <memmove+0x24>

0800565c <_sbrk_r>:
 800565c:	b538      	push	{r3, r4, r5, lr}
 800565e:	4d06      	ldr	r5, [pc, #24]	@ (8005678 <_sbrk_r+0x1c>)
 8005660:	2300      	movs	r3, #0
 8005662:	4604      	mov	r4, r0
 8005664:	4608      	mov	r0, r1
 8005666:	602b      	str	r3, [r5, #0]
 8005668:	f7fb fd16 	bl	8001098 <_sbrk>
 800566c:	1c43      	adds	r3, r0, #1
 800566e:	d102      	bne.n	8005676 <_sbrk_r+0x1a>
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	b103      	cbz	r3, 8005676 <_sbrk_r+0x1a>
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	bd38      	pop	{r3, r4, r5, pc}
 8005678:	20000358 	.word	0x20000358

0800567c <memcpy>:
 800567c:	440a      	add	r2, r1
 800567e:	4291      	cmp	r1, r2
 8005680:	f100 33ff 	add.w	r3, r0, #4294967295
 8005684:	d100      	bne.n	8005688 <memcpy+0xc>
 8005686:	4770      	bx	lr
 8005688:	b510      	push	{r4, lr}
 800568a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800568e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005692:	4291      	cmp	r1, r2
 8005694:	d1f9      	bne.n	800568a <memcpy+0xe>
 8005696:	bd10      	pop	{r4, pc}

08005698 <_realloc_r>:
 8005698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800569c:	4680      	mov	r8, r0
 800569e:	4615      	mov	r5, r2
 80056a0:	460c      	mov	r4, r1
 80056a2:	b921      	cbnz	r1, 80056ae <_realloc_r+0x16>
 80056a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056a8:	4611      	mov	r1, r2
 80056aa:	f7ff bc4b 	b.w	8004f44 <_malloc_r>
 80056ae:	b92a      	cbnz	r2, 80056bc <_realloc_r+0x24>
 80056b0:	f7ff fbdc 	bl	8004e6c <_free_r>
 80056b4:	2400      	movs	r4, #0
 80056b6:	4620      	mov	r0, r4
 80056b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056bc:	f000 f81a 	bl	80056f4 <_malloc_usable_size_r>
 80056c0:	4285      	cmp	r5, r0
 80056c2:	4606      	mov	r6, r0
 80056c4:	d802      	bhi.n	80056cc <_realloc_r+0x34>
 80056c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80056ca:	d8f4      	bhi.n	80056b6 <_realloc_r+0x1e>
 80056cc:	4629      	mov	r1, r5
 80056ce:	4640      	mov	r0, r8
 80056d0:	f7ff fc38 	bl	8004f44 <_malloc_r>
 80056d4:	4607      	mov	r7, r0
 80056d6:	2800      	cmp	r0, #0
 80056d8:	d0ec      	beq.n	80056b4 <_realloc_r+0x1c>
 80056da:	42b5      	cmp	r5, r6
 80056dc:	462a      	mov	r2, r5
 80056de:	4621      	mov	r1, r4
 80056e0:	bf28      	it	cs
 80056e2:	4632      	movcs	r2, r6
 80056e4:	f7ff ffca 	bl	800567c <memcpy>
 80056e8:	4621      	mov	r1, r4
 80056ea:	4640      	mov	r0, r8
 80056ec:	f7ff fbbe 	bl	8004e6c <_free_r>
 80056f0:	463c      	mov	r4, r7
 80056f2:	e7e0      	b.n	80056b6 <_realloc_r+0x1e>

080056f4 <_malloc_usable_size_r>:
 80056f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056f8:	1f18      	subs	r0, r3, #4
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	bfbc      	itt	lt
 80056fe:	580b      	ldrlt	r3, [r1, r0]
 8005700:	18c0      	addlt	r0, r0, r3
 8005702:	4770      	bx	lr

08005704 <_init>:
 8005704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005706:	bf00      	nop
 8005708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800570a:	bc08      	pop	{r3}
 800570c:	469e      	mov	lr, r3
 800570e:	4770      	bx	lr

08005710 <_fini>:
 8005710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005712:	bf00      	nop
 8005714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005716:	bc08      	pop	{r3}
 8005718:	469e      	mov	lr, r3
 800571a:	4770      	bx	lr
