
SolarBoatCockpitButtons.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005260  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080053f0  080053f0  000063f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005484  08005484  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005484  08005484  00006484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800548c  0800548c  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800548c  0800548c  0000648c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005490  08005490  00006490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005494  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  20000060  080054f4  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  080054f4  000073a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013383  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a63  00000000  00000000  0001a413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  0001ce78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d06  00000000  00000000  0001df48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000219f9  00000000  00000000  0001ec4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014140  00000000  00000000  00040647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc2d5  00000000  00000000  00054787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120a5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ad8  00000000  00000000  00120aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00125578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080053d8 	.word	0x080053d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080053d8 	.word	0x080053d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000566:	4b32      	ldr	r3, [pc, #200]	@ (8000630 <MX_CAN1_Init+0xd0>)
 8000568:	4a32      	ldr	r2, [pc, #200]	@ (8000634 <MX_CAN1_Init+0xd4>)
 800056a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 800056c:	4b30      	ldr	r3, [pc, #192]	@ (8000630 <MX_CAN1_Init+0xd0>)
 800056e:	2208      	movs	r2, #8
 8000570:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000572:	4b2f      	ldr	r3, [pc, #188]	@ (8000630 <MX_CAN1_Init+0xd0>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000578:	4b2d      	ldr	r3, [pc, #180]	@ (8000630 <MX_CAN1_Init+0xd0>)
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800057e:	4b2c      	ldr	r3, [pc, #176]	@ (8000630 <MX_CAN1_Init+0xd0>)
 8000580:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000584:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 8000586:	4b2a      	ldr	r3, [pc, #168]	@ (8000630 <MX_CAN1_Init+0xd0>)
 8000588:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 800058c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800058e:	4b28      	ldr	r3, [pc, #160]	@ (8000630 <MX_CAN1_Init+0xd0>)
 8000590:	2200      	movs	r2, #0
 8000592:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000594:	4b26      	ldr	r3, [pc, #152]	@ (8000630 <MX_CAN1_Init+0xd0>)
 8000596:	2201      	movs	r2, #1
 8000598:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800059a:	4b25      	ldr	r3, [pc, #148]	@ (8000630 <MX_CAN1_Init+0xd0>)
 800059c:	2200      	movs	r2, #0
 800059e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80005a0:	4b23      	ldr	r3, [pc, #140]	@ (8000630 <MX_CAN1_Init+0xd0>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005a6:	4b22      	ldr	r3, [pc, #136]	@ (8000630 <MX_CAN1_Init+0xd0>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005ac:	4b20      	ldr	r3, [pc, #128]	@ (8000630 <MX_CAN1_Init+0xd0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005b2:	481f      	ldr	r0, [pc, #124]	@ (8000630 <MX_CAN1_Init+0xd0>)
 80005b4:	f000 fe58 	bl	8001268 <HAL_CAN_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80005be:	f000 fb4f 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	2014      	movs	r0, #20
 80005c8:	f001 fd85 	bl	80020d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80005cc:	2014      	movs	r0, #20
 80005ce:	f001 fd9e 	bl	800210e <HAL_NVIC_EnableIRQ>

    CAN_FilterTypeDef sFilterConfig;

    sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterIdHigh = 0<<5;
 80005d6:	2300      	movs	r3, #0
 80005d8:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0<<5;
 80005da:	2300      	movs	r3, #0
 80005dc:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0<<5;
 80005de:	2300      	movs	r3, #0
 80005e0:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0x0<<5;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005e6:	2301      	movs	r3, #1
 80005e8:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterActivation = ENABLE;
 80005ea:	2301      	movs	r3, #1
 80005ec:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterBank = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61bb      	str	r3, [r7, #24]
    sFilterConfig.SlaveStartFilterBank = 14;
 80005f6:	230e      	movs	r3, #14
 80005f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80005fa:	463b      	mov	r3, r7
 80005fc:	4619      	mov	r1, r3
 80005fe:	480c      	ldr	r0, [pc, #48]	@ (8000630 <MX_CAN1_Init+0xd0>)
 8000600:	f000 ff2d 	bl	800145e <HAL_CAN_ConfigFilter>


  	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000604:	480a      	ldr	r0, [pc, #40]	@ (8000630 <MX_CAN1_Init+0xd0>)
 8000606:	f000 fff4 	bl	80015f2 <HAL_CAN_Start>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_CAN1_Init+0xb4>
  		Error_Handler();
 8000610:	f000 fb26 	bl	8000c60 <Error_Handler>
  	}

  	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000614:	2102      	movs	r1, #2
 8000616:	4806      	ldr	r0, [pc, #24]	@ (8000630 <MX_CAN1_Init+0xd0>)
 8000618:	f001 fa21 	bl	8001a5e <HAL_CAN_ActivateNotification>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_CAN1_Init+0xc6>
  	{
  		Error_Handler();
 8000622:	f000 fb1d 	bl	8000c60 <Error_Handler>
  	}

  /* USER CODE END CAN1_Init 2 */

}
 8000626:	bf00      	nop
 8000628:	3728      	adds	r7, #40	@ 0x28
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	200000c4 	.word	0x200000c4
 8000634:	40006400 	.word	0x40006400

08000638 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	@ 0x28
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a1c      	ldr	r2, [pc, #112]	@ (80006c8 <HAL_CAN_MspInit+0x90>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d131      	bne.n	80006be <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800065a:	4b1c      	ldr	r3, [pc, #112]	@ (80006cc <HAL_CAN_MspInit+0x94>)
 800065c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800065e:	4a1b      	ldr	r2, [pc, #108]	@ (80006cc <HAL_CAN_MspInit+0x94>)
 8000660:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000664:	6593      	str	r3, [r2, #88]	@ 0x58
 8000666:	4b19      	ldr	r3, [pc, #100]	@ (80006cc <HAL_CAN_MspInit+0x94>)
 8000668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800066a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800066e:	613b      	str	r3, [r7, #16]
 8000670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	4b16      	ldr	r3, [pc, #88]	@ (80006cc <HAL_CAN_MspInit+0x94>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000676:	4a15      	ldr	r2, [pc, #84]	@ (80006cc <HAL_CAN_MspInit+0x94>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067e:	4b13      	ldr	r3, [pc, #76]	@ (80006cc <HAL_CAN_MspInit+0x94>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800068a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800068e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000690:	2302      	movs	r3, #2
 8000692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000698:	2303      	movs	r3, #3
 800069a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800069c:	2309      	movs	r3, #9
 800069e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	4619      	mov	r1, r3
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006aa:	f001 fd4b 	bl	8002144 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	2014      	movs	r0, #20
 80006b4:	f001 fd0f 	bl	80020d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006b8:	2014      	movs	r0, #20
 80006ba:	f001 fd28 	bl	800210e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006be:	bf00      	nop
 80006c0:	3728      	adds	r7, #40	@ 0x28
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40006400 	.word	0x40006400
 80006cc:	40021000 	.word	0x40021000

080006d0 <CAN_TX_filter_init>:
}

/* USER CODE BEGIN 1 */

void CAN_TX_filter_init(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
	TxHeader.StdId = 0x360;
 80006d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <CAN_TX_filter_init+0x34>)
 80006d6:	f44f 7258 	mov.w	r2, #864	@ 0x360
 80006da:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0;
 80006dc:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <CAN_TX_filter_init+0x34>)
 80006de:	2200      	movs	r2, #0
 80006e0:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 80006e2:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <CAN_TX_filter_init+0x34>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <CAN_TX_filter_init+0x34>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 8;
 80006ee:	4b05      	ldr	r3, [pc, #20]	@ (8000704 <CAN_TX_filter_init+0x34>)
 80006f0:	2208      	movs	r2, #8
 80006f2:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80006f4:	4b03      	ldr	r3, [pc, #12]	@ (8000704 <CAN_TX_filter_init+0x34>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	751a      	strb	r2, [r3, #20]
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	200000a0 	.word	0x200000a0

08000708 <CAN_SendState>:


void CAN_SendState(int state)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
    TxData[0] = (state & 0xFF00) >> 8;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	121b      	asrs	r3, r3, #8
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4b15      	ldr	r3, [pc, #84]	@ (800076c <CAN_SendState+0x64>)
 8000718:	701a      	strb	r2, [r3, #0]
    TxData[1] = state & 0x00FF;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	b2da      	uxtb	r2, r3
 800071e:	4b13      	ldr	r3, [pc, #76]	@ (800076c <CAN_SendState+0x64>)
 8000720:	705a      	strb	r2, [r3, #1]
    TxData[2] = 0;
 8000722:	4b12      	ldr	r3, [pc, #72]	@ (800076c <CAN_SendState+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	709a      	strb	r2, [r3, #2]
    TxData[3] = 0;
 8000728:	4b10      	ldr	r3, [pc, #64]	@ (800076c <CAN_SendState+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	70da      	strb	r2, [r3, #3]
    TxData[4] = 0;
 800072e:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <CAN_SendState+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	711a      	strb	r2, [r3, #4]
    TxData[5] = 0;
 8000734:	4b0d      	ldr	r3, [pc, #52]	@ (800076c <CAN_SendState+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	715a      	strb	r2, [r3, #5]
    TxData[6] = 0;
 800073a:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <CAN_SendState+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	719a      	strb	r2, [r3, #6]
    TxData[7] = 0;
 8000740:	4b0a      	ldr	r3, [pc, #40]	@ (800076c <CAN_SendState+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	71da      	strb	r2, [r3, #7]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, (uint8_t*)TxData, &TxMailbox) != HAL_OK)
 8000746:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <CAN_SendState+0x68>)
 8000748:	4a08      	ldr	r2, [pc, #32]	@ (800076c <CAN_SendState+0x64>)
 800074a:	490a      	ldr	r1, [pc, #40]	@ (8000774 <CAN_SendState+0x6c>)
 800074c:	480a      	ldr	r0, [pc, #40]	@ (8000778 <CAN_SendState+0x70>)
 800074e:	f000 ff94 	bl	800167a <HAL_CAN_AddTxMessage>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d005      	beq.n	8000764 <CAN_SendState+0x5c>
    {
        uint32_t error = HAL_CAN_GetError(&hcan1);
 8000758:	4807      	ldr	r0, [pc, #28]	@ (8000778 <CAN_SendState+0x70>)
 800075a:	f001 fbd5 	bl	8001f08 <HAL_CAN_GetError>
 800075e:	60f8      	str	r0, [r7, #12]
        Error_Handler();
 8000760:	f000 fa7e 	bl	8000c60 <Error_Handler>
    }
}
 8000764:	bf00      	nop
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200000b8 	.word	0x200000b8
 8000770:	200000c0 	.word	0x200000c0
 8000774:	200000a0 	.word	0x200000a0
 8000778:	200000c4 	.word	0x200000c4

0800077c <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000784:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000786:	4a0d      	ldr	r2, [pc, #52]	@ (80007bc <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000788:	2100      	movs	r1, #0
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f001 f845 	bl	800181a <HAL_CAN_GetRxMessage>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 8000796:	f000 fa63 	bl	8000c60 <Error_Handler>
  }

  __HAL_TIM_SET_COUNTER(&htim7, 0);
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	@ 0x24
  timExpired = 0;
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
  UART_Send("Test\n\r", 6);
 80007a8:	2106      	movs	r1, #6
 80007aa:	4807      	ldr	r0, [pc, #28]	@ (80007c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80007ac:	f000 fc86 	bl	80010bc <UART_Send>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000098 	.word	0x20000098
 80007bc:	2000007c 	.word	0x2000007c
 80007c0:	20000180 	.word	0x20000180
 80007c4:	2000012c 	.word	0x2000012c
 80007c8:	080053f0 	.word	0x080053f0

080007cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	4b37      	ldr	r3, [pc, #220]	@ (80008c0 <MX_GPIO_Init+0xf4>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e6:	4a36      	ldr	r2, [pc, #216]	@ (80008c0 <MX_GPIO_Init+0xf4>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ee:	4b34      	ldr	r3, [pc, #208]	@ (80008c0 <MX_GPIO_Init+0xf4>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	4b31      	ldr	r3, [pc, #196]	@ (80008c0 <MX_GPIO_Init+0xf4>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fe:	4a30      	ldr	r2, [pc, #192]	@ (80008c0 <MX_GPIO_Init+0xf4>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000806:	4b2e      	ldr	r3, [pc, #184]	@ (80008c0 <MX_GPIO_Init+0xf4>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	4b2b      	ldr	r3, [pc, #172]	@ (80008c0 <MX_GPIO_Init+0xf4>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	4a2a      	ldr	r2, [pc, #168]	@ (80008c0 <MX_GPIO_Init+0xf4>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800081e:	4b28      	ldr	r3, [pc, #160]	@ (80008c0 <MX_GPIO_Init+0xf4>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2101      	movs	r1, #1
 800082e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000832:	f001 fdf1 	bl	8002418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RedLed_Pin|LD3_Pin|GreenLed_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2129      	movs	r1, #41	@ 0x29
 800083a:	4822      	ldr	r0, [pc, #136]	@ (80008c4 <MX_GPIO_Init+0xf8>)
 800083c:	f001 fdec 	bl	8002418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8000840:	2301      	movs	r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000844:	2301      	movs	r3, #1
 8000846:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	4619      	mov	r1, r3
 8000856:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800085a:	f001 fc73 	bl	8002144 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ButtonDown_Pin|ButtonUp_Pin;
 800085e:	2328      	movs	r3, #40	@ 0x28
 8000860:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000862:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	4619      	mov	r1, r3
 8000872:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000876:	f001 fc65 	bl	8002144 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RedLed_Pin|LD3_Pin|GreenLed_Pin;
 800087a:	2329      	movs	r3, #41	@ 0x29
 800087c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	4619      	mov	r1, r3
 8000890:	480c      	ldr	r0, [pc, #48]	@ (80008c4 <MX_GPIO_Init+0xf8>)
 8000892:	f001 fc57 	bl	8002144 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2100      	movs	r1, #0
 800089a:	2009      	movs	r0, #9
 800089c:	f001 fc1b 	bl	80020d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80008a0:	2009      	movs	r0, #9
 80008a2:	f001 fc34 	bl	800210e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	2017      	movs	r0, #23
 80008ac:	f001 fc13 	bl	80020d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80008b0:	2017      	movs	r0, #23
 80008b2:	f001 fc2c 	bl	800210e <HAL_NVIC_EnableIRQ>

}
 80008b6:	bf00      	nop
 80008b8:	3720      	adds	r7, #32
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40021000 	.word	0x40021000
 80008c4:	48000400 	.word	0x48000400

080008c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	db0a      	blt.n	80008f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	490c      	ldr	r1, [pc, #48]	@ (8000914 <__NVIC_SetPriority+0x4c>)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	0112      	lsls	r2, r2, #4
 80008e8:	b2d2      	uxtb	r2, r2
 80008ea:	440b      	add	r3, r1
 80008ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f0:	e00a      	b.n	8000908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4908      	ldr	r1, [pc, #32]	@ (8000918 <__NVIC_SetPriority+0x50>)
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	f003 030f 	and.w	r3, r3, #15
 80008fe:	3b04      	subs	r3, #4
 8000900:	0112      	lsls	r2, r2, #4
 8000902:	b2d2      	uxtb	r2, r2
 8000904:	440b      	add	r3, r1
 8000906:	761a      	strb	r2, [r3, #24]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000e100 	.word	0xe000e100
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3b01      	subs	r3, #1
 8000928:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800092c:	d301      	bcc.n	8000932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800092e:	2301      	movs	r3, #1
 8000930:	e00f      	b.n	8000952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000932:	4a0a      	ldr	r2, [pc, #40]	@ (800095c <SysTick_Config+0x40>)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3b01      	subs	r3, #1
 8000938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800093a:	210f      	movs	r1, #15
 800093c:	f04f 30ff 	mov.w	r0, #4294967295
 8000940:	f7ff ffc2 	bl	80008c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000944:	4b05      	ldr	r3, [pc, #20]	@ (800095c <SysTick_Config+0x40>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800094a:	4b04      	ldr	r3, [pc, #16]	@ (800095c <SysTick_Config+0x40>)
 800094c:	2207      	movs	r2, #7
 800094e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	e000e010 	.word	0xe000e010

08000960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000966:	f000 fbe6 	bl	8001136 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096a:	f000 f877 	bl	8000a5c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */


  SysTick_Config(SystemCoreClock / 1000);
 800096e:	4b33      	ldr	r3, [pc, #204]	@ (8000a3c <main+0xdc>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a33      	ldr	r2, [pc, #204]	@ (8000a40 <main+0xe0>)
 8000974:	fba2 2303 	umull	r2, r3, r2, r3
 8000978:	099b      	lsrs	r3, r3, #6
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff ffce 	bl	800091c <SysTick_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000980:	f7ff ff24 	bl	80007cc <MX_GPIO_Init>
  MX_CAN1_Init();
 8000984:	f7ff fdec 	bl	8000560 <MX_CAN1_Init>
  MX_TIM2_Init();
 8000988:	f000 fa38 	bl	8000dfc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800098c:	f000 fafc 	bl	8000f88 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8000990:	f000 fa82 	bl	8000e98 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  CAN_TX_filter_init();
 8000994:	f7ff fe9c 	bl	80006d0 <CAN_TX_filter_init>
  state = 8;
 8000998:	4b2a      	ldr	r3, [pc, #168]	@ (8000a44 <main+0xe4>)
 800099a:	2208      	movs	r2, #8
 800099c:	601a      	str	r2, [r3, #0]
  CAN_SendState(state);
 800099e:	4b29      	ldr	r3, [pc, #164]	@ (8000a44 <main+0xe4>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff feb0 	bl	8000708 <CAN_SendState>

  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 80009a8:	4827      	ldr	r0, [pc, #156]	@ (8000a48 <main+0xe8>)
 80009aa:	f002 ff7b 	bl	80038a4 <HAL_TIM_Base_Start_IT>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <main+0x58>
  {
	  Error_Handler();
 80009b4:	f000 f954 	bl	8000c60 <Error_Handler>
  }
  if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 80009b8:	4824      	ldr	r0, [pc, #144]	@ (8000a4c <main+0xec>)
 80009ba:	f002 ff73 	bl	80038a4 <HAL_TIM_Base_Start_IT>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <main+0x68>
    {
  	  Error_Handler();
 80009c4:	f000 f94c 	bl	8000c60 <Error_Handler>
    }

  //Testfunction leds
    HAL_GPIO_WritePin(GPIOB, GreenLed_Pin, RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2120      	movs	r1, #32
 80009cc:	4820      	ldr	r0, [pc, #128]	@ (8000a50 <main+0xf0>)
 80009ce:	f001 fd23 	bl	8002418 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, RedLed_Pin, SET);
 80009d2:	2201      	movs	r2, #1
 80009d4:	2101      	movs	r1, #1
 80009d6:	481e      	ldr	r0, [pc, #120]	@ (8000a50 <main+0xf0>)
 80009d8:	f001 fd1e 	bl	8002418 <HAL_GPIO_WritePin>
    for(int i = 0; i<6;i++)
 80009dc:	2300      	movs	r3, #0
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	e00e      	b.n	8000a00 <main+0xa0>
    {
  	HAL_GPIO_TogglePin(GPIOB, GreenLed_Pin);
 80009e2:	2120      	movs	r1, #32
 80009e4:	481a      	ldr	r0, [pc, #104]	@ (8000a50 <main+0xf0>)
 80009e6:	f001 fd2f 	bl	8002448 <HAL_GPIO_TogglePin>
  	HAL_GPIO_TogglePin(GPIOB, RedLed_Pin);
 80009ea:	2101      	movs	r1, #1
 80009ec:	4818      	ldr	r0, [pc, #96]	@ (8000a50 <main+0xf0>)
 80009ee:	f001 fd2b 	bl	8002448 <HAL_GPIO_TogglePin>
  	HAL_Delay(500);
 80009f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009f6:	f000 fc13 	bl	8001220 <HAL_Delay>
    for(int i = 0; i<6;i++)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	3301      	adds	r3, #1
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2b05      	cmp	r3, #5
 8000a04:	dded      	ble.n	80009e2 <main+0x82>
    }
    ledState = RED;
 8000a06:	4b13      	ldr	r3, [pc, #76]	@ (8000a54 <main+0xf4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOB, GreenLed_Pin, RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2120      	movs	r1, #32
 8000a10:	480f      	ldr	r0, [pc, #60]	@ (8000a50 <main+0xf0>)
 8000a12:	f001 fd01 	bl	8002418 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, RedLed_Pin, RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2101      	movs	r1, #1
 8000a1a:	480d      	ldr	r0, [pc, #52]	@ (8000a50 <main+0xf0>)
 8000a1c:	f001 fcfc 	bl	8002418 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  MainLoop();
 8000a20:	f000 f87e 	bl	8000b20 <MainLoop>
	  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000a24:	2108      	movs	r1, #8
 8000a26:	480a      	ldr	r0, [pc, #40]	@ (8000a50 <main+0xf0>)
 8000a28:	f001 fd0e 	bl	8002448 <HAL_GPIO_TogglePin>
	  HAL_Delay(delayTime);
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a58 <main+0xf8>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 fbf5 	bl	8001220 <HAL_Delay>
	  MainLoop();
 8000a36:	bf00      	nop
 8000a38:	e7f2      	b.n	8000a20 <main+0xc0>
 8000a3a:	bf00      	nop
 8000a3c:	20000004 	.word	0x20000004
 8000a40:	10624dd3 	.word	0x10624dd3
 8000a44:	20000124 	.word	0x20000124
 8000a48:	20000134 	.word	0x20000134
 8000a4c:	20000180 	.word	0x20000180
 8000a50:	48000400 	.word	0x48000400
 8000a54:	20000128 	.word	0x20000128
 8000a58:	20000000 	.word	0x20000000

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b096      	sub	sp, #88	@ 0x58
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	2244      	movs	r2, #68	@ 0x44
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f004 f834 	bl	8004ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	463b      	mov	r3, r7
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a7e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a82:	f001 fd31 	bl	80024e8 <HAL_PWREx_ControlVoltageScaling>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a8c:	f000 f8e8 	bl	8000c60 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a90:	f001 fd0c 	bl	80024ac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a94:	4b21      	ldr	r3, [pc, #132]	@ (8000b1c <SystemClock_Config+0xc0>)
 8000a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000a9a:	4a20      	ldr	r2, [pc, #128]	@ (8000b1c <SystemClock_Config+0xc0>)
 8000a9c:	f023 0318 	bic.w	r3, r3, #24
 8000aa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000aa4:	2314      	movs	r3, #20
 8000aa6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000aac:	2301      	movs	r3, #1
 8000aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ab4:	2360      	movs	r3, #96	@ 0x60
 8000ab6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000abc:	2301      	movs	r3, #1
 8000abe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000ac4:	2310      	movs	r3, #16
 8000ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ac8:	2307      	movs	r3, #7
 8000aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f001 fd5b 	bl	8002594 <HAL_RCC_OscConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000ae4:	f000 f8bc 	bl	8000c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae8:	230f      	movs	r3, #15
 8000aea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aec:	2303      	movs	r3, #3
 8000aee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000afc:	463b      	mov	r3, r7
 8000afe:	2101      	movs	r1, #1
 8000b00:	4618      	mov	r0, r3
 8000b02:	f002 f95b 	bl	8002dbc <HAL_RCC_ClockConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b0c:	f000 f8a8 	bl	8000c60 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000b10:	f002 fd6e 	bl	80035f0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000b14:	bf00      	nop
 8000b16:	3758      	adds	r7, #88	@ 0x58
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40021000 	.word	0x40021000

08000b20 <MainLoop>:

/* USER CODE BEGIN 4 */

void MainLoop(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	if(ledState != RED && timExpired==1)
 8000b24:	4b19      	ldr	r3, [pc, #100]	@ (8000b8c <MainLoop+0x6c>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d015      	beq.n	8000b58 <MainLoop+0x38>
 8000b2c:	4b18      	ldr	r3, [pc, #96]	@ (8000b90 <MainLoop+0x70>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d111      	bne.n	8000b58 <MainLoop+0x38>
	{
		ledState = RED;
 8000b34:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <MainLoop+0x6c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, RedLed_Pin, RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	4815      	ldr	r0, [pc, #84]	@ (8000b94 <MainLoop+0x74>)
 8000b40:	f001 fc6a 	bl	8002418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LD3_Pin, RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2108      	movs	r1, #8
 8000b48:	4812      	ldr	r0, [pc, #72]	@ (8000b94 <MainLoop+0x74>)
 8000b4a:	f001 fc65 	bl	8002418 <HAL_GPIO_WritePin>
		delayTime = 500;
 8000b4e:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <MainLoop+0x78>)
 8000b50:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000b54:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, LD3_Pin, SET);
		delayTime = 250;
	}


}
 8000b56:	e017      	b.n	8000b88 <MainLoop+0x68>
	else if(ledState != GREEN && timExpired==0)
 8000b58:	4b0c      	ldr	r3, [pc, #48]	@ (8000b8c <MainLoop+0x6c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d013      	beq.n	8000b88 <MainLoop+0x68>
 8000b60:	4b0b      	ldr	r3, [pc, #44]	@ (8000b90 <MainLoop+0x70>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d10f      	bne.n	8000b88 <MainLoop+0x68>
		ledState = GREEN;
 8000b68:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <MainLoop+0x6c>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, RedLed_Pin, SET);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	2101      	movs	r1, #1
 8000b72:	4808      	ldr	r0, [pc, #32]	@ (8000b94 <MainLoop+0x74>)
 8000b74:	f001 fc50 	bl	8002418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LD3_Pin, SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2108      	movs	r1, #8
 8000b7c:	4805      	ldr	r0, [pc, #20]	@ (8000b94 <MainLoop+0x74>)
 8000b7e:	f001 fc4b 	bl	8002418 <HAL_GPIO_WritePin>
		delayTime = 250;
 8000b82:	4b05      	ldr	r3, [pc, #20]	@ (8000b98 <MainLoop+0x78>)
 8000b84:	22fa      	movs	r2, #250	@ 0xfa
 8000b86:	601a      	str	r2, [r3, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000128 	.word	0x20000128
 8000b90:	2000012c 	.word	0x2000012c
 8000b94:	48000400 	.word	0x48000400
 8000b98:	20000000 	.word	0x20000000

08000b9c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a09      	ldr	r2, [pc, #36]	@ (8000bcc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d104      	bne.n	8000bb6 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		CAN_SendState(state);
 8000bac:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fda9 	bl	8000708 <CAN_SendState>
	}
	if(htim == &htim7)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a06      	ldr	r2, [pc, #24]	@ (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d102      	bne.n	8000bc4 <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		timExpired = 1;
 8000bbe:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	601a      	str	r2, [r3, #0]
	}
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000134 	.word	0x20000134
 8000bd0:	20000124 	.word	0x20000124
 8000bd4:	20000180 	.word	0x20000180
 8000bd8:	2000012c 	.word	0x2000012c

08000bdc <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	80fb      	strh	r3, [r7, #6]

    if(GPIO_Pin == ButtonDown_Pin)
 8000be6:	88fb      	ldrh	r3, [r7, #6]
 8000be8:	2b08      	cmp	r3, #8
 8000bea:	d109      	bne.n	8000c00 <HAL_GPIO_EXTI_Callback+0x24>
    {
        if(state > MIN_STATE)
 8000bec:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <HAL_GPIO_EXTI_Callback+0x74>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	dd13      	ble.n	8000c1c <HAL_GPIO_EXTI_Callback+0x40>
        {
            state = state - 1;
 8000bf4:	4b16      	ldr	r3, [pc, #88]	@ (8000c50 <HAL_GPIO_EXTI_Callback+0x74>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	4a15      	ldr	r2, [pc, #84]	@ (8000c50 <HAL_GPIO_EXTI_Callback+0x74>)
 8000bfc:	6013      	str	r3, [r2, #0]
 8000bfe:	e00d      	b.n	8000c1c <HAL_GPIO_EXTI_Callback+0x40>
        }
    }
    else if(GPIO_Pin == ButtonUp_Pin) {
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	2b20      	cmp	r3, #32
 8000c04:	d109      	bne.n	8000c1a <HAL_GPIO_EXTI_Callback+0x3e>
        if(state < MAX_STATE)
 8000c06:	4b12      	ldr	r3, [pc, #72]	@ (8000c50 <HAL_GPIO_EXTI_Callback+0x74>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b0b      	cmp	r3, #11
 8000c0c:	dc06      	bgt.n	8000c1c <HAL_GPIO_EXTI_Callback+0x40>
        {
            state = state + 1;
 8000c0e:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <HAL_GPIO_EXTI_Callback+0x74>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	3301      	adds	r3, #1
 8000c14:	4a0e      	ldr	r2, [pc, #56]	@ (8000c50 <HAL_GPIO_EXTI_Callback+0x74>)
 8000c16:	6013      	str	r3, [r2, #0]
 8000c18:	e000      	b.n	8000c1c <HAL_GPIO_EXTI_Callback+0x40>
        }
    } else {
        __NOP();
 8000c1a:	bf00      	nop
    }

    uart_buf_len = sprintf(uart_buf, "state : %lu\n", state);
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <HAL_GPIO_EXTI_Callback+0x74>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	490c      	ldr	r1, [pc, #48]	@ (8000c54 <HAL_GPIO_EXTI_Callback+0x78>)
 8000c24:	480c      	ldr	r0, [pc, #48]	@ (8000c58 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000c26:	f003 ff37 	bl	8004a98 <siprintf>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c5c <HAL_GPIO_EXTI_Callback+0x80>)
 8000c2e:	6013      	str	r3, [r2, #0]
    UART_Send(uart_buf, uart_buf_len);
 8000c30:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <HAL_GPIO_EXTI_Callback+0x80>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	4619      	mov	r1, r3
 8000c38:	4807      	ldr	r0, [pc, #28]	@ (8000c58 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000c3a:	f000 fa3f 	bl	80010bc <UART_Send>
    CAN_SendState(state);
 8000c3e:	4b04      	ldr	r3, [pc, #16]	@ (8000c50 <HAL_GPIO_EXTI_Callback+0x74>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fd60 	bl	8000708 <CAN_SendState>
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000124 	.word	0x20000124
 8000c54:	080053f8 	.word	0x080053f8
 8000c58:	200000ec 	.word	0x200000ec
 8000c5c:	20000120 	.word	0x20000120

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
}
 8000c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <Error_Handler+0x8>

08000c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <HAL_MspInit+0x44>)
 8000c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c76:	4a0e      	ldr	r2, [pc, #56]	@ (8000cb0 <HAL_MspInit+0x44>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <HAL_MspInit+0x44>)
 8000c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <HAL_MspInit+0x44>)
 8000c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c8e:	4a08      	ldr	r2, [pc, #32]	@ (8000cb0 <HAL_MspInit+0x44>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c94:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c96:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_MspInit+0x44>)
 8000c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <NMI_Handler+0x4>

08000cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <MemManage_Handler+0x4>

08000ccc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <BusFault_Handler+0x4>

08000cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <UsageFault_Handler+0x4>

08000cdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0a:	f000 fa69 	bl	80011e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ButtonDown_Pin);
 8000d16:	2008      	movs	r0, #8
 8000d18:	f001 fbb0 	bl	800247c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d24:	4802      	ldr	r0, [pc, #8]	@ (8000d30 <CAN1_RX0_IRQHandler+0x10>)
 8000d26:	f000 fec0 	bl	8001aaa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200000c4 	.word	0x200000c4

08000d34 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ButtonUp_Pin);
 8000d38:	2020      	movs	r0, #32
 8000d3a:	f001 fb9f 	bl	800247c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d48:	4802      	ldr	r0, [pc, #8]	@ (8000d54 <TIM2_IRQHandler+0x10>)
 8000d4a:	f002 fdff 	bl	800394c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000134 	.word	0x20000134

08000d58 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000d5c:	4802      	ldr	r0, [pc, #8]	@ (8000d68 <TIM7_IRQHandler+0x10>)
 8000d5e:	f002 fdf5 	bl	800394c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000180 	.word	0x20000180

08000d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d74:	4a14      	ldr	r2, [pc, #80]	@ (8000dc8 <_sbrk+0x5c>)
 8000d76:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <_sbrk+0x60>)
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d80:	4b13      	ldr	r3, [pc, #76]	@ (8000dd0 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d102      	bne.n	8000d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d88:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <_sbrk+0x64>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	@ (8000dd4 <_sbrk+0x68>)
 8000d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8e:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d207      	bcs.n	8000dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d9c:	f003 fea4 	bl	8004ae8 <__errno>
 8000da0:	4603      	mov	r3, r0
 8000da2:	220c      	movs	r2, #12
 8000da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
 8000daa:	e009      	b.n	8000dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dac:	4b08      	ldr	r3, [pc, #32]	@ (8000dd0 <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000db2:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	4a05      	ldr	r2, [pc, #20]	@ (8000dd0 <_sbrk+0x64>)
 8000dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20010000 	.word	0x20010000
 8000dcc:	00000400 	.word	0x00000400
 8000dd0:	20000130 	.word	0x20000130
 8000dd4:	200003a0 	.word	0x200003a0

08000dd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ddc:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <SystemInit+0x20>)
 8000dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000de2:	4a05      	ldr	r2, [pc, #20]	@ (8000df8 <SystemInit+0x20>)
 8000de4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000de8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e02:	f107 0310 	add.w	r3, r7, #16
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e94 <MX_TIM2_Init+0x98>)
 8000e1c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e20:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000 - 1;
 8000e22:	4b1c      	ldr	r3, [pc, #112]	@ (8000e94 <MX_TIM2_Init+0x98>)
 8000e24:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8000e28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <MX_TIM2_Init+0x98>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000e30:	4b18      	ldr	r3, [pc, #96]	@ (8000e94 <MX_TIM2_Init+0x98>)
 8000e32:	2264      	movs	r2, #100	@ 0x64
 8000e34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e36:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <MX_TIM2_Init+0x98>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3c:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <MX_TIM2_Init+0x98>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e42:	4814      	ldr	r0, [pc, #80]	@ (8000e94 <MX_TIM2_Init+0x98>)
 8000e44:	f002 fcd6 	bl	80037f4 <HAL_TIM_Base_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e4e:	f7ff ff07 	bl	8000c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	480d      	ldr	r0, [pc, #52]	@ (8000e94 <MX_TIM2_Init+0x98>)
 8000e60:	f002 fe7b 	bl	8003b5a <HAL_TIM_ConfigClockSource>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e6a:	f7ff fef9 	bl	8000c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4806      	ldr	r0, [pc, #24]	@ (8000e94 <MX_TIM2_Init+0x98>)
 8000e7c:	f003 f868 	bl	8003f50 <HAL_TIMEx_MasterConfigSynchronization>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e86:	f7ff feeb 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	3720      	adds	r7, #32
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000134 	.word	0x20000134

08000e98 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <MX_TIM7_Init+0x68>)
 8000eaa:	4a16      	ldr	r2, [pc, #88]	@ (8000f04 <MX_TIM7_Init+0x6c>)
 8000eac:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 32000-1;
 8000eae:	4b14      	ldr	r3, [pc, #80]	@ (8000f00 <MX_TIM7_Init+0x68>)
 8000eb0:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8000eb4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb6:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <MX_TIM7_Init+0x68>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200;
 8000ebc:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <MX_TIM7_Init+0x68>)
 8000ebe:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000ec2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f00 <MX_TIM7_Init+0x68>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000eca:	480d      	ldr	r0, [pc, #52]	@ (8000f00 <MX_TIM7_Init+0x68>)
 8000ecc:	f002 fc92 	bl	80037f4 <HAL_TIM_Base_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000ed6:	f7ff fec3 	bl	8000c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4806      	ldr	r0, [pc, #24]	@ (8000f00 <MX_TIM7_Init+0x68>)
 8000ee8:	f003 f832 	bl	8003f50 <HAL_TIMEx_MasterConfigSynchronization>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000ef2:	f7ff feb5 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000180 	.word	0x20000180
 8000f04:	40001400 	.word	0x40001400

08000f08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f18:	d114      	bne.n	8000f44 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f1a:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <HAL_TIM_Base_MspInit+0x78>)
 8000f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1e:	4a18      	ldr	r2, [pc, #96]	@ (8000f80 <HAL_TIM_Base_MspInit+0x78>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f26:	4b16      	ldr	r3, [pc, #88]	@ (8000f80 <HAL_TIM_Base_MspInit+0x78>)
 8000f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	201c      	movs	r0, #28
 8000f38:	f001 f8cd 	bl	80020d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f3c:	201c      	movs	r0, #28
 8000f3e:	f001 f8e6 	bl	800210e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000f42:	e018      	b.n	8000f76 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a0e      	ldr	r2, [pc, #56]	@ (8000f84 <HAL_TIM_Base_MspInit+0x7c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d113      	bne.n	8000f76 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <HAL_TIM_Base_MspInit+0x78>)
 8000f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f52:	4a0b      	ldr	r2, [pc, #44]	@ (8000f80 <HAL_TIM_Base_MspInit+0x78>)
 8000f54:	f043 0320 	orr.w	r3, r3, #32
 8000f58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f5a:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <HAL_TIM_Base_MspInit+0x78>)
 8000f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f5e:	f003 0320 	and.w	r3, r3, #32
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2037      	movs	r0, #55	@ 0x37
 8000f6c:	f001 f8b3 	bl	80020d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000f70:	2037      	movs	r0, #55	@ 0x37
 8000f72:	f001 f8cc 	bl	800210e <HAL_NVIC_EnableIRQ>
}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000
 8000f84:	40001400 	.word	0x40001400

08000f88 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f8c:	4b14      	ldr	r3, [pc, #80]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000f8e:	4a15      	ldr	r2, [pc, #84]	@ (8000fe4 <MX_USART2_UART_Init+0x5c>)
 8000f90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f92:	4b13      	ldr	r3, [pc, #76]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000f94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fae:	220c      	movs	r2, #12
 8000fb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fca:	4805      	ldr	r0, [pc, #20]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fcc:	f003 f844 	bl	8004058 <HAL_UART_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fd6:	f7ff fe43 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200001cc 	.word	0x200001cc
 8000fe4:	40004400 	.word	0x40004400

08000fe8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b09e      	sub	sp, #120	@ 0x78
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	2254      	movs	r2, #84	@ 0x54
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f003 fd65 	bl	8004ad8 <memset>
  if(uartHandle->Instance==USART2)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a28      	ldr	r2, [pc, #160]	@ (80010b4 <HAL_UART_MspInit+0xcc>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d148      	bne.n	80010aa <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001018:	2302      	movs	r3, #2
 800101a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800101c:	2300      	movs	r3, #0
 800101e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	4618      	mov	r0, r3
 8001026:	f002 f8ed 	bl	8003204 <HAL_RCCEx_PeriphCLKConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001030:	f7ff fe16 	bl	8000c60 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001034:	4b20      	ldr	r3, [pc, #128]	@ (80010b8 <HAL_UART_MspInit+0xd0>)
 8001036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001038:	4a1f      	ldr	r2, [pc, #124]	@ (80010b8 <HAL_UART_MspInit+0xd0>)
 800103a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800103e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001040:	4b1d      	ldr	r3, [pc, #116]	@ (80010b8 <HAL_UART_MspInit+0xd0>)
 8001042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104c:	4b1a      	ldr	r3, [pc, #104]	@ (80010b8 <HAL_UART_MspInit+0xd0>)
 800104e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001050:	4a19      	ldr	r2, [pc, #100]	@ (80010b8 <HAL_UART_MspInit+0xd0>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001058:	4b17      	ldr	r3, [pc, #92]	@ (80010b8 <HAL_UART_MspInit+0xd0>)
 800105a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001064:	2304      	movs	r3, #4
 8001066:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001074:	2307      	movs	r3, #7
 8001076:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800107c:	4619      	mov	r1, r3
 800107e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001082:	f001 f85f 	bl	8002144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001086:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800108a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001098:	2303      	movs	r3, #3
 800109a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800109c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010a0:	4619      	mov	r1, r3
 80010a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a6:	f001 f84d 	bl	8002144 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010aa:	bf00      	nop
 80010ac:	3778      	adds	r7, #120	@ 0x78
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40004400 	.word	0x40004400
 80010b8:	40021000 	.word	0x40021000

080010bc <UART_Send>:
  }
}

/* USER CODE BEGIN 1 */
void UART_Send(char* buf, uint8_t len)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(&huart2, (uint8_t *)buf, len, 100);
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	2364      	movs	r3, #100	@ 0x64
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	4803      	ldr	r0, [pc, #12]	@ (80010e0 <UART_Send+0x24>)
 80010d2:	f003 f80f 	bl	80040f4 <HAL_UART_Transmit>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200001cc 	.word	0x200001cc

080010e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800111c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010e8:	f7ff fe76 	bl	8000dd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010ec:	480c      	ldr	r0, [pc, #48]	@ (8001120 <LoopForever+0x6>)
  ldr r1, =_edata
 80010ee:	490d      	ldr	r1, [pc, #52]	@ (8001124 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001128 <LoopForever+0xe>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f4:	e002      	b.n	80010fc <LoopCopyDataInit>

080010f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fa:	3304      	adds	r3, #4

080010fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001100:	d3f9      	bcc.n	80010f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001102:	4a0a      	ldr	r2, [pc, #40]	@ (800112c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001104:	4c0a      	ldr	r4, [pc, #40]	@ (8001130 <LoopForever+0x16>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001108:	e001      	b.n	800110e <LoopFillZerobss>

0800110a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800110c:	3204      	adds	r2, #4

0800110e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001110:	d3fb      	bcc.n	800110a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001112:	f003 fcef 	bl	8004af4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001116:	f7ff fc23 	bl	8000960 <main>

0800111a <LoopForever>:

LoopForever:
    b LoopForever
 800111a:	e7fe      	b.n	800111a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800111c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001124:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001128:	08005494 	.word	0x08005494
  ldr r2, =_sbss
 800112c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001130:	200003a0 	.word	0x200003a0

08001134 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001134:	e7fe      	b.n	8001134 <ADC1_IRQHandler>

08001136 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800113c:	2300      	movs	r3, #0
 800113e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001140:	2003      	movs	r0, #3
 8001142:	f000 ffbd 	bl	80020c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001146:	2000      	movs	r0, #0
 8001148:	f000 f80e 	bl	8001168 <HAL_InitTick>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d002      	beq.n	8001158 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	71fb      	strb	r3, [r7, #7]
 8001156:	e001      	b.n	800115c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001158:	f7ff fd88 	bl	8000c6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800115c:	79fb      	ldrb	r3, [r7, #7]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001170:	2300      	movs	r3, #0
 8001172:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001174:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <HAL_InitTick+0x6c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d023      	beq.n	80011c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800117c:	4b16      	ldr	r3, [pc, #88]	@ (80011d8 <HAL_InitTick+0x70>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <HAL_InitTick+0x6c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800118a:	fbb3 f3f1 	udiv	r3, r3, r1
 800118e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f000 ffc9 	bl	800212a <HAL_SYSTICK_Config>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10f      	bne.n	80011be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	d809      	bhi.n	80011b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a4:	2200      	movs	r2, #0
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f000 ff93 	bl	80020d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011b0:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <HAL_InitTick+0x74>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	e007      	b.n	80011c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	e004      	b.n	80011c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	73fb      	strb	r3, [r7, #15]
 80011c2:	e001      	b.n	80011c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	2000000c 	.word	0x2000000c
 80011d8:	20000004 	.word	0x20000004
 80011dc:	20000008 	.word	0x20000008

080011e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <HAL_IncTick+0x20>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <HAL_IncTick+0x24>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a04      	ldr	r2, [pc, #16]	@ (8001204 <HAL_IncTick+0x24>)
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	2000000c 	.word	0x2000000c
 8001204:	20000254 	.word	0x20000254

08001208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return uwTick;
 800120c:	4b03      	ldr	r3, [pc, #12]	@ (800121c <HAL_GetTick+0x14>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000254 	.word	0x20000254

08001220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001228:	f7ff ffee 	bl	8001208 <HAL_GetTick>
 800122c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001238:	d005      	beq.n	8001246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <HAL_Delay+0x44>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4413      	add	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001246:	bf00      	nop
 8001248:	f7ff ffde 	bl	8001208 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	429a      	cmp	r2, r3
 8001256:	d8f7      	bhi.n	8001248 <HAL_Delay+0x28>
  {
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2000000c 	.word	0x2000000c

08001268 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e0ed      	b.n	8001456 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d102      	bne.n	800128c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff f9d6 	bl	8000638 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f042 0201 	orr.w	r2, r2, #1
 800129a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800129c:	f7ff ffb4 	bl	8001208 <HAL_GetTick>
 80012a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012a2:	e012      	b.n	80012ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012a4:	f7ff ffb0 	bl	8001208 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b0a      	cmp	r3, #10
 80012b0:	d90b      	bls.n	80012ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2205      	movs	r2, #5
 80012c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e0c5      	b.n	8001456 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0e5      	beq.n	80012a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0202 	bic.w	r2, r2, #2
 80012e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012e8:	f7ff ff8e 	bl	8001208 <HAL_GetTick>
 80012ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012ee:	e012      	b.n	8001316 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012f0:	f7ff ff8a 	bl	8001208 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b0a      	cmp	r3, #10
 80012fc:	d90b      	bls.n	8001316 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001302:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2205      	movs	r2, #5
 800130e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e09f      	b.n	8001456 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1e5      	bne.n	80012f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	7e1b      	ldrb	r3, [r3, #24]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d108      	bne.n	800133e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	e007      	b.n	800134e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800134c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7e5b      	ldrb	r3, [r3, #25]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d108      	bne.n	8001368 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	e007      	b.n	8001378 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001376:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	7e9b      	ldrb	r3, [r3, #26]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d108      	bne.n	8001392 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f042 0220 	orr.w	r2, r2, #32
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	e007      	b.n	80013a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 0220 	bic.w	r2, r2, #32
 80013a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	7edb      	ldrb	r3, [r3, #27]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d108      	bne.n	80013bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0210 	bic.w	r2, r2, #16
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	e007      	b.n	80013cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0210 	orr.w	r2, r2, #16
 80013ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	7f1b      	ldrb	r3, [r3, #28]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d108      	bne.n	80013e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 0208 	orr.w	r2, r2, #8
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	e007      	b.n	80013f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0208 	bic.w	r2, r2, #8
 80013f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	7f5b      	ldrb	r3, [r3, #29]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d108      	bne.n	8001410 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f042 0204 	orr.w	r2, r2, #4
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	e007      	b.n	8001420 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 0204 	bic.w	r2, r2, #4
 800141e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	431a      	orrs	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	431a      	orrs	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	ea42 0103 	orr.w	r1, r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	1e5a      	subs	r2, r3, #1
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	430a      	orrs	r2, r1
 8001444:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800145e:	b480      	push	{r7}
 8001460:	b087      	sub	sp, #28
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001474:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001476:	7cfb      	ldrb	r3, [r7, #19]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d003      	beq.n	8001484 <HAL_CAN_ConfigFilter+0x26>
 800147c:	7cfb      	ldrb	r3, [r7, #19]
 800147e:	2b02      	cmp	r3, #2
 8001480:	f040 80aa 	bne.w	80015d8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800148a:	f043 0201 	orr.w	r2, r3, #1
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	f003 031f 	and.w	r3, r3, #31
 800149c:	2201      	movs	r2, #1
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	43db      	mvns	r3, r3
 80014ae:	401a      	ands	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d123      	bne.n	8001506 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	401a      	ands	r2, r3
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	3248      	adds	r2, #72	@ 0x48
 80014e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014fc:	6979      	ldr	r1, [r7, #20]
 80014fe:	3348      	adds	r3, #72	@ 0x48
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	440b      	add	r3, r1
 8001504:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d122      	bne.n	8001554 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	431a      	orrs	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800152e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	3248      	adds	r2, #72	@ 0x48
 8001534:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001548:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800154a:	6979      	ldr	r1, [r7, #20]
 800154c:	3348      	adds	r3, #72	@ 0x48
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	440b      	add	r3, r1
 8001552:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d109      	bne.n	8001570 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	43db      	mvns	r3, r3
 8001566:	401a      	ands	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800156e:	e007      	b.n	8001580 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	431a      	orrs	r2, r3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d109      	bne.n	800159c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	43db      	mvns	r3, r3
 8001592:	401a      	ands	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800159a:	e007      	b.n	80015ac <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	431a      	orrs	r2, r3
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d107      	bne.n	80015c4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	431a      	orrs	r2, r3
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80015ca:	f023 0201 	bic.w	r2, r3, #1
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80015d4:	2300      	movs	r3, #0
 80015d6:	e006      	b.n	80015e6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015dc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
  }
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	371c      	adds	r7, #28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b084      	sub	sp, #16
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b01      	cmp	r3, #1
 8001604:	d12e      	bne.n	8001664 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2202      	movs	r2, #2
 800160a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0201 	bic.w	r2, r2, #1
 800161c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800161e:	f7ff fdf3 	bl	8001208 <HAL_GetTick>
 8001622:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001624:	e012      	b.n	800164c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001626:	f7ff fdef 	bl	8001208 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b0a      	cmp	r3, #10
 8001632:	d90b      	bls.n	800164c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001638:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2205      	movs	r2, #5
 8001644:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e012      	b.n	8001672 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1e5      	bne.n	8001626 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	e006      	b.n	8001672 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001668:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
  }
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800167a:	b480      	push	{r7}
 800167c:	b089      	sub	sp, #36	@ 0x24
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
 8001686:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800168e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001698:	7ffb      	ldrb	r3, [r7, #31]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d003      	beq.n	80016a6 <HAL_CAN_AddTxMessage+0x2c>
 800169e:	7ffb      	ldrb	r3, [r7, #31]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	f040 80ad 	bne.w	8001800 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10a      	bne.n	80016c6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d105      	bne.n	80016c6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 8095 	beq.w	80017f0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	0e1b      	lsrs	r3, r3, #24
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80016d0:	2201      	movs	r2, #1
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	409a      	lsls	r2, r3
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10d      	bne.n	80016fe <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80016ec:	68f9      	ldr	r1, [r7, #12]
 80016ee:	6809      	ldr	r1, [r1, #0]
 80016f0:	431a      	orrs	r2, r3
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	3318      	adds	r3, #24
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	440b      	add	r3, r1
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	e00f      	b.n	800171e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001708:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800170e:	68f9      	ldr	r1, [r7, #12]
 8001710:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001712:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	3318      	adds	r3, #24
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	440b      	add	r3, r1
 800171c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6819      	ldr	r1, [r3, #0]
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	691a      	ldr	r2, [r3, #16]
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	3318      	adds	r3, #24
 800172a:	011b      	lsls	r3, r3, #4
 800172c:	440b      	add	r3, r1
 800172e:	3304      	adds	r3, #4
 8001730:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	7d1b      	ldrb	r3, [r3, #20]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d111      	bne.n	800175e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	3318      	adds	r3, #24
 8001742:	011b      	lsls	r3, r3, #4
 8001744:	4413      	add	r3, r2
 8001746:	3304      	adds	r3, #4
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	6811      	ldr	r1, [r2, #0]
 800174e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3318      	adds	r3, #24
 8001756:	011b      	lsls	r3, r3, #4
 8001758:	440b      	add	r3, r1
 800175a:	3304      	adds	r3, #4
 800175c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3307      	adds	r3, #7
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	061a      	lsls	r2, r3, #24
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3306      	adds	r3, #6
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	041b      	lsls	r3, r3, #16
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3305      	adds	r3, #5
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	021b      	lsls	r3, r3, #8
 8001778:	4313      	orrs	r3, r2
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	3204      	adds	r2, #4
 800177e:	7812      	ldrb	r2, [r2, #0]
 8001780:	4610      	mov	r0, r2
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	6811      	ldr	r1, [r2, #0]
 8001786:	ea43 0200 	orr.w	r2, r3, r0
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	440b      	add	r3, r1
 8001790:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001794:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3303      	adds	r3, #3
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	061a      	lsls	r2, r3, #24
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3302      	adds	r3, #2
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	041b      	lsls	r3, r3, #16
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3301      	adds	r3, #1
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	4313      	orrs	r3, r2
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	7812      	ldrb	r2, [r2, #0]
 80017b6:	4610      	mov	r0, r2
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	6811      	ldr	r1, [r2, #0]
 80017bc:	ea43 0200 	orr.w	r2, r3, r0
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	440b      	add	r3, r1
 80017c6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80017ca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	3318      	adds	r3, #24
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	4413      	add	r3, r2
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	6811      	ldr	r1, [r2, #0]
 80017de:	f043 0201 	orr.w	r2, r3, #1
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	3318      	adds	r3, #24
 80017e6:	011b      	lsls	r3, r3, #4
 80017e8:	440b      	add	r3, r1
 80017ea:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80017ec:	2300      	movs	r3, #0
 80017ee:	e00e      	b.n	800180e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e006      	b.n	800180e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001804:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
  }
}
 800180e:	4618      	mov	r0, r3
 8001810:	3724      	adds	r7, #36	@ 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800181a:	b480      	push	{r7}
 800181c:	b087      	sub	sp, #28
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800182e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001830:	7dfb      	ldrb	r3, [r7, #23]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d003      	beq.n	800183e <HAL_CAN_GetRxMessage+0x24>
 8001836:	7dfb      	ldrb	r3, [r7, #23]
 8001838:	2b02      	cmp	r3, #2
 800183a:	f040 8103 	bne.w	8001a44 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d10e      	bne.n	8001862 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d116      	bne.n	8001880 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001856:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e0f7      	b.n	8001a52 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	2b00      	cmp	r3, #0
 800186e:	d107      	bne.n	8001880 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001874:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e0e8      	b.n	8001a52 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	331b      	adds	r3, #27
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	4413      	add	r3, r2
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0204 	and.w	r2, r3, #4
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10c      	bne.n	80018b8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	331b      	adds	r3, #27
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	4413      	add	r3, r2
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	0d5b      	lsrs	r3, r3, #21
 80018ae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	e00b      	b.n	80018d0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	331b      	adds	r3, #27
 80018c0:	011b      	lsls	r3, r3, #4
 80018c2:	4413      	add	r3, r2
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	08db      	lsrs	r3, r3, #3
 80018c8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	331b      	adds	r3, #27
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	4413      	add	r3, r2
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0202 	and.w	r2, r3, #2
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	331b      	adds	r3, #27
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	4413      	add	r3, r2
 80018f2:	3304      	adds	r3, #4
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2208      	movs	r2, #8
 8001902:	611a      	str	r2, [r3, #16]
 8001904:	e00b      	b.n	800191e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	331b      	adds	r3, #27
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	4413      	add	r3, r2
 8001912:	3304      	adds	r3, #4
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 020f 	and.w	r2, r3, #15
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	331b      	adds	r3, #27
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	4413      	add	r3, r2
 800192a:	3304      	adds	r3, #4
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	0a1b      	lsrs	r3, r3, #8
 8001930:	b2da      	uxtb	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	331b      	adds	r3, #27
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	4413      	add	r3, r2
 8001942:	3304      	adds	r3, #4
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	0c1b      	lsrs	r3, r3, #16
 8001948:	b29a      	uxth	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	4413      	add	r3, r2
 8001958:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	4413      	add	r3, r2
 800196e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	0a1a      	lsrs	r2, r3, #8
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	3301      	adds	r3, #1
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	011b      	lsls	r3, r3, #4
 8001986:	4413      	add	r3, r2
 8001988:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	0c1a      	lsrs	r2, r3, #16
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	3302      	adds	r3, #2
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	4413      	add	r3, r2
 80019a2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	0e1a      	lsrs	r2, r3, #24
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	3303      	adds	r3, #3
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	4413      	add	r3, r2
 80019bc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	3304      	adds	r3, #4
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	4413      	add	r3, r2
 80019d4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	0a1a      	lsrs	r2, r3, #8
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	3305      	adds	r3, #5
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	4413      	add	r3, r2
 80019ee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	0c1a      	lsrs	r2, r3, #16
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	3306      	adds	r3, #6
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	011b      	lsls	r3, r3, #4
 8001a06:	4413      	add	r3, r2
 8001a08:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	0e1a      	lsrs	r2, r3, #24
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	3307      	adds	r3, #7
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d108      	bne.n	8001a30 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68da      	ldr	r2, [r3, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f042 0220 	orr.w	r2, r2, #32
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	e007      	b.n	8001a40 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	691a      	ldr	r2, [r3, #16]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0220 	orr.w	r2, r2, #32
 8001a3e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001a40:	2300      	movs	r3, #0
 8001a42:	e006      	b.n	8001a52 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a48:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
  }
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	371c      	adds	r7, #28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b085      	sub	sp, #20
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a6e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d002      	beq.n	8001a7c <HAL_CAN_ActivateNotification+0x1e>
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d109      	bne.n	8001a90 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6959      	ldr	r1, [r3, #20]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	e006      	b.n	8001a9e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a94:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
  }
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b08a      	sub	sp, #40	@ 0x28
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d07c      	beq.n	8001bea <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d023      	beq.n	8001b42 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2201      	movs	r2, #1
 8001b00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f983 	bl	8001e18 <HAL_CAN_TxMailbox0CompleteCallback>
 8001b12:	e016      	b.n	8001b42 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d004      	beq.n	8001b28 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b26:	e00c      	b.n	8001b42 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d004      	beq.n	8001b3c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b3a:	e002      	b.n	8001b42 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f989 	bl	8001e54 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d024      	beq.n	8001b96 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b54:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f963 	bl	8001e2c <HAL_CAN_TxMailbox1CompleteCallback>
 8001b66:	e016      	b.n	8001b96 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d004      	beq.n	8001b7c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b74:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b78:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b7a:	e00c      	b.n	8001b96 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d004      	beq.n	8001b90 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b8e:	e002      	b.n	8001b96 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f969 	bl	8001e68 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d024      	beq.n	8001bea <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ba8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f943 	bl	8001e40 <HAL_CAN_TxMailbox2CompleteCallback>
 8001bba:	e016      	b.n	8001bea <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d004      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bce:	e00c      	b.n	8001bea <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d004      	beq.n	8001be4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001be2:	e002      	b.n	8001bea <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f949 	bl	8001e7c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00c      	beq.n	8001c0e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f003 0310 	and.w	r3, r3, #16
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d007      	beq.n	8001c0e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2210      	movs	r2, #16
 8001c0c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00b      	beq.n	8001c30 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d006      	beq.n	8001c30 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2208      	movs	r2, #8
 8001c28:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f930 	bl	8001e90 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c30:	6a3b      	ldr	r3, [r7, #32]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d002      	beq.n	8001c4e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7fe fd97 	bl	800077c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001c4e:	6a3b      	ldr	r3, [r7, #32]
 8001c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00c      	beq.n	8001c72 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	f003 0310 	and.w	r3, r3, #16
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d007      	beq.n	8001c72 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c68:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2210      	movs	r2, #16
 8001c70:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c72:	6a3b      	ldr	r3, [r7, #32]
 8001c74:	f003 0320 	and.w	r3, r3, #32
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00b      	beq.n	8001c94 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d006      	beq.n	8001c94 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2208      	movs	r2, #8
 8001c8c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f912 	bl	8001eb8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001c94:	6a3b      	ldr	r3, [r7, #32]
 8001c96:	f003 0310 	and.w	r3, r3, #16
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d009      	beq.n	8001cb2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d002      	beq.n	8001cb2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f8f9 	bl	8001ea4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00b      	beq.n	8001cd4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d006      	beq.n	8001cd4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2210      	movs	r2, #16
 8001ccc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f8fc 	bl	8001ecc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
 8001cd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00b      	beq.n	8001cf6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d006      	beq.n	8001cf6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2208      	movs	r2, #8
 8001cee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f8f5 	bl	8001ee0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001cf6:	6a3b      	ldr	r3, [r7, #32]
 8001cf8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d07b      	beq.n	8001df8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d072      	beq.n	8001df0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d008      	beq.n	8001d26 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d26:	6a3b      	ldr	r3, [r7, #32]
 8001d28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d008      	beq.n	8001d42 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d42:	6a3b      	ldr	r3, [r7, #32]
 8001d44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d58:	f043 0304 	orr.w	r3, r3, #4
 8001d5c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d043      	beq.n	8001df0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d03e      	beq.n	8001df0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d78:	2b60      	cmp	r3, #96	@ 0x60
 8001d7a:	d02b      	beq.n	8001dd4 <HAL_CAN_IRQHandler+0x32a>
 8001d7c:	2b60      	cmp	r3, #96	@ 0x60
 8001d7e:	d82e      	bhi.n	8001dde <HAL_CAN_IRQHandler+0x334>
 8001d80:	2b50      	cmp	r3, #80	@ 0x50
 8001d82:	d022      	beq.n	8001dca <HAL_CAN_IRQHandler+0x320>
 8001d84:	2b50      	cmp	r3, #80	@ 0x50
 8001d86:	d82a      	bhi.n	8001dde <HAL_CAN_IRQHandler+0x334>
 8001d88:	2b40      	cmp	r3, #64	@ 0x40
 8001d8a:	d019      	beq.n	8001dc0 <HAL_CAN_IRQHandler+0x316>
 8001d8c:	2b40      	cmp	r3, #64	@ 0x40
 8001d8e:	d826      	bhi.n	8001dde <HAL_CAN_IRQHandler+0x334>
 8001d90:	2b30      	cmp	r3, #48	@ 0x30
 8001d92:	d010      	beq.n	8001db6 <HAL_CAN_IRQHandler+0x30c>
 8001d94:	2b30      	cmp	r3, #48	@ 0x30
 8001d96:	d822      	bhi.n	8001dde <HAL_CAN_IRQHandler+0x334>
 8001d98:	2b10      	cmp	r3, #16
 8001d9a:	d002      	beq.n	8001da2 <HAL_CAN_IRQHandler+0x2f8>
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	d005      	beq.n	8001dac <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001da0:	e01d      	b.n	8001dde <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da4:	f043 0308 	orr.w	r3, r3, #8
 8001da8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001daa:	e019      	b.n	8001de0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dae:	f043 0310 	orr.w	r3, r3, #16
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001db4:	e014      	b.n	8001de0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db8:	f043 0320 	orr.w	r3, r3, #32
 8001dbc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001dbe:	e00f      	b.n	8001de0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dc6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001dc8:	e00a      	b.n	8001de0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dd0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001dd2:	e005      	b.n	8001de0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dda:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ddc:	e000      	b.n	8001de0 <HAL_CAN_IRQHandler+0x336>
            break;
 8001dde:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699a      	ldr	r2, [r3, #24]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001dee:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2204      	movs	r2, #4
 8001df6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d008      	beq.n	8001e10 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f872 	bl	8001ef4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e10:	bf00      	nop
 8001e12:	3728      	adds	r7, #40	@ 0x28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <__NVIC_SetPriorityGrouping>:
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f30:	4b0c      	ldr	r3, [pc, #48]	@ (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f52:	4a04      	ldr	r2, [pc, #16]	@ (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	60d3      	str	r3, [r2, #12]
}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_GetPriorityGrouping>:
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f6c:	4b04      	ldr	r3, [pc, #16]	@ (8001f80 <__NVIC_GetPriorityGrouping+0x18>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	0a1b      	lsrs	r3, r3, #8
 8001f72:	f003 0307 	and.w	r3, r3, #7
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_EnableIRQ>:
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	db0b      	blt.n	8001fae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	f003 021f 	and.w	r2, r3, #31
 8001f9c:	4907      	ldr	r1, [pc, #28]	@ (8001fbc <__NVIC_EnableIRQ+0x38>)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	e000e100 	.word	0xe000e100

08001fc0 <__NVIC_SetPriority>:
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	6039      	str	r1, [r7, #0]
 8001fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	db0a      	blt.n	8001fea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	490c      	ldr	r1, [pc, #48]	@ (800200c <__NVIC_SetPriority+0x4c>)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	0112      	lsls	r2, r2, #4
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001fe8:	e00a      	b.n	8002000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4908      	ldr	r1, [pc, #32]	@ (8002010 <__NVIC_SetPriority+0x50>)
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	3b04      	subs	r3, #4
 8001ff8:	0112      	lsls	r2, r2, #4
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	761a      	strb	r2, [r3, #24]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000e100 	.word	0xe000e100
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <NVIC_EncodePriority>:
{
 8002014:	b480      	push	{r7}
 8002016:	b089      	sub	sp, #36	@ 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f1c3 0307 	rsb	r3, r3, #7
 800202e:	2b04      	cmp	r3, #4
 8002030:	bf28      	it	cs
 8002032:	2304      	movcs	r3, #4
 8002034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3304      	adds	r3, #4
 800203a:	2b06      	cmp	r3, #6
 800203c:	d902      	bls.n	8002044 <NVIC_EncodePriority+0x30>
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3b03      	subs	r3, #3
 8002042:	e000      	b.n	8002046 <NVIC_EncodePriority+0x32>
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	f04f 32ff 	mov.w	r2, #4294967295
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43da      	mvns	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	401a      	ands	r2, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800205c:	f04f 31ff 	mov.w	r1, #4294967295
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa01 f303 	lsl.w	r3, r1, r3
 8002066:	43d9      	mvns	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	4313      	orrs	r3, r2
}
 800206e:	4618      	mov	r0, r3
 8002070:	3724      	adds	r7, #36	@ 0x24
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <SysTick_Config>:
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3b01      	subs	r3, #1
 8002088:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800208c:	d301      	bcc.n	8002092 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800208e:	2301      	movs	r3, #1
 8002090:	e00f      	b.n	80020b2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002092:	4a0a      	ldr	r2, [pc, #40]	@ (80020bc <SysTick_Config+0x40>)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3b01      	subs	r3, #1
 8002098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800209a:	210f      	movs	r1, #15
 800209c:	f04f 30ff 	mov.w	r0, #4294967295
 80020a0:	f7ff ff8e 	bl	8001fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a4:	4b05      	ldr	r3, [pc, #20]	@ (80020bc <SysTick_Config+0x40>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020aa:	4b04      	ldr	r3, [pc, #16]	@ (80020bc <SysTick_Config+0x40>)
 80020ac:	2207      	movs	r2, #7
 80020ae:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	e000e010 	.word	0xe000e010

080020c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ff29 	bl	8001f20 <__NVIC_SetPriorityGrouping>
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b086      	sub	sp, #24
 80020da:	af00      	add	r7, sp, #0
 80020dc:	4603      	mov	r3, r0
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
 80020e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020e8:	f7ff ff3e 	bl	8001f68 <__NVIC_GetPriorityGrouping>
 80020ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68b9      	ldr	r1, [r7, #8]
 80020f2:	6978      	ldr	r0, [r7, #20]
 80020f4:	f7ff ff8e 	bl	8002014 <NVIC_EncodePriority>
 80020f8:	4602      	mov	r2, r0
 80020fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020fe:	4611      	mov	r1, r2
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff5d 	bl	8001fc0 <__NVIC_SetPriority>
}
 8002106:	bf00      	nop
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	4603      	mov	r3, r0
 8002116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff31 	bl	8001f84 <__NVIC_EnableIRQ>
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff ffa2 	bl	800207c <SysTick_Config>
 8002138:	4603      	mov	r3, r0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002144:	b480      	push	{r7}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002152:	e148      	b.n	80023e6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	2101      	movs	r1, #1
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	fa01 f303 	lsl.w	r3, r1, r3
 8002160:	4013      	ands	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 813a 	beq.w	80023e0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	2b01      	cmp	r3, #1
 8002176:	d005      	beq.n	8002184 <HAL_GPIO_Init+0x40>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d130      	bne.n	80021e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	2203      	movs	r2, #3
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4013      	ands	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021ba:	2201      	movs	r2, #1
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43db      	mvns	r3, r3
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4013      	ands	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	091b      	lsrs	r3, r3, #4
 80021d0:	f003 0201 	and.w	r2, r3, #1
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4313      	orrs	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d017      	beq.n	8002222 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	2203      	movs	r2, #3
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d123      	bne.n	8002276 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	08da      	lsrs	r2, r3, #3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3208      	adds	r2, #8
 8002236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800223a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	220f      	movs	r2, #15
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	691a      	ldr	r2, [r3, #16]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	08da      	lsrs	r2, r3, #3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3208      	adds	r2, #8
 8002270:	6939      	ldr	r1, [r7, #16]
 8002272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	2203      	movs	r2, #3
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4013      	ands	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 0203 	and.w	r2, r3, #3
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 8094 	beq.w	80023e0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b8:	4b52      	ldr	r3, [pc, #328]	@ (8002404 <HAL_GPIO_Init+0x2c0>)
 80022ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022bc:	4a51      	ldr	r2, [pc, #324]	@ (8002404 <HAL_GPIO_Init+0x2c0>)
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80022c4:	4b4f      	ldr	r3, [pc, #316]	@ (8002404 <HAL_GPIO_Init+0x2c0>)
 80022c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022d0:	4a4d      	ldr	r2, [pc, #308]	@ (8002408 <HAL_GPIO_Init+0x2c4>)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	089b      	lsrs	r3, r3, #2
 80022d6:	3302      	adds	r3, #2
 80022d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	220f      	movs	r2, #15
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80022fa:	d00d      	beq.n	8002318 <HAL_GPIO_Init+0x1d4>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a43      	ldr	r2, [pc, #268]	@ (800240c <HAL_GPIO_Init+0x2c8>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d007      	beq.n	8002314 <HAL_GPIO_Init+0x1d0>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a42      	ldr	r2, [pc, #264]	@ (8002410 <HAL_GPIO_Init+0x2cc>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d101      	bne.n	8002310 <HAL_GPIO_Init+0x1cc>
 800230c:	2302      	movs	r3, #2
 800230e:	e004      	b.n	800231a <HAL_GPIO_Init+0x1d6>
 8002310:	2307      	movs	r3, #7
 8002312:	e002      	b.n	800231a <HAL_GPIO_Init+0x1d6>
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <HAL_GPIO_Init+0x1d6>
 8002318:	2300      	movs	r3, #0
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	f002 0203 	and.w	r2, r2, #3
 8002320:	0092      	lsls	r2, r2, #2
 8002322:	4093      	lsls	r3, r2
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4313      	orrs	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800232a:	4937      	ldr	r1, [pc, #220]	@ (8002408 <HAL_GPIO_Init+0x2c4>)
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	089b      	lsrs	r3, r3, #2
 8002330:	3302      	adds	r3, #2
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002338:	4b36      	ldr	r3, [pc, #216]	@ (8002414 <HAL_GPIO_Init+0x2d0>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	43db      	mvns	r3, r3
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4013      	ands	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	4313      	orrs	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800235c:	4a2d      	ldr	r2, [pc, #180]	@ (8002414 <HAL_GPIO_Init+0x2d0>)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002362:	4b2c      	ldr	r3, [pc, #176]	@ (8002414 <HAL_GPIO_Init+0x2d0>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	43db      	mvns	r3, r3
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4013      	ands	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002386:	4a23      	ldr	r2, [pc, #140]	@ (8002414 <HAL_GPIO_Init+0x2d0>)
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800238c:	4b21      	ldr	r3, [pc, #132]	@ (8002414 <HAL_GPIO_Init+0x2d0>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	43db      	mvns	r3, r3
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023b0:	4a18      	ldr	r2, [pc, #96]	@ (8002414 <HAL_GPIO_Init+0x2d0>)
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80023b6:	4b17      	ldr	r3, [pc, #92]	@ (8002414 <HAL_GPIO_Init+0x2d0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	43db      	mvns	r3, r3
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4013      	ands	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023da:	4a0e      	ldr	r2, [pc, #56]	@ (8002414 <HAL_GPIO_Init+0x2d0>)
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	3301      	adds	r3, #1
 80023e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	fa22 f303 	lsr.w	r3, r2, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f47f aeaf 	bne.w	8002154 <HAL_GPIO_Init+0x10>
  }
}
 80023f6:	bf00      	nop
 80023f8:	bf00      	nop
 80023fa:	371c      	adds	r7, #28
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	40021000 	.word	0x40021000
 8002408:	40010000 	.word	0x40010000
 800240c:	48000400 	.word	0x48000400
 8002410:	48000800 	.word	0x48000800
 8002414:	40010400 	.word	0x40010400

08002418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	807b      	strh	r3, [r7, #2]
 8002424:	4613      	mov	r3, r2
 8002426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002428:	787b      	ldrb	r3, [r7, #1]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800242e:	887a      	ldrh	r2, [r7, #2]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002434:	e002      	b.n	800243c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002436:	887a      	ldrh	r2, [r7, #2]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800245a:	887a      	ldrh	r2, [r7, #2]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4013      	ands	r3, r2
 8002460:	041a      	lsls	r2, r3, #16
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	43d9      	mvns	r1, r3
 8002466:	887b      	ldrh	r3, [r7, #2]
 8002468:	400b      	ands	r3, r1
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	619a      	str	r2, [r3, #24]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002486:	4b08      	ldr	r3, [pc, #32]	@ (80024a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002488:	695a      	ldr	r2, [r3, #20]
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	4013      	ands	r3, r2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d006      	beq.n	80024a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002492:	4a05      	ldr	r2, [pc, #20]	@ (80024a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002494:	88fb      	ldrh	r3, [r7, #6]
 8002496:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002498:	88fb      	ldrh	r3, [r7, #6]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fb9e 	bl	8000bdc <HAL_GPIO_EXTI_Callback>
  }
}
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40010400 	.word	0x40010400

080024ac <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024b0:	4b05      	ldr	r3, [pc, #20]	@ (80024c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a04      	ldr	r2, [pc, #16]	@ (80024c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ba:	6013      	str	r3, [r2, #0]
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40007000 	.word	0x40007000

080024cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024d0:	4b04      	ldr	r3, [pc, #16]	@ (80024e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40007000 	.word	0x40007000

080024e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024f6:	d130      	bne.n	800255a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80024f8:	4b23      	ldr	r3, [pc, #140]	@ (8002588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002504:	d038      	beq.n	8002578 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002506:	4b20      	ldr	r3, [pc, #128]	@ (8002588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800250e:	4a1e      	ldr	r2, [pc, #120]	@ (8002588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002510:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002514:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002516:	4b1d      	ldr	r3, [pc, #116]	@ (800258c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2232      	movs	r2, #50	@ 0x32
 800251c:	fb02 f303 	mul.w	r3, r2, r3
 8002520:	4a1b      	ldr	r2, [pc, #108]	@ (8002590 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002522:	fba2 2303 	umull	r2, r3, r2, r3
 8002526:	0c9b      	lsrs	r3, r3, #18
 8002528:	3301      	adds	r3, #1
 800252a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800252c:	e002      	b.n	8002534 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	3b01      	subs	r3, #1
 8002532:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002534:	4b14      	ldr	r3, [pc, #80]	@ (8002588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800253c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002540:	d102      	bne.n	8002548 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1f2      	bne.n	800252e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002548:	4b0f      	ldr	r3, [pc, #60]	@ (8002588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002554:	d110      	bne.n	8002578 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e00f      	b.n	800257a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800255a:	4b0b      	ldr	r3, [pc, #44]	@ (8002588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002562:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002566:	d007      	beq.n	8002578 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002568:	4b07      	ldr	r3, [pc, #28]	@ (8002588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002570:	4a05      	ldr	r2, [pc, #20]	@ (8002588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002572:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002576:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40007000 	.word	0x40007000
 800258c:	20000004 	.word	0x20000004
 8002590:	431bde83 	.word	0x431bde83

08002594 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d102      	bne.n	80025a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	f000 bc02 	b.w	8002dac <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025a8:	4b96      	ldr	r3, [pc, #600]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 030c 	and.w	r3, r3, #12
 80025b0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025b2:	4b94      	ldr	r3, [pc, #592]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 80e4 	beq.w	8002792 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d007      	beq.n	80025e0 <HAL_RCC_OscConfig+0x4c>
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	2b0c      	cmp	r3, #12
 80025d4:	f040 808b 	bne.w	80026ee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	f040 8087 	bne.w	80026ee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025e0:	4b88      	ldr	r3, [pc, #544]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d005      	beq.n	80025f8 <HAL_RCC_OscConfig+0x64>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e3d9      	b.n	8002dac <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1a      	ldr	r2, [r3, #32]
 80025fc:	4b81      	ldr	r3, [pc, #516]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d004      	beq.n	8002612 <HAL_RCC_OscConfig+0x7e>
 8002608:	4b7e      	ldr	r3, [pc, #504]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002610:	e005      	b.n	800261e <HAL_RCC_OscConfig+0x8a>
 8002612:	4b7c      	ldr	r3, [pc, #496]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 8002614:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002618:	091b      	lsrs	r3, r3, #4
 800261a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800261e:	4293      	cmp	r3, r2
 8002620:	d223      	bcs.n	800266a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	4618      	mov	r0, r3
 8002628:	f000 fd8c 	bl	8003144 <RCC_SetFlashLatencyFromMSIRange>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e3ba      	b.n	8002dac <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002636:	4b73      	ldr	r3, [pc, #460]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a72      	ldr	r2, [pc, #456]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 800263c:	f043 0308 	orr.w	r3, r3, #8
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	4b70      	ldr	r3, [pc, #448]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	496d      	ldr	r1, [pc, #436]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 8002650:	4313      	orrs	r3, r2
 8002652:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002654:	4b6b      	ldr	r3, [pc, #428]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	021b      	lsls	r3, r3, #8
 8002662:	4968      	ldr	r1, [pc, #416]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 8002664:	4313      	orrs	r3, r2
 8002666:	604b      	str	r3, [r1, #4]
 8002668:	e025      	b.n	80026b6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800266a:	4b66      	ldr	r3, [pc, #408]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a65      	ldr	r2, [pc, #404]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 8002670:	f043 0308 	orr.w	r3, r3, #8
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	4b63      	ldr	r3, [pc, #396]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	4960      	ldr	r1, [pc, #384]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 8002684:	4313      	orrs	r3, r2
 8002686:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002688:	4b5e      	ldr	r3, [pc, #376]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	021b      	lsls	r3, r3, #8
 8002696:	495b      	ldr	r1, [pc, #364]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 8002698:	4313      	orrs	r3, r2
 800269a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d109      	bne.n	80026b6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 fd4c 	bl	8003144 <RCC_SetFlashLatencyFromMSIRange>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e37a      	b.n	8002dac <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026b6:	f000 fc81 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 80026ba:	4602      	mov	r2, r0
 80026bc:	4b51      	ldr	r3, [pc, #324]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	4950      	ldr	r1, [pc, #320]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 80026c8:	5ccb      	ldrb	r3, [r1, r3]
 80026ca:	f003 031f 	and.w	r3, r3, #31
 80026ce:	fa22 f303 	lsr.w	r3, r2, r3
 80026d2:	4a4e      	ldr	r2, [pc, #312]	@ (800280c <HAL_RCC_OscConfig+0x278>)
 80026d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80026d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002810 <HAL_RCC_OscConfig+0x27c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe fd44 	bl	8001168 <HAL_InitTick>
 80026e0:	4603      	mov	r3, r0
 80026e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d052      	beq.n	8002790 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	e35e      	b.n	8002dac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d032      	beq.n	800275c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026f6:	4b43      	ldr	r3, [pc, #268]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a42      	ldr	r2, [pc, #264]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002702:	f7fe fd81 	bl	8001208 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800270a:	f7fe fd7d 	bl	8001208 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e347      	b.n	8002dac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800271c:	4b39      	ldr	r3, [pc, #228]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002728:	4b36      	ldr	r3, [pc, #216]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a35      	ldr	r2, [pc, #212]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 800272e:	f043 0308 	orr.w	r3, r3, #8
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	4b33      	ldr	r3, [pc, #204]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	4930      	ldr	r1, [pc, #192]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 8002742:	4313      	orrs	r3, r2
 8002744:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002746:	4b2f      	ldr	r3, [pc, #188]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	021b      	lsls	r3, r3, #8
 8002754:	492b      	ldr	r1, [pc, #172]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 8002756:	4313      	orrs	r3, r2
 8002758:	604b      	str	r3, [r1, #4]
 800275a:	e01a      	b.n	8002792 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800275c:	4b29      	ldr	r3, [pc, #164]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a28      	ldr	r2, [pc, #160]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 8002762:	f023 0301 	bic.w	r3, r3, #1
 8002766:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002768:	f7fe fd4e 	bl	8001208 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002770:	f7fe fd4a 	bl	8001208 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e314      	b.n	8002dac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002782:	4b20      	ldr	r3, [pc, #128]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x1dc>
 800278e:	e000      	b.n	8002792 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002790:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d073      	beq.n	8002886 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d005      	beq.n	80027b0 <HAL_RCC_OscConfig+0x21c>
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	2b0c      	cmp	r3, #12
 80027a8:	d10e      	bne.n	80027c8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d10b      	bne.n	80027c8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b0:	4b14      	ldr	r3, [pc, #80]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d063      	beq.n	8002884 <HAL_RCC_OscConfig+0x2f0>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d15f      	bne.n	8002884 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e2f1      	b.n	8002dac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027d0:	d106      	bne.n	80027e0 <HAL_RCC_OscConfig+0x24c>
 80027d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 80027d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	e025      	b.n	800282c <HAL_RCC_OscConfig+0x298>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027e8:	d114      	bne.n	8002814 <HAL_RCC_OscConfig+0x280>
 80027ea:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a05      	ldr	r2, [pc, #20]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 80027f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	4b03      	ldr	r3, [pc, #12]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a02      	ldr	r2, [pc, #8]	@ (8002804 <HAL_RCC_OscConfig+0x270>)
 80027fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	e013      	b.n	800282c <HAL_RCC_OscConfig+0x298>
 8002804:	40021000 	.word	0x40021000
 8002808:	08005408 	.word	0x08005408
 800280c:	20000004 	.word	0x20000004
 8002810:	20000008 	.word	0x20000008
 8002814:	4ba0      	ldr	r3, [pc, #640]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a9f      	ldr	r2, [pc, #636]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 800281a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	4b9d      	ldr	r3, [pc, #628]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a9c      	ldr	r2, [pc, #624]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002826:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800282a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d013      	beq.n	800285c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002834:	f7fe fce8 	bl	8001208 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800283c:	f7fe fce4 	bl	8001208 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b64      	cmp	r3, #100	@ 0x64
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e2ae      	b.n	8002dac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800284e:	4b92      	ldr	r3, [pc, #584]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCC_OscConfig+0x2a8>
 800285a:	e014      	b.n	8002886 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285c:	f7fe fcd4 	bl	8001208 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002864:	f7fe fcd0 	bl	8001208 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b64      	cmp	r3, #100	@ 0x64
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e29a      	b.n	8002dac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002876:	4b88      	ldr	r3, [pc, #544]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f0      	bne.n	8002864 <HAL_RCC_OscConfig+0x2d0>
 8002882:	e000      	b.n	8002886 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d060      	beq.n	8002954 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	2b04      	cmp	r3, #4
 8002896:	d005      	beq.n	80028a4 <HAL_RCC_OscConfig+0x310>
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	2b0c      	cmp	r3, #12
 800289c:	d119      	bne.n	80028d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d116      	bne.n	80028d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028a4:	4b7c      	ldr	r3, [pc, #496]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d005      	beq.n	80028bc <HAL_RCC_OscConfig+0x328>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e277      	b.n	8002dac <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028bc:	4b76      	ldr	r3, [pc, #472]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	061b      	lsls	r3, r3, #24
 80028ca:	4973      	ldr	r1, [pc, #460]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028d0:	e040      	b.n	8002954 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d023      	beq.n	8002922 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028da:	4b6f      	ldr	r3, [pc, #444]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a6e      	ldr	r2, [pc, #440]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 80028e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e6:	f7fe fc8f 	bl	8001208 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ee:	f7fe fc8b 	bl	8001208 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e255      	b.n	8002dac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002900:	4b65      	ldr	r3, [pc, #404]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290c:	4b62      	ldr	r3, [pc, #392]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	061b      	lsls	r3, r3, #24
 800291a:	495f      	ldr	r1, [pc, #380]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 800291c:	4313      	orrs	r3, r2
 800291e:	604b      	str	r3, [r1, #4]
 8002920:	e018      	b.n	8002954 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002922:	4b5d      	ldr	r3, [pc, #372]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a5c      	ldr	r2, [pc, #368]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002928:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800292c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292e:	f7fe fc6b 	bl	8001208 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002936:	f7fe fc67 	bl	8001208 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e231      	b.n	8002dac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002948:	4b53      	ldr	r3, [pc, #332]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f0      	bne.n	8002936 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0308 	and.w	r3, r3, #8
 800295c:	2b00      	cmp	r3, #0
 800295e:	d03c      	beq.n	80029da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d01c      	beq.n	80029a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002968:	4b4b      	ldr	r3, [pc, #300]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 800296a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800296e:	4a4a      	ldr	r2, [pc, #296]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002978:	f7fe fc46 	bl	8001208 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002980:	f7fe fc42 	bl	8001208 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e20c      	b.n	8002dac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002992:	4b41      	ldr	r3, [pc, #260]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002994:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0ef      	beq.n	8002980 <HAL_RCC_OscConfig+0x3ec>
 80029a0:	e01b      	b.n	80029da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 80029a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029a8:	4a3b      	ldr	r2, [pc, #236]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 80029aa:	f023 0301 	bic.w	r3, r3, #1
 80029ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b2:	f7fe fc29 	bl	8001208 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ba:	f7fe fc25 	bl	8001208 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e1ef      	b.n	8002dac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029cc:	4b32      	ldr	r3, [pc, #200]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 80029ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1ef      	bne.n	80029ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 80a6 	beq.w	8002b34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029e8:	2300      	movs	r3, #0
 80029ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 80029ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10d      	bne.n	8002a14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f8:	4b27      	ldr	r3, [pc, #156]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 80029fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029fc:	4a26      	ldr	r2, [pc, #152]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 80029fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a02:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a04:	4b24      	ldr	r3, [pc, #144]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a10:	2301      	movs	r3, #1
 8002a12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a14:	4b21      	ldr	r3, [pc, #132]	@ (8002a9c <HAL_RCC_OscConfig+0x508>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d118      	bne.n	8002a52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a20:	4b1e      	ldr	r3, [pc, #120]	@ (8002a9c <HAL_RCC_OscConfig+0x508>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a1d      	ldr	r2, [pc, #116]	@ (8002a9c <HAL_RCC_OscConfig+0x508>)
 8002a26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a2c:	f7fe fbec 	bl	8001208 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a34:	f7fe fbe8 	bl	8001208 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e1b2      	b.n	8002dac <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a46:	4b15      	ldr	r3, [pc, #84]	@ (8002a9c <HAL_RCC_OscConfig+0x508>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d108      	bne.n	8002a6c <HAL_RCC_OscConfig+0x4d8>
 8002a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a60:	4a0d      	ldr	r2, [pc, #52]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a6a:	e029      	b.n	8002ac0 <HAL_RCC_OscConfig+0x52c>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b05      	cmp	r3, #5
 8002a72:	d115      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x50c>
 8002a74:	4b08      	ldr	r3, [pc, #32]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a7a:	4a07      	ldr	r2, [pc, #28]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002a7c:	f043 0304 	orr.w	r3, r3, #4
 8002a80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a84:	4b04      	ldr	r3, [pc, #16]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a8a:	4a03      	ldr	r2, [pc, #12]	@ (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a94:	e014      	b.n	8002ac0 <HAL_RCC_OscConfig+0x52c>
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40007000 	.word	0x40007000
 8002aa0:	4b9a      	ldr	r3, [pc, #616]	@ (8002d0c <HAL_RCC_OscConfig+0x778>)
 8002aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aa6:	4a99      	ldr	r2, [pc, #612]	@ (8002d0c <HAL_RCC_OscConfig+0x778>)
 8002aa8:	f023 0301 	bic.w	r3, r3, #1
 8002aac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ab0:	4b96      	ldr	r3, [pc, #600]	@ (8002d0c <HAL_RCC_OscConfig+0x778>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab6:	4a95      	ldr	r2, [pc, #596]	@ (8002d0c <HAL_RCC_OscConfig+0x778>)
 8002ab8:	f023 0304 	bic.w	r3, r3, #4
 8002abc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d016      	beq.n	8002af6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac8:	f7fe fb9e 	bl	8001208 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ace:	e00a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad0:	f7fe fb9a 	bl	8001208 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e162      	b.n	8002dac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ae6:	4b89      	ldr	r3, [pc, #548]	@ (8002d0c <HAL_RCC_OscConfig+0x778>)
 8002ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0ed      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x53c>
 8002af4:	e015      	b.n	8002b22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af6:	f7fe fb87 	bl	8001208 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002afc:	e00a      	b.n	8002b14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afe:	f7fe fb83 	bl	8001208 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e14b      	b.n	8002dac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b14:	4b7d      	ldr	r3, [pc, #500]	@ (8002d0c <HAL_RCC_OscConfig+0x778>)
 8002b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1ed      	bne.n	8002afe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b22:	7ffb      	ldrb	r3, [r7, #31]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d105      	bne.n	8002b34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b28:	4b78      	ldr	r3, [pc, #480]	@ (8002d0c <HAL_RCC_OscConfig+0x778>)
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b2c:	4a77      	ldr	r2, [pc, #476]	@ (8002d0c <HAL_RCC_OscConfig+0x778>)
 8002b2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b32:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d03c      	beq.n	8002bba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d01c      	beq.n	8002b82 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b48:	4b70      	ldr	r3, [pc, #448]	@ (8002d0c <HAL_RCC_OscConfig+0x778>)
 8002b4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b4e:	4a6f      	ldr	r2, [pc, #444]	@ (8002d0c <HAL_RCC_OscConfig+0x778>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b58:	f7fe fb56 	bl	8001208 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b60:	f7fe fb52 	bl	8001208 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e11c      	b.n	8002dac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b72:	4b66      	ldr	r3, [pc, #408]	@ (8002d0c <HAL_RCC_OscConfig+0x778>)
 8002b74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0ef      	beq.n	8002b60 <HAL_RCC_OscConfig+0x5cc>
 8002b80:	e01b      	b.n	8002bba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b82:	4b62      	ldr	r3, [pc, #392]	@ (8002d0c <HAL_RCC_OscConfig+0x778>)
 8002b84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b88:	4a60      	ldr	r2, [pc, #384]	@ (8002d0c <HAL_RCC_OscConfig+0x778>)
 8002b8a:	f023 0301 	bic.w	r3, r3, #1
 8002b8e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b92:	f7fe fb39 	bl	8001208 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b9a:	f7fe fb35 	bl	8001208 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e0ff      	b.n	8002dac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bac:	4b57      	ldr	r3, [pc, #348]	@ (8002d0c <HAL_RCC_OscConfig+0x778>)
 8002bae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1ef      	bne.n	8002b9a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 80f3 	beq.w	8002daa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	f040 80c9 	bne.w	8002d60 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002bce:	4b4f      	ldr	r3, [pc, #316]	@ (8002d0c <HAL_RCC_OscConfig+0x778>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f003 0203 	and.w	r2, r3, #3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d12c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bec:	3b01      	subs	r3, #1
 8002bee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d123      	bne.n	8002c3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bfe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d11b      	bne.n	8002c3c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c0e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d113      	bne.n	8002c3c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c1e:	085b      	lsrs	r3, r3, #1
 8002c20:	3b01      	subs	r3, #1
 8002c22:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d109      	bne.n	8002c3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	085b      	lsrs	r3, r3, #1
 8002c34:	3b01      	subs	r3, #1
 8002c36:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d06b      	beq.n	8002d14 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	2b0c      	cmp	r3, #12
 8002c40:	d062      	beq.n	8002d08 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c42:	4b32      	ldr	r3, [pc, #200]	@ (8002d0c <HAL_RCC_OscConfig+0x778>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e0ac      	b.n	8002dac <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c52:	4b2e      	ldr	r3, [pc, #184]	@ (8002d0c <HAL_RCC_OscConfig+0x778>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a2d      	ldr	r2, [pc, #180]	@ (8002d0c <HAL_RCC_OscConfig+0x778>)
 8002c58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c5c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c5e:	f7fe fad3 	bl	8001208 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c66:	f7fe facf 	bl	8001208 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e099      	b.n	8002dac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c78:	4b24      	ldr	r3, [pc, #144]	@ (8002d0c <HAL_RCC_OscConfig+0x778>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1f0      	bne.n	8002c66 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c84:	4b21      	ldr	r3, [pc, #132]	@ (8002d0c <HAL_RCC_OscConfig+0x778>)
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	4b21      	ldr	r3, [pc, #132]	@ (8002d10 <HAL_RCC_OscConfig+0x77c>)
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c94:	3a01      	subs	r2, #1
 8002c96:	0112      	lsls	r2, r2, #4
 8002c98:	4311      	orrs	r1, r2
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c9e:	0212      	lsls	r2, r2, #8
 8002ca0:	4311      	orrs	r1, r2
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ca6:	0852      	lsrs	r2, r2, #1
 8002ca8:	3a01      	subs	r2, #1
 8002caa:	0552      	lsls	r2, r2, #21
 8002cac:	4311      	orrs	r1, r2
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002cb2:	0852      	lsrs	r2, r2, #1
 8002cb4:	3a01      	subs	r2, #1
 8002cb6:	0652      	lsls	r2, r2, #25
 8002cb8:	4311      	orrs	r1, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002cbe:	06d2      	lsls	r2, r2, #27
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	4912      	ldr	r1, [pc, #72]	@ (8002d0c <HAL_RCC_OscConfig+0x778>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cc8:	4b10      	ldr	r3, [pc, #64]	@ (8002d0c <HAL_RCC_OscConfig+0x778>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a0f      	ldr	r2, [pc, #60]	@ (8002d0c <HAL_RCC_OscConfig+0x778>)
 8002cce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cd2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8002d0c <HAL_RCC_OscConfig+0x778>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8002d0c <HAL_RCC_OscConfig+0x778>)
 8002cda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cde:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ce0:	f7fe fa92 	bl	8001208 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce8:	f7fe fa8e 	bl	8001208 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e058      	b.n	8002dac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cfa:	4b04      	ldr	r3, [pc, #16]	@ (8002d0c <HAL_RCC_OscConfig+0x778>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d06:	e050      	b.n	8002daa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e04f      	b.n	8002dac <HAL_RCC_OscConfig+0x818>
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d14:	4b27      	ldr	r3, [pc, #156]	@ (8002db4 <HAL_RCC_OscConfig+0x820>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d144      	bne.n	8002daa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d20:	4b24      	ldr	r3, [pc, #144]	@ (8002db4 <HAL_RCC_OscConfig+0x820>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a23      	ldr	r2, [pc, #140]	@ (8002db4 <HAL_RCC_OscConfig+0x820>)
 8002d26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d2c:	4b21      	ldr	r3, [pc, #132]	@ (8002db4 <HAL_RCC_OscConfig+0x820>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	4a20      	ldr	r2, [pc, #128]	@ (8002db4 <HAL_RCC_OscConfig+0x820>)
 8002d32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d38:	f7fe fa66 	bl	8001208 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d40:	f7fe fa62 	bl	8001208 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e02c      	b.n	8002dac <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d52:	4b18      	ldr	r3, [pc, #96]	@ (8002db4 <HAL_RCC_OscConfig+0x820>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCC_OscConfig+0x7ac>
 8002d5e:	e024      	b.n	8002daa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	2b0c      	cmp	r3, #12
 8002d64:	d01f      	beq.n	8002da6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d66:	4b13      	ldr	r3, [pc, #76]	@ (8002db4 <HAL_RCC_OscConfig+0x820>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a12      	ldr	r2, [pc, #72]	@ (8002db4 <HAL_RCC_OscConfig+0x820>)
 8002d6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d72:	f7fe fa49 	bl	8001208 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7a:	f7fe fa45 	bl	8001208 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e00f      	b.n	8002dac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d8c:	4b09      	ldr	r3, [pc, #36]	@ (8002db4 <HAL_RCC_OscConfig+0x820>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1f0      	bne.n	8002d7a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002d98:	4b06      	ldr	r3, [pc, #24]	@ (8002db4 <HAL_RCC_OscConfig+0x820>)
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	4905      	ldr	r1, [pc, #20]	@ (8002db4 <HAL_RCC_OscConfig+0x820>)
 8002d9e:	4b06      	ldr	r3, [pc, #24]	@ (8002db8 <HAL_RCC_OscConfig+0x824>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	60cb      	str	r3, [r1, #12]
 8002da4:	e001      	b.n	8002daa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3720      	adds	r7, #32
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40021000 	.word	0x40021000
 8002db8:	feeefffc 	.word	0xfeeefffc

08002dbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e0e7      	b.n	8002fa0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd0:	4b75      	ldr	r3, [pc, #468]	@ (8002fa8 <HAL_RCC_ClockConfig+0x1ec>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d910      	bls.n	8002e00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dde:	4b72      	ldr	r3, [pc, #456]	@ (8002fa8 <HAL_RCC_ClockConfig+0x1ec>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 0207 	bic.w	r2, r3, #7
 8002de6:	4970      	ldr	r1, [pc, #448]	@ (8002fa8 <HAL_RCC_ClockConfig+0x1ec>)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dee:	4b6e      	ldr	r3, [pc, #440]	@ (8002fa8 <HAL_RCC_ClockConfig+0x1ec>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e0cf      	b.n	8002fa0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d010      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	4b66      	ldr	r3, [pc, #408]	@ (8002fac <HAL_RCC_ClockConfig+0x1f0>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d908      	bls.n	8002e2e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e1c:	4b63      	ldr	r3, [pc, #396]	@ (8002fac <HAL_RCC_ClockConfig+0x1f0>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	4960      	ldr	r1, [pc, #384]	@ (8002fac <HAL_RCC_ClockConfig+0x1f0>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d04c      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d107      	bne.n	8002e52 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e42:	4b5a      	ldr	r3, [pc, #360]	@ (8002fac <HAL_RCC_ClockConfig+0x1f0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d121      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e0a6      	b.n	8002fa0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d107      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e5a:	4b54      	ldr	r3, [pc, #336]	@ (8002fac <HAL_RCC_ClockConfig+0x1f0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d115      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e09a      	b.n	8002fa0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d107      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e72:	4b4e      	ldr	r3, [pc, #312]	@ (8002fac <HAL_RCC_ClockConfig+0x1f0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d109      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e08e      	b.n	8002fa0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e82:	4b4a      	ldr	r3, [pc, #296]	@ (8002fac <HAL_RCC_ClockConfig+0x1f0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e086      	b.n	8002fa0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e92:	4b46      	ldr	r3, [pc, #280]	@ (8002fac <HAL_RCC_ClockConfig+0x1f0>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f023 0203 	bic.w	r2, r3, #3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	4943      	ldr	r1, [pc, #268]	@ (8002fac <HAL_RCC_ClockConfig+0x1f0>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ea4:	f7fe f9b0 	bl	8001208 <HAL_GetTick>
 8002ea8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eaa:	e00a      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eac:	f7fe f9ac 	bl	8001208 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e06e      	b.n	8002fa0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec2:	4b3a      	ldr	r3, [pc, #232]	@ (8002fac <HAL_RCC_ClockConfig+0x1f0>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 020c 	and.w	r2, r3, #12
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d1eb      	bne.n	8002eac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d010      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	4b31      	ldr	r3, [pc, #196]	@ (8002fac <HAL_RCC_ClockConfig+0x1f0>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d208      	bcs.n	8002f02 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8002fac <HAL_RCC_ClockConfig+0x1f0>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	492b      	ldr	r1, [pc, #172]	@ (8002fac <HAL_RCC_ClockConfig+0x1f0>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f02:	4b29      	ldr	r3, [pc, #164]	@ (8002fa8 <HAL_RCC_ClockConfig+0x1ec>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d210      	bcs.n	8002f32 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f10:	4b25      	ldr	r3, [pc, #148]	@ (8002fa8 <HAL_RCC_ClockConfig+0x1ec>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f023 0207 	bic.w	r2, r3, #7
 8002f18:	4923      	ldr	r1, [pc, #140]	@ (8002fa8 <HAL_RCC_ClockConfig+0x1ec>)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f20:	4b21      	ldr	r3, [pc, #132]	@ (8002fa8 <HAL_RCC_ClockConfig+0x1ec>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d001      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e036      	b.n	8002fa0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d008      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002fac <HAL_RCC_ClockConfig+0x1f0>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	4918      	ldr	r1, [pc, #96]	@ (8002fac <HAL_RCC_ClockConfig+0x1f0>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d009      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f5c:	4b13      	ldr	r3, [pc, #76]	@ (8002fac <HAL_RCC_ClockConfig+0x1f0>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	4910      	ldr	r1, [pc, #64]	@ (8002fac <HAL_RCC_ClockConfig+0x1f0>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f70:	f000 f824 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 8002f74:	4602      	mov	r2, r0
 8002f76:	4b0d      	ldr	r3, [pc, #52]	@ (8002fac <HAL_RCC_ClockConfig+0x1f0>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	091b      	lsrs	r3, r3, #4
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	490b      	ldr	r1, [pc, #44]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1f4>)
 8002f82:	5ccb      	ldrb	r3, [r1, r3]
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	fa22 f303 	lsr.w	r3, r2, r3
 8002f8c:	4a09      	ldr	r2, [pc, #36]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002f8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f90:	4b09      	ldr	r3, [pc, #36]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1fc>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fe f8e7 	bl	8001168 <HAL_InitTick>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f9e:	7afb      	ldrb	r3, [r7, #11]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40022000 	.word	0x40022000
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	08005408 	.word	0x08005408
 8002fb4:	20000004 	.word	0x20000004
 8002fb8:	20000008 	.word	0x20000008

08002fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b089      	sub	sp, #36	@ 0x24
 8002fc0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fca:	4b3e      	ldr	r3, [pc, #248]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fd4:	4b3b      	ldr	r3, [pc, #236]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f003 0303 	and.w	r3, r3, #3
 8002fdc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x34>
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	2b0c      	cmp	r3, #12
 8002fe8:	d121      	bne.n	800302e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d11e      	bne.n	800302e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ff0:	4b34      	ldr	r3, [pc, #208]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d107      	bne.n	800300c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ffc:	4b31      	ldr	r3, [pc, #196]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003002:	0a1b      	lsrs	r3, r3, #8
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	61fb      	str	r3, [r7, #28]
 800300a:	e005      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800300c:	4b2d      	ldr	r3, [pc, #180]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003018:	4a2b      	ldr	r2, [pc, #172]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003020:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10d      	bne.n	8003044 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800302c:	e00a      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	2b04      	cmp	r3, #4
 8003032:	d102      	bne.n	800303a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003034:	4b25      	ldr	r3, [pc, #148]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x110>)
 8003036:	61bb      	str	r3, [r7, #24]
 8003038:	e004      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d101      	bne.n	8003044 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003040:	4b23      	ldr	r3, [pc, #140]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003042:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	2b0c      	cmp	r3, #12
 8003048:	d134      	bne.n	80030b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800304a:	4b1e      	ldr	r3, [pc, #120]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d003      	beq.n	8003062 <HAL_RCC_GetSysClockFreq+0xa6>
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b03      	cmp	r3, #3
 800305e:	d003      	beq.n	8003068 <HAL_RCC_GetSysClockFreq+0xac>
 8003060:	e005      	b.n	800306e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003062:	4b1a      	ldr	r3, [pc, #104]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x110>)
 8003064:	617b      	str	r3, [r7, #20]
      break;
 8003066:	e005      	b.n	8003074 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003068:	4b19      	ldr	r3, [pc, #100]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800306a:	617b      	str	r3, [r7, #20]
      break;
 800306c:	e002      	b.n	8003074 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	617b      	str	r3, [r7, #20]
      break;
 8003072:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003074:	4b13      	ldr	r3, [pc, #76]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	091b      	lsrs	r3, r3, #4
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	3301      	adds	r3, #1
 8003080:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003082:	4b10      	ldr	r3, [pc, #64]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	0a1b      	lsrs	r3, r3, #8
 8003088:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	fb03 f202 	mul.w	r2, r3, r2
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	fbb2 f3f3 	udiv	r3, r2, r3
 8003098:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800309a:	4b0a      	ldr	r3, [pc, #40]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	0e5b      	lsrs	r3, r3, #25
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	3301      	adds	r3, #1
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030b4:	69bb      	ldr	r3, [r7, #24]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3724      	adds	r7, #36	@ 0x24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40021000 	.word	0x40021000
 80030c8:	08005420 	.word	0x08005420
 80030cc:	00f42400 	.word	0x00f42400
 80030d0:	007a1200 	.word	0x007a1200

080030d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d8:	4b03      	ldr	r3, [pc, #12]	@ (80030e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030da:	681b      	ldr	r3, [r3, #0]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	20000004 	.word	0x20000004

080030ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030f0:	f7ff fff0 	bl	80030d4 <HAL_RCC_GetHCLKFreq>
 80030f4:	4602      	mov	r2, r0
 80030f6:	4b06      	ldr	r3, [pc, #24]	@ (8003110 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	0a1b      	lsrs	r3, r3, #8
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	4904      	ldr	r1, [pc, #16]	@ (8003114 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003102:	5ccb      	ldrb	r3, [r1, r3]
 8003104:	f003 031f 	and.w	r3, r3, #31
 8003108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800310c:	4618      	mov	r0, r3
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40021000 	.word	0x40021000
 8003114:	08005418 	.word	0x08005418

08003118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800311c:	f7ff ffda 	bl	80030d4 <HAL_RCC_GetHCLKFreq>
 8003120:	4602      	mov	r2, r0
 8003122:	4b06      	ldr	r3, [pc, #24]	@ (800313c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	0adb      	lsrs	r3, r3, #11
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	4904      	ldr	r1, [pc, #16]	@ (8003140 <HAL_RCC_GetPCLK2Freq+0x28>)
 800312e:	5ccb      	ldrb	r3, [r1, r3]
 8003130:	f003 031f 	and.w	r3, r3, #31
 8003134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003138:	4618      	mov	r0, r3
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40021000 	.word	0x40021000
 8003140:	08005418 	.word	0x08005418

08003144 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800314c:	2300      	movs	r3, #0
 800314e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003150:	4b2a      	ldr	r3, [pc, #168]	@ (80031fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003154:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800315c:	f7ff f9b6 	bl	80024cc <HAL_PWREx_GetVoltageRange>
 8003160:	6178      	str	r0, [r7, #20]
 8003162:	e014      	b.n	800318e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003164:	4b25      	ldr	r3, [pc, #148]	@ (80031fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003168:	4a24      	ldr	r2, [pc, #144]	@ (80031fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800316a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800316e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003170:	4b22      	ldr	r3, [pc, #136]	@ (80031fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800317c:	f7ff f9a6 	bl	80024cc <HAL_PWREx_GetVoltageRange>
 8003180:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003182:	4b1e      	ldr	r3, [pc, #120]	@ (80031fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003186:	4a1d      	ldr	r2, [pc, #116]	@ (80031fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003188:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800318c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003194:	d10b      	bne.n	80031ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b80      	cmp	r3, #128	@ 0x80
 800319a:	d919      	bls.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2ba0      	cmp	r3, #160	@ 0xa0
 80031a0:	d902      	bls.n	80031a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031a2:	2302      	movs	r3, #2
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	e013      	b.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031a8:	2301      	movs	r3, #1
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	e010      	b.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b80      	cmp	r3, #128	@ 0x80
 80031b2:	d902      	bls.n	80031ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031b4:	2303      	movs	r3, #3
 80031b6:	613b      	str	r3, [r7, #16]
 80031b8:	e00a      	b.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b80      	cmp	r3, #128	@ 0x80
 80031be:	d102      	bne.n	80031c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031c0:	2302      	movs	r3, #2
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	e004      	b.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b70      	cmp	r3, #112	@ 0x70
 80031ca:	d101      	bne.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031cc:	2301      	movs	r3, #1
 80031ce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003200 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f023 0207 	bic.w	r2, r3, #7
 80031d8:	4909      	ldr	r1, [pc, #36]	@ (8003200 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031e0:	4b07      	ldr	r3, [pc, #28]	@ (8003200 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d001      	beq.n	80031f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40021000 	.word	0x40021000
 8003200:	40022000 	.word	0x40022000

08003204 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800320c:	2300      	movs	r3, #0
 800320e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003210:	2300      	movs	r3, #0
 8003212:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800321c:	2b00      	cmp	r3, #0
 800321e:	d031      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003224:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003228:	d01a      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800322a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800322e:	d814      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003230:	2b00      	cmp	r3, #0
 8003232:	d009      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003234:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003238:	d10f      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800323a:	4b5d      	ldr	r3, [pc, #372]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	4a5c      	ldr	r2, [pc, #368]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003244:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003246:	e00c      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3304      	adds	r3, #4
 800324c:	2100      	movs	r1, #0
 800324e:	4618      	mov	r0, r3
 8003250:	f000 f9de 	bl	8003610 <RCCEx_PLLSAI1_Config>
 8003254:	4603      	mov	r3, r0
 8003256:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003258:	e003      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	74fb      	strb	r3, [r7, #19]
      break;
 800325e:	e000      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003260:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003262:	7cfb      	ldrb	r3, [r7, #19]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10b      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003268:	4b51      	ldr	r3, [pc, #324]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800326e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003276:	494e      	ldr	r1, [pc, #312]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800327e:	e001      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003280:	7cfb      	ldrb	r3, [r7, #19]
 8003282:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 809e 	beq.w	80033ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003292:	2300      	movs	r3, #0
 8003294:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003296:	4b46      	ldr	r3, [pc, #280]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800329a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80032a2:	2301      	movs	r3, #1
 80032a4:	e000      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80032a6:	2300      	movs	r3, #0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00d      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ac:	4b40      	ldr	r3, [pc, #256]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b0:	4a3f      	ldr	r2, [pc, #252]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80032b8:	4b3d      	ldr	r3, [pc, #244]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032c4:	2301      	movs	r3, #1
 80032c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032c8:	4b3a      	ldr	r3, [pc, #232]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a39      	ldr	r2, [pc, #228]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80032ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032d4:	f7fd ff98 	bl	8001208 <HAL_GetTick>
 80032d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032da:	e009      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032dc:	f7fd ff94 	bl	8001208 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d902      	bls.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	74fb      	strb	r3, [r7, #19]
        break;
 80032ee:	e005      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032f0:	4b30      	ldr	r3, [pc, #192]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0ef      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80032fc:	7cfb      	ldrb	r3, [r7, #19]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d15a      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003302:	4b2b      	ldr	r3, [pc, #172]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003308:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800330c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d01e      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	429a      	cmp	r2, r3
 800331c:	d019      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800331e:	4b24      	ldr	r3, [pc, #144]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003324:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003328:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800332a:	4b21      	ldr	r3, [pc, #132]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800332c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003330:	4a1f      	ldr	r2, [pc, #124]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003332:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003336:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800333a:	4b1d      	ldr	r3, [pc, #116]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800333c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003340:	4a1b      	ldr	r2, [pc, #108]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003346:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800334a:	4a19      	ldr	r2, [pc, #100]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	d016      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335c:	f7fd ff54 	bl	8001208 <HAL_GetTick>
 8003360:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003362:	e00b      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003364:	f7fd ff50 	bl	8001208 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003372:	4293      	cmp	r3, r2
 8003374:	d902      	bls.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	74fb      	strb	r3, [r7, #19]
            break;
 800337a:	e006      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800337c:	4b0c      	ldr	r3, [pc, #48]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0ec      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800338a:	7cfb      	ldrb	r3, [r7, #19]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10b      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003390:	4b07      	ldr	r3, [pc, #28]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003396:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800339e:	4904      	ldr	r1, [pc, #16]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80033a6:	e009      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033a8:	7cfb      	ldrb	r3, [r7, #19]
 80033aa:	74bb      	strb	r3, [r7, #18]
 80033ac:	e006      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80033ae:	bf00      	nop
 80033b0:	40021000 	.word	0x40021000
 80033b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033bc:	7c7b      	ldrb	r3, [r7, #17]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d105      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c2:	4b8a      	ldr	r3, [pc, #552]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c6:	4a89      	ldr	r2, [pc, #548]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033da:	4b84      	ldr	r3, [pc, #528]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e0:	f023 0203 	bic.w	r2, r3, #3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	4980      	ldr	r1, [pc, #512]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033fc:	4b7b      	ldr	r3, [pc, #492]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003402:	f023 020c 	bic.w	r2, r3, #12
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340a:	4978      	ldr	r1, [pc, #480]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800341e:	4b73      	ldr	r3, [pc, #460]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003424:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800342c:	496f      	ldr	r1, [pc, #444]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003440:	4b6a      	ldr	r3, [pc, #424]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003446:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800344e:	4967      	ldr	r1, [pc, #412]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003462:	4b62      	ldr	r3, [pc, #392]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003468:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003470:	495e      	ldr	r1, [pc, #376]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003472:	4313      	orrs	r3, r2
 8003474:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003484:	4b59      	ldr	r3, [pc, #356]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800348a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003492:	4956      	ldr	r1, [pc, #344]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003494:	4313      	orrs	r3, r2
 8003496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034a6:	4b51      	ldr	r3, [pc, #324]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b4:	494d      	ldr	r1, [pc, #308]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d028      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034c8:	4b48      	ldr	r3, [pc, #288]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d6:	4945      	ldr	r1, [pc, #276]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034e6:	d106      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034e8:	4b40      	ldr	r3, [pc, #256]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	4a3f      	ldr	r2, [pc, #252]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034f2:	60d3      	str	r3, [r2, #12]
 80034f4:	e011      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034fe:	d10c      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3304      	adds	r3, #4
 8003504:	2101      	movs	r1, #1
 8003506:	4618      	mov	r0, r3
 8003508:	f000 f882 	bl	8003610 <RCCEx_PLLSAI1_Config>
 800350c:	4603      	mov	r3, r0
 800350e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003510:	7cfb      	ldrb	r3, [r7, #19]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003516:	7cfb      	ldrb	r3, [r7, #19]
 8003518:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d028      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003526:	4b31      	ldr	r3, [pc, #196]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800352c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003534:	492d      	ldr	r1, [pc, #180]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003540:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003544:	d106      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003546:	4b29      	ldr	r3, [pc, #164]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	4a28      	ldr	r2, [pc, #160]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800354c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003550:	60d3      	str	r3, [r2, #12]
 8003552:	e011      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003558:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800355c:	d10c      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3304      	adds	r3, #4
 8003562:	2101      	movs	r1, #1
 8003564:	4618      	mov	r0, r3
 8003566:	f000 f853 	bl	8003610 <RCCEx_PLLSAI1_Config>
 800356a:	4603      	mov	r3, r0
 800356c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800356e:	7cfb      	ldrb	r3, [r7, #19]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003574:	7cfb      	ldrb	r3, [r7, #19]
 8003576:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d01c      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003584:	4b19      	ldr	r3, [pc, #100]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800358a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003592:	4916      	ldr	r1, [pc, #88]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800359e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035a2:	d10c      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3304      	adds	r3, #4
 80035a8:	2102      	movs	r1, #2
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 f830 	bl	8003610 <RCCEx_PLLSAI1_Config>
 80035b0:	4603      	mov	r3, r0
 80035b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035b4:	7cfb      	ldrb	r3, [r7, #19]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80035ba:	7cfb      	ldrb	r3, [r7, #19]
 80035bc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035ca:	4b08      	ldr	r3, [pc, #32]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035d8:	4904      	ldr	r1, [pc, #16]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40021000 	.word	0x40021000

080035f0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80035f4:	4b05      	ldr	r3, [pc, #20]	@ (800360c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a04      	ldr	r2, [pc, #16]	@ (800360c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80035fa:	f043 0304 	orr.w	r3, r3, #4
 80035fe:	6013      	str	r3, [r2, #0]
}
 8003600:	bf00      	nop
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40021000 	.word	0x40021000

08003610 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800361e:	4b74      	ldr	r3, [pc, #464]	@ (80037f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f003 0303 	and.w	r3, r3, #3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d018      	beq.n	800365c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800362a:	4b71      	ldr	r3, [pc, #452]	@ (80037f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f003 0203 	and.w	r2, r3, #3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d10d      	bne.n	8003656 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
       ||
 800363e:	2b00      	cmp	r3, #0
 8003640:	d009      	beq.n	8003656 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003642:	4b6b      	ldr	r3, [pc, #428]	@ (80037f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	091b      	lsrs	r3, r3, #4
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
       ||
 8003652:	429a      	cmp	r2, r3
 8003654:	d047      	beq.n	80036e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	73fb      	strb	r3, [r7, #15]
 800365a:	e044      	b.n	80036e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b03      	cmp	r3, #3
 8003662:	d018      	beq.n	8003696 <RCCEx_PLLSAI1_Config+0x86>
 8003664:	2b03      	cmp	r3, #3
 8003666:	d825      	bhi.n	80036b4 <RCCEx_PLLSAI1_Config+0xa4>
 8003668:	2b01      	cmp	r3, #1
 800366a:	d002      	beq.n	8003672 <RCCEx_PLLSAI1_Config+0x62>
 800366c:	2b02      	cmp	r3, #2
 800366e:	d009      	beq.n	8003684 <RCCEx_PLLSAI1_Config+0x74>
 8003670:	e020      	b.n	80036b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003672:	4b5f      	ldr	r3, [pc, #380]	@ (80037f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d11d      	bne.n	80036ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003682:	e01a      	b.n	80036ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003684:	4b5a      	ldr	r3, [pc, #360]	@ (80037f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800368c:	2b00      	cmp	r3, #0
 800368e:	d116      	bne.n	80036be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003694:	e013      	b.n	80036be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003696:	4b56      	ldr	r3, [pc, #344]	@ (80037f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10f      	bne.n	80036c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036a2:	4b53      	ldr	r3, [pc, #332]	@ (80037f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d109      	bne.n	80036c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036b2:	e006      	b.n	80036c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
      break;
 80036b8:	e004      	b.n	80036c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036ba:	bf00      	nop
 80036bc:	e002      	b.n	80036c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036be:	bf00      	nop
 80036c0:	e000      	b.n	80036c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10d      	bne.n	80036e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036ca:	4b49      	ldr	r3, [pc, #292]	@ (80037f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6819      	ldr	r1, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	3b01      	subs	r3, #1
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	430b      	orrs	r3, r1
 80036e0:	4943      	ldr	r1, [pc, #268]	@ (80037f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d17c      	bne.n	80037e6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80036ec:	4b40      	ldr	r3, [pc, #256]	@ (80037f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a3f      	ldr	r2, [pc, #252]	@ (80037f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80036f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036f8:	f7fd fd86 	bl	8001208 <HAL_GetTick>
 80036fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036fe:	e009      	b.n	8003714 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003700:	f7fd fd82 	bl	8001208 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d902      	bls.n	8003714 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	73fb      	strb	r3, [r7, #15]
        break;
 8003712:	e005      	b.n	8003720 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003714:	4b36      	ldr	r3, [pc, #216]	@ (80037f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1ef      	bne.n	8003700 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d15f      	bne.n	80037e6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d110      	bne.n	800374e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800372c:	4b30      	ldr	r3, [pc, #192]	@ (80037f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003734:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6892      	ldr	r2, [r2, #8]
 800373c:	0211      	lsls	r1, r2, #8
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68d2      	ldr	r2, [r2, #12]
 8003742:	06d2      	lsls	r2, r2, #27
 8003744:	430a      	orrs	r2, r1
 8003746:	492a      	ldr	r1, [pc, #168]	@ (80037f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003748:	4313      	orrs	r3, r2
 800374a:	610b      	str	r3, [r1, #16]
 800374c:	e027      	b.n	800379e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d112      	bne.n	800377a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003754:	4b26      	ldr	r3, [pc, #152]	@ (80037f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800375c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6892      	ldr	r2, [r2, #8]
 8003764:	0211      	lsls	r1, r2, #8
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6912      	ldr	r2, [r2, #16]
 800376a:	0852      	lsrs	r2, r2, #1
 800376c:	3a01      	subs	r2, #1
 800376e:	0552      	lsls	r2, r2, #21
 8003770:	430a      	orrs	r2, r1
 8003772:	491f      	ldr	r1, [pc, #124]	@ (80037f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003774:	4313      	orrs	r3, r2
 8003776:	610b      	str	r3, [r1, #16]
 8003778:	e011      	b.n	800379e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800377a:	4b1d      	ldr	r3, [pc, #116]	@ (80037f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003782:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6892      	ldr	r2, [r2, #8]
 800378a:	0211      	lsls	r1, r2, #8
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6952      	ldr	r2, [r2, #20]
 8003790:	0852      	lsrs	r2, r2, #1
 8003792:	3a01      	subs	r2, #1
 8003794:	0652      	lsls	r2, r2, #25
 8003796:	430a      	orrs	r2, r1
 8003798:	4915      	ldr	r1, [pc, #84]	@ (80037f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800379a:	4313      	orrs	r3, r2
 800379c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800379e:	4b14      	ldr	r3, [pc, #80]	@ (80037f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a13      	ldr	r2, [pc, #76]	@ (80037f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80037a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037aa:	f7fd fd2d 	bl	8001208 <HAL_GetTick>
 80037ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037b0:	e009      	b.n	80037c6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037b2:	f7fd fd29 	bl	8001208 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d902      	bls.n	80037c6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	73fb      	strb	r3, [r7, #15]
          break;
 80037c4:	e005      	b.n	80037d2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037c6:	4b0a      	ldr	r3, [pc, #40]	@ (80037f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0ef      	beq.n	80037b2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d106      	bne.n	80037e6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80037d8:	4b05      	ldr	r3, [pc, #20]	@ (80037f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	4903      	ldr	r1, [pc, #12]	@ (80037f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40021000 	.word	0x40021000

080037f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e049      	b.n	800389a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fd fb74 	bl	8000f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3304      	adds	r3, #4
 8003830:	4619      	mov	r1, r3
 8003832:	4610      	mov	r0, r2
 8003834:	f000 fa82 	bl	8003d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d001      	beq.n	80038bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e03b      	b.n	8003934 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0201 	orr.w	r2, r2, #1
 80038d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a19      	ldr	r2, [pc, #100]	@ (8003940 <HAL_TIM_Base_Start_IT+0x9c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d009      	beq.n	80038f2 <HAL_TIM_Base_Start_IT+0x4e>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038e6:	d004      	beq.n	80038f2 <HAL_TIM_Base_Start_IT+0x4e>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a15      	ldr	r2, [pc, #84]	@ (8003944 <HAL_TIM_Base_Start_IT+0xa0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d115      	bne.n	800391e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	4b13      	ldr	r3, [pc, #76]	@ (8003948 <HAL_TIM_Base_Start_IT+0xa4>)
 80038fa:	4013      	ands	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2b06      	cmp	r3, #6
 8003902:	d015      	beq.n	8003930 <HAL_TIM_Base_Start_IT+0x8c>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800390a:	d011      	beq.n	8003930 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0201 	orr.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800391c:	e008      	b.n	8003930 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0201 	orr.w	r2, r2, #1
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	e000      	b.n	8003932 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003930:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	40012c00 	.word	0x40012c00
 8003944:	40014000 	.word	0x40014000
 8003948:	00010007 	.word	0x00010007

0800394c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d020      	beq.n	80039b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d01b      	beq.n	80039b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0202 	mvn.w	r2, #2
 8003980:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f9b2 	bl	8003d00 <HAL_TIM_IC_CaptureCallback>
 800399c:	e005      	b.n	80039aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f9a4 	bl	8003cec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f9b5 	bl	8003d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f003 0304 	and.w	r3, r3, #4
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d020      	beq.n	80039fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d01b      	beq.n	80039fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f06f 0204 	mvn.w	r2, #4
 80039cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2202      	movs	r2, #2
 80039d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f98c 	bl	8003d00 <HAL_TIM_IC_CaptureCallback>
 80039e8:	e005      	b.n	80039f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f97e 	bl	8003cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f98f 	bl	8003d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f003 0308 	and.w	r3, r3, #8
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d020      	beq.n	8003a48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f003 0308 	and.w	r3, r3, #8
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d01b      	beq.n	8003a48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f06f 0208 	mvn.w	r2, #8
 8003a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2204      	movs	r2, #4
 8003a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f966 	bl	8003d00 <HAL_TIM_IC_CaptureCallback>
 8003a34:	e005      	b.n	8003a42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f958 	bl	8003cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f969 	bl	8003d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f003 0310 	and.w	r3, r3, #16
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d020      	beq.n	8003a94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f003 0310 	and.w	r3, r3, #16
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d01b      	beq.n	8003a94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f06f 0210 	mvn.w	r2, #16
 8003a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2208      	movs	r2, #8
 8003a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f940 	bl	8003d00 <HAL_TIM_IC_CaptureCallback>
 8003a80:	e005      	b.n	8003a8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f932 	bl	8003cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f943 	bl	8003d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00c      	beq.n	8003ab8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d007      	beq.n	8003ab8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f06f 0201 	mvn.w	r2, #1
 8003ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7fd f872 	bl	8000b9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d104      	bne.n	8003acc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00c      	beq.n	8003ae6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d007      	beq.n	8003ae6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 faa5 	bl	8004030 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00c      	beq.n	8003b0a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d007      	beq.n	8003b0a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 fa9d 	bl	8004044 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00c      	beq.n	8003b2e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d007      	beq.n	8003b2e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f8fd 	bl	8003d28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	f003 0320 	and.w	r3, r3, #32
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00c      	beq.n	8003b52 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f003 0320 	and.w	r3, r3, #32
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d007      	beq.n	8003b52 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f06f 0220 	mvn.w	r2, #32
 8003b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 fa65 	bl	800401c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b52:	bf00      	nop
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d101      	bne.n	8003b76 <HAL_TIM_ConfigClockSource+0x1c>
 8003b72:	2302      	movs	r3, #2
 8003b74:	e0b6      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x18a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2202      	movs	r2, #2
 8003b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b94:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b98:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ba0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bb2:	d03e      	beq.n	8003c32 <HAL_TIM_ConfigClockSource+0xd8>
 8003bb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bb8:	f200 8087 	bhi.w	8003cca <HAL_TIM_ConfigClockSource+0x170>
 8003bbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bc0:	f000 8086 	beq.w	8003cd0 <HAL_TIM_ConfigClockSource+0x176>
 8003bc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bc8:	d87f      	bhi.n	8003cca <HAL_TIM_ConfigClockSource+0x170>
 8003bca:	2b70      	cmp	r3, #112	@ 0x70
 8003bcc:	d01a      	beq.n	8003c04 <HAL_TIM_ConfigClockSource+0xaa>
 8003bce:	2b70      	cmp	r3, #112	@ 0x70
 8003bd0:	d87b      	bhi.n	8003cca <HAL_TIM_ConfigClockSource+0x170>
 8003bd2:	2b60      	cmp	r3, #96	@ 0x60
 8003bd4:	d050      	beq.n	8003c78 <HAL_TIM_ConfigClockSource+0x11e>
 8003bd6:	2b60      	cmp	r3, #96	@ 0x60
 8003bd8:	d877      	bhi.n	8003cca <HAL_TIM_ConfigClockSource+0x170>
 8003bda:	2b50      	cmp	r3, #80	@ 0x50
 8003bdc:	d03c      	beq.n	8003c58 <HAL_TIM_ConfigClockSource+0xfe>
 8003bde:	2b50      	cmp	r3, #80	@ 0x50
 8003be0:	d873      	bhi.n	8003cca <HAL_TIM_ConfigClockSource+0x170>
 8003be2:	2b40      	cmp	r3, #64	@ 0x40
 8003be4:	d058      	beq.n	8003c98 <HAL_TIM_ConfigClockSource+0x13e>
 8003be6:	2b40      	cmp	r3, #64	@ 0x40
 8003be8:	d86f      	bhi.n	8003cca <HAL_TIM_ConfigClockSource+0x170>
 8003bea:	2b30      	cmp	r3, #48	@ 0x30
 8003bec:	d064      	beq.n	8003cb8 <HAL_TIM_ConfigClockSource+0x15e>
 8003bee:	2b30      	cmp	r3, #48	@ 0x30
 8003bf0:	d86b      	bhi.n	8003cca <HAL_TIM_ConfigClockSource+0x170>
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	d060      	beq.n	8003cb8 <HAL_TIM_ConfigClockSource+0x15e>
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	d867      	bhi.n	8003cca <HAL_TIM_ConfigClockSource+0x170>
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d05c      	beq.n	8003cb8 <HAL_TIM_ConfigClockSource+0x15e>
 8003bfe:	2b10      	cmp	r3, #16
 8003c00:	d05a      	beq.n	8003cb8 <HAL_TIM_ConfigClockSource+0x15e>
 8003c02:	e062      	b.n	8003cca <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c14:	f000 f97c 	bl	8003f10 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c26:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	609a      	str	r2, [r3, #8]
      break;
 8003c30:	e04f      	b.n	8003cd2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c42:	f000 f965 	bl	8003f10 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c54:	609a      	str	r2, [r3, #8]
      break;
 8003c56:	e03c      	b.n	8003cd2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c64:	461a      	mov	r2, r3
 8003c66:	f000 f8d9 	bl	8003e1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2150      	movs	r1, #80	@ 0x50
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 f932 	bl	8003eda <TIM_ITRx_SetConfig>
      break;
 8003c76:	e02c      	b.n	8003cd2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c84:	461a      	mov	r2, r3
 8003c86:	f000 f8f8 	bl	8003e7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2160      	movs	r1, #96	@ 0x60
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 f922 	bl	8003eda <TIM_ITRx_SetConfig>
      break;
 8003c96:	e01c      	b.n	8003cd2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	f000 f8b9 	bl	8003e1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2140      	movs	r1, #64	@ 0x40
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 f912 	bl	8003eda <TIM_ITRx_SetConfig>
      break;
 8003cb6:	e00c      	b.n	8003cd2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	f000 f909 	bl	8003eda <TIM_ITRx_SetConfig>
      break;
 8003cc8:	e003      	b.n	8003cd2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	73fb      	strb	r3, [r7, #15]
      break;
 8003cce:	e000      	b.n	8003cd2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003cd0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a30      	ldr	r2, [pc, #192]	@ (8003e10 <TIM_Base_SetConfig+0xd4>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d003      	beq.n	8003d5c <TIM_Base_SetConfig+0x20>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d5a:	d108      	bne.n	8003d6e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a27      	ldr	r2, [pc, #156]	@ (8003e10 <TIM_Base_SetConfig+0xd4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00b      	beq.n	8003d8e <TIM_Base_SetConfig+0x52>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d7c:	d007      	beq.n	8003d8e <TIM_Base_SetConfig+0x52>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a24      	ldr	r2, [pc, #144]	@ (8003e14 <TIM_Base_SetConfig+0xd8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d003      	beq.n	8003d8e <TIM_Base_SetConfig+0x52>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a23      	ldr	r2, [pc, #140]	@ (8003e18 <TIM_Base_SetConfig+0xdc>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d108      	bne.n	8003da0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a12      	ldr	r2, [pc, #72]	@ (8003e10 <TIM_Base_SetConfig+0xd4>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d007      	beq.n	8003ddc <TIM_Base_SetConfig+0xa0>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a11      	ldr	r2, [pc, #68]	@ (8003e14 <TIM_Base_SetConfig+0xd8>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d003      	beq.n	8003ddc <TIM_Base_SetConfig+0xa0>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a10      	ldr	r2, [pc, #64]	@ (8003e18 <TIM_Base_SetConfig+0xdc>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d103      	bne.n	8003de4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d105      	bne.n	8003e02 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	f023 0201 	bic.w	r2, r3, #1
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	611a      	str	r2, [r3, #16]
  }
}
 8003e02:	bf00      	nop
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	40012c00 	.word	0x40012c00
 8003e14:	40014000 	.word	0x40014000
 8003e18:	40014400 	.word	0x40014400

08003e1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	f023 0201 	bic.w	r2, r3, #1
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f023 030a 	bic.w	r3, r3, #10
 8003e58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	621a      	str	r2, [r3, #32]
}
 8003e6e:	bf00      	nop
 8003e70:	371c      	adds	r7, #28
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b087      	sub	sp, #28
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	60f8      	str	r0, [r7, #12]
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	f023 0210 	bic.w	r2, r3, #16
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ea4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	031b      	lsls	r3, r3, #12
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003eb6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	621a      	str	r2, [r3, #32]
}
 8003ece:	bf00      	nop
 8003ed0:	371c      	adds	r7, #28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b085      	sub	sp, #20
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
 8003ee2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ef0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f043 0307 	orr.w	r3, r3, #7
 8003efc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	609a      	str	r2, [r3, #8]
}
 8003f04:	bf00      	nop
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
 8003f1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	021a      	lsls	r2, r3, #8
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	609a      	str	r2, [r3, #8]
}
 8003f44:	bf00      	nop
 8003f46:	371c      	adds	r7, #28
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e04f      	b.n	8004008 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a21      	ldr	r2, [pc, #132]	@ (8004014 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d108      	bne.n	8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003f98:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003faa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a14      	ldr	r2, [pc, #80]	@ (8004014 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d009      	beq.n	8003fdc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fd0:	d004      	beq.n	8003fdc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a10      	ldr	r2, [pc, #64]	@ (8004018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d10c      	bne.n	8003ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fe2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	40012c00 	.word	0x40012c00
 8004018:	40014000 	.word	0x40014000

0800401c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e040      	b.n	80040ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800406e:	2b00      	cmp	r3, #0
 8004070:	d106      	bne.n	8004080 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fc ffb4 	bl	8000fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2224      	movs	r2, #36	@ 0x24
 8004084:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0201 	bic.w	r2, r2, #1
 8004094:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fade 	bl	8004660 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f8af 	bl	8004208 <UART_SetConfig>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e01b      	b.n	80040ec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0201 	orr.w	r2, r2, #1
 80040e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 fb5d 	bl	80047a4 <UART_CheckIdleState>
 80040ea:	4603      	mov	r3, r0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b08a      	sub	sp, #40	@ 0x28
 80040f8:	af02      	add	r7, sp, #8
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	603b      	str	r3, [r7, #0]
 8004100:	4613      	mov	r3, r2
 8004102:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004108:	2b20      	cmp	r3, #32
 800410a:	d177      	bne.n	80041fc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <HAL_UART_Transmit+0x24>
 8004112:	88fb      	ldrh	r3, [r7, #6]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e070      	b.n	80041fe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2221      	movs	r2, #33	@ 0x21
 8004128:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800412a:	f7fd f86d 	bl	8001208 <HAL_GetTick>
 800412e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	88fa      	ldrh	r2, [r7, #6]
 8004134:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	88fa      	ldrh	r2, [r7, #6]
 800413c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004148:	d108      	bne.n	800415c <HAL_UART_Transmit+0x68>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d104      	bne.n	800415c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004152:	2300      	movs	r3, #0
 8004154:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	61bb      	str	r3, [r7, #24]
 800415a:	e003      	b.n	8004164 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004160:	2300      	movs	r3, #0
 8004162:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004164:	e02f      	b.n	80041c6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2200      	movs	r2, #0
 800416e:	2180      	movs	r1, #128	@ 0x80
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 fbbf 	bl	80048f4 <UART_WaitOnFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d004      	beq.n	8004186 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2220      	movs	r2, #32
 8004180:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e03b      	b.n	80041fe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10b      	bne.n	80041a4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	881a      	ldrh	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004198:	b292      	uxth	r2, r2
 800419a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	3302      	adds	r3, #2
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	e007      	b.n	80041b4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	781a      	ldrb	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	3301      	adds	r3, #1
 80041b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1c9      	bne.n	8004166 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2200      	movs	r2, #0
 80041da:	2140      	movs	r1, #64	@ 0x40
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fb89 	bl	80048f4 <UART_WaitOnFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d004      	beq.n	80041f2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2220      	movs	r2, #32
 80041ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e005      	b.n	80041fe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2220      	movs	r2, #32
 80041f6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	e000      	b.n	80041fe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80041fc:	2302      	movs	r3, #2
  }
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3720      	adds	r7, #32
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800420c:	b08a      	sub	sp, #40	@ 0x28
 800420e:	af00      	add	r7, sp, #0
 8004210:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	431a      	orrs	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	431a      	orrs	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	4313      	orrs	r3, r2
 800422e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	4bb4      	ldr	r3, [pc, #720]	@ (8004508 <UART_SetConfig+0x300>)
 8004238:	4013      	ands	r3, r2
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	6812      	ldr	r2, [r2, #0]
 800423e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004240:	430b      	orrs	r3, r1
 8004242:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4aa9      	ldr	r2, [pc, #676]	@ (800450c <UART_SetConfig+0x304>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d004      	beq.n	8004274 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004270:	4313      	orrs	r3, r2
 8004272:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004284:	430a      	orrs	r2, r1
 8004286:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4aa0      	ldr	r2, [pc, #640]	@ (8004510 <UART_SetConfig+0x308>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d126      	bne.n	80042e0 <UART_SetConfig+0xd8>
 8004292:	4ba0      	ldr	r3, [pc, #640]	@ (8004514 <UART_SetConfig+0x30c>)
 8004294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	2b03      	cmp	r3, #3
 800429e:	d81b      	bhi.n	80042d8 <UART_SetConfig+0xd0>
 80042a0:	a201      	add	r2, pc, #4	@ (adr r2, 80042a8 <UART_SetConfig+0xa0>)
 80042a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a6:	bf00      	nop
 80042a8:	080042b9 	.word	0x080042b9
 80042ac:	080042c9 	.word	0x080042c9
 80042b0:	080042c1 	.word	0x080042c1
 80042b4:	080042d1 	.word	0x080042d1
 80042b8:	2301      	movs	r3, #1
 80042ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042be:	e080      	b.n	80043c2 <UART_SetConfig+0x1ba>
 80042c0:	2302      	movs	r3, #2
 80042c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042c6:	e07c      	b.n	80043c2 <UART_SetConfig+0x1ba>
 80042c8:	2304      	movs	r3, #4
 80042ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ce:	e078      	b.n	80043c2 <UART_SetConfig+0x1ba>
 80042d0:	2308      	movs	r3, #8
 80042d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042d6:	e074      	b.n	80043c2 <UART_SetConfig+0x1ba>
 80042d8:	2310      	movs	r3, #16
 80042da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042de:	e070      	b.n	80043c2 <UART_SetConfig+0x1ba>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a8c      	ldr	r2, [pc, #560]	@ (8004518 <UART_SetConfig+0x310>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d138      	bne.n	800435c <UART_SetConfig+0x154>
 80042ea:	4b8a      	ldr	r3, [pc, #552]	@ (8004514 <UART_SetConfig+0x30c>)
 80042ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f0:	f003 030c 	and.w	r3, r3, #12
 80042f4:	2b0c      	cmp	r3, #12
 80042f6:	d82d      	bhi.n	8004354 <UART_SetConfig+0x14c>
 80042f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004300 <UART_SetConfig+0xf8>)
 80042fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fe:	bf00      	nop
 8004300:	08004335 	.word	0x08004335
 8004304:	08004355 	.word	0x08004355
 8004308:	08004355 	.word	0x08004355
 800430c:	08004355 	.word	0x08004355
 8004310:	08004345 	.word	0x08004345
 8004314:	08004355 	.word	0x08004355
 8004318:	08004355 	.word	0x08004355
 800431c:	08004355 	.word	0x08004355
 8004320:	0800433d 	.word	0x0800433d
 8004324:	08004355 	.word	0x08004355
 8004328:	08004355 	.word	0x08004355
 800432c:	08004355 	.word	0x08004355
 8004330:	0800434d 	.word	0x0800434d
 8004334:	2300      	movs	r3, #0
 8004336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800433a:	e042      	b.n	80043c2 <UART_SetConfig+0x1ba>
 800433c:	2302      	movs	r3, #2
 800433e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004342:	e03e      	b.n	80043c2 <UART_SetConfig+0x1ba>
 8004344:	2304      	movs	r3, #4
 8004346:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800434a:	e03a      	b.n	80043c2 <UART_SetConfig+0x1ba>
 800434c:	2308      	movs	r3, #8
 800434e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004352:	e036      	b.n	80043c2 <UART_SetConfig+0x1ba>
 8004354:	2310      	movs	r3, #16
 8004356:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800435a:	e032      	b.n	80043c2 <UART_SetConfig+0x1ba>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a6a      	ldr	r2, [pc, #424]	@ (800450c <UART_SetConfig+0x304>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d12a      	bne.n	80043bc <UART_SetConfig+0x1b4>
 8004366:	4b6b      	ldr	r3, [pc, #428]	@ (8004514 <UART_SetConfig+0x30c>)
 8004368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800436c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004370:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004374:	d01a      	beq.n	80043ac <UART_SetConfig+0x1a4>
 8004376:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800437a:	d81b      	bhi.n	80043b4 <UART_SetConfig+0x1ac>
 800437c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004380:	d00c      	beq.n	800439c <UART_SetConfig+0x194>
 8004382:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004386:	d815      	bhi.n	80043b4 <UART_SetConfig+0x1ac>
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <UART_SetConfig+0x18c>
 800438c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004390:	d008      	beq.n	80043a4 <UART_SetConfig+0x19c>
 8004392:	e00f      	b.n	80043b4 <UART_SetConfig+0x1ac>
 8004394:	2300      	movs	r3, #0
 8004396:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800439a:	e012      	b.n	80043c2 <UART_SetConfig+0x1ba>
 800439c:	2302      	movs	r3, #2
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043a2:	e00e      	b.n	80043c2 <UART_SetConfig+0x1ba>
 80043a4:	2304      	movs	r3, #4
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043aa:	e00a      	b.n	80043c2 <UART_SetConfig+0x1ba>
 80043ac:	2308      	movs	r3, #8
 80043ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043b2:	e006      	b.n	80043c2 <UART_SetConfig+0x1ba>
 80043b4:	2310      	movs	r3, #16
 80043b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ba:	e002      	b.n	80043c2 <UART_SetConfig+0x1ba>
 80043bc:	2310      	movs	r3, #16
 80043be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a51      	ldr	r2, [pc, #324]	@ (800450c <UART_SetConfig+0x304>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d17a      	bne.n	80044c2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d824      	bhi.n	800441e <UART_SetConfig+0x216>
 80043d4:	a201      	add	r2, pc, #4	@ (adr r2, 80043dc <UART_SetConfig+0x1d4>)
 80043d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043da:	bf00      	nop
 80043dc:	08004401 	.word	0x08004401
 80043e0:	0800441f 	.word	0x0800441f
 80043e4:	08004409 	.word	0x08004409
 80043e8:	0800441f 	.word	0x0800441f
 80043ec:	0800440f 	.word	0x0800440f
 80043f0:	0800441f 	.word	0x0800441f
 80043f4:	0800441f 	.word	0x0800441f
 80043f8:	0800441f 	.word	0x0800441f
 80043fc:	08004417 	.word	0x08004417
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004400:	f7fe fe74 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 8004404:	61f8      	str	r0, [r7, #28]
        break;
 8004406:	e010      	b.n	800442a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004408:	4b44      	ldr	r3, [pc, #272]	@ (800451c <UART_SetConfig+0x314>)
 800440a:	61fb      	str	r3, [r7, #28]
        break;
 800440c:	e00d      	b.n	800442a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800440e:	f7fe fdd5 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 8004412:	61f8      	str	r0, [r7, #28]
        break;
 8004414:	e009      	b.n	800442a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004416:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800441a:	61fb      	str	r3, [r7, #28]
        break;
 800441c:	e005      	b.n	800442a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800441e:	2300      	movs	r3, #0
 8004420:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004428:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 8107 	beq.w	8004640 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	4413      	add	r3, r2
 800443c:	69fa      	ldr	r2, [r7, #28]
 800443e:	429a      	cmp	r2, r3
 8004440:	d305      	bcc.n	800444e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	429a      	cmp	r2, r3
 800444c:	d903      	bls.n	8004456 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004454:	e0f4      	b.n	8004640 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	2200      	movs	r2, #0
 800445a:	461c      	mov	r4, r3
 800445c:	4615      	mov	r5, r2
 800445e:	f04f 0200 	mov.w	r2, #0
 8004462:	f04f 0300 	mov.w	r3, #0
 8004466:	022b      	lsls	r3, r5, #8
 8004468:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800446c:	0222      	lsls	r2, r4, #8
 800446e:	68f9      	ldr	r1, [r7, #12]
 8004470:	6849      	ldr	r1, [r1, #4]
 8004472:	0849      	lsrs	r1, r1, #1
 8004474:	2000      	movs	r0, #0
 8004476:	4688      	mov	r8, r1
 8004478:	4681      	mov	r9, r0
 800447a:	eb12 0a08 	adds.w	sl, r2, r8
 800447e:	eb43 0b09 	adc.w	fp, r3, r9
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	603b      	str	r3, [r7, #0]
 800448a:	607a      	str	r2, [r7, #4]
 800448c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004490:	4650      	mov	r0, sl
 8004492:	4659      	mov	r1, fp
 8004494:	f7fb feec 	bl	8000270 <__aeabi_uldivmod>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4613      	mov	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044a6:	d308      	bcc.n	80044ba <UART_SetConfig+0x2b2>
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044ae:	d204      	bcs.n	80044ba <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	60da      	str	r2, [r3, #12]
 80044b8:	e0c2      	b.n	8004640 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80044c0:	e0be      	b.n	8004640 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044ca:	d16a      	bne.n	80045a2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80044cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d834      	bhi.n	800453e <UART_SetConfig+0x336>
 80044d4:	a201      	add	r2, pc, #4	@ (adr r2, 80044dc <UART_SetConfig+0x2d4>)
 80044d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044da:	bf00      	nop
 80044dc:	08004501 	.word	0x08004501
 80044e0:	08004521 	.word	0x08004521
 80044e4:	08004529 	.word	0x08004529
 80044e8:	0800453f 	.word	0x0800453f
 80044ec:	0800452f 	.word	0x0800452f
 80044f0:	0800453f 	.word	0x0800453f
 80044f4:	0800453f 	.word	0x0800453f
 80044f8:	0800453f 	.word	0x0800453f
 80044fc:	08004537 	.word	0x08004537
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004500:	f7fe fdf4 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 8004504:	61f8      	str	r0, [r7, #28]
        break;
 8004506:	e020      	b.n	800454a <UART_SetConfig+0x342>
 8004508:	efff69f3 	.word	0xefff69f3
 800450c:	40008000 	.word	0x40008000
 8004510:	40013800 	.word	0x40013800
 8004514:	40021000 	.word	0x40021000
 8004518:	40004400 	.word	0x40004400
 800451c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004520:	f7fe fdfa 	bl	8003118 <HAL_RCC_GetPCLK2Freq>
 8004524:	61f8      	str	r0, [r7, #28]
        break;
 8004526:	e010      	b.n	800454a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004528:	4b4c      	ldr	r3, [pc, #304]	@ (800465c <UART_SetConfig+0x454>)
 800452a:	61fb      	str	r3, [r7, #28]
        break;
 800452c:	e00d      	b.n	800454a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800452e:	f7fe fd45 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 8004532:	61f8      	str	r0, [r7, #28]
        break;
 8004534:	e009      	b.n	800454a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004536:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800453a:	61fb      	str	r3, [r7, #28]
        break;
 800453c:	e005      	b.n	800454a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004548:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d077      	beq.n	8004640 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	005a      	lsls	r2, r3, #1
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	085b      	lsrs	r3, r3, #1
 800455a:	441a      	add	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	fbb2 f3f3 	udiv	r3, r2, r3
 8004564:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b0f      	cmp	r3, #15
 800456a:	d916      	bls.n	800459a <UART_SetConfig+0x392>
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004572:	d212      	bcs.n	800459a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	b29b      	uxth	r3, r3
 8004578:	f023 030f 	bic.w	r3, r3, #15
 800457c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	085b      	lsrs	r3, r3, #1
 8004582:	b29b      	uxth	r3, r3
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	b29a      	uxth	r2, r3
 800458a:	8afb      	ldrh	r3, [r7, #22]
 800458c:	4313      	orrs	r3, r2
 800458e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	8afa      	ldrh	r2, [r7, #22]
 8004596:	60da      	str	r2, [r3, #12]
 8004598:	e052      	b.n	8004640 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80045a0:	e04e      	b.n	8004640 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80045a6:	2b08      	cmp	r3, #8
 80045a8:	d827      	bhi.n	80045fa <UART_SetConfig+0x3f2>
 80045aa:	a201      	add	r2, pc, #4	@ (adr r2, 80045b0 <UART_SetConfig+0x3a8>)
 80045ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b0:	080045d5 	.word	0x080045d5
 80045b4:	080045dd 	.word	0x080045dd
 80045b8:	080045e5 	.word	0x080045e5
 80045bc:	080045fb 	.word	0x080045fb
 80045c0:	080045eb 	.word	0x080045eb
 80045c4:	080045fb 	.word	0x080045fb
 80045c8:	080045fb 	.word	0x080045fb
 80045cc:	080045fb 	.word	0x080045fb
 80045d0:	080045f3 	.word	0x080045f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045d4:	f7fe fd8a 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 80045d8:	61f8      	str	r0, [r7, #28]
        break;
 80045da:	e014      	b.n	8004606 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045dc:	f7fe fd9c 	bl	8003118 <HAL_RCC_GetPCLK2Freq>
 80045e0:	61f8      	str	r0, [r7, #28]
        break;
 80045e2:	e010      	b.n	8004606 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045e4:	4b1d      	ldr	r3, [pc, #116]	@ (800465c <UART_SetConfig+0x454>)
 80045e6:	61fb      	str	r3, [r7, #28]
        break;
 80045e8:	e00d      	b.n	8004606 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ea:	f7fe fce7 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 80045ee:	61f8      	str	r0, [r7, #28]
        break;
 80045f0:	e009      	b.n	8004606 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045f6:	61fb      	str	r3, [r7, #28]
        break;
 80045f8:	e005      	b.n	8004606 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004604:	bf00      	nop
    }

    if (pclk != 0U)
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d019      	beq.n	8004640 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	085a      	lsrs	r2, r3, #1
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	441a      	add	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	fbb2 f3f3 	udiv	r3, r2, r3
 800461e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	2b0f      	cmp	r3, #15
 8004624:	d909      	bls.n	800463a <UART_SetConfig+0x432>
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800462c:	d205      	bcs.n	800463a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60da      	str	r2, [r3, #12]
 8004638:	e002      	b.n	8004640 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800464c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004650:	4618      	mov	r0, r3
 8004652:	3728      	adds	r7, #40	@ 0x28
 8004654:	46bd      	mov	sp, r7
 8004656:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800465a:	bf00      	nop
 800465c:	00f42400 	.word	0x00f42400

08004660 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00a      	beq.n	8004712 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800473c:	2b00      	cmp	r3, #0
 800473e:	d01a      	beq.n	8004776 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800475e:	d10a      	bne.n	8004776 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	605a      	str	r2, [r3, #4]
  }
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b098      	sub	sp, #96	@ 0x60
 80047a8:	af02      	add	r7, sp, #8
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047b4:	f7fc fd28 	bl	8001208 <HAL_GetTick>
 80047b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0308 	and.w	r3, r3, #8
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d12e      	bne.n	8004826 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047d0:	2200      	movs	r2, #0
 80047d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f88c 	bl	80048f4 <UART_WaitOnFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d021      	beq.n	8004826 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ea:	e853 3f00 	ldrex	r3, [r3]
 80047ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	461a      	mov	r2, r3
 80047fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004800:	647b      	str	r3, [r7, #68]	@ 0x44
 8004802:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004804:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004806:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004808:	e841 2300 	strex	r3, r2, [r1]
 800480c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800480e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1e6      	bne.n	80047e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2220      	movs	r2, #32
 8004818:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e062      	b.n	80048ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b04      	cmp	r3, #4
 8004832:	d149      	bne.n	80048c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004834:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800483c:	2200      	movs	r2, #0
 800483e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f856 	bl	80048f4 <UART_WaitOnFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d03c      	beq.n	80048c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004856:	e853 3f00 	ldrex	r3, [r3]
 800485a:	623b      	str	r3, [r7, #32]
   return(result);
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004862:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	461a      	mov	r2, r3
 800486a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800486c:	633b      	str	r3, [r7, #48]	@ 0x30
 800486e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004870:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004872:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004874:	e841 2300 	strex	r3, r2, [r1]
 8004878:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800487a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1e6      	bne.n	800484e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3308      	adds	r3, #8
 8004886:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	e853 3f00 	ldrex	r3, [r3]
 800488e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f023 0301 	bic.w	r3, r3, #1
 8004896:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3308      	adds	r3, #8
 800489e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048a0:	61fa      	str	r2, [r7, #28]
 80048a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a4:	69b9      	ldr	r1, [r7, #24]
 80048a6:	69fa      	ldr	r2, [r7, #28]
 80048a8:	e841 2300 	strex	r3, r2, [r1]
 80048ac:	617b      	str	r3, [r7, #20]
   return(result);
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1e5      	bne.n	8004880 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e011      	b.n	80048ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2220      	movs	r2, #32
 80048cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2220      	movs	r2, #32
 80048d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3758      	adds	r7, #88	@ 0x58
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	603b      	str	r3, [r7, #0]
 8004900:	4613      	mov	r3, r2
 8004902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004904:	e04f      	b.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490c:	d04b      	beq.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800490e:	f7fc fc7b 	bl	8001208 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	429a      	cmp	r2, r3
 800491c:	d302      	bcc.n	8004924 <UART_WaitOnFlagUntilTimeout+0x30>
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e04e      	b.n	80049c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	2b00      	cmp	r3, #0
 8004934:	d037      	beq.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	2b80      	cmp	r3, #128	@ 0x80
 800493a:	d034      	beq.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	2b40      	cmp	r3, #64	@ 0x40
 8004940:	d031      	beq.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	f003 0308 	and.w	r3, r3, #8
 800494c:	2b08      	cmp	r3, #8
 800494e:	d110      	bne.n	8004972 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2208      	movs	r2, #8
 8004956:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 f838 	bl	80049ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2208      	movs	r2, #8
 8004962:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e029      	b.n	80049c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800497c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004980:	d111      	bne.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800498a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f000 f81e 	bl	80049ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2220      	movs	r2, #32
 8004996:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e00f      	b.n	80049c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	69da      	ldr	r2, [r3, #28]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	4013      	ands	r3, r2
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	bf0c      	ite	eq
 80049b6:	2301      	moveq	r3, #1
 80049b8:	2300      	movne	r3, #0
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	461a      	mov	r2, r3
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d0a0      	beq.n	8004906 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b095      	sub	sp, #84	@ 0x54
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049de:	e853 3f00 	ldrex	r3, [r3]
 80049e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	461a      	mov	r2, r3
 80049f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80049f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049fc:	e841 2300 	strex	r3, r2, [r1]
 8004a00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1e6      	bne.n	80049d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3308      	adds	r3, #8
 8004a0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	e853 3f00 	ldrex	r3, [r3]
 8004a16:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	f023 0301 	bic.w	r3, r3, #1
 8004a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3308      	adds	r3, #8
 8004a26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a30:	e841 2300 	strex	r3, r2, [r1]
 8004a34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e5      	bne.n	8004a08 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d118      	bne.n	8004a76 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	e853 3f00 	ldrex	r3, [r3]
 8004a50:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	f023 0310 	bic.w	r3, r3, #16
 8004a58:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a62:	61bb      	str	r3, [r7, #24]
 8004a64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	6979      	ldr	r1, [r7, #20]
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e6      	bne.n	8004a44 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a8a:	bf00      	nop
 8004a8c:	3754      	adds	r7, #84	@ 0x54
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
	...

08004a98 <siprintf>:
 8004a98:	b40e      	push	{r1, r2, r3}
 8004a9a:	b500      	push	{lr}
 8004a9c:	b09c      	sub	sp, #112	@ 0x70
 8004a9e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004aa0:	9002      	str	r0, [sp, #8]
 8004aa2:	9006      	str	r0, [sp, #24]
 8004aa4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004aa8:	4809      	ldr	r0, [pc, #36]	@ (8004ad0 <siprintf+0x38>)
 8004aaa:	9107      	str	r1, [sp, #28]
 8004aac:	9104      	str	r1, [sp, #16]
 8004aae:	4909      	ldr	r1, [pc, #36]	@ (8004ad4 <siprintf+0x3c>)
 8004ab0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ab4:	9105      	str	r1, [sp, #20]
 8004ab6:	6800      	ldr	r0, [r0, #0]
 8004ab8:	9301      	str	r3, [sp, #4]
 8004aba:	a902      	add	r1, sp, #8
 8004abc:	f000 f994 	bl	8004de8 <_svfiprintf_r>
 8004ac0:	9b02      	ldr	r3, [sp, #8]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	701a      	strb	r2, [r3, #0]
 8004ac6:	b01c      	add	sp, #112	@ 0x70
 8004ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004acc:	b003      	add	sp, #12
 8004ace:	4770      	bx	lr
 8004ad0:	20000010 	.word	0x20000010
 8004ad4:	ffff0208 	.word	0xffff0208

08004ad8 <memset>:
 8004ad8:	4402      	add	r2, r0
 8004ada:	4603      	mov	r3, r0
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d100      	bne.n	8004ae2 <memset+0xa>
 8004ae0:	4770      	bx	lr
 8004ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ae6:	e7f9      	b.n	8004adc <memset+0x4>

08004ae8 <__errno>:
 8004ae8:	4b01      	ldr	r3, [pc, #4]	@ (8004af0 <__errno+0x8>)
 8004aea:	6818      	ldr	r0, [r3, #0]
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	20000010 	.word	0x20000010

08004af4 <__libc_init_array>:
 8004af4:	b570      	push	{r4, r5, r6, lr}
 8004af6:	4d0d      	ldr	r5, [pc, #52]	@ (8004b2c <__libc_init_array+0x38>)
 8004af8:	4c0d      	ldr	r4, [pc, #52]	@ (8004b30 <__libc_init_array+0x3c>)
 8004afa:	1b64      	subs	r4, r4, r5
 8004afc:	10a4      	asrs	r4, r4, #2
 8004afe:	2600      	movs	r6, #0
 8004b00:	42a6      	cmp	r6, r4
 8004b02:	d109      	bne.n	8004b18 <__libc_init_array+0x24>
 8004b04:	4d0b      	ldr	r5, [pc, #44]	@ (8004b34 <__libc_init_array+0x40>)
 8004b06:	4c0c      	ldr	r4, [pc, #48]	@ (8004b38 <__libc_init_array+0x44>)
 8004b08:	f000 fc66 	bl	80053d8 <_init>
 8004b0c:	1b64      	subs	r4, r4, r5
 8004b0e:	10a4      	asrs	r4, r4, #2
 8004b10:	2600      	movs	r6, #0
 8004b12:	42a6      	cmp	r6, r4
 8004b14:	d105      	bne.n	8004b22 <__libc_init_array+0x2e>
 8004b16:	bd70      	pop	{r4, r5, r6, pc}
 8004b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b1c:	4798      	blx	r3
 8004b1e:	3601      	adds	r6, #1
 8004b20:	e7ee      	b.n	8004b00 <__libc_init_array+0xc>
 8004b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b26:	4798      	blx	r3
 8004b28:	3601      	adds	r6, #1
 8004b2a:	e7f2      	b.n	8004b12 <__libc_init_array+0x1e>
 8004b2c:	0800548c 	.word	0x0800548c
 8004b30:	0800548c 	.word	0x0800548c
 8004b34:	0800548c 	.word	0x0800548c
 8004b38:	08005490 	.word	0x08005490

08004b3c <__retarget_lock_acquire_recursive>:
 8004b3c:	4770      	bx	lr

08004b3e <__retarget_lock_release_recursive>:
 8004b3e:	4770      	bx	lr

08004b40 <_free_r>:
 8004b40:	b538      	push	{r3, r4, r5, lr}
 8004b42:	4605      	mov	r5, r0
 8004b44:	2900      	cmp	r1, #0
 8004b46:	d041      	beq.n	8004bcc <_free_r+0x8c>
 8004b48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b4c:	1f0c      	subs	r4, r1, #4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	bfb8      	it	lt
 8004b52:	18e4      	addlt	r4, r4, r3
 8004b54:	f000 f8e0 	bl	8004d18 <__malloc_lock>
 8004b58:	4a1d      	ldr	r2, [pc, #116]	@ (8004bd0 <_free_r+0x90>)
 8004b5a:	6813      	ldr	r3, [r2, #0]
 8004b5c:	b933      	cbnz	r3, 8004b6c <_free_r+0x2c>
 8004b5e:	6063      	str	r3, [r4, #4]
 8004b60:	6014      	str	r4, [r2, #0]
 8004b62:	4628      	mov	r0, r5
 8004b64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b68:	f000 b8dc 	b.w	8004d24 <__malloc_unlock>
 8004b6c:	42a3      	cmp	r3, r4
 8004b6e:	d908      	bls.n	8004b82 <_free_r+0x42>
 8004b70:	6820      	ldr	r0, [r4, #0]
 8004b72:	1821      	adds	r1, r4, r0
 8004b74:	428b      	cmp	r3, r1
 8004b76:	bf01      	itttt	eq
 8004b78:	6819      	ldreq	r1, [r3, #0]
 8004b7a:	685b      	ldreq	r3, [r3, #4]
 8004b7c:	1809      	addeq	r1, r1, r0
 8004b7e:	6021      	streq	r1, [r4, #0]
 8004b80:	e7ed      	b.n	8004b5e <_free_r+0x1e>
 8004b82:	461a      	mov	r2, r3
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	b10b      	cbz	r3, 8004b8c <_free_r+0x4c>
 8004b88:	42a3      	cmp	r3, r4
 8004b8a:	d9fa      	bls.n	8004b82 <_free_r+0x42>
 8004b8c:	6811      	ldr	r1, [r2, #0]
 8004b8e:	1850      	adds	r0, r2, r1
 8004b90:	42a0      	cmp	r0, r4
 8004b92:	d10b      	bne.n	8004bac <_free_r+0x6c>
 8004b94:	6820      	ldr	r0, [r4, #0]
 8004b96:	4401      	add	r1, r0
 8004b98:	1850      	adds	r0, r2, r1
 8004b9a:	4283      	cmp	r3, r0
 8004b9c:	6011      	str	r1, [r2, #0]
 8004b9e:	d1e0      	bne.n	8004b62 <_free_r+0x22>
 8004ba0:	6818      	ldr	r0, [r3, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	6053      	str	r3, [r2, #4]
 8004ba6:	4408      	add	r0, r1
 8004ba8:	6010      	str	r0, [r2, #0]
 8004baa:	e7da      	b.n	8004b62 <_free_r+0x22>
 8004bac:	d902      	bls.n	8004bb4 <_free_r+0x74>
 8004bae:	230c      	movs	r3, #12
 8004bb0:	602b      	str	r3, [r5, #0]
 8004bb2:	e7d6      	b.n	8004b62 <_free_r+0x22>
 8004bb4:	6820      	ldr	r0, [r4, #0]
 8004bb6:	1821      	adds	r1, r4, r0
 8004bb8:	428b      	cmp	r3, r1
 8004bba:	bf04      	itt	eq
 8004bbc:	6819      	ldreq	r1, [r3, #0]
 8004bbe:	685b      	ldreq	r3, [r3, #4]
 8004bc0:	6063      	str	r3, [r4, #4]
 8004bc2:	bf04      	itt	eq
 8004bc4:	1809      	addeq	r1, r1, r0
 8004bc6:	6021      	streq	r1, [r4, #0]
 8004bc8:	6054      	str	r4, [r2, #4]
 8004bca:	e7ca      	b.n	8004b62 <_free_r+0x22>
 8004bcc:	bd38      	pop	{r3, r4, r5, pc}
 8004bce:	bf00      	nop
 8004bd0:	2000039c 	.word	0x2000039c

08004bd4 <sbrk_aligned>:
 8004bd4:	b570      	push	{r4, r5, r6, lr}
 8004bd6:	4e0f      	ldr	r6, [pc, #60]	@ (8004c14 <sbrk_aligned+0x40>)
 8004bd8:	460c      	mov	r4, r1
 8004bda:	6831      	ldr	r1, [r6, #0]
 8004bdc:	4605      	mov	r5, r0
 8004bde:	b911      	cbnz	r1, 8004be6 <sbrk_aligned+0x12>
 8004be0:	f000 fba6 	bl	8005330 <_sbrk_r>
 8004be4:	6030      	str	r0, [r6, #0]
 8004be6:	4621      	mov	r1, r4
 8004be8:	4628      	mov	r0, r5
 8004bea:	f000 fba1 	bl	8005330 <_sbrk_r>
 8004bee:	1c43      	adds	r3, r0, #1
 8004bf0:	d103      	bne.n	8004bfa <sbrk_aligned+0x26>
 8004bf2:	f04f 34ff 	mov.w	r4, #4294967295
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	bd70      	pop	{r4, r5, r6, pc}
 8004bfa:	1cc4      	adds	r4, r0, #3
 8004bfc:	f024 0403 	bic.w	r4, r4, #3
 8004c00:	42a0      	cmp	r0, r4
 8004c02:	d0f8      	beq.n	8004bf6 <sbrk_aligned+0x22>
 8004c04:	1a21      	subs	r1, r4, r0
 8004c06:	4628      	mov	r0, r5
 8004c08:	f000 fb92 	bl	8005330 <_sbrk_r>
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	d1f2      	bne.n	8004bf6 <sbrk_aligned+0x22>
 8004c10:	e7ef      	b.n	8004bf2 <sbrk_aligned+0x1e>
 8004c12:	bf00      	nop
 8004c14:	20000398 	.word	0x20000398

08004c18 <_malloc_r>:
 8004c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c1c:	1ccd      	adds	r5, r1, #3
 8004c1e:	f025 0503 	bic.w	r5, r5, #3
 8004c22:	3508      	adds	r5, #8
 8004c24:	2d0c      	cmp	r5, #12
 8004c26:	bf38      	it	cc
 8004c28:	250c      	movcc	r5, #12
 8004c2a:	2d00      	cmp	r5, #0
 8004c2c:	4606      	mov	r6, r0
 8004c2e:	db01      	blt.n	8004c34 <_malloc_r+0x1c>
 8004c30:	42a9      	cmp	r1, r5
 8004c32:	d904      	bls.n	8004c3e <_malloc_r+0x26>
 8004c34:	230c      	movs	r3, #12
 8004c36:	6033      	str	r3, [r6, #0]
 8004c38:	2000      	movs	r0, #0
 8004c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d14 <_malloc_r+0xfc>
 8004c42:	f000 f869 	bl	8004d18 <__malloc_lock>
 8004c46:	f8d8 3000 	ldr.w	r3, [r8]
 8004c4a:	461c      	mov	r4, r3
 8004c4c:	bb44      	cbnz	r4, 8004ca0 <_malloc_r+0x88>
 8004c4e:	4629      	mov	r1, r5
 8004c50:	4630      	mov	r0, r6
 8004c52:	f7ff ffbf 	bl	8004bd4 <sbrk_aligned>
 8004c56:	1c43      	adds	r3, r0, #1
 8004c58:	4604      	mov	r4, r0
 8004c5a:	d158      	bne.n	8004d0e <_malloc_r+0xf6>
 8004c5c:	f8d8 4000 	ldr.w	r4, [r8]
 8004c60:	4627      	mov	r7, r4
 8004c62:	2f00      	cmp	r7, #0
 8004c64:	d143      	bne.n	8004cee <_malloc_r+0xd6>
 8004c66:	2c00      	cmp	r4, #0
 8004c68:	d04b      	beq.n	8004d02 <_malloc_r+0xea>
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	4639      	mov	r1, r7
 8004c6e:	4630      	mov	r0, r6
 8004c70:	eb04 0903 	add.w	r9, r4, r3
 8004c74:	f000 fb5c 	bl	8005330 <_sbrk_r>
 8004c78:	4581      	cmp	r9, r0
 8004c7a:	d142      	bne.n	8004d02 <_malloc_r+0xea>
 8004c7c:	6821      	ldr	r1, [r4, #0]
 8004c7e:	1a6d      	subs	r5, r5, r1
 8004c80:	4629      	mov	r1, r5
 8004c82:	4630      	mov	r0, r6
 8004c84:	f7ff ffa6 	bl	8004bd4 <sbrk_aligned>
 8004c88:	3001      	adds	r0, #1
 8004c8a:	d03a      	beq.n	8004d02 <_malloc_r+0xea>
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	442b      	add	r3, r5
 8004c90:	6023      	str	r3, [r4, #0]
 8004c92:	f8d8 3000 	ldr.w	r3, [r8]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	bb62      	cbnz	r2, 8004cf4 <_malloc_r+0xdc>
 8004c9a:	f8c8 7000 	str.w	r7, [r8]
 8004c9e:	e00f      	b.n	8004cc0 <_malloc_r+0xa8>
 8004ca0:	6822      	ldr	r2, [r4, #0]
 8004ca2:	1b52      	subs	r2, r2, r5
 8004ca4:	d420      	bmi.n	8004ce8 <_malloc_r+0xd0>
 8004ca6:	2a0b      	cmp	r2, #11
 8004ca8:	d917      	bls.n	8004cda <_malloc_r+0xc2>
 8004caa:	1961      	adds	r1, r4, r5
 8004cac:	42a3      	cmp	r3, r4
 8004cae:	6025      	str	r5, [r4, #0]
 8004cb0:	bf18      	it	ne
 8004cb2:	6059      	strne	r1, [r3, #4]
 8004cb4:	6863      	ldr	r3, [r4, #4]
 8004cb6:	bf08      	it	eq
 8004cb8:	f8c8 1000 	streq.w	r1, [r8]
 8004cbc:	5162      	str	r2, [r4, r5]
 8004cbe:	604b      	str	r3, [r1, #4]
 8004cc0:	4630      	mov	r0, r6
 8004cc2:	f000 f82f 	bl	8004d24 <__malloc_unlock>
 8004cc6:	f104 000b 	add.w	r0, r4, #11
 8004cca:	1d23      	adds	r3, r4, #4
 8004ccc:	f020 0007 	bic.w	r0, r0, #7
 8004cd0:	1ac2      	subs	r2, r0, r3
 8004cd2:	bf1c      	itt	ne
 8004cd4:	1a1b      	subne	r3, r3, r0
 8004cd6:	50a3      	strne	r3, [r4, r2]
 8004cd8:	e7af      	b.n	8004c3a <_malloc_r+0x22>
 8004cda:	6862      	ldr	r2, [r4, #4]
 8004cdc:	42a3      	cmp	r3, r4
 8004cde:	bf0c      	ite	eq
 8004ce0:	f8c8 2000 	streq.w	r2, [r8]
 8004ce4:	605a      	strne	r2, [r3, #4]
 8004ce6:	e7eb      	b.n	8004cc0 <_malloc_r+0xa8>
 8004ce8:	4623      	mov	r3, r4
 8004cea:	6864      	ldr	r4, [r4, #4]
 8004cec:	e7ae      	b.n	8004c4c <_malloc_r+0x34>
 8004cee:	463c      	mov	r4, r7
 8004cf0:	687f      	ldr	r7, [r7, #4]
 8004cf2:	e7b6      	b.n	8004c62 <_malloc_r+0x4a>
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	42a3      	cmp	r3, r4
 8004cfa:	d1fb      	bne.n	8004cf4 <_malloc_r+0xdc>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	6053      	str	r3, [r2, #4]
 8004d00:	e7de      	b.n	8004cc0 <_malloc_r+0xa8>
 8004d02:	230c      	movs	r3, #12
 8004d04:	6033      	str	r3, [r6, #0]
 8004d06:	4630      	mov	r0, r6
 8004d08:	f000 f80c 	bl	8004d24 <__malloc_unlock>
 8004d0c:	e794      	b.n	8004c38 <_malloc_r+0x20>
 8004d0e:	6005      	str	r5, [r0, #0]
 8004d10:	e7d6      	b.n	8004cc0 <_malloc_r+0xa8>
 8004d12:	bf00      	nop
 8004d14:	2000039c 	.word	0x2000039c

08004d18 <__malloc_lock>:
 8004d18:	4801      	ldr	r0, [pc, #4]	@ (8004d20 <__malloc_lock+0x8>)
 8004d1a:	f7ff bf0f 	b.w	8004b3c <__retarget_lock_acquire_recursive>
 8004d1e:	bf00      	nop
 8004d20:	20000394 	.word	0x20000394

08004d24 <__malloc_unlock>:
 8004d24:	4801      	ldr	r0, [pc, #4]	@ (8004d2c <__malloc_unlock+0x8>)
 8004d26:	f7ff bf0a 	b.w	8004b3e <__retarget_lock_release_recursive>
 8004d2a:	bf00      	nop
 8004d2c:	20000394 	.word	0x20000394

08004d30 <__ssputs_r>:
 8004d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d34:	688e      	ldr	r6, [r1, #8]
 8004d36:	461f      	mov	r7, r3
 8004d38:	42be      	cmp	r6, r7
 8004d3a:	680b      	ldr	r3, [r1, #0]
 8004d3c:	4682      	mov	sl, r0
 8004d3e:	460c      	mov	r4, r1
 8004d40:	4690      	mov	r8, r2
 8004d42:	d82d      	bhi.n	8004da0 <__ssputs_r+0x70>
 8004d44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004d4c:	d026      	beq.n	8004d9c <__ssputs_r+0x6c>
 8004d4e:	6965      	ldr	r5, [r4, #20]
 8004d50:	6909      	ldr	r1, [r1, #16]
 8004d52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d56:	eba3 0901 	sub.w	r9, r3, r1
 8004d5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d5e:	1c7b      	adds	r3, r7, #1
 8004d60:	444b      	add	r3, r9
 8004d62:	106d      	asrs	r5, r5, #1
 8004d64:	429d      	cmp	r5, r3
 8004d66:	bf38      	it	cc
 8004d68:	461d      	movcc	r5, r3
 8004d6a:	0553      	lsls	r3, r2, #21
 8004d6c:	d527      	bpl.n	8004dbe <__ssputs_r+0x8e>
 8004d6e:	4629      	mov	r1, r5
 8004d70:	f7ff ff52 	bl	8004c18 <_malloc_r>
 8004d74:	4606      	mov	r6, r0
 8004d76:	b360      	cbz	r0, 8004dd2 <__ssputs_r+0xa2>
 8004d78:	6921      	ldr	r1, [r4, #16]
 8004d7a:	464a      	mov	r2, r9
 8004d7c:	f000 fae8 	bl	8005350 <memcpy>
 8004d80:	89a3      	ldrh	r3, [r4, #12]
 8004d82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004d86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d8a:	81a3      	strh	r3, [r4, #12]
 8004d8c:	6126      	str	r6, [r4, #16]
 8004d8e:	6165      	str	r5, [r4, #20]
 8004d90:	444e      	add	r6, r9
 8004d92:	eba5 0509 	sub.w	r5, r5, r9
 8004d96:	6026      	str	r6, [r4, #0]
 8004d98:	60a5      	str	r5, [r4, #8]
 8004d9a:	463e      	mov	r6, r7
 8004d9c:	42be      	cmp	r6, r7
 8004d9e:	d900      	bls.n	8004da2 <__ssputs_r+0x72>
 8004da0:	463e      	mov	r6, r7
 8004da2:	6820      	ldr	r0, [r4, #0]
 8004da4:	4632      	mov	r2, r6
 8004da6:	4641      	mov	r1, r8
 8004da8:	f000 faa8 	bl	80052fc <memmove>
 8004dac:	68a3      	ldr	r3, [r4, #8]
 8004dae:	1b9b      	subs	r3, r3, r6
 8004db0:	60a3      	str	r3, [r4, #8]
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	4433      	add	r3, r6
 8004db6:	6023      	str	r3, [r4, #0]
 8004db8:	2000      	movs	r0, #0
 8004dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dbe:	462a      	mov	r2, r5
 8004dc0:	f000 fad4 	bl	800536c <_realloc_r>
 8004dc4:	4606      	mov	r6, r0
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	d1e0      	bne.n	8004d8c <__ssputs_r+0x5c>
 8004dca:	6921      	ldr	r1, [r4, #16]
 8004dcc:	4650      	mov	r0, sl
 8004dce:	f7ff feb7 	bl	8004b40 <_free_r>
 8004dd2:	230c      	movs	r3, #12
 8004dd4:	f8ca 3000 	str.w	r3, [sl]
 8004dd8:	89a3      	ldrh	r3, [r4, #12]
 8004dda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004dde:	81a3      	strh	r3, [r4, #12]
 8004de0:	f04f 30ff 	mov.w	r0, #4294967295
 8004de4:	e7e9      	b.n	8004dba <__ssputs_r+0x8a>
	...

08004de8 <_svfiprintf_r>:
 8004de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dec:	4698      	mov	r8, r3
 8004dee:	898b      	ldrh	r3, [r1, #12]
 8004df0:	061b      	lsls	r3, r3, #24
 8004df2:	b09d      	sub	sp, #116	@ 0x74
 8004df4:	4607      	mov	r7, r0
 8004df6:	460d      	mov	r5, r1
 8004df8:	4614      	mov	r4, r2
 8004dfa:	d510      	bpl.n	8004e1e <_svfiprintf_r+0x36>
 8004dfc:	690b      	ldr	r3, [r1, #16]
 8004dfe:	b973      	cbnz	r3, 8004e1e <_svfiprintf_r+0x36>
 8004e00:	2140      	movs	r1, #64	@ 0x40
 8004e02:	f7ff ff09 	bl	8004c18 <_malloc_r>
 8004e06:	6028      	str	r0, [r5, #0]
 8004e08:	6128      	str	r0, [r5, #16]
 8004e0a:	b930      	cbnz	r0, 8004e1a <_svfiprintf_r+0x32>
 8004e0c:	230c      	movs	r3, #12
 8004e0e:	603b      	str	r3, [r7, #0]
 8004e10:	f04f 30ff 	mov.w	r0, #4294967295
 8004e14:	b01d      	add	sp, #116	@ 0x74
 8004e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e1a:	2340      	movs	r3, #64	@ 0x40
 8004e1c:	616b      	str	r3, [r5, #20]
 8004e1e:	2300      	movs	r3, #0
 8004e20:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e22:	2320      	movs	r3, #32
 8004e24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e28:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e2c:	2330      	movs	r3, #48	@ 0x30
 8004e2e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004fcc <_svfiprintf_r+0x1e4>
 8004e32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e36:	f04f 0901 	mov.w	r9, #1
 8004e3a:	4623      	mov	r3, r4
 8004e3c:	469a      	mov	sl, r3
 8004e3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e42:	b10a      	cbz	r2, 8004e48 <_svfiprintf_r+0x60>
 8004e44:	2a25      	cmp	r2, #37	@ 0x25
 8004e46:	d1f9      	bne.n	8004e3c <_svfiprintf_r+0x54>
 8004e48:	ebba 0b04 	subs.w	fp, sl, r4
 8004e4c:	d00b      	beq.n	8004e66 <_svfiprintf_r+0x7e>
 8004e4e:	465b      	mov	r3, fp
 8004e50:	4622      	mov	r2, r4
 8004e52:	4629      	mov	r1, r5
 8004e54:	4638      	mov	r0, r7
 8004e56:	f7ff ff6b 	bl	8004d30 <__ssputs_r>
 8004e5a:	3001      	adds	r0, #1
 8004e5c:	f000 80a7 	beq.w	8004fae <_svfiprintf_r+0x1c6>
 8004e60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e62:	445a      	add	r2, fp
 8004e64:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e66:	f89a 3000 	ldrb.w	r3, [sl]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 809f 	beq.w	8004fae <_svfiprintf_r+0x1c6>
 8004e70:	2300      	movs	r3, #0
 8004e72:	f04f 32ff 	mov.w	r2, #4294967295
 8004e76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e7a:	f10a 0a01 	add.w	sl, sl, #1
 8004e7e:	9304      	str	r3, [sp, #16]
 8004e80:	9307      	str	r3, [sp, #28]
 8004e82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e86:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e88:	4654      	mov	r4, sl
 8004e8a:	2205      	movs	r2, #5
 8004e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e90:	484e      	ldr	r0, [pc, #312]	@ (8004fcc <_svfiprintf_r+0x1e4>)
 8004e92:	f7fb f99d 	bl	80001d0 <memchr>
 8004e96:	9a04      	ldr	r2, [sp, #16]
 8004e98:	b9d8      	cbnz	r0, 8004ed2 <_svfiprintf_r+0xea>
 8004e9a:	06d0      	lsls	r0, r2, #27
 8004e9c:	bf44      	itt	mi
 8004e9e:	2320      	movmi	r3, #32
 8004ea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ea4:	0711      	lsls	r1, r2, #28
 8004ea6:	bf44      	itt	mi
 8004ea8:	232b      	movmi	r3, #43	@ 0x2b
 8004eaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004eae:	f89a 3000 	ldrb.w	r3, [sl]
 8004eb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004eb4:	d015      	beq.n	8004ee2 <_svfiprintf_r+0xfa>
 8004eb6:	9a07      	ldr	r2, [sp, #28]
 8004eb8:	4654      	mov	r4, sl
 8004eba:	2000      	movs	r0, #0
 8004ebc:	f04f 0c0a 	mov.w	ip, #10
 8004ec0:	4621      	mov	r1, r4
 8004ec2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ec6:	3b30      	subs	r3, #48	@ 0x30
 8004ec8:	2b09      	cmp	r3, #9
 8004eca:	d94b      	bls.n	8004f64 <_svfiprintf_r+0x17c>
 8004ecc:	b1b0      	cbz	r0, 8004efc <_svfiprintf_r+0x114>
 8004ece:	9207      	str	r2, [sp, #28]
 8004ed0:	e014      	b.n	8004efc <_svfiprintf_r+0x114>
 8004ed2:	eba0 0308 	sub.w	r3, r0, r8
 8004ed6:	fa09 f303 	lsl.w	r3, r9, r3
 8004eda:	4313      	orrs	r3, r2
 8004edc:	9304      	str	r3, [sp, #16]
 8004ede:	46a2      	mov	sl, r4
 8004ee0:	e7d2      	b.n	8004e88 <_svfiprintf_r+0xa0>
 8004ee2:	9b03      	ldr	r3, [sp, #12]
 8004ee4:	1d19      	adds	r1, r3, #4
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	9103      	str	r1, [sp, #12]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	bfbb      	ittet	lt
 8004eee:	425b      	neglt	r3, r3
 8004ef0:	f042 0202 	orrlt.w	r2, r2, #2
 8004ef4:	9307      	strge	r3, [sp, #28]
 8004ef6:	9307      	strlt	r3, [sp, #28]
 8004ef8:	bfb8      	it	lt
 8004efa:	9204      	strlt	r2, [sp, #16]
 8004efc:	7823      	ldrb	r3, [r4, #0]
 8004efe:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f00:	d10a      	bne.n	8004f18 <_svfiprintf_r+0x130>
 8004f02:	7863      	ldrb	r3, [r4, #1]
 8004f04:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f06:	d132      	bne.n	8004f6e <_svfiprintf_r+0x186>
 8004f08:	9b03      	ldr	r3, [sp, #12]
 8004f0a:	1d1a      	adds	r2, r3, #4
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	9203      	str	r2, [sp, #12]
 8004f10:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f14:	3402      	adds	r4, #2
 8004f16:	9305      	str	r3, [sp, #20]
 8004f18:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004fdc <_svfiprintf_r+0x1f4>
 8004f1c:	7821      	ldrb	r1, [r4, #0]
 8004f1e:	2203      	movs	r2, #3
 8004f20:	4650      	mov	r0, sl
 8004f22:	f7fb f955 	bl	80001d0 <memchr>
 8004f26:	b138      	cbz	r0, 8004f38 <_svfiprintf_r+0x150>
 8004f28:	9b04      	ldr	r3, [sp, #16]
 8004f2a:	eba0 000a 	sub.w	r0, r0, sl
 8004f2e:	2240      	movs	r2, #64	@ 0x40
 8004f30:	4082      	lsls	r2, r0
 8004f32:	4313      	orrs	r3, r2
 8004f34:	3401      	adds	r4, #1
 8004f36:	9304      	str	r3, [sp, #16]
 8004f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f3c:	4824      	ldr	r0, [pc, #144]	@ (8004fd0 <_svfiprintf_r+0x1e8>)
 8004f3e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f42:	2206      	movs	r2, #6
 8004f44:	f7fb f944 	bl	80001d0 <memchr>
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	d036      	beq.n	8004fba <_svfiprintf_r+0x1d2>
 8004f4c:	4b21      	ldr	r3, [pc, #132]	@ (8004fd4 <_svfiprintf_r+0x1ec>)
 8004f4e:	bb1b      	cbnz	r3, 8004f98 <_svfiprintf_r+0x1b0>
 8004f50:	9b03      	ldr	r3, [sp, #12]
 8004f52:	3307      	adds	r3, #7
 8004f54:	f023 0307 	bic.w	r3, r3, #7
 8004f58:	3308      	adds	r3, #8
 8004f5a:	9303      	str	r3, [sp, #12]
 8004f5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f5e:	4433      	add	r3, r6
 8004f60:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f62:	e76a      	b.n	8004e3a <_svfiprintf_r+0x52>
 8004f64:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f68:	460c      	mov	r4, r1
 8004f6a:	2001      	movs	r0, #1
 8004f6c:	e7a8      	b.n	8004ec0 <_svfiprintf_r+0xd8>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	3401      	adds	r4, #1
 8004f72:	9305      	str	r3, [sp, #20]
 8004f74:	4619      	mov	r1, r3
 8004f76:	f04f 0c0a 	mov.w	ip, #10
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f80:	3a30      	subs	r2, #48	@ 0x30
 8004f82:	2a09      	cmp	r2, #9
 8004f84:	d903      	bls.n	8004f8e <_svfiprintf_r+0x1a6>
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0c6      	beq.n	8004f18 <_svfiprintf_r+0x130>
 8004f8a:	9105      	str	r1, [sp, #20]
 8004f8c:	e7c4      	b.n	8004f18 <_svfiprintf_r+0x130>
 8004f8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f92:	4604      	mov	r4, r0
 8004f94:	2301      	movs	r3, #1
 8004f96:	e7f0      	b.n	8004f7a <_svfiprintf_r+0x192>
 8004f98:	ab03      	add	r3, sp, #12
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	462a      	mov	r2, r5
 8004f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8004fd8 <_svfiprintf_r+0x1f0>)
 8004fa0:	a904      	add	r1, sp, #16
 8004fa2:	4638      	mov	r0, r7
 8004fa4:	f3af 8000 	nop.w
 8004fa8:	1c42      	adds	r2, r0, #1
 8004faa:	4606      	mov	r6, r0
 8004fac:	d1d6      	bne.n	8004f5c <_svfiprintf_r+0x174>
 8004fae:	89ab      	ldrh	r3, [r5, #12]
 8004fb0:	065b      	lsls	r3, r3, #25
 8004fb2:	f53f af2d 	bmi.w	8004e10 <_svfiprintf_r+0x28>
 8004fb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004fb8:	e72c      	b.n	8004e14 <_svfiprintf_r+0x2c>
 8004fba:	ab03      	add	r3, sp, #12
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	462a      	mov	r2, r5
 8004fc0:	4b05      	ldr	r3, [pc, #20]	@ (8004fd8 <_svfiprintf_r+0x1f0>)
 8004fc2:	a904      	add	r1, sp, #16
 8004fc4:	4638      	mov	r0, r7
 8004fc6:	f000 f879 	bl	80050bc <_printf_i>
 8004fca:	e7ed      	b.n	8004fa8 <_svfiprintf_r+0x1c0>
 8004fcc:	08005450 	.word	0x08005450
 8004fd0:	0800545a 	.word	0x0800545a
 8004fd4:	00000000 	.word	0x00000000
 8004fd8:	08004d31 	.word	0x08004d31
 8004fdc:	08005456 	.word	0x08005456

08004fe0 <_printf_common>:
 8004fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fe4:	4616      	mov	r6, r2
 8004fe6:	4698      	mov	r8, r3
 8004fe8:	688a      	ldr	r2, [r1, #8]
 8004fea:	690b      	ldr	r3, [r1, #16]
 8004fec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	bfb8      	it	lt
 8004ff4:	4613      	movlt	r3, r2
 8004ff6:	6033      	str	r3, [r6, #0]
 8004ff8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ffc:	4607      	mov	r7, r0
 8004ffe:	460c      	mov	r4, r1
 8005000:	b10a      	cbz	r2, 8005006 <_printf_common+0x26>
 8005002:	3301      	adds	r3, #1
 8005004:	6033      	str	r3, [r6, #0]
 8005006:	6823      	ldr	r3, [r4, #0]
 8005008:	0699      	lsls	r1, r3, #26
 800500a:	bf42      	ittt	mi
 800500c:	6833      	ldrmi	r3, [r6, #0]
 800500e:	3302      	addmi	r3, #2
 8005010:	6033      	strmi	r3, [r6, #0]
 8005012:	6825      	ldr	r5, [r4, #0]
 8005014:	f015 0506 	ands.w	r5, r5, #6
 8005018:	d106      	bne.n	8005028 <_printf_common+0x48>
 800501a:	f104 0a19 	add.w	sl, r4, #25
 800501e:	68e3      	ldr	r3, [r4, #12]
 8005020:	6832      	ldr	r2, [r6, #0]
 8005022:	1a9b      	subs	r3, r3, r2
 8005024:	42ab      	cmp	r3, r5
 8005026:	dc26      	bgt.n	8005076 <_printf_common+0x96>
 8005028:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800502c:	6822      	ldr	r2, [r4, #0]
 800502e:	3b00      	subs	r3, #0
 8005030:	bf18      	it	ne
 8005032:	2301      	movne	r3, #1
 8005034:	0692      	lsls	r2, r2, #26
 8005036:	d42b      	bmi.n	8005090 <_printf_common+0xb0>
 8005038:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800503c:	4641      	mov	r1, r8
 800503e:	4638      	mov	r0, r7
 8005040:	47c8      	blx	r9
 8005042:	3001      	adds	r0, #1
 8005044:	d01e      	beq.n	8005084 <_printf_common+0xa4>
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	6922      	ldr	r2, [r4, #16]
 800504a:	f003 0306 	and.w	r3, r3, #6
 800504e:	2b04      	cmp	r3, #4
 8005050:	bf02      	ittt	eq
 8005052:	68e5      	ldreq	r5, [r4, #12]
 8005054:	6833      	ldreq	r3, [r6, #0]
 8005056:	1aed      	subeq	r5, r5, r3
 8005058:	68a3      	ldr	r3, [r4, #8]
 800505a:	bf0c      	ite	eq
 800505c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005060:	2500      	movne	r5, #0
 8005062:	4293      	cmp	r3, r2
 8005064:	bfc4      	itt	gt
 8005066:	1a9b      	subgt	r3, r3, r2
 8005068:	18ed      	addgt	r5, r5, r3
 800506a:	2600      	movs	r6, #0
 800506c:	341a      	adds	r4, #26
 800506e:	42b5      	cmp	r5, r6
 8005070:	d11a      	bne.n	80050a8 <_printf_common+0xc8>
 8005072:	2000      	movs	r0, #0
 8005074:	e008      	b.n	8005088 <_printf_common+0xa8>
 8005076:	2301      	movs	r3, #1
 8005078:	4652      	mov	r2, sl
 800507a:	4641      	mov	r1, r8
 800507c:	4638      	mov	r0, r7
 800507e:	47c8      	blx	r9
 8005080:	3001      	adds	r0, #1
 8005082:	d103      	bne.n	800508c <_printf_common+0xac>
 8005084:	f04f 30ff 	mov.w	r0, #4294967295
 8005088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800508c:	3501      	adds	r5, #1
 800508e:	e7c6      	b.n	800501e <_printf_common+0x3e>
 8005090:	18e1      	adds	r1, r4, r3
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	2030      	movs	r0, #48	@ 0x30
 8005096:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800509a:	4422      	add	r2, r4
 800509c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80050a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80050a4:	3302      	adds	r3, #2
 80050a6:	e7c7      	b.n	8005038 <_printf_common+0x58>
 80050a8:	2301      	movs	r3, #1
 80050aa:	4622      	mov	r2, r4
 80050ac:	4641      	mov	r1, r8
 80050ae:	4638      	mov	r0, r7
 80050b0:	47c8      	blx	r9
 80050b2:	3001      	adds	r0, #1
 80050b4:	d0e6      	beq.n	8005084 <_printf_common+0xa4>
 80050b6:	3601      	adds	r6, #1
 80050b8:	e7d9      	b.n	800506e <_printf_common+0x8e>
	...

080050bc <_printf_i>:
 80050bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050c0:	7e0f      	ldrb	r7, [r1, #24]
 80050c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80050c4:	2f78      	cmp	r7, #120	@ 0x78
 80050c6:	4691      	mov	r9, r2
 80050c8:	4680      	mov	r8, r0
 80050ca:	460c      	mov	r4, r1
 80050cc:	469a      	mov	sl, r3
 80050ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80050d2:	d807      	bhi.n	80050e4 <_printf_i+0x28>
 80050d4:	2f62      	cmp	r7, #98	@ 0x62
 80050d6:	d80a      	bhi.n	80050ee <_printf_i+0x32>
 80050d8:	2f00      	cmp	r7, #0
 80050da:	f000 80d2 	beq.w	8005282 <_printf_i+0x1c6>
 80050de:	2f58      	cmp	r7, #88	@ 0x58
 80050e0:	f000 80b9 	beq.w	8005256 <_printf_i+0x19a>
 80050e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80050ec:	e03a      	b.n	8005164 <_printf_i+0xa8>
 80050ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80050f2:	2b15      	cmp	r3, #21
 80050f4:	d8f6      	bhi.n	80050e4 <_printf_i+0x28>
 80050f6:	a101      	add	r1, pc, #4	@ (adr r1, 80050fc <_printf_i+0x40>)
 80050f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050fc:	08005155 	.word	0x08005155
 8005100:	08005169 	.word	0x08005169
 8005104:	080050e5 	.word	0x080050e5
 8005108:	080050e5 	.word	0x080050e5
 800510c:	080050e5 	.word	0x080050e5
 8005110:	080050e5 	.word	0x080050e5
 8005114:	08005169 	.word	0x08005169
 8005118:	080050e5 	.word	0x080050e5
 800511c:	080050e5 	.word	0x080050e5
 8005120:	080050e5 	.word	0x080050e5
 8005124:	080050e5 	.word	0x080050e5
 8005128:	08005269 	.word	0x08005269
 800512c:	08005193 	.word	0x08005193
 8005130:	08005223 	.word	0x08005223
 8005134:	080050e5 	.word	0x080050e5
 8005138:	080050e5 	.word	0x080050e5
 800513c:	0800528b 	.word	0x0800528b
 8005140:	080050e5 	.word	0x080050e5
 8005144:	08005193 	.word	0x08005193
 8005148:	080050e5 	.word	0x080050e5
 800514c:	080050e5 	.word	0x080050e5
 8005150:	0800522b 	.word	0x0800522b
 8005154:	6833      	ldr	r3, [r6, #0]
 8005156:	1d1a      	adds	r2, r3, #4
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6032      	str	r2, [r6, #0]
 800515c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005160:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005164:	2301      	movs	r3, #1
 8005166:	e09d      	b.n	80052a4 <_printf_i+0x1e8>
 8005168:	6833      	ldr	r3, [r6, #0]
 800516a:	6820      	ldr	r0, [r4, #0]
 800516c:	1d19      	adds	r1, r3, #4
 800516e:	6031      	str	r1, [r6, #0]
 8005170:	0606      	lsls	r6, r0, #24
 8005172:	d501      	bpl.n	8005178 <_printf_i+0xbc>
 8005174:	681d      	ldr	r5, [r3, #0]
 8005176:	e003      	b.n	8005180 <_printf_i+0xc4>
 8005178:	0645      	lsls	r5, r0, #25
 800517a:	d5fb      	bpl.n	8005174 <_printf_i+0xb8>
 800517c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005180:	2d00      	cmp	r5, #0
 8005182:	da03      	bge.n	800518c <_printf_i+0xd0>
 8005184:	232d      	movs	r3, #45	@ 0x2d
 8005186:	426d      	negs	r5, r5
 8005188:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800518c:	4859      	ldr	r0, [pc, #356]	@ (80052f4 <_printf_i+0x238>)
 800518e:	230a      	movs	r3, #10
 8005190:	e011      	b.n	80051b6 <_printf_i+0xfa>
 8005192:	6821      	ldr	r1, [r4, #0]
 8005194:	6833      	ldr	r3, [r6, #0]
 8005196:	0608      	lsls	r0, r1, #24
 8005198:	f853 5b04 	ldr.w	r5, [r3], #4
 800519c:	d402      	bmi.n	80051a4 <_printf_i+0xe8>
 800519e:	0649      	lsls	r1, r1, #25
 80051a0:	bf48      	it	mi
 80051a2:	b2ad      	uxthmi	r5, r5
 80051a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80051a6:	4853      	ldr	r0, [pc, #332]	@ (80052f4 <_printf_i+0x238>)
 80051a8:	6033      	str	r3, [r6, #0]
 80051aa:	bf14      	ite	ne
 80051ac:	230a      	movne	r3, #10
 80051ae:	2308      	moveq	r3, #8
 80051b0:	2100      	movs	r1, #0
 80051b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80051b6:	6866      	ldr	r6, [r4, #4]
 80051b8:	60a6      	str	r6, [r4, #8]
 80051ba:	2e00      	cmp	r6, #0
 80051bc:	bfa2      	ittt	ge
 80051be:	6821      	ldrge	r1, [r4, #0]
 80051c0:	f021 0104 	bicge.w	r1, r1, #4
 80051c4:	6021      	strge	r1, [r4, #0]
 80051c6:	b90d      	cbnz	r5, 80051cc <_printf_i+0x110>
 80051c8:	2e00      	cmp	r6, #0
 80051ca:	d04b      	beq.n	8005264 <_printf_i+0x1a8>
 80051cc:	4616      	mov	r6, r2
 80051ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80051d2:	fb03 5711 	mls	r7, r3, r1, r5
 80051d6:	5dc7      	ldrb	r7, [r0, r7]
 80051d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051dc:	462f      	mov	r7, r5
 80051de:	42bb      	cmp	r3, r7
 80051e0:	460d      	mov	r5, r1
 80051e2:	d9f4      	bls.n	80051ce <_printf_i+0x112>
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d10b      	bne.n	8005200 <_printf_i+0x144>
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	07df      	lsls	r7, r3, #31
 80051ec:	d508      	bpl.n	8005200 <_printf_i+0x144>
 80051ee:	6923      	ldr	r3, [r4, #16]
 80051f0:	6861      	ldr	r1, [r4, #4]
 80051f2:	4299      	cmp	r1, r3
 80051f4:	bfde      	ittt	le
 80051f6:	2330      	movle	r3, #48	@ 0x30
 80051f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005200:	1b92      	subs	r2, r2, r6
 8005202:	6122      	str	r2, [r4, #16]
 8005204:	f8cd a000 	str.w	sl, [sp]
 8005208:	464b      	mov	r3, r9
 800520a:	aa03      	add	r2, sp, #12
 800520c:	4621      	mov	r1, r4
 800520e:	4640      	mov	r0, r8
 8005210:	f7ff fee6 	bl	8004fe0 <_printf_common>
 8005214:	3001      	adds	r0, #1
 8005216:	d14a      	bne.n	80052ae <_printf_i+0x1f2>
 8005218:	f04f 30ff 	mov.w	r0, #4294967295
 800521c:	b004      	add	sp, #16
 800521e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	f043 0320 	orr.w	r3, r3, #32
 8005228:	6023      	str	r3, [r4, #0]
 800522a:	4833      	ldr	r0, [pc, #204]	@ (80052f8 <_printf_i+0x23c>)
 800522c:	2778      	movs	r7, #120	@ 0x78
 800522e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	6831      	ldr	r1, [r6, #0]
 8005236:	061f      	lsls	r7, r3, #24
 8005238:	f851 5b04 	ldr.w	r5, [r1], #4
 800523c:	d402      	bmi.n	8005244 <_printf_i+0x188>
 800523e:	065f      	lsls	r7, r3, #25
 8005240:	bf48      	it	mi
 8005242:	b2ad      	uxthmi	r5, r5
 8005244:	6031      	str	r1, [r6, #0]
 8005246:	07d9      	lsls	r1, r3, #31
 8005248:	bf44      	itt	mi
 800524a:	f043 0320 	orrmi.w	r3, r3, #32
 800524e:	6023      	strmi	r3, [r4, #0]
 8005250:	b11d      	cbz	r5, 800525a <_printf_i+0x19e>
 8005252:	2310      	movs	r3, #16
 8005254:	e7ac      	b.n	80051b0 <_printf_i+0xf4>
 8005256:	4827      	ldr	r0, [pc, #156]	@ (80052f4 <_printf_i+0x238>)
 8005258:	e7e9      	b.n	800522e <_printf_i+0x172>
 800525a:	6823      	ldr	r3, [r4, #0]
 800525c:	f023 0320 	bic.w	r3, r3, #32
 8005260:	6023      	str	r3, [r4, #0]
 8005262:	e7f6      	b.n	8005252 <_printf_i+0x196>
 8005264:	4616      	mov	r6, r2
 8005266:	e7bd      	b.n	80051e4 <_printf_i+0x128>
 8005268:	6833      	ldr	r3, [r6, #0]
 800526a:	6825      	ldr	r5, [r4, #0]
 800526c:	6961      	ldr	r1, [r4, #20]
 800526e:	1d18      	adds	r0, r3, #4
 8005270:	6030      	str	r0, [r6, #0]
 8005272:	062e      	lsls	r6, r5, #24
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	d501      	bpl.n	800527c <_printf_i+0x1c0>
 8005278:	6019      	str	r1, [r3, #0]
 800527a:	e002      	b.n	8005282 <_printf_i+0x1c6>
 800527c:	0668      	lsls	r0, r5, #25
 800527e:	d5fb      	bpl.n	8005278 <_printf_i+0x1bc>
 8005280:	8019      	strh	r1, [r3, #0]
 8005282:	2300      	movs	r3, #0
 8005284:	6123      	str	r3, [r4, #16]
 8005286:	4616      	mov	r6, r2
 8005288:	e7bc      	b.n	8005204 <_printf_i+0x148>
 800528a:	6833      	ldr	r3, [r6, #0]
 800528c:	1d1a      	adds	r2, r3, #4
 800528e:	6032      	str	r2, [r6, #0]
 8005290:	681e      	ldr	r6, [r3, #0]
 8005292:	6862      	ldr	r2, [r4, #4]
 8005294:	2100      	movs	r1, #0
 8005296:	4630      	mov	r0, r6
 8005298:	f7fa ff9a 	bl	80001d0 <memchr>
 800529c:	b108      	cbz	r0, 80052a2 <_printf_i+0x1e6>
 800529e:	1b80      	subs	r0, r0, r6
 80052a0:	6060      	str	r0, [r4, #4]
 80052a2:	6863      	ldr	r3, [r4, #4]
 80052a4:	6123      	str	r3, [r4, #16]
 80052a6:	2300      	movs	r3, #0
 80052a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052ac:	e7aa      	b.n	8005204 <_printf_i+0x148>
 80052ae:	6923      	ldr	r3, [r4, #16]
 80052b0:	4632      	mov	r2, r6
 80052b2:	4649      	mov	r1, r9
 80052b4:	4640      	mov	r0, r8
 80052b6:	47d0      	blx	sl
 80052b8:	3001      	adds	r0, #1
 80052ba:	d0ad      	beq.n	8005218 <_printf_i+0x15c>
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	079b      	lsls	r3, r3, #30
 80052c0:	d413      	bmi.n	80052ea <_printf_i+0x22e>
 80052c2:	68e0      	ldr	r0, [r4, #12]
 80052c4:	9b03      	ldr	r3, [sp, #12]
 80052c6:	4298      	cmp	r0, r3
 80052c8:	bfb8      	it	lt
 80052ca:	4618      	movlt	r0, r3
 80052cc:	e7a6      	b.n	800521c <_printf_i+0x160>
 80052ce:	2301      	movs	r3, #1
 80052d0:	4632      	mov	r2, r6
 80052d2:	4649      	mov	r1, r9
 80052d4:	4640      	mov	r0, r8
 80052d6:	47d0      	blx	sl
 80052d8:	3001      	adds	r0, #1
 80052da:	d09d      	beq.n	8005218 <_printf_i+0x15c>
 80052dc:	3501      	adds	r5, #1
 80052de:	68e3      	ldr	r3, [r4, #12]
 80052e0:	9903      	ldr	r1, [sp, #12]
 80052e2:	1a5b      	subs	r3, r3, r1
 80052e4:	42ab      	cmp	r3, r5
 80052e6:	dcf2      	bgt.n	80052ce <_printf_i+0x212>
 80052e8:	e7eb      	b.n	80052c2 <_printf_i+0x206>
 80052ea:	2500      	movs	r5, #0
 80052ec:	f104 0619 	add.w	r6, r4, #25
 80052f0:	e7f5      	b.n	80052de <_printf_i+0x222>
 80052f2:	bf00      	nop
 80052f4:	08005461 	.word	0x08005461
 80052f8:	08005472 	.word	0x08005472

080052fc <memmove>:
 80052fc:	4288      	cmp	r0, r1
 80052fe:	b510      	push	{r4, lr}
 8005300:	eb01 0402 	add.w	r4, r1, r2
 8005304:	d902      	bls.n	800530c <memmove+0x10>
 8005306:	4284      	cmp	r4, r0
 8005308:	4623      	mov	r3, r4
 800530a:	d807      	bhi.n	800531c <memmove+0x20>
 800530c:	1e43      	subs	r3, r0, #1
 800530e:	42a1      	cmp	r1, r4
 8005310:	d008      	beq.n	8005324 <memmove+0x28>
 8005312:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005316:	f803 2f01 	strb.w	r2, [r3, #1]!
 800531a:	e7f8      	b.n	800530e <memmove+0x12>
 800531c:	4402      	add	r2, r0
 800531e:	4601      	mov	r1, r0
 8005320:	428a      	cmp	r2, r1
 8005322:	d100      	bne.n	8005326 <memmove+0x2a>
 8005324:	bd10      	pop	{r4, pc}
 8005326:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800532a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800532e:	e7f7      	b.n	8005320 <memmove+0x24>

08005330 <_sbrk_r>:
 8005330:	b538      	push	{r3, r4, r5, lr}
 8005332:	4d06      	ldr	r5, [pc, #24]	@ (800534c <_sbrk_r+0x1c>)
 8005334:	2300      	movs	r3, #0
 8005336:	4604      	mov	r4, r0
 8005338:	4608      	mov	r0, r1
 800533a:	602b      	str	r3, [r5, #0]
 800533c:	f7fb fd16 	bl	8000d6c <_sbrk>
 8005340:	1c43      	adds	r3, r0, #1
 8005342:	d102      	bne.n	800534a <_sbrk_r+0x1a>
 8005344:	682b      	ldr	r3, [r5, #0]
 8005346:	b103      	cbz	r3, 800534a <_sbrk_r+0x1a>
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	bd38      	pop	{r3, r4, r5, pc}
 800534c:	20000390 	.word	0x20000390

08005350 <memcpy>:
 8005350:	440a      	add	r2, r1
 8005352:	4291      	cmp	r1, r2
 8005354:	f100 33ff 	add.w	r3, r0, #4294967295
 8005358:	d100      	bne.n	800535c <memcpy+0xc>
 800535a:	4770      	bx	lr
 800535c:	b510      	push	{r4, lr}
 800535e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005362:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005366:	4291      	cmp	r1, r2
 8005368:	d1f9      	bne.n	800535e <memcpy+0xe>
 800536a:	bd10      	pop	{r4, pc}

0800536c <_realloc_r>:
 800536c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005370:	4680      	mov	r8, r0
 8005372:	4615      	mov	r5, r2
 8005374:	460c      	mov	r4, r1
 8005376:	b921      	cbnz	r1, 8005382 <_realloc_r+0x16>
 8005378:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800537c:	4611      	mov	r1, r2
 800537e:	f7ff bc4b 	b.w	8004c18 <_malloc_r>
 8005382:	b92a      	cbnz	r2, 8005390 <_realloc_r+0x24>
 8005384:	f7ff fbdc 	bl	8004b40 <_free_r>
 8005388:	2400      	movs	r4, #0
 800538a:	4620      	mov	r0, r4
 800538c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005390:	f000 f81a 	bl	80053c8 <_malloc_usable_size_r>
 8005394:	4285      	cmp	r5, r0
 8005396:	4606      	mov	r6, r0
 8005398:	d802      	bhi.n	80053a0 <_realloc_r+0x34>
 800539a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800539e:	d8f4      	bhi.n	800538a <_realloc_r+0x1e>
 80053a0:	4629      	mov	r1, r5
 80053a2:	4640      	mov	r0, r8
 80053a4:	f7ff fc38 	bl	8004c18 <_malloc_r>
 80053a8:	4607      	mov	r7, r0
 80053aa:	2800      	cmp	r0, #0
 80053ac:	d0ec      	beq.n	8005388 <_realloc_r+0x1c>
 80053ae:	42b5      	cmp	r5, r6
 80053b0:	462a      	mov	r2, r5
 80053b2:	4621      	mov	r1, r4
 80053b4:	bf28      	it	cs
 80053b6:	4632      	movcs	r2, r6
 80053b8:	f7ff ffca 	bl	8005350 <memcpy>
 80053bc:	4621      	mov	r1, r4
 80053be:	4640      	mov	r0, r8
 80053c0:	f7ff fbbe 	bl	8004b40 <_free_r>
 80053c4:	463c      	mov	r4, r7
 80053c6:	e7e0      	b.n	800538a <_realloc_r+0x1e>

080053c8 <_malloc_usable_size_r>:
 80053c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053cc:	1f18      	subs	r0, r3, #4
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	bfbc      	itt	lt
 80053d2:	580b      	ldrlt	r3, [r1, r0]
 80053d4:	18c0      	addlt	r0, r0, r3
 80053d6:	4770      	bx	lr

080053d8 <_init>:
 80053d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053da:	bf00      	nop
 80053dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053de:	bc08      	pop	{r3}
 80053e0:	469e      	mov	lr, r3
 80053e2:	4770      	bx	lr

080053e4 <_fini>:
 80053e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e6:	bf00      	nop
 80053e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ea:	bc08      	pop	{r3}
 80053ec:	469e      	mov	lr, r3
 80053ee:	4770      	bx	lr
