
SolarBoatServoControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005598  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08005728  08005728  00006728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057d8  080057d8  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  080057d8  080057d8  000067d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057e0  080057e0  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057e0  080057e0  000067e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057e4  080057e4  000067e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080057e8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  2000005c  08005844  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08005844  0000736c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001252d  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ac  00000000  00000000  000195b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  0001be68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cbd  00000000  00000000  0001ced8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a03  00000000  00000000  0001db95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f97  00000000  00000000  0003f598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc1f5  00000000  00000000  0005352f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f724  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004958  00000000  00000000  0011f768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b8  00000000  00000000  001240c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005710 	.word	0x08005710

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005710 	.word	0x08005710

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	@ 0x28
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000576:	4b32      	ldr	r3, [pc, #200]	@ (8000640 <MX_CAN1_Init+0xd0>)
 8000578:	4a32      	ldr	r2, [pc, #200]	@ (8000644 <MX_CAN1_Init+0xd4>)
 800057a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 800057c:	4b30      	ldr	r3, [pc, #192]	@ (8000640 <MX_CAN1_Init+0xd0>)
 800057e:	2208      	movs	r2, #8
 8000580:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000582:	4b2f      	ldr	r3, [pc, #188]	@ (8000640 <MX_CAN1_Init+0xd0>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000588:	4b2d      	ldr	r3, [pc, #180]	@ (8000640 <MX_CAN1_Init+0xd0>)
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800058e:	4b2c      	ldr	r3, [pc, #176]	@ (8000640 <MX_CAN1_Init+0xd0>)
 8000590:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000594:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 8000596:	4b2a      	ldr	r3, [pc, #168]	@ (8000640 <MX_CAN1_Init+0xd0>)
 8000598:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 800059c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800059e:	4b28      	ldr	r3, [pc, #160]	@ (8000640 <MX_CAN1_Init+0xd0>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005a4:	4b26      	ldr	r3, [pc, #152]	@ (8000640 <MX_CAN1_Init+0xd0>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005aa:	4b25      	ldr	r3, [pc, #148]	@ (8000640 <MX_CAN1_Init+0xd0>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005b0:	4b23      	ldr	r3, [pc, #140]	@ (8000640 <MX_CAN1_Init+0xd0>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005b6:	4b22      	ldr	r3, [pc, #136]	@ (8000640 <MX_CAN1_Init+0xd0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005bc:	4b20      	ldr	r3, [pc, #128]	@ (8000640 <MX_CAN1_Init+0xd0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005c2:	481f      	ldr	r0, [pc, #124]	@ (8000640 <MX_CAN1_Init+0xd0>)
 80005c4:	f000 fd12 	bl	8000fec <HAL_CAN_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80005ce:	f000 fa01 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2100      	movs	r1, #0
 80005d6:	2014      	movs	r0, #20
 80005d8:	f001 fb63 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80005dc:	2014      	movs	r0, #20
 80005de:	f001 fb7c 	bl	8001cda <HAL_NVIC_EnableIRQ>

    CAN_FilterTypeDef sFilterConfig;

    sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterIdHigh = 0x1 << 5;
 80005e6:	2320      	movs	r3, #32
 80005e8:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = 0x7F << 5;
 80005ee:	f44f 637e 	mov.w	r3, #4064	@ 0xfe0
 80005f2:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005f8:	2301      	movs	r3, #1
 80005fa:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterActivation = ENABLE;
 80005fc:	2301      	movs	r3, #1
 80005fe:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterBank = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]
    sFilterConfig.SlaveStartFilterBank = 14;
 8000608:	230e      	movs	r3, #14
 800060a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 800060c:	463b      	mov	r3, r7
 800060e:	4619      	mov	r1, r3
 8000610:	480b      	ldr	r0, [pc, #44]	@ (8000640 <MX_CAN1_Init+0xd0>)
 8000612:	f000 fde6 	bl	80011e2 <HAL_CAN_ConfigFilter>


  	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000616:	480a      	ldr	r0, [pc, #40]	@ (8000640 <MX_CAN1_Init+0xd0>)
 8000618:	f000 fead 	bl	8001376 <HAL_CAN_Start>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_CAN1_Init+0xb6>
  		Error_Handler();
 8000622:	f000 f9d7 	bl	80009d4 <Error_Handler>
  	}

  	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000626:	2102      	movs	r1, #2
 8000628:	4805      	ldr	r0, [pc, #20]	@ (8000640 <MX_CAN1_Init+0xd0>)
 800062a:	f001 f80a 	bl	8001642 <HAL_CAN_ActivateNotification>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_CAN1_Init+0xc8>
  	{
  		Error_Handler();
 8000634:	f000 f9ce 	bl	80009d4 <Error_Handler>
  	}

  /* USER CODE END CAN1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	3728      	adds	r7, #40	@ 0x28
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000078 	.word	0x20000078
 8000644:	40006400 	.word	0x40006400

08000648 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	@ 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a1c      	ldr	r2, [pc, #112]	@ (80006d8 <HAL_CAN_MspInit+0x90>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d131      	bne.n	80006ce <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800066a:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <HAL_CAN_MspInit+0x94>)
 800066c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800066e:	4a1b      	ldr	r2, [pc, #108]	@ (80006dc <HAL_CAN_MspInit+0x94>)
 8000670:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000674:	6593      	str	r3, [r2, #88]	@ 0x58
 8000676:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <HAL_CAN_MspInit+0x94>)
 8000678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800067a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b16      	ldr	r3, [pc, #88]	@ (80006dc <HAL_CAN_MspInit+0x94>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	4a15      	ldr	r2, [pc, #84]	@ (80006dc <HAL_CAN_MspInit+0x94>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068e:	4b13      	ldr	r3, [pc, #76]	@ (80006dc <HAL_CAN_MspInit+0x94>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800069a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800069e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a0:	2302      	movs	r3, #2
 80006a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a8:	2303      	movs	r3, #3
 80006aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006ac:	2309      	movs	r3, #9
 80006ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4619      	mov	r1, r3
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ba:	f001 fb29 	bl	8001d10 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	2014      	movs	r0, #20
 80006c4:	f001 faed 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006c8:	2014      	movs	r0, #20
 80006ca:	f001 fb06 	bl	8001cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006ce:	bf00      	nop
 80006d0:	3728      	adds	r7, #40	@ 0x28
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40006400 	.word	0x40006400
 80006dc:	40021000 	.word	0x40021000

080006e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	4b1d      	ldr	r3, [pc, #116]	@ (800076c <MX_GPIO_Init+0x8c>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fa:	4a1c      	ldr	r2, [pc, #112]	@ (800076c <MX_GPIO_Init+0x8c>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000702:	4b1a      	ldr	r3, [pc, #104]	@ (800076c <MX_GPIO_Init+0x8c>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b17      	ldr	r3, [pc, #92]	@ (800076c <MX_GPIO_Init+0x8c>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000712:	4a16      	ldr	r2, [pc, #88]	@ (800076c <MX_GPIO_Init+0x8c>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <MX_GPIO_Init+0x8c>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_GPIO_Init+0x8c>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	4a10      	ldr	r2, [pc, #64]	@ (800076c <MX_GPIO_Init+0x8c>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_GPIO_Init+0x8c>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2109      	movs	r1, #9
 8000742:	480b      	ldr	r0, [pc, #44]	@ (8000770 <MX_GPIO_Init+0x90>)
 8000744:	f001 fc4e 	bl	8001fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin;
 8000748:	2309      	movs	r3, #9
 800074a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2300      	movs	r3, #0
 8000756:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	4619      	mov	r1, r3
 800075e:	4804      	ldr	r0, [pc, #16]	@ (8000770 <MX_GPIO_Init+0x90>)
 8000760:	f001 fad6 	bl	8001d10 <HAL_GPIO_Init>

}
 8000764:	bf00      	nop
 8000766:	3720      	adds	r7, #32
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40021000 	.word	0x40021000
 8000770:	48000400 	.word	0x48000400

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	CH1_DC = 1450;
 8000778:	4b2b      	ldr	r3, [pc, #172]	@ (8000828 <main+0xb4>)
 800077a:	f240 52aa 	movw	r2, #1450	@ 0x5aa
 800077e:	601a      	str	r2, [r3, #0]

	angleFoil[0] = 1300;
 8000780:	4b2a      	ldr	r3, [pc, #168]	@ (800082c <main+0xb8>)
 8000782:	f240 5214 	movw	r2, #1300	@ 0x514
 8000786:	801a      	strh	r2, [r3, #0]
	angleFoil[1] = 1325;
 8000788:	4b28      	ldr	r3, [pc, #160]	@ (800082c <main+0xb8>)
 800078a:	f240 522d 	movw	r2, #1325	@ 0x52d
 800078e:	805a      	strh	r2, [r3, #2]
	angleFoil[2] = 1350;
 8000790:	4b26      	ldr	r3, [pc, #152]	@ (800082c <main+0xb8>)
 8000792:	f240 5246 	movw	r2, #1350	@ 0x546
 8000796:	809a      	strh	r2, [r3, #4]
	angleFoil[3] = 1375;
 8000798:	4b24      	ldr	r3, [pc, #144]	@ (800082c <main+0xb8>)
 800079a:	f240 525f 	movw	r2, #1375	@ 0x55f
 800079e:	80da      	strh	r2, [r3, #6]
	angleFoil[4] = 1420;
 80007a0:	4b22      	ldr	r3, [pc, #136]	@ (800082c <main+0xb8>)
 80007a2:	f240 528c 	movw	r2, #1420	@ 0x58c
 80007a6:	811a      	strh	r2, [r3, #8]
	angleFoil[5] = 1450;
 80007a8:	4b20      	ldr	r3, [pc, #128]	@ (800082c <main+0xb8>)
 80007aa:	f240 52aa 	movw	r2, #1450	@ 0x5aa
 80007ae:	815a      	strh	r2, [r3, #10]
	angleFoil[6] = 1475;
 80007b0:	4b1e      	ldr	r3, [pc, #120]	@ (800082c <main+0xb8>)
 80007b2:	f240 52c3 	movw	r2, #1475	@ 0x5c3
 80007b6:	819a      	strh	r2, [r3, #12]
	angleFoil[7] = 1500;
 80007b8:	4b1c      	ldr	r3, [pc, #112]	@ (800082c <main+0xb8>)
 80007ba:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80007be:	81da      	strh	r2, [r3, #14]
	angleFoil[8] = 1550;
 80007c0:	4b1a      	ldr	r3, [pc, #104]	@ (800082c <main+0xb8>)
 80007c2:	f240 620e 	movw	r2, #1550	@ 0x60e
 80007c6:	821a      	strh	r2, [r3, #16]
	angleFoil[9] = 1600;
 80007c8:	4b18      	ldr	r3, [pc, #96]	@ (800082c <main+0xb8>)
 80007ca:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80007ce:	825a      	strh	r2, [r3, #18]
	angleFoil[10] = 1650;
 80007d0:	4b16      	ldr	r3, [pc, #88]	@ (800082c <main+0xb8>)
 80007d2:	f240 6272 	movw	r2, #1650	@ 0x672
 80007d6:	829a      	strh	r2, [r3, #20]
	angleFoil[11] = 1700;
 80007d8:	4b14      	ldr	r3, [pc, #80]	@ (800082c <main+0xb8>)
 80007da:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 80007de:	82da      	strh	r2, [r3, #22]
	angleFoil[12] = 1750;
 80007e0:	4b12      	ldr	r3, [pc, #72]	@ (800082c <main+0xb8>)
 80007e2:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 80007e6:	831a      	strh	r2, [r3, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e8:	f000 fb67 	bl	8000eba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ec:	f000 f826 	bl	800083c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f0:	f7ff ff76 	bl	80006e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007f4:	f000 fa9e 	bl	8000d34 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80007f8:	f7ff feba 	bl	8000570 <MX_CAN1_Init>
  MX_TIM1_Init();
 80007fc:	f000 f996 	bl	8000b2c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000800:	2100      	movs	r1, #0
 8000802:	480b      	ldr	r0, [pc, #44]	@ (8000830 <main+0xbc>)
 8000804:	f002 fe7c 	bl	8003500 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		TIM1->CCR1 = CH1_DC * 2;
 8000808:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <main+0xb4>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	005a      	lsls	r2, r3, #1
 800080e:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <main+0xc0>)
 8000810:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000812:	2108      	movs	r1, #8
 8000814:	4808      	ldr	r0, [pc, #32]	@ (8000838 <main+0xc4>)
 8000816:	f001 fbfd 	bl	8002014 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 800081a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800081e:	f000 fbc1 	bl	8000fa4 <HAL_Delay>
		TIM1->CCR1 = CH1_DC * 2;
 8000822:	bf00      	nop
 8000824:	e7f0      	b.n	8000808 <main+0x94>
 8000826:	bf00      	nop
 8000828:	200000a0 	.word	0x200000a0
 800082c:	200000c8 	.word	0x200000c8
 8000830:	2000014c 	.word	0x2000014c
 8000834:	40012c00 	.word	0x40012c00
 8000838:	48000400 	.word	0x48000400

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b096      	sub	sp, #88	@ 0x58
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	2244      	movs	r2, #68	@ 0x44
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f004 fae0 	bl	8004e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	463b      	mov	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800085e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000862:	f001 fc0f 	bl	8002084 <HAL_PWREx_ControlVoltageScaling>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800086c:	f000 f8b2 	bl	80009d4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000870:	f001 fbea 	bl	8002048 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000874:	4b21      	ldr	r3, [pc, #132]	@ (80008fc <SystemClock_Config+0xc0>)
 8000876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800087a:	4a20      	ldr	r2, [pc, #128]	@ (80008fc <SystemClock_Config+0xc0>)
 800087c:	f023 0318 	bic.w	r3, r3, #24
 8000880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000884:	2314      	movs	r3, #20
 8000886:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000888:	2301      	movs	r3, #1
 800088a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800088c:	2301      	movs	r3, #1
 800088e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000894:	2360      	movs	r3, #96	@ 0x60
 8000896:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000898:	2302      	movs	r3, #2
 800089a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800089c:	2301      	movs	r3, #1
 800089e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008a0:	2301      	movs	r3, #1
 80008a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80008a4:	2310      	movs	r3, #16
 80008a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008a8:	2307      	movs	r3, #7
 80008aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4618      	mov	r0, r3
 80008ba:	f001 fc39 	bl	8002130 <HAL_RCC_OscConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80008c4:	f000 f886 	bl	80009d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c8:	230f      	movs	r3, #15
 80008ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008cc:	2303      	movs	r3, #3
 80008ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008dc:	463b      	mov	r3, r7
 80008de:	2101      	movs	r1, #1
 80008e0:	4618      	mov	r0, r3
 80008e2:	f002 f839 	bl	8002958 <HAL_RCC_ClockConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008ec:	f000 f872 	bl	80009d4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008f0:	f002 fc4c 	bl	800318c <HAL_RCCEx_EnableMSIPLLMode>
}
 80008f4:	bf00      	nop
 80008f6:	3758      	adds	r7, #88	@ 0x58
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40021000 	.word	0x40021000

08000900 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af02      	add	r7, sp, #8
 8000906:	6078      	str	r0, [r7, #4]
    // Lees het CAN-bericht uit
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000908:	4b2b      	ldr	r3, [pc, #172]	@ (80009b8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800090a:	4a2c      	ldr	r2, [pc, #176]	@ (80009bc <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 800090c:	2100      	movs	r1, #0
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f000 fd75 	bl	80013fe <HAL_CAN_GetRxMessage>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
    {
        Error_Handler();
 800091a:	f000 f85b 	bl	80009d4 <Error_Handler>
    }

    // Verstuur de ontvangen data via UART voor debugging
    sprintf(uartBuf, "CAN MSG: 0x%X CAN ID: 0x%X DLC: %d Data: ", RxHeader.StdId>>7, ((uint8_t)RxHeader.StdId & 0b01111111), RxHeader.DLC);
 800091e:	4b27      	ldr	r3, [pc, #156]	@ (80009bc <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	09da      	lsrs	r2, r3, #7
 8000924:	4b25      	ldr	r3, [pc, #148]	@ (80009bc <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 800092e:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8000930:	691b      	ldr	r3, [r3, #16]
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	460b      	mov	r3, r1
 8000936:	4922      	ldr	r1, [pc, #136]	@ (80009c0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000938:	4822      	ldr	r0, [pc, #136]	@ (80009c4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 800093a:	f004 fa49 	bl	8004dd0 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 800093e:	4821      	ldr	r0, [pc, #132]	@ (80009c4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000940:	f7ff fc46 	bl	80001d0 <strlen>
 8000944:	4603      	mov	r3, r0
 8000946:	b29a      	uxth	r2, r3
 8000948:	f04f 33ff 	mov.w	r3, #4294967295
 800094c:	491d      	ldr	r1, [pc, #116]	@ (80009c4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 800094e:	481e      	ldr	r0, [pc, #120]	@ (80009c8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8000950:	f003 fd6c 	bl	800442c <HAL_UART_Transmit>

    // Verstuur de ontvangen bytes via UART
    for (int i = 0; i < RxHeader.DLC; i++)
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	e016      	b.n	8000988 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
    {
        sprintf(uartBuf, "%c", RxData[i]);
 800095a:	4a17      	ldr	r2, [pc, #92]	@ (80009b8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	4413      	add	r3, r2
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	461a      	mov	r2, r3
 8000964:	4919      	ldr	r1, [pc, #100]	@ (80009cc <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000966:	4817      	ldr	r0, [pc, #92]	@ (80009c4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000968:	f004 fa32 	bl	8004dd0 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 800096c:	4815      	ldr	r0, [pc, #84]	@ (80009c4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 800096e:	f7ff fc2f 	bl	80001d0 <strlen>
 8000972:	4603      	mov	r3, r0
 8000974:	b29a      	uxth	r2, r3
 8000976:	f04f 33ff 	mov.w	r3, #4294967295
 800097a:	4912      	ldr	r1, [pc, #72]	@ (80009c4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 800097c:	4812      	ldr	r0, [pc, #72]	@ (80009c8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 800097e:	f003 fd55 	bl	800442c <HAL_UART_Transmit>
    for (int i = 0; i < RxHeader.DLC; i++)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	3301      	adds	r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 800098a:	691a      	ldr	r2, [r3, #16]
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	429a      	cmp	r2, r3
 8000990:	d8e3      	bhi.n	800095a <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
    }

    // Voeg een newline toe voor leesbaarheid
    sprintf(uartBuf, "\r\n");
 8000992:	490f      	ldr	r1, [pc, #60]	@ (80009d0 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000994:	480b      	ldr	r0, [pc, #44]	@ (80009c4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000996:	f004 fa1b 	bl	8004dd0 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 800099a:	480a      	ldr	r0, [pc, #40]	@ (80009c4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 800099c:	f7ff fc18 	bl	80001d0 <strlen>
 80009a0:	4603      	mov	r3, r0
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	f04f 33ff 	mov.w	r3, #4294967295
 80009a8:	4906      	ldr	r1, [pc, #24]	@ (80009c4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 80009aa:	4807      	ldr	r0, [pc, #28]	@ (80009c8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 80009ac:	f003 fd3e 	bl	800442c <HAL_UART_Transmit>
}
 80009b0:	bf00      	nop
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	200000c0 	.word	0x200000c0
 80009bc:	200000a4 	.word	0x200000a4
 80009c0:	08005728 	.word	0x08005728
 80009c4:	200000e4 	.word	0x200000e4
 80009c8:	20000198 	.word	0x20000198
 80009cc:	08005754 	.word	0x08005754
 80009d0:	08005758 	.word	0x08005758

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <Error_Handler+0x8>

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <HAL_MspInit+0x44>)
 80009e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000a24 <HAL_MspInit+0x44>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80009f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a24 <HAL_MspInit+0x44>)
 80009f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	4b09      	ldr	r3, [pc, #36]	@ (8000a24 <HAL_MspInit+0x44>)
 8000a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a02:	4a08      	ldr	r2, [pc, #32]	@ (8000a24 <HAL_MspInit+0x44>)
 8000a04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a08:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a0a:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <HAL_MspInit+0x44>)
 8000a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	40021000 	.word	0x40021000

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <NMI_Handler+0x4>

08000a30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <HardFault_Handler+0x4>

08000a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <MemManage_Handler+0x4>

08000a40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <BusFault_Handler+0x4>

08000a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <UsageFault_Handler+0x4>

08000a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7e:	f000 fa71 	bl	8000f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a8c:	4802      	ldr	r0, [pc, #8]	@ (8000a98 <CAN1_RX0_IRQHandler+0x10>)
 8000a8e:	f000 fdfe 	bl	800168e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000078 	.word	0x20000078

08000a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa4:	4a14      	ldr	r2, [pc, #80]	@ (8000af8 <_sbrk+0x5c>)
 8000aa6:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <_sbrk+0x60>)
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab0:	4b13      	ldr	r3, [pc, #76]	@ (8000b00 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d102      	bne.n	8000abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <_sbrk+0x64>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	@ (8000b04 <_sbrk+0x68>)
 8000abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000abe:	4b10      	ldr	r3, [pc, #64]	@ (8000b00 <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d207      	bcs.n	8000adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000acc:	f004 f9a8 	bl	8004e20 <__errno>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ada:	e009      	b.n	8000af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000adc:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <_sbrk+0x64>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ae2:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	4a05      	ldr	r2, [pc, #20]	@ (8000b00 <_sbrk+0x64>)
 8000aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aee:	68fb      	ldr	r3, [r7, #12]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20010000 	.word	0x20010000
 8000afc:	00000400 	.word	0x00000400
 8000b00:	20000148 	.word	0x20000148
 8000b04:	20000370 	.word	0x20000370

08000b08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b0c:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <SystemInit+0x20>)
 8000b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b12:	4a05      	ldr	r2, [pc, #20]	@ (8000b28 <SystemInit+0x20>)
 8000b14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b09a      	sub	sp, #104	@ 0x68
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b32:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b40:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b4c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
 8000b5c:	615a      	str	r2, [r3, #20]
 8000b5e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	222c      	movs	r2, #44	@ 0x2c
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f004 f952 	bl	8004e10 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b6c:	4b43      	ldr	r3, [pc, #268]	@ (8000c7c <MX_TIM1_Init+0x150>)
 8000b6e:	4a44      	ldr	r2, [pc, #272]	@ (8000c80 <MX_TIM1_Init+0x154>)
 8000b70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000b72:	4b42      	ldr	r3, [pc, #264]	@ (8000c7c <MX_TIM1_Init+0x150>)
 8000b74:	220f      	movs	r2, #15
 8000b76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b78:	4b40      	ldr	r3, [pc, #256]	@ (8000c7c <MX_TIM1_Init+0x150>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40000-1;
 8000b7e:	4b3f      	ldr	r3, [pc, #252]	@ (8000c7c <MX_TIM1_Init+0x150>)
 8000b80:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8000b84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b86:	4b3d      	ldr	r3, [pc, #244]	@ (8000c7c <MX_TIM1_Init+0x150>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b8c:	4b3b      	ldr	r3, [pc, #236]	@ (8000c7c <MX_TIM1_Init+0x150>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b92:	4b3a      	ldr	r3, [pc, #232]	@ (8000c7c <MX_TIM1_Init+0x150>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b98:	4838      	ldr	r0, [pc, #224]	@ (8000c7c <MX_TIM1_Init+0x150>)
 8000b9a:	f002 fbf9 	bl	8003390 <HAL_TIM_Base_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ba4:	f7ff ff16 	bl	80009d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bac:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bae:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4831      	ldr	r0, [pc, #196]	@ (8000c7c <MX_TIM1_Init+0x150>)
 8000bb6:	f002 fe95 	bl	80038e4 <HAL_TIM_ConfigClockSource>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000bc0:	f7ff ff08 	bl	80009d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bc4:	482d      	ldr	r0, [pc, #180]	@ (8000c7c <MX_TIM1_Init+0x150>)
 8000bc6:	f002 fc3a 	bl	800343e <HAL_TIM_PWM_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000bd0:	f7ff ff00 	bl	80009d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000be0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000be4:	4619      	mov	r1, r3
 8000be6:	4825      	ldr	r0, [pc, #148]	@ (8000c7c <MX_TIM1_Init+0x150>)
 8000be8:	f003 faf4 	bl	80041d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000bf2:	f7ff feef 	bl	80009d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bf6:	2360      	movs	r3, #96	@ 0x60
 8000bf8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c02:	2300      	movs	r3, #0
 8000c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c12:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c16:	2200      	movs	r2, #0
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4818      	ldr	r0, [pc, #96]	@ (8000c7c <MX_TIM1_Init+0x150>)
 8000c1c:	f002 fd4e 	bl	80036bc <HAL_TIM_PWM_ConfigChannel>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000c26:	f7ff fed5 	bl	80009d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4807      	ldr	r0, [pc, #28]	@ (8000c7c <MX_TIM1_Init+0x150>)
 8000c60:	f003 fb1e 	bl	80042a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000c6a:	f7ff feb3 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c6e:	4803      	ldr	r0, [pc, #12]	@ (8000c7c <MX_TIM1_Init+0x150>)
 8000c70:	f000 f828 	bl	8000cc4 <HAL_TIM_MspPostInit>

}
 8000c74:	bf00      	nop
 8000c76:	3768      	adds	r7, #104	@ 0x68
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	2000014c 	.word	0x2000014c
 8000c80:	40012c00 	.word	0x40012c00

08000c84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <HAL_TIM_Base_MspInit+0x38>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d10b      	bne.n	8000cae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c96:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc0 <HAL_TIM_Base_MspInit+0x3c>)
 8000c98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c9a:	4a09      	ldr	r2, [pc, #36]	@ (8000cc0 <HAL_TIM_Base_MspInit+0x3c>)
 8000c9c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ca0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ca2:	4b07      	ldr	r3, [pc, #28]	@ (8000cc0 <HAL_TIM_Base_MspInit+0x3c>)
 8000ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ca6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000cae:	bf00      	nop
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40012c00 	.word	0x40012c00
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a12      	ldr	r2, [pc, #72]	@ (8000d2c <HAL_TIM_MspPostInit+0x68>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d11d      	bne.n	8000d22 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <HAL_TIM_MspPostInit+0x6c>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cea:	4a11      	ldr	r2, [pc, #68]	@ (8000d30 <HAL_TIM_MspPostInit+0x6c>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d30 <HAL_TIM_MspPostInit+0x6c>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cfe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d10:	2301      	movs	r3, #1
 8000d12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d14:	f107 030c 	add.w	r3, r7, #12
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1e:	f000 fff7 	bl	8001d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d22:	bf00      	nop
 8000d24:	3720      	adds	r7, #32
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40012c00 	.word	0x40012c00
 8000d30:	40021000 	.word	0x40021000

08000d34 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d38:	4b14      	ldr	r3, [pc, #80]	@ (8000d8c <MX_USART2_UART_Init+0x58>)
 8000d3a:	4a15      	ldr	r2, [pc, #84]	@ (8000d90 <MX_USART2_UART_Init+0x5c>)
 8000d3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d3e:	4b13      	ldr	r3, [pc, #76]	@ (8000d8c <MX_USART2_UART_Init+0x58>)
 8000d40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d46:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <MX_USART2_UART_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <MX_USART2_UART_Init+0x58>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <MX_USART2_UART_Init+0x58>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <MX_USART2_UART_Init+0x58>)
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d8c <MX_USART2_UART_Init+0x58>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d64:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <MX_USART2_UART_Init+0x58>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d6a:	4b08      	ldr	r3, [pc, #32]	@ (8000d8c <MX_USART2_UART_Init+0x58>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <MX_USART2_UART_Init+0x58>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d76:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <MX_USART2_UART_Init+0x58>)
 8000d78:	f003 fb0a 	bl	8004390 <HAL_UART_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d82:	f7ff fe27 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000198 	.word	0x20000198
 8000d90:	40004400 	.word	0x40004400

08000d94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b09e      	sub	sp, #120	@ 0x78
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	2254      	movs	r2, #84	@ 0x54
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f004 f82b 	bl	8004e10 <memset>
  if(uartHandle->Instance==USART2)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a28      	ldr	r2, [pc, #160]	@ (8000e60 <HAL_UART_MspInit+0xcc>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d148      	bne.n	8000e56 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f001 ffe5 	bl	8002da0 <HAL_RCCEx_PeriphCLKConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ddc:	f7ff fdfa 	bl	80009d4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000de0:	4b20      	ldr	r3, [pc, #128]	@ (8000e64 <HAL_UART_MspInit+0xd0>)
 8000de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000de4:	4a1f      	ldr	r2, [pc, #124]	@ (8000e64 <HAL_UART_MspInit+0xd0>)
 8000de6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dea:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dec:	4b1d      	ldr	r3, [pc, #116]	@ (8000e64 <HAL_UART_MspInit+0xd0>)
 8000dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e64 <HAL_UART_MspInit+0xd0>)
 8000dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfc:	4a19      	ldr	r2, [pc, #100]	@ (8000e64 <HAL_UART_MspInit+0xd0>)
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e04:	4b17      	ldr	r3, [pc, #92]	@ (8000e64 <HAL_UART_MspInit+0xd0>)
 8000e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000e10:	2304      	movs	r3, #4
 8000e12:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e20:	2307      	movs	r3, #7
 8000e22:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000e24:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e2e:	f000 ff6f 	bl	8001d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000e32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e36:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000e44:	2303      	movs	r3, #3
 8000e46:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e52:	f000 ff5d 	bl	8001d10 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e56:	bf00      	nop
 8000e58:	3778      	adds	r7, #120	@ 0x78
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40004400 	.word	0x40004400
 8000e64:	40021000 	.word	0x40021000

08000e68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ea0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e6c:	f7ff fe4c 	bl	8000b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e70:	480c      	ldr	r0, [pc, #48]	@ (8000ea4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e72:	490d      	ldr	r1, [pc, #52]	@ (8000ea8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e74:	4a0d      	ldr	r2, [pc, #52]	@ (8000eac <LoopForever+0xe>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e78:	e002      	b.n	8000e80 <LoopCopyDataInit>

08000e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7e:	3304      	adds	r3, #4

08000e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e84:	d3f9      	bcc.n	8000e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e86:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e88:	4c0a      	ldr	r4, [pc, #40]	@ (8000eb4 <LoopForever+0x16>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e8c:	e001      	b.n	8000e92 <LoopFillZerobss>

08000e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e90:	3204      	adds	r2, #4

08000e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e94:	d3fb      	bcc.n	8000e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e96:	f003 ffc9 	bl	8004e2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e9a:	f7ff fc6b 	bl	8000774 <main>

08000e9e <LoopForever>:

LoopForever:
    b LoopForever
 8000e9e:	e7fe      	b.n	8000e9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ea0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000eac:	080057e8 	.word	0x080057e8
  ldr r2, =_sbss
 8000eb0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000eb4:	2000036c 	.word	0x2000036c

08000eb8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000eb8:	e7fe      	b.n	8000eb8 <ADC1_IRQHandler>

08000eba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	f000 fee1 	bl	8001c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f000 f80e 	bl	8000eec <HAL_InitTick>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d002      	beq.n	8000edc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	71fb      	strb	r3, [r7, #7]
 8000eda:	e001      	b.n	8000ee0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000edc:	f7ff fd80 	bl	80009e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ef8:	4b17      	ldr	r3, [pc, #92]	@ (8000f58 <HAL_InitTick+0x6c>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d023      	beq.n	8000f48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f00:	4b16      	ldr	r3, [pc, #88]	@ (8000f5c <HAL_InitTick+0x70>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b14      	ldr	r3, [pc, #80]	@ (8000f58 <HAL_InitTick+0x6c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 feed 	bl	8001cf6 <HAL_SYSTICK_Config>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10f      	bne.n	8000f42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b0f      	cmp	r3, #15
 8000f26:	d809      	bhi.n	8000f3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	6879      	ldr	r1, [r7, #4]
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f000 feb7 	bl	8001ca2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f34:	4a0a      	ldr	r2, [pc, #40]	@ (8000f60 <HAL_InitTick+0x74>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	e007      	b.n	8000f4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
 8000f40:	e004      	b.n	8000f4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	73fb      	strb	r3, [r7, #15]
 8000f46:	e001      	b.n	8000f4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	20000004 	.word	0x20000004

08000f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f68:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <HAL_IncTick+0x20>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <HAL_IncTick+0x24>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	4a04      	ldr	r2, [pc, #16]	@ (8000f88 <HAL_IncTick+0x24>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000008 	.word	0x20000008
 8000f88:	20000220 	.word	0x20000220

08000f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b03      	ldr	r3, [pc, #12]	@ (8000fa0 <HAL_GetTick+0x14>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000220 	.word	0x20000220

08000fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fac:	f7ff ffee 	bl	8000f8c <HAL_GetTick>
 8000fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fbc:	d005      	beq.n	8000fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe8 <HAL_Delay+0x44>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fca:	bf00      	nop
 8000fcc:	f7ff ffde 	bl	8000f8c <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d8f7      	bhi.n	8000fcc <HAL_Delay+0x28>
  {
  }
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000008 	.word	0x20000008

08000fec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e0ed      	b.n	80011da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d102      	bne.n	8001010 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff fb1c 	bl	8000648 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f042 0201 	orr.w	r2, r2, #1
 800101e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001020:	f7ff ffb4 	bl	8000f8c <HAL_GetTick>
 8001024:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001026:	e012      	b.n	800104e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001028:	f7ff ffb0 	bl	8000f8c <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b0a      	cmp	r3, #10
 8001034:	d90b      	bls.n	800104e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800103a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2205      	movs	r2, #5
 8001046:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e0c5      	b.n	80011da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0e5      	beq.n	8001028 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 0202 	bic.w	r2, r2, #2
 800106a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800106c:	f7ff ff8e 	bl	8000f8c <HAL_GetTick>
 8001070:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001072:	e012      	b.n	800109a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001074:	f7ff ff8a 	bl	8000f8c <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b0a      	cmp	r3, #10
 8001080:	d90b      	bls.n	800109a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001086:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2205      	movs	r2, #5
 8001092:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e09f      	b.n	80011da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1e5      	bne.n	8001074 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7e1b      	ldrb	r3, [r3, #24]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d108      	bne.n	80010c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	e007      	b.n	80010d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	7e5b      	ldrb	r3, [r3, #25]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d108      	bne.n	80010ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	e007      	b.n	80010fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80010fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	7e9b      	ldrb	r3, [r3, #26]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d108      	bne.n	8001116 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 0220 	orr.w	r2, r2, #32
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	e007      	b.n	8001126 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 0220 	bic.w	r2, r2, #32
 8001124:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7edb      	ldrb	r3, [r3, #27]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d108      	bne.n	8001140 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f022 0210 	bic.w	r2, r2, #16
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	e007      	b.n	8001150 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 0210 	orr.w	r2, r2, #16
 800114e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	7f1b      	ldrb	r3, [r3, #28]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d108      	bne.n	800116a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 0208 	orr.w	r2, r2, #8
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	e007      	b.n	800117a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f022 0208 	bic.w	r2, r2, #8
 8001178:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	7f5b      	ldrb	r3, [r3, #29]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d108      	bne.n	8001194 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f042 0204 	orr.w	r2, r2, #4
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	e007      	b.n	80011a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0204 	bic.w	r2, r2, #4
 80011a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	431a      	orrs	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	431a      	orrs	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	ea42 0103 	orr.w	r1, r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	1e5a      	subs	r2, r3, #1
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2201      	movs	r2, #1
 80011d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b087      	sub	sp, #28
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80011fa:	7cfb      	ldrb	r3, [r7, #19]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d003      	beq.n	8001208 <HAL_CAN_ConfigFilter+0x26>
 8001200:	7cfb      	ldrb	r3, [r7, #19]
 8001202:	2b02      	cmp	r3, #2
 8001204:	f040 80aa 	bne.w	800135c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800120e:	f043 0201 	orr.w	r2, r3, #1
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	f003 031f 	and.w	r3, r3, #31
 8001220:	2201      	movs	r2, #1
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	43db      	mvns	r3, r3
 8001232:	401a      	ands	r2, r3
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d123      	bne.n	800128a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	43db      	mvns	r3, r3
 800124c:	401a      	ands	r2, r3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001264:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	3248      	adds	r2, #72	@ 0x48
 800126a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800127e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001280:	6979      	ldr	r1, [r7, #20]
 8001282:	3348      	adds	r3, #72	@ 0x48
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	440b      	add	r3, r1
 8001288:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d122      	bne.n	80012d8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	431a      	orrs	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012b2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	3248      	adds	r2, #72	@ 0x48
 80012b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012cc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012ce:	6979      	ldr	r1, [r7, #20]
 80012d0:	3348      	adds	r3, #72	@ 0x48
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	440b      	add	r3, r1
 80012d6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d109      	bne.n	80012f4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	401a      	ands	r2, r3
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80012f2:	e007      	b.n	8001304 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	431a      	orrs	r2, r3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d109      	bne.n	8001320 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	43db      	mvns	r3, r3
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800131e:	e007      	b.n	8001330 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	431a      	orrs	r2, r3
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d107      	bne.n	8001348 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	431a      	orrs	r2, r3
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800134e:	f023 0201 	bic.w	r2, r3, #1
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	e006      	b.n	800136a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001360:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
  }
}
 800136a:	4618      	mov	r0, r3
 800136c:	371c      	adds	r7, #28
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b084      	sub	sp, #16
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b01      	cmp	r3, #1
 8001388:	d12e      	bne.n	80013e8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2202      	movs	r2, #2
 800138e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 0201 	bic.w	r2, r2, #1
 80013a0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013a2:	f7ff fdf3 	bl	8000f8c <HAL_GetTick>
 80013a6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013a8:	e012      	b.n	80013d0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013aa:	f7ff fdef 	bl	8000f8c <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b0a      	cmp	r3, #10
 80013b6:	d90b      	bls.n	80013d0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013bc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2205      	movs	r2, #5
 80013c8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e012      	b.n	80013f6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1e5      	bne.n	80013aa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80013e4:	2300      	movs	r3, #0
 80013e6:	e006      	b.n	80013f6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ec:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
  }
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80013fe:	b480      	push	{r7}
 8001400:	b087      	sub	sp, #28
 8001402:	af00      	add	r7, sp, #0
 8001404:	60f8      	str	r0, [r7, #12]
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	607a      	str	r2, [r7, #4]
 800140a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001412:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001414:	7dfb      	ldrb	r3, [r7, #23]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d003      	beq.n	8001422 <HAL_CAN_GetRxMessage+0x24>
 800141a:	7dfb      	ldrb	r3, [r7, #23]
 800141c:	2b02      	cmp	r3, #2
 800141e:	f040 8103 	bne.w	8001628 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d10e      	bne.n	8001446 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d116      	bne.n	8001464 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e0f7      	b.n	8001636 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d107      	bne.n	8001464 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001458:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e0e8      	b.n	8001636 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	331b      	adds	r3, #27
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	4413      	add	r3, r2
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0204 	and.w	r2, r3, #4
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10c      	bne.n	800149c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	331b      	adds	r3, #27
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	4413      	add	r3, r2
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	0d5b      	lsrs	r3, r3, #21
 8001492:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	e00b      	b.n	80014b4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	331b      	adds	r3, #27
 80014a4:	011b      	lsls	r3, r3, #4
 80014a6:	4413      	add	r3, r2
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	08db      	lsrs	r3, r3, #3
 80014ac:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	331b      	adds	r3, #27
 80014bc:	011b      	lsls	r3, r3, #4
 80014be:	4413      	add	r3, r2
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0202 	and.w	r2, r3, #2
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	331b      	adds	r3, #27
 80014d2:	011b      	lsls	r3, r3, #4
 80014d4:	4413      	add	r3, r2
 80014d6:	3304      	adds	r3, #4
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2208      	movs	r2, #8
 80014e6:	611a      	str	r2, [r3, #16]
 80014e8:	e00b      	b.n	8001502 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	331b      	adds	r3, #27
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	4413      	add	r3, r2
 80014f6:	3304      	adds	r3, #4
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 020f 	and.w	r2, r3, #15
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	331b      	adds	r3, #27
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	4413      	add	r3, r2
 800150e:	3304      	adds	r3, #4
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	0a1b      	lsrs	r3, r3, #8
 8001514:	b2da      	uxtb	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	331b      	adds	r3, #27
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	4413      	add	r3, r2
 8001526:	3304      	adds	r3, #4
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	0c1b      	lsrs	r3, r3, #16
 800152c:	b29a      	uxth	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	4413      	add	r3, r2
 800153c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	b2da      	uxtb	r2, r3
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	011b      	lsls	r3, r3, #4
 8001550:	4413      	add	r3, r2
 8001552:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	0a1a      	lsrs	r2, r3, #8
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	3301      	adds	r3, #1
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	011b      	lsls	r3, r3, #4
 800156a:	4413      	add	r3, r2
 800156c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	0c1a      	lsrs	r2, r3, #16
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	3302      	adds	r3, #2
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	011b      	lsls	r3, r3, #4
 8001584:	4413      	add	r3, r2
 8001586:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	0e1a      	lsrs	r2, r3, #24
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	3303      	adds	r3, #3
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	011b      	lsls	r3, r3, #4
 800159e:	4413      	add	r3, r2
 80015a0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	3304      	adds	r3, #4
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	011b      	lsls	r3, r3, #4
 80015b6:	4413      	add	r3, r2
 80015b8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	0a1a      	lsrs	r2, r3, #8
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	3305      	adds	r3, #5
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	4413      	add	r3, r2
 80015d2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	0c1a      	lsrs	r2, r3, #16
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	3306      	adds	r3, #6
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	011b      	lsls	r3, r3, #4
 80015ea:	4413      	add	r3, r2
 80015ec:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	0e1a      	lsrs	r2, r3, #24
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	3307      	adds	r3, #7
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d108      	bne.n	8001614 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f042 0220 	orr.w	r2, r2, #32
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	e007      	b.n	8001624 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	691a      	ldr	r2, [r3, #16]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 0220 	orr.w	r2, r2, #32
 8001622:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	e006      	b.n	8001636 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
  }
}
 8001636:	4618      	mov	r0, r3
 8001638:	371c      	adds	r7, #28
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001642:	b480      	push	{r7}
 8001644:	b085      	sub	sp, #20
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001652:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d002      	beq.n	8001660 <HAL_CAN_ActivateNotification+0x1e>
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	2b02      	cmp	r3, #2
 800165e:	d109      	bne.n	8001674 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6959      	ldr	r1, [r3, #20]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	e006      	b.n	8001682 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001678:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
  }
}
 8001682:	4618      	mov	r0, r3
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b08a      	sub	sp, #40	@ 0x28
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001696:	2300      	movs	r3, #0
 8001698:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80016ca:	6a3b      	ldr	r3, [r7, #32]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d07c      	beq.n	80017ce <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d023      	beq.n	8001726 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2201      	movs	r2, #1
 80016e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f983 	bl	80019fc <HAL_CAN_TxMailbox0CompleteCallback>
 80016f6:	e016      	b.n	8001726 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d004      	beq.n	800170c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001704:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001708:	627b      	str	r3, [r7, #36]	@ 0x24
 800170a:	e00c      	b.n	8001726 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d004      	beq.n	8001720 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001718:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24
 800171e:	e002      	b.n	8001726 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 f989 	bl	8001a38 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800172c:	2b00      	cmp	r3, #0
 800172e:	d024      	beq.n	800177a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001738:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 f963 	bl	8001a10 <HAL_CAN_TxMailbox1CompleteCallback>
 800174a:	e016      	b.n	800177a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001752:	2b00      	cmp	r3, #0
 8001754:	d004      	beq.n	8001760 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001758:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800175c:	627b      	str	r3, [r7, #36]	@ 0x24
 800175e:	e00c      	b.n	800177a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001766:	2b00      	cmp	r3, #0
 8001768:	d004      	beq.n	8001774 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800176a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001770:	627b      	str	r3, [r7, #36]	@ 0x24
 8001772:	e002      	b.n	800177a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f969 	bl	8001a4c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d024      	beq.n	80017ce <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800178c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 f943 	bl	8001a24 <HAL_CAN_TxMailbox2CompleteCallback>
 800179e:	e016      	b.n	80017ce <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d004      	beq.n	80017b4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80017aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b2:	e00c      	b.n	80017ce <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d004      	beq.n	80017c8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80017be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80017c6:	e002      	b.n	80017ce <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f949 	bl	8001a60 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80017ce:	6a3b      	ldr	r3, [r7, #32]
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00c      	beq.n	80017f2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f003 0310 	and.w	r3, r3, #16
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d007      	beq.n	80017f2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80017e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017e8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2210      	movs	r2, #16
 80017f0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80017f2:	6a3b      	ldr	r3, [r7, #32]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00b      	beq.n	8001814 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	2b00      	cmp	r3, #0
 8001804:	d006      	beq.n	8001814 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2208      	movs	r2, #8
 800180c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f930 	bl	8001a74 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001814:	6a3b      	ldr	r3, [r7, #32]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d009      	beq.n	8001832 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d002      	beq.n	8001832 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff f867 	bl	8000900 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001832:	6a3b      	ldr	r3, [r7, #32]
 8001834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00c      	beq.n	8001856 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	f003 0310 	and.w	r3, r3, #16
 8001842:	2b00      	cmp	r3, #0
 8001844:	d007      	beq.n	8001856 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001848:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800184c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2210      	movs	r2, #16
 8001854:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	f003 0320 	and.w	r3, r3, #32
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00b      	beq.n	8001878 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d006      	beq.n	8001878 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2208      	movs	r2, #8
 8001870:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 f912 	bl	8001a9c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001878:	6a3b      	ldr	r3, [r7, #32]
 800187a:	f003 0310 	and.w	r3, r3, #16
 800187e:	2b00      	cmp	r3, #0
 8001880:	d009      	beq.n	8001896 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	2b00      	cmp	r3, #0
 800188e:	d002      	beq.n	8001896 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 f8f9 	bl	8001a88 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001896:	6a3b      	ldr	r3, [r7, #32]
 8001898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00b      	beq.n	80018b8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f003 0310 	and.w	r3, r3, #16
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d006      	beq.n	80018b8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2210      	movs	r2, #16
 80018b0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 f8fc 	bl	8001ab0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80018b8:	6a3b      	ldr	r3, [r7, #32]
 80018ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00b      	beq.n	80018da <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	f003 0308 	and.w	r3, r3, #8
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d006      	beq.n	80018da <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2208      	movs	r2, #8
 80018d2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 f8f5 	bl	8001ac4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80018da:	6a3b      	ldr	r3, [r7, #32]
 80018dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d07b      	beq.n	80019dc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d072      	beq.n	80019d4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d008      	beq.n	800190a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800190a:	6a3b      	ldr	r3, [r7, #32]
 800190c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001910:	2b00      	cmp	r3, #0
 8001912:	d008      	beq.n	8001926 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800191e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001926:	6a3b      	ldr	r3, [r7, #32]
 8001928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800192c:	2b00      	cmp	r3, #0
 800192e:	d008      	beq.n	8001942 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800193a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001948:	2b00      	cmp	r3, #0
 800194a:	d043      	beq.n	80019d4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001952:	2b00      	cmp	r3, #0
 8001954:	d03e      	beq.n	80019d4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800195c:	2b60      	cmp	r3, #96	@ 0x60
 800195e:	d02b      	beq.n	80019b8 <HAL_CAN_IRQHandler+0x32a>
 8001960:	2b60      	cmp	r3, #96	@ 0x60
 8001962:	d82e      	bhi.n	80019c2 <HAL_CAN_IRQHandler+0x334>
 8001964:	2b50      	cmp	r3, #80	@ 0x50
 8001966:	d022      	beq.n	80019ae <HAL_CAN_IRQHandler+0x320>
 8001968:	2b50      	cmp	r3, #80	@ 0x50
 800196a:	d82a      	bhi.n	80019c2 <HAL_CAN_IRQHandler+0x334>
 800196c:	2b40      	cmp	r3, #64	@ 0x40
 800196e:	d019      	beq.n	80019a4 <HAL_CAN_IRQHandler+0x316>
 8001970:	2b40      	cmp	r3, #64	@ 0x40
 8001972:	d826      	bhi.n	80019c2 <HAL_CAN_IRQHandler+0x334>
 8001974:	2b30      	cmp	r3, #48	@ 0x30
 8001976:	d010      	beq.n	800199a <HAL_CAN_IRQHandler+0x30c>
 8001978:	2b30      	cmp	r3, #48	@ 0x30
 800197a:	d822      	bhi.n	80019c2 <HAL_CAN_IRQHandler+0x334>
 800197c:	2b10      	cmp	r3, #16
 800197e:	d002      	beq.n	8001986 <HAL_CAN_IRQHandler+0x2f8>
 8001980:	2b20      	cmp	r3, #32
 8001982:	d005      	beq.n	8001990 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001984:	e01d      	b.n	80019c2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001988:	f043 0308 	orr.w	r3, r3, #8
 800198c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800198e:	e019      	b.n	80019c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001992:	f043 0310 	orr.w	r3, r3, #16
 8001996:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001998:	e014      	b.n	80019c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800199a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199c:	f043 0320 	orr.w	r3, r3, #32
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019a2:	e00f      	b.n	80019c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80019a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019aa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019ac:	e00a      	b.n	80019c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80019ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019b4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019b6:	e005      	b.n	80019c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80019b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019be:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019c0:	e000      	b.n	80019c4 <HAL_CAN_IRQHandler+0x336>
            break;
 80019c2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	699a      	ldr	r2, [r3, #24]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80019d2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2204      	movs	r2, #4
 80019da:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80019dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d008      	beq.n	80019f4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 f872 	bl	8001ad8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80019f4:	bf00      	nop
 80019f6:	3728      	adds	r7, #40	@ 0x28
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001afc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1e:	4a04      	ldr	r2, [pc, #16]	@ (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	60d3      	str	r3, [r2, #12]
}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b38:	4b04      	ldr	r3, [pc, #16]	@ (8001b4c <__NVIC_GetPriorityGrouping+0x18>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	f003 0307 	and.w	r3, r3, #7
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	db0b      	blt.n	8001b7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	f003 021f 	and.w	r2, r3, #31
 8001b68:	4907      	ldr	r1, [pc, #28]	@ (8001b88 <__NVIC_EnableIRQ+0x38>)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	2001      	movs	r0, #1
 8001b72:	fa00 f202 	lsl.w	r2, r0, r2
 8001b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000e100 	.word	0xe000e100

08001b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	6039      	str	r1, [r7, #0]
 8001b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	db0a      	blt.n	8001bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	490c      	ldr	r1, [pc, #48]	@ (8001bd8 <__NVIC_SetPriority+0x4c>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	0112      	lsls	r2, r2, #4
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	440b      	add	r3, r1
 8001bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb4:	e00a      	b.n	8001bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4908      	ldr	r1, [pc, #32]	@ (8001bdc <__NVIC_SetPriority+0x50>)
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	3b04      	subs	r3, #4
 8001bc4:	0112      	lsls	r2, r2, #4
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	440b      	add	r3, r1
 8001bca:	761a      	strb	r2, [r3, #24]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000e100 	.word	0xe000e100
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	@ 0x24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f1c3 0307 	rsb	r3, r3, #7
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	bf28      	it	cs
 8001bfe:	2304      	movcs	r3, #4
 8001c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3304      	adds	r3, #4
 8001c06:	2b06      	cmp	r3, #6
 8001c08:	d902      	bls.n	8001c10 <NVIC_EncodePriority+0x30>
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3b03      	subs	r3, #3
 8001c0e:	e000      	b.n	8001c12 <NVIC_EncodePriority+0x32>
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	f04f 32ff 	mov.w	r2, #4294967295
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	401a      	ands	r2, r3
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c28:	f04f 31ff 	mov.w	r1, #4294967295
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c32:	43d9      	mvns	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	4313      	orrs	r3, r2
         );
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3724      	adds	r7, #36	@ 0x24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c58:	d301      	bcc.n	8001c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00f      	b.n	8001c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c88 <SysTick_Config+0x40>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c66:	210f      	movs	r1, #15
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	f7ff ff8e 	bl	8001b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c70:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <SysTick_Config+0x40>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c76:	4b04      	ldr	r3, [pc, #16]	@ (8001c88 <SysTick_Config+0x40>)
 8001c78:	2207      	movs	r2, #7
 8001c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	e000e010 	.word	0xe000e010

08001c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ff29 	bl	8001aec <__NVIC_SetPriorityGrouping>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb4:	f7ff ff3e 	bl	8001b34 <__NVIC_GetPriorityGrouping>
 8001cb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	6978      	ldr	r0, [r7, #20]
 8001cc0:	f7ff ff8e 	bl	8001be0 <NVIC_EncodePriority>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff5d 	bl	8001b8c <__NVIC_SetPriority>
}
 8001cd2:	bf00      	nop
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff31 	bl	8001b50 <__NVIC_EnableIRQ>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ffa2 	bl	8001c48 <SysTick_Config>
 8001d04:	4603      	mov	r3, r0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d1e:	e148      	b.n	8001fb2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	2101      	movs	r1, #1
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 813a 	beq.w	8001fac <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d005      	beq.n	8001d50 <HAL_GPIO_Init+0x40>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d130      	bne.n	8001db2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4013      	ands	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	68da      	ldr	r2, [r3, #12]
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d86:	2201      	movs	r2, #1
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4013      	ands	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	091b      	lsrs	r3, r3, #4
 8001d9c:	f003 0201 	and.w	r2, r3, #1
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	d017      	beq.n	8001dee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	2203      	movs	r2, #3
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d123      	bne.n	8001e42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	08da      	lsrs	r2, r3, #3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3208      	adds	r2, #8
 8001e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	220f      	movs	r2, #15
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	691a      	ldr	r2, [r3, #16]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	08da      	lsrs	r2, r3, #3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3208      	adds	r2, #8
 8001e3c:	6939      	ldr	r1, [r7, #16]
 8001e3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4013      	ands	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 0203 	and.w	r2, r3, #3
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 8094 	beq.w	8001fac <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e84:	4b52      	ldr	r3, [pc, #328]	@ (8001fd0 <HAL_GPIO_Init+0x2c0>)
 8001e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e88:	4a51      	ldr	r2, [pc, #324]	@ (8001fd0 <HAL_GPIO_Init+0x2c0>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e90:	4b4f      	ldr	r3, [pc, #316]	@ (8001fd0 <HAL_GPIO_Init+0x2c0>)
 8001e92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e9c:	4a4d      	ldr	r2, [pc, #308]	@ (8001fd4 <HAL_GPIO_Init+0x2c4>)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	089b      	lsrs	r3, r3, #2
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	220f      	movs	r2, #15
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ec6:	d00d      	beq.n	8001ee4 <HAL_GPIO_Init+0x1d4>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a43      	ldr	r2, [pc, #268]	@ (8001fd8 <HAL_GPIO_Init+0x2c8>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d007      	beq.n	8001ee0 <HAL_GPIO_Init+0x1d0>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a42      	ldr	r2, [pc, #264]	@ (8001fdc <HAL_GPIO_Init+0x2cc>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d101      	bne.n	8001edc <HAL_GPIO_Init+0x1cc>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e004      	b.n	8001ee6 <HAL_GPIO_Init+0x1d6>
 8001edc:	2307      	movs	r3, #7
 8001ede:	e002      	b.n	8001ee6 <HAL_GPIO_Init+0x1d6>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <HAL_GPIO_Init+0x1d6>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	f002 0203 	and.w	r2, r2, #3
 8001eec:	0092      	lsls	r2, r2, #2
 8001eee:	4093      	lsls	r3, r2
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ef6:	4937      	ldr	r1, [pc, #220]	@ (8001fd4 <HAL_GPIO_Init+0x2c4>)
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	089b      	lsrs	r3, r3, #2
 8001efc:	3302      	adds	r3, #2
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f04:	4b36      	ldr	r3, [pc, #216]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f28:	4a2d      	ldr	r2, [pc, #180]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f52:	4a23      	ldr	r2, [pc, #140]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f58:	4b21      	ldr	r3, [pc, #132]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4013      	ands	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f7c:	4a18      	ldr	r2, [pc, #96]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f82:	4b17      	ldr	r3, [pc, #92]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fa6:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f47f aeaf 	bne.w	8001d20 <HAL_GPIO_Init+0x10>
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	bf00      	nop
 8001fc6:	371c      	adds	r7, #28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40010000 	.word	0x40010000
 8001fd8:	48000400 	.word	0x48000400
 8001fdc:	48000800 	.word	0x48000800
 8001fe0:	40010400 	.word	0x40010400

08001fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	807b      	strh	r3, [r7, #2]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ff4:	787b      	ldrb	r3, [r7, #1]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ffa:	887a      	ldrh	r2, [r7, #2]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002000:	e002      	b.n	8002008 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002002:	887a      	ldrh	r2, [r7, #2]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002026:	887a      	ldrh	r2, [r7, #2]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4013      	ands	r3, r2
 800202c:	041a      	lsls	r2, r3, #16
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	43d9      	mvns	r1, r3
 8002032:	887b      	ldrh	r3, [r7, #2]
 8002034:	400b      	ands	r3, r1
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	619a      	str	r2, [r3, #24]
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800204c:	4b05      	ldr	r3, [pc, #20]	@ (8002064 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a04      	ldr	r2, [pc, #16]	@ (8002064 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002052:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002056:	6013      	str	r3, [r2, #0]
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40007000 	.word	0x40007000

08002068 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800206c:	4b04      	ldr	r3, [pc, #16]	@ (8002080 <HAL_PWREx_GetVoltageRange+0x18>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002074:	4618      	mov	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40007000 	.word	0x40007000

08002084 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002092:	d130      	bne.n	80020f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002094:	4b23      	ldr	r3, [pc, #140]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800209c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020a0:	d038      	beq.n	8002114 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020a2:	4b20      	ldr	r3, [pc, #128]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002128 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2232      	movs	r2, #50	@ 0x32
 80020b8:	fb02 f303 	mul.w	r3, r2, r3
 80020bc:	4a1b      	ldr	r2, [pc, #108]	@ (800212c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	0c9b      	lsrs	r3, r3, #18
 80020c4:	3301      	adds	r3, #1
 80020c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020c8:	e002      	b.n	80020d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	3b01      	subs	r3, #1
 80020ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020d0:	4b14      	ldr	r3, [pc, #80]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020dc:	d102      	bne.n	80020e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f2      	bne.n	80020ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020f0:	d110      	bne.n	8002114 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e00f      	b.n	8002116 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002102:	d007      	beq.n	8002114 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002104:	4b07      	ldr	r3, [pc, #28]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800210c:	4a05      	ldr	r2, [pc, #20]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800210e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002112:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40007000 	.word	0x40007000
 8002128:	20000000 	.word	0x20000000
 800212c:	431bde83 	.word	0x431bde83

08002130 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d102      	bne.n	8002144 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	f000 bc02 	b.w	8002948 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002144:	4b96      	ldr	r3, [pc, #600]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 030c 	and.w	r3, r3, #12
 800214c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800214e:	4b94      	ldr	r3, [pc, #592]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0310 	and.w	r3, r3, #16
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 80e4 	beq.w	800232e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d007      	beq.n	800217c <HAL_RCC_OscConfig+0x4c>
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	2b0c      	cmp	r3, #12
 8002170:	f040 808b 	bne.w	800228a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	2b01      	cmp	r3, #1
 8002178:	f040 8087 	bne.w	800228a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800217c:	4b88      	ldr	r3, [pc, #544]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <HAL_RCC_OscConfig+0x64>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e3d9      	b.n	8002948 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a1a      	ldr	r2, [r3, #32]
 8002198:	4b81      	ldr	r3, [pc, #516]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d004      	beq.n	80021ae <HAL_RCC_OscConfig+0x7e>
 80021a4:	4b7e      	ldr	r3, [pc, #504]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021ac:	e005      	b.n	80021ba <HAL_RCC_OscConfig+0x8a>
 80021ae:	4b7c      	ldr	r3, [pc, #496]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 80021b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021b4:	091b      	lsrs	r3, r3, #4
 80021b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d223      	bcs.n	8002206 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 fd8c 	bl	8002ce0 <RCC_SetFlashLatencyFromMSIRange>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e3ba      	b.n	8002948 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021d2:	4b73      	ldr	r3, [pc, #460]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a72      	ldr	r2, [pc, #456]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 80021d8:	f043 0308 	orr.w	r3, r3, #8
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	4b70      	ldr	r3, [pc, #448]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	496d      	ldr	r1, [pc, #436]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021f0:	4b6b      	ldr	r3, [pc, #428]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	021b      	lsls	r3, r3, #8
 80021fe:	4968      	ldr	r1, [pc, #416]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]
 8002204:	e025      	b.n	8002252 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002206:	4b66      	ldr	r3, [pc, #408]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a65      	ldr	r2, [pc, #404]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 800220c:	f043 0308 	orr.w	r3, r3, #8
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	4b63      	ldr	r3, [pc, #396]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	4960      	ldr	r1, [pc, #384]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 8002220:	4313      	orrs	r3, r2
 8002222:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002224:	4b5e      	ldr	r3, [pc, #376]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	021b      	lsls	r3, r3, #8
 8002232:	495b      	ldr	r1, [pc, #364]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 8002234:	4313      	orrs	r3, r2
 8002236:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d109      	bne.n	8002252 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4618      	mov	r0, r3
 8002244:	f000 fd4c 	bl	8002ce0 <RCC_SetFlashLatencyFromMSIRange>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e37a      	b.n	8002948 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002252:	f000 fc81 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 8002256:	4602      	mov	r2, r0
 8002258:	4b51      	ldr	r3, [pc, #324]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	091b      	lsrs	r3, r3, #4
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	4950      	ldr	r1, [pc, #320]	@ (80023a4 <HAL_RCC_OscConfig+0x274>)
 8002264:	5ccb      	ldrb	r3, [r1, r3]
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	fa22 f303 	lsr.w	r3, r2, r3
 800226e:	4a4e      	ldr	r2, [pc, #312]	@ (80023a8 <HAL_RCC_OscConfig+0x278>)
 8002270:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002272:	4b4e      	ldr	r3, [pc, #312]	@ (80023ac <HAL_RCC_OscConfig+0x27c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe fe38 	bl	8000eec <HAL_InitTick>
 800227c:	4603      	mov	r3, r0
 800227e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d052      	beq.n	800232c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	e35e      	b.n	8002948 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d032      	beq.n	80022f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002292:	4b43      	ldr	r3, [pc, #268]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a42      	ldr	r2, [pc, #264]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800229e:	f7fe fe75 	bl	8000f8c <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022a6:	f7fe fe71 	bl	8000f8c <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e347      	b.n	8002948 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022b8:	4b39      	ldr	r3, [pc, #228]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022c4:	4b36      	ldr	r3, [pc, #216]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a35      	ldr	r2, [pc, #212]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 80022ca:	f043 0308 	orr.w	r3, r3, #8
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	4b33      	ldr	r3, [pc, #204]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	4930      	ldr	r1, [pc, #192]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022e2:	4b2f      	ldr	r3, [pc, #188]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	021b      	lsls	r3, r3, #8
 80022f0:	492b      	ldr	r1, [pc, #172]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	604b      	str	r3, [r1, #4]
 80022f6:	e01a      	b.n	800232e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022f8:	4b29      	ldr	r3, [pc, #164]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a28      	ldr	r2, [pc, #160]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 80022fe:	f023 0301 	bic.w	r3, r3, #1
 8002302:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002304:	f7fe fe42 	bl	8000f8c <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800230c:	f7fe fe3e 	bl	8000f8c <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e314      	b.n	8002948 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800231e:	4b20      	ldr	r3, [pc, #128]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x1dc>
 800232a:	e000      	b.n	800232e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800232c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d073      	beq.n	8002422 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	2b08      	cmp	r3, #8
 800233e:	d005      	beq.n	800234c <HAL_RCC_OscConfig+0x21c>
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	2b0c      	cmp	r3, #12
 8002344:	d10e      	bne.n	8002364 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d10b      	bne.n	8002364 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234c:	4b14      	ldr	r3, [pc, #80]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d063      	beq.n	8002420 <HAL_RCC_OscConfig+0x2f0>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d15f      	bne.n	8002420 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e2f1      	b.n	8002948 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800236c:	d106      	bne.n	800237c <HAL_RCC_OscConfig+0x24c>
 800236e:	4b0c      	ldr	r3, [pc, #48]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a0b      	ldr	r2, [pc, #44]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 8002374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	e025      	b.n	80023c8 <HAL_RCC_OscConfig+0x298>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002384:	d114      	bne.n	80023b0 <HAL_RCC_OscConfig+0x280>
 8002386:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a05      	ldr	r2, [pc, #20]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 800238c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	4b03      	ldr	r3, [pc, #12]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a02      	ldr	r2, [pc, #8]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 8002398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	e013      	b.n	80023c8 <HAL_RCC_OscConfig+0x298>
 80023a0:	40021000 	.word	0x40021000
 80023a4:	0800575c 	.word	0x0800575c
 80023a8:	20000000 	.word	0x20000000
 80023ac:	20000004 	.word	0x20000004
 80023b0:	4ba0      	ldr	r3, [pc, #640]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a9f      	ldr	r2, [pc, #636]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 80023b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	4b9d      	ldr	r3, [pc, #628]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a9c      	ldr	r2, [pc, #624]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 80023c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d013      	beq.n	80023f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d0:	f7fe fddc 	bl	8000f8c <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d8:	f7fe fdd8 	bl	8000f8c <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b64      	cmp	r3, #100	@ 0x64
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e2ae      	b.n	8002948 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ea:	4b92      	ldr	r3, [pc, #584]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x2a8>
 80023f6:	e014      	b.n	8002422 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f8:	f7fe fdc8 	bl	8000f8c <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002400:	f7fe fdc4 	bl	8000f8c <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b64      	cmp	r3, #100	@ 0x64
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e29a      	b.n	8002948 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002412:	4b88      	ldr	r3, [pc, #544]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x2d0>
 800241e:	e000      	b.n	8002422 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d060      	beq.n	80024f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	2b04      	cmp	r3, #4
 8002432:	d005      	beq.n	8002440 <HAL_RCC_OscConfig+0x310>
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	2b0c      	cmp	r3, #12
 8002438:	d119      	bne.n	800246e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b02      	cmp	r3, #2
 800243e:	d116      	bne.n	800246e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002440:	4b7c      	ldr	r3, [pc, #496]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <HAL_RCC_OscConfig+0x328>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e277      	b.n	8002948 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002458:	4b76      	ldr	r3, [pc, #472]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	061b      	lsls	r3, r3, #24
 8002466:	4973      	ldr	r1, [pc, #460]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800246c:	e040      	b.n	80024f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d023      	beq.n	80024be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002476:	4b6f      	ldr	r3, [pc, #444]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a6e      	ldr	r2, [pc, #440]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 800247c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002482:	f7fe fd83 	bl	8000f8c <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800248a:	f7fe fd7f 	bl	8000f8c <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e255      	b.n	8002948 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800249c:	4b65      	ldr	r3, [pc, #404]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0f0      	beq.n	800248a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a8:	4b62      	ldr	r3, [pc, #392]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	061b      	lsls	r3, r3, #24
 80024b6:	495f      	ldr	r1, [pc, #380]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	604b      	str	r3, [r1, #4]
 80024bc:	e018      	b.n	80024f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024be:	4b5d      	ldr	r3, [pc, #372]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a5c      	ldr	r2, [pc, #368]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 80024c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ca:	f7fe fd5f 	bl	8000f8c <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d2:	f7fe fd5b 	bl	8000f8c <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e231      	b.n	8002948 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024e4:	4b53      	ldr	r3, [pc, #332]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f0      	bne.n	80024d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d03c      	beq.n	8002576 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d01c      	beq.n	800253e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002504:	4b4b      	ldr	r3, [pc, #300]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 8002506:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800250a:	4a4a      	ldr	r2, [pc, #296]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002514:	f7fe fd3a 	bl	8000f8c <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800251c:	f7fe fd36 	bl	8000f8c <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e20c      	b.n	8002948 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800252e:	4b41      	ldr	r3, [pc, #260]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 8002530:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0ef      	beq.n	800251c <HAL_RCC_OscConfig+0x3ec>
 800253c:	e01b      	b.n	8002576 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800253e:	4b3d      	ldr	r3, [pc, #244]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 8002540:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002544:	4a3b      	ldr	r2, [pc, #236]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 8002546:	f023 0301 	bic.w	r3, r3, #1
 800254a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254e:	f7fe fd1d 	bl	8000f8c <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002556:	f7fe fd19 	bl	8000f8c <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e1ef      	b.n	8002948 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002568:	4b32      	ldr	r3, [pc, #200]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 800256a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1ef      	bne.n	8002556 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 80a6 	beq.w	80026d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002584:	2300      	movs	r3, #0
 8002586:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002588:	4b2a      	ldr	r3, [pc, #168]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 800258a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10d      	bne.n	80025b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002594:	4b27      	ldr	r3, [pc, #156]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 8002596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002598:	4a26      	ldr	r2, [pc, #152]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 800259a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800259e:	6593      	str	r3, [r2, #88]	@ 0x58
 80025a0:	4b24      	ldr	r3, [pc, #144]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 80025a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ac:	2301      	movs	r3, #1
 80025ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b0:	4b21      	ldr	r3, [pc, #132]	@ (8002638 <HAL_RCC_OscConfig+0x508>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d118      	bne.n	80025ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002638 <HAL_RCC_OscConfig+0x508>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002638 <HAL_RCC_OscConfig+0x508>)
 80025c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025c8:	f7fe fce0 	bl	8000f8c <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d0:	f7fe fcdc 	bl	8000f8c <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e1b2      	b.n	8002948 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025e2:	4b15      	ldr	r3, [pc, #84]	@ (8002638 <HAL_RCC_OscConfig+0x508>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d108      	bne.n	8002608 <HAL_RCC_OscConfig+0x4d8>
 80025f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 80025f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002606:	e029      	b.n	800265c <HAL_RCC_OscConfig+0x52c>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2b05      	cmp	r3, #5
 800260e:	d115      	bne.n	800263c <HAL_RCC_OscConfig+0x50c>
 8002610:	4b08      	ldr	r3, [pc, #32]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 8002612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002616:	4a07      	ldr	r2, [pc, #28]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 8002618:	f043 0304 	orr.w	r3, r3, #4
 800261c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002620:	4b04      	ldr	r3, [pc, #16]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 8002622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002626:	4a03      	ldr	r2, [pc, #12]	@ (8002634 <HAL_RCC_OscConfig+0x504>)
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002630:	e014      	b.n	800265c <HAL_RCC_OscConfig+0x52c>
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
 8002638:	40007000 	.word	0x40007000
 800263c:	4b9a      	ldr	r3, [pc, #616]	@ (80028a8 <HAL_RCC_OscConfig+0x778>)
 800263e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002642:	4a99      	ldr	r2, [pc, #612]	@ (80028a8 <HAL_RCC_OscConfig+0x778>)
 8002644:	f023 0301 	bic.w	r3, r3, #1
 8002648:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800264c:	4b96      	ldr	r3, [pc, #600]	@ (80028a8 <HAL_RCC_OscConfig+0x778>)
 800264e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002652:	4a95      	ldr	r2, [pc, #596]	@ (80028a8 <HAL_RCC_OscConfig+0x778>)
 8002654:	f023 0304 	bic.w	r3, r3, #4
 8002658:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d016      	beq.n	8002692 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002664:	f7fe fc92 	bl	8000f8c <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800266a:	e00a      	b.n	8002682 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800266c:	f7fe fc8e 	bl	8000f8c <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800267a:	4293      	cmp	r3, r2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e162      	b.n	8002948 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002682:	4b89      	ldr	r3, [pc, #548]	@ (80028a8 <HAL_RCC_OscConfig+0x778>)
 8002684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0ed      	beq.n	800266c <HAL_RCC_OscConfig+0x53c>
 8002690:	e015      	b.n	80026be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002692:	f7fe fc7b 	bl	8000f8c <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002698:	e00a      	b.n	80026b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269a:	f7fe fc77 	bl	8000f8c <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e14b      	b.n	8002948 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026b0:	4b7d      	ldr	r3, [pc, #500]	@ (80028a8 <HAL_RCC_OscConfig+0x778>)
 80026b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1ed      	bne.n	800269a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026be:	7ffb      	ldrb	r3, [r7, #31]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d105      	bne.n	80026d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c4:	4b78      	ldr	r3, [pc, #480]	@ (80028a8 <HAL_RCC_OscConfig+0x778>)
 80026c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c8:	4a77      	ldr	r2, [pc, #476]	@ (80028a8 <HAL_RCC_OscConfig+0x778>)
 80026ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026ce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0320 	and.w	r3, r3, #32
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d03c      	beq.n	8002756 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d01c      	beq.n	800271e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026e4:	4b70      	ldr	r3, [pc, #448]	@ (80028a8 <HAL_RCC_OscConfig+0x778>)
 80026e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026ea:	4a6f      	ldr	r2, [pc, #444]	@ (80028a8 <HAL_RCC_OscConfig+0x778>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f4:	f7fe fc4a 	bl	8000f8c <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026fc:	f7fe fc46 	bl	8000f8c <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e11c      	b.n	8002948 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800270e:	4b66      	ldr	r3, [pc, #408]	@ (80028a8 <HAL_RCC_OscConfig+0x778>)
 8002710:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0ef      	beq.n	80026fc <HAL_RCC_OscConfig+0x5cc>
 800271c:	e01b      	b.n	8002756 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800271e:	4b62      	ldr	r3, [pc, #392]	@ (80028a8 <HAL_RCC_OscConfig+0x778>)
 8002720:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002724:	4a60      	ldr	r2, [pc, #384]	@ (80028a8 <HAL_RCC_OscConfig+0x778>)
 8002726:	f023 0301 	bic.w	r3, r3, #1
 800272a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272e:	f7fe fc2d 	bl	8000f8c <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002736:	f7fe fc29 	bl	8000f8c <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e0ff      	b.n	8002948 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002748:	4b57      	ldr	r3, [pc, #348]	@ (80028a8 <HAL_RCC_OscConfig+0x778>)
 800274a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1ef      	bne.n	8002736 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 80f3 	beq.w	8002946 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002764:	2b02      	cmp	r3, #2
 8002766:	f040 80c9 	bne.w	80028fc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800276a:	4b4f      	ldr	r3, [pc, #316]	@ (80028a8 <HAL_RCC_OscConfig+0x778>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f003 0203 	and.w	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277a:	429a      	cmp	r2, r3
 800277c:	d12c      	bne.n	80027d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002788:	3b01      	subs	r3, #1
 800278a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800278c:	429a      	cmp	r2, r3
 800278e:	d123      	bne.n	80027d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800279a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800279c:	429a      	cmp	r2, r3
 800279e:	d11b      	bne.n	80027d8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d113      	bne.n	80027d8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ba:	085b      	lsrs	r3, r3, #1
 80027bc:	3b01      	subs	r3, #1
 80027be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d109      	bne.n	80027d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	085b      	lsrs	r3, r3, #1
 80027d0:	3b01      	subs	r3, #1
 80027d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d06b      	beq.n	80028b0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	2b0c      	cmp	r3, #12
 80027dc:	d062      	beq.n	80028a4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027de:	4b32      	ldr	r3, [pc, #200]	@ (80028a8 <HAL_RCC_OscConfig+0x778>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e0ac      	b.n	8002948 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027ee:	4b2e      	ldr	r3, [pc, #184]	@ (80028a8 <HAL_RCC_OscConfig+0x778>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a2d      	ldr	r2, [pc, #180]	@ (80028a8 <HAL_RCC_OscConfig+0x778>)
 80027f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027fa:	f7fe fbc7 	bl	8000f8c <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002802:	f7fe fbc3 	bl	8000f8c <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e099      	b.n	8002948 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002814:	4b24      	ldr	r3, [pc, #144]	@ (80028a8 <HAL_RCC_OscConfig+0x778>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f0      	bne.n	8002802 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002820:	4b21      	ldr	r3, [pc, #132]	@ (80028a8 <HAL_RCC_OscConfig+0x778>)
 8002822:	68da      	ldr	r2, [r3, #12]
 8002824:	4b21      	ldr	r3, [pc, #132]	@ (80028ac <HAL_RCC_OscConfig+0x77c>)
 8002826:	4013      	ands	r3, r2
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002830:	3a01      	subs	r2, #1
 8002832:	0112      	lsls	r2, r2, #4
 8002834:	4311      	orrs	r1, r2
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800283a:	0212      	lsls	r2, r2, #8
 800283c:	4311      	orrs	r1, r2
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002842:	0852      	lsrs	r2, r2, #1
 8002844:	3a01      	subs	r2, #1
 8002846:	0552      	lsls	r2, r2, #21
 8002848:	4311      	orrs	r1, r2
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800284e:	0852      	lsrs	r2, r2, #1
 8002850:	3a01      	subs	r2, #1
 8002852:	0652      	lsls	r2, r2, #25
 8002854:	4311      	orrs	r1, r2
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800285a:	06d2      	lsls	r2, r2, #27
 800285c:	430a      	orrs	r2, r1
 800285e:	4912      	ldr	r1, [pc, #72]	@ (80028a8 <HAL_RCC_OscConfig+0x778>)
 8002860:	4313      	orrs	r3, r2
 8002862:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002864:	4b10      	ldr	r3, [pc, #64]	@ (80028a8 <HAL_RCC_OscConfig+0x778>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0f      	ldr	r2, [pc, #60]	@ (80028a8 <HAL_RCC_OscConfig+0x778>)
 800286a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800286e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002870:	4b0d      	ldr	r3, [pc, #52]	@ (80028a8 <HAL_RCC_OscConfig+0x778>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4a0c      	ldr	r2, [pc, #48]	@ (80028a8 <HAL_RCC_OscConfig+0x778>)
 8002876:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800287a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800287c:	f7fe fb86 	bl	8000f8c <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002884:	f7fe fb82 	bl	8000f8c <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e058      	b.n	8002948 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002896:	4b04      	ldr	r3, [pc, #16]	@ (80028a8 <HAL_RCC_OscConfig+0x778>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028a2:	e050      	b.n	8002946 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e04f      	b.n	8002948 <HAL_RCC_OscConfig+0x818>
 80028a8:	40021000 	.word	0x40021000
 80028ac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b0:	4b27      	ldr	r3, [pc, #156]	@ (8002950 <HAL_RCC_OscConfig+0x820>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d144      	bne.n	8002946 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028bc:	4b24      	ldr	r3, [pc, #144]	@ (8002950 <HAL_RCC_OscConfig+0x820>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a23      	ldr	r2, [pc, #140]	@ (8002950 <HAL_RCC_OscConfig+0x820>)
 80028c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028c8:	4b21      	ldr	r3, [pc, #132]	@ (8002950 <HAL_RCC_OscConfig+0x820>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4a20      	ldr	r2, [pc, #128]	@ (8002950 <HAL_RCC_OscConfig+0x820>)
 80028ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028d4:	f7fe fb5a 	bl	8000f8c <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028dc:	f7fe fb56 	bl	8000f8c <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e02c      	b.n	8002948 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ee:	4b18      	ldr	r3, [pc, #96]	@ (8002950 <HAL_RCC_OscConfig+0x820>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x7ac>
 80028fa:	e024      	b.n	8002946 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	2b0c      	cmp	r3, #12
 8002900:	d01f      	beq.n	8002942 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002902:	4b13      	ldr	r3, [pc, #76]	@ (8002950 <HAL_RCC_OscConfig+0x820>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a12      	ldr	r2, [pc, #72]	@ (8002950 <HAL_RCC_OscConfig+0x820>)
 8002908:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800290c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290e:	f7fe fb3d 	bl	8000f8c <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002916:	f7fe fb39 	bl	8000f8c <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e00f      	b.n	8002948 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002928:	4b09      	ldr	r3, [pc, #36]	@ (8002950 <HAL_RCC_OscConfig+0x820>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f0      	bne.n	8002916 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002934:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <HAL_RCC_OscConfig+0x820>)
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	4905      	ldr	r1, [pc, #20]	@ (8002950 <HAL_RCC_OscConfig+0x820>)
 800293a:	4b06      	ldr	r3, [pc, #24]	@ (8002954 <HAL_RCC_OscConfig+0x824>)
 800293c:	4013      	ands	r3, r2
 800293e:	60cb      	str	r3, [r1, #12]
 8002940:	e001      	b.n	8002946 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3720      	adds	r7, #32
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40021000 	.word	0x40021000
 8002954:	feeefffc 	.word	0xfeeefffc

08002958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0e7      	b.n	8002b3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800296c:	4b75      	ldr	r3, [pc, #468]	@ (8002b44 <HAL_RCC_ClockConfig+0x1ec>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d910      	bls.n	800299c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297a:	4b72      	ldr	r3, [pc, #456]	@ (8002b44 <HAL_RCC_ClockConfig+0x1ec>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 0207 	bic.w	r2, r3, #7
 8002982:	4970      	ldr	r1, [pc, #448]	@ (8002b44 <HAL_RCC_ClockConfig+0x1ec>)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298a:	4b6e      	ldr	r3, [pc, #440]	@ (8002b44 <HAL_RCC_ClockConfig+0x1ec>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0cf      	b.n	8002b3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d010      	beq.n	80029ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	4b66      	ldr	r3, [pc, #408]	@ (8002b48 <HAL_RCC_ClockConfig+0x1f0>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d908      	bls.n	80029ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b8:	4b63      	ldr	r3, [pc, #396]	@ (8002b48 <HAL_RCC_ClockConfig+0x1f0>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	4960      	ldr	r1, [pc, #384]	@ (8002b48 <HAL_RCC_ClockConfig+0x1f0>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d04c      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d107      	bne.n	80029ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029de:	4b5a      	ldr	r3, [pc, #360]	@ (8002b48 <HAL_RCC_ClockConfig+0x1f0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d121      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e0a6      	b.n	8002b3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d107      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029f6:	4b54      	ldr	r3, [pc, #336]	@ (8002b48 <HAL_RCC_ClockConfig+0x1f0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d115      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e09a      	b.n	8002b3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d107      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a0e:	4b4e      	ldr	r3, [pc, #312]	@ (8002b48 <HAL_RCC_ClockConfig+0x1f0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d109      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e08e      	b.n	8002b3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002b48 <HAL_RCC_ClockConfig+0x1f0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e086      	b.n	8002b3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a2e:	4b46      	ldr	r3, [pc, #280]	@ (8002b48 <HAL_RCC_ClockConfig+0x1f0>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f023 0203 	bic.w	r2, r3, #3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	4943      	ldr	r1, [pc, #268]	@ (8002b48 <HAL_RCC_ClockConfig+0x1f0>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a40:	f7fe faa4 	bl	8000f8c <HAL_GetTick>
 8002a44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a46:	e00a      	b.n	8002a5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a48:	f7fe faa0 	bl	8000f8c <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e06e      	b.n	8002b3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b48 <HAL_RCC_ClockConfig+0x1f0>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 020c 	and.w	r2, r3, #12
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d1eb      	bne.n	8002a48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d010      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	4b31      	ldr	r3, [pc, #196]	@ (8002b48 <HAL_RCC_ClockConfig+0x1f0>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d208      	bcs.n	8002a9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002b48 <HAL_RCC_ClockConfig+0x1f0>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	492b      	ldr	r1, [pc, #172]	@ (8002b48 <HAL_RCC_ClockConfig+0x1f0>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a9e:	4b29      	ldr	r3, [pc, #164]	@ (8002b44 <HAL_RCC_ClockConfig+0x1ec>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d210      	bcs.n	8002ace <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aac:	4b25      	ldr	r3, [pc, #148]	@ (8002b44 <HAL_RCC_ClockConfig+0x1ec>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f023 0207 	bic.w	r2, r3, #7
 8002ab4:	4923      	ldr	r1, [pc, #140]	@ (8002b44 <HAL_RCC_ClockConfig+0x1ec>)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abc:	4b21      	ldr	r3, [pc, #132]	@ (8002b44 <HAL_RCC_ClockConfig+0x1ec>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d001      	beq.n	8002ace <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e036      	b.n	8002b3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d008      	beq.n	8002aec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ada:	4b1b      	ldr	r3, [pc, #108]	@ (8002b48 <HAL_RCC_ClockConfig+0x1f0>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	4918      	ldr	r1, [pc, #96]	@ (8002b48 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d009      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002af8:	4b13      	ldr	r3, [pc, #76]	@ (8002b48 <HAL_RCC_ClockConfig+0x1f0>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4910      	ldr	r1, [pc, #64]	@ (8002b48 <HAL_RCC_ClockConfig+0x1f0>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b0c:	f000 f824 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 8002b10:	4602      	mov	r2, r0
 8002b12:	4b0d      	ldr	r3, [pc, #52]	@ (8002b48 <HAL_RCC_ClockConfig+0x1f0>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	091b      	lsrs	r3, r3, #4
 8002b18:	f003 030f 	and.w	r3, r3, #15
 8002b1c:	490b      	ldr	r1, [pc, #44]	@ (8002b4c <HAL_RCC_ClockConfig+0x1f4>)
 8002b1e:	5ccb      	ldrb	r3, [r1, r3]
 8002b20:	f003 031f 	and.w	r3, r3, #31
 8002b24:	fa22 f303 	lsr.w	r3, r2, r3
 8002b28:	4a09      	ldr	r2, [pc, #36]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f8>)
 8002b2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b2c:	4b09      	ldr	r3, [pc, #36]	@ (8002b54 <HAL_RCC_ClockConfig+0x1fc>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fe f9db 	bl	8000eec <HAL_InitTick>
 8002b36:	4603      	mov	r3, r0
 8002b38:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b3a:	7afb      	ldrb	r3, [r7, #11]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40022000 	.word	0x40022000
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	0800575c 	.word	0x0800575c
 8002b50:	20000000 	.word	0x20000000
 8002b54:	20000004 	.word	0x20000004

08002b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b089      	sub	sp, #36	@ 0x24
 8002b5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	2300      	movs	r3, #0
 8002b64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b66:	4b3e      	ldr	r3, [pc, #248]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b70:	4b3b      	ldr	r3, [pc, #236]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <HAL_RCC_GetSysClockFreq+0x34>
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	2b0c      	cmp	r3, #12
 8002b84:	d121      	bne.n	8002bca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d11e      	bne.n	8002bca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b8c:	4b34      	ldr	r3, [pc, #208]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d107      	bne.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b98:	4b31      	ldr	r3, [pc, #196]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b9e:	0a1b      	lsrs	r3, r3, #8
 8002ba0:	f003 030f 	and.w	r3, r3, #15
 8002ba4:	61fb      	str	r3, [r7, #28]
 8002ba6:	e005      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	091b      	lsrs	r3, r3, #4
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bb4:	4a2b      	ldr	r2, [pc, #172]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10d      	bne.n	8002be0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bc8:	e00a      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d102      	bne.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bd0:	4b25      	ldr	r3, [pc, #148]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bd2:	61bb      	str	r3, [r7, #24]
 8002bd4:	e004      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d101      	bne.n	8002be0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bdc:	4b23      	ldr	r3, [pc, #140]	@ (8002c6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002bde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	2b0c      	cmp	r3, #12
 8002be4:	d134      	bne.n	8002c50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002be6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d003      	beq.n	8002bfe <HAL_RCC_GetSysClockFreq+0xa6>
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2b03      	cmp	r3, #3
 8002bfa:	d003      	beq.n	8002c04 <HAL_RCC_GetSysClockFreq+0xac>
 8002bfc:	e005      	b.n	8002c0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c00:	617b      	str	r3, [r7, #20]
      break;
 8002c02:	e005      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c04:	4b19      	ldr	r3, [pc, #100]	@ (8002c6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002c06:	617b      	str	r3, [r7, #20]
      break;
 8002c08:	e002      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	617b      	str	r3, [r7, #20]
      break;
 8002c0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c10:	4b13      	ldr	r3, [pc, #76]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c1e:	4b10      	ldr	r3, [pc, #64]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	0a1b      	lsrs	r3, r3, #8
 8002c24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	fb03 f202 	mul.w	r2, r3, r2
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c36:	4b0a      	ldr	r3, [pc, #40]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	0e5b      	lsrs	r3, r3, #25
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	3301      	adds	r3, #1
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c50:	69bb      	ldr	r3, [r7, #24]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3724      	adds	r7, #36	@ 0x24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40021000 	.word	0x40021000
 8002c64:	08005774 	.word	0x08005774
 8002c68:	00f42400 	.word	0x00f42400
 8002c6c:	007a1200 	.word	0x007a1200

08002c70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c74:	4b03      	ldr	r3, [pc, #12]	@ (8002c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c76:	681b      	ldr	r3, [r3, #0]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	20000000 	.word	0x20000000

08002c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c8c:	f7ff fff0 	bl	8002c70 <HAL_RCC_GetHCLKFreq>
 8002c90:	4602      	mov	r2, r0
 8002c92:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	0a1b      	lsrs	r3, r3, #8
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	4904      	ldr	r1, [pc, #16]	@ (8002cb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ca0:	f003 031f 	and.w	r3, r3, #31
 8002ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	0800576c 	.word	0x0800576c

08002cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002cb8:	f7ff ffda 	bl	8002c70 <HAL_RCC_GetHCLKFreq>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	0adb      	lsrs	r3, r3, #11
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	4904      	ldr	r1, [pc, #16]	@ (8002cdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cca:	5ccb      	ldrb	r3, [r1, r3]
 8002ccc:	f003 031f 	and.w	r3, r3, #31
 8002cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	0800576c 	.word	0x0800576c

08002ce0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ce8:	2300      	movs	r3, #0
 8002cea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cec:	4b2a      	ldr	r3, [pc, #168]	@ (8002d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002cf8:	f7ff f9b6 	bl	8002068 <HAL_PWREx_GetVoltageRange>
 8002cfc:	6178      	str	r0, [r7, #20]
 8002cfe:	e014      	b.n	8002d2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d00:	4b25      	ldr	r3, [pc, #148]	@ (8002d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d04:	4a24      	ldr	r2, [pc, #144]	@ (8002d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d0c:	4b22      	ldr	r3, [pc, #136]	@ (8002d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d18:	f7ff f9a6 	bl	8002068 <HAL_PWREx_GetVoltageRange>
 8002d1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d22:	4a1d      	ldr	r2, [pc, #116]	@ (8002d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d28:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d30:	d10b      	bne.n	8002d4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b80      	cmp	r3, #128	@ 0x80
 8002d36:	d919      	bls.n	8002d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d3c:	d902      	bls.n	8002d44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d3e:	2302      	movs	r3, #2
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	e013      	b.n	8002d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d44:	2301      	movs	r3, #1
 8002d46:	613b      	str	r3, [r7, #16]
 8002d48:	e010      	b.n	8002d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b80      	cmp	r3, #128	@ 0x80
 8002d4e:	d902      	bls.n	8002d56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d50:	2303      	movs	r3, #3
 8002d52:	613b      	str	r3, [r7, #16]
 8002d54:	e00a      	b.n	8002d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b80      	cmp	r3, #128	@ 0x80
 8002d5a:	d102      	bne.n	8002d62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	e004      	b.n	8002d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b70      	cmp	r3, #112	@ 0x70
 8002d66:	d101      	bne.n	8002d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d68:	2301      	movs	r3, #1
 8002d6a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f023 0207 	bic.w	r2, r3, #7
 8002d74:	4909      	ldr	r1, [pc, #36]	@ (8002d9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d7c:	4b07      	ldr	r3, [pc, #28]	@ (8002d9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d001      	beq.n	8002d8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40022000 	.word	0x40022000

08002da0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002da8:	2300      	movs	r3, #0
 8002daa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002dac:	2300      	movs	r3, #0
 8002dae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d031      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dc0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002dc4:	d01a      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002dc6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002dca:	d814      	bhi.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d009      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002dd0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002dd4:	d10f      	bne.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002dd6:	4b5d      	ldr	r3, [pc, #372]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	4a5c      	ldr	r2, [pc, #368]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002de0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002de2:	e00c      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3304      	adds	r3, #4
 8002de8:	2100      	movs	r1, #0
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 f9de 	bl	80031ac <RCCEx_PLLSAI1_Config>
 8002df0:	4603      	mov	r3, r0
 8002df2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002df4:	e003      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	74fb      	strb	r3, [r7, #19]
      break;
 8002dfa:	e000      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002dfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dfe:	7cfb      	ldrb	r3, [r7, #19]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10b      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e04:	4b51      	ldr	r3, [pc, #324]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e12:	494e      	ldr	r1, [pc, #312]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002e1a:	e001      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e1c:	7cfb      	ldrb	r3, [r7, #19]
 8002e1e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 809e 	beq.w	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e32:	4b46      	ldr	r3, [pc, #280]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002e42:	2300      	movs	r3, #0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00d      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e48:	4b40      	ldr	r3, [pc, #256]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4c:	4a3f      	ldr	r2, [pc, #252]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e52:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e54:	4b3d      	ldr	r3, [pc, #244]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e60:	2301      	movs	r3, #1
 8002e62:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e64:	4b3a      	ldr	r3, [pc, #232]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a39      	ldr	r2, [pc, #228]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e70:	f7fe f88c 	bl	8000f8c <HAL_GetTick>
 8002e74:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e76:	e009      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e78:	f7fe f888 	bl	8000f8c <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d902      	bls.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	74fb      	strb	r3, [r7, #19]
        break;
 8002e8a:	e005      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e8c:	4b30      	ldr	r3, [pc, #192]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0ef      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002e98:	7cfb      	ldrb	r3, [r7, #19]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d15a      	bne.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e9e:	4b2b      	ldr	r3, [pc, #172]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ea8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d01e      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d019      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002eba:	4b24      	ldr	r3, [pc, #144]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ec4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ec6:	4b21      	ldr	r3, [pc, #132]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ecc:	4a1f      	ldr	r2, [pc, #124]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ece:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ed2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002edc:	4a1b      	ldr	r2, [pc, #108]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ede:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ee2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ee6:	4a19      	ldr	r2, [pc, #100]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d016      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7fe f848 	bl	8000f8c <HAL_GetTick>
 8002efc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002efe:	e00b      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f00:	f7fe f844 	bl	8000f8c <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d902      	bls.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	74fb      	strb	r3, [r7, #19]
            break;
 8002f16:	e006      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f18:	4b0c      	ldr	r3, [pc, #48]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0ec      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002f26:	7cfb      	ldrb	r3, [r7, #19]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10b      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f2c:	4b07      	ldr	r3, [pc, #28]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f32:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f3a:	4904      	ldr	r1, [pc, #16]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f42:	e009      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f44:	7cfb      	ldrb	r3, [r7, #19]
 8002f46:	74bb      	strb	r3, [r7, #18]
 8002f48:	e006      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002f4a:	bf00      	nop
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f54:	7cfb      	ldrb	r3, [r7, #19]
 8002f56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f58:	7c7b      	ldrb	r3, [r7, #17]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d105      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5e:	4b8a      	ldr	r3, [pc, #552]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f62:	4a89      	ldr	r2, [pc, #548]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f68:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f76:	4b84      	ldr	r3, [pc, #528]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7c:	f023 0203 	bic.w	r2, r3, #3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	4980      	ldr	r1, [pc, #512]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00a      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f98:	4b7b      	ldr	r3, [pc, #492]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f9e:	f023 020c 	bic.w	r2, r3, #12
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa6:	4978      	ldr	r1, [pc, #480]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fba:	4b73      	ldr	r3, [pc, #460]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc8:	496f      	ldr	r1, [pc, #444]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00a      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fdc:	4b6a      	ldr	r3, [pc, #424]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fea:	4967      	ldr	r1, [pc, #412]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ffe:	4b62      	ldr	r3, [pc, #392]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003004:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800300c:	495e      	ldr	r1, [pc, #376]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003020:	4b59      	ldr	r3, [pc, #356]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003026:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302e:	4956      	ldr	r1, [pc, #344]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003042:	4b51      	ldr	r3, [pc, #324]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003048:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003050:	494d      	ldr	r1, [pc, #308]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003052:	4313      	orrs	r3, r2
 8003054:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d028      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003064:	4b48      	ldr	r3, [pc, #288]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800306a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003072:	4945      	ldr	r1, [pc, #276]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003082:	d106      	bne.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003084:	4b40      	ldr	r3, [pc, #256]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	4a3f      	ldr	r2, [pc, #252]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800308a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800308e:	60d3      	str	r3, [r2, #12]
 8003090:	e011      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003096:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800309a:	d10c      	bne.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3304      	adds	r3, #4
 80030a0:	2101      	movs	r1, #1
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 f882 	bl	80031ac <RCCEx_PLLSAI1_Config>
 80030a8:	4603      	mov	r3, r0
 80030aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80030ac:	7cfb      	ldrb	r3, [r7, #19]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80030b2:	7cfb      	ldrb	r3, [r7, #19]
 80030b4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d028      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030c2:	4b31      	ldr	r3, [pc, #196]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d0:	492d      	ldr	r1, [pc, #180]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030e0:	d106      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030e2:	4b29      	ldr	r3, [pc, #164]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	4a28      	ldr	r2, [pc, #160]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030ec:	60d3      	str	r3, [r2, #12]
 80030ee:	e011      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030f8:	d10c      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3304      	adds	r3, #4
 80030fe:	2101      	movs	r1, #1
 8003100:	4618      	mov	r0, r3
 8003102:	f000 f853 	bl	80031ac <RCCEx_PLLSAI1_Config>
 8003106:	4603      	mov	r3, r0
 8003108:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800310a:	7cfb      	ldrb	r3, [r7, #19]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003110:	7cfb      	ldrb	r3, [r7, #19]
 8003112:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d01c      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003120:	4b19      	ldr	r3, [pc, #100]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003126:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800312e:	4916      	ldr	r1, [pc, #88]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800313a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800313e:	d10c      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3304      	adds	r3, #4
 8003144:	2102      	movs	r1, #2
 8003146:	4618      	mov	r0, r3
 8003148:	f000 f830 	bl	80031ac <RCCEx_PLLSAI1_Config>
 800314c:	4603      	mov	r3, r0
 800314e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003150:	7cfb      	ldrb	r3, [r7, #19]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003156:	7cfb      	ldrb	r3, [r7, #19]
 8003158:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003166:	4b08      	ldr	r3, [pc, #32]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003174:	4904      	ldr	r1, [pc, #16]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800317c:	7cbb      	ldrb	r3, [r7, #18]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40021000 	.word	0x40021000

0800318c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003190:	4b05      	ldr	r3, [pc, #20]	@ (80031a8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a04      	ldr	r2, [pc, #16]	@ (80031a8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003196:	f043 0304 	orr.w	r3, r3, #4
 800319a:	6013      	str	r3, [r2, #0]
}
 800319c:	bf00      	nop
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40021000 	.word	0x40021000

080031ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031ba:	4b74      	ldr	r3, [pc, #464]	@ (800338c <RCCEx_PLLSAI1_Config+0x1e0>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d018      	beq.n	80031f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80031c6:	4b71      	ldr	r3, [pc, #452]	@ (800338c <RCCEx_PLLSAI1_Config+0x1e0>)
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f003 0203 	and.w	r2, r3, #3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d10d      	bne.n	80031f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
       ||
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d009      	beq.n	80031f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80031de:	4b6b      	ldr	r3, [pc, #428]	@ (800338c <RCCEx_PLLSAI1_Config+0x1e0>)
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	091b      	lsrs	r3, r3, #4
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
       ||
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d047      	beq.n	8003282 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	73fb      	strb	r3, [r7, #15]
 80031f6:	e044      	b.n	8003282 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d018      	beq.n	8003232 <RCCEx_PLLSAI1_Config+0x86>
 8003200:	2b03      	cmp	r3, #3
 8003202:	d825      	bhi.n	8003250 <RCCEx_PLLSAI1_Config+0xa4>
 8003204:	2b01      	cmp	r3, #1
 8003206:	d002      	beq.n	800320e <RCCEx_PLLSAI1_Config+0x62>
 8003208:	2b02      	cmp	r3, #2
 800320a:	d009      	beq.n	8003220 <RCCEx_PLLSAI1_Config+0x74>
 800320c:	e020      	b.n	8003250 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800320e:	4b5f      	ldr	r3, [pc, #380]	@ (800338c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d11d      	bne.n	8003256 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800321e:	e01a      	b.n	8003256 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003220:	4b5a      	ldr	r3, [pc, #360]	@ (800338c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003228:	2b00      	cmp	r3, #0
 800322a:	d116      	bne.n	800325a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003230:	e013      	b.n	800325a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003232:	4b56      	ldr	r3, [pc, #344]	@ (800338c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10f      	bne.n	800325e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800323e:	4b53      	ldr	r3, [pc, #332]	@ (800338c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d109      	bne.n	800325e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800324e:	e006      	b.n	800325e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]
      break;
 8003254:	e004      	b.n	8003260 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003256:	bf00      	nop
 8003258:	e002      	b.n	8003260 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800325a:	bf00      	nop
 800325c:	e000      	b.n	8003260 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800325e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10d      	bne.n	8003282 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003266:	4b49      	ldr	r3, [pc, #292]	@ (800338c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6819      	ldr	r1, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	3b01      	subs	r3, #1
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	430b      	orrs	r3, r1
 800327c:	4943      	ldr	r1, [pc, #268]	@ (800338c <RCCEx_PLLSAI1_Config+0x1e0>)
 800327e:	4313      	orrs	r3, r2
 8003280:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d17c      	bne.n	8003382 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003288:	4b40      	ldr	r3, [pc, #256]	@ (800338c <RCCEx_PLLSAI1_Config+0x1e0>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a3f      	ldr	r2, [pc, #252]	@ (800338c <RCCEx_PLLSAI1_Config+0x1e0>)
 800328e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003292:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003294:	f7fd fe7a 	bl	8000f8c <HAL_GetTick>
 8003298:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800329a:	e009      	b.n	80032b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800329c:	f7fd fe76 	bl	8000f8c <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d902      	bls.n	80032b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	73fb      	strb	r3, [r7, #15]
        break;
 80032ae:	e005      	b.n	80032bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032b0:	4b36      	ldr	r3, [pc, #216]	@ (800338c <RCCEx_PLLSAI1_Config+0x1e0>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1ef      	bne.n	800329c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d15f      	bne.n	8003382 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d110      	bne.n	80032ea <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032c8:	4b30      	ldr	r3, [pc, #192]	@ (800338c <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80032d0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6892      	ldr	r2, [r2, #8]
 80032d8:	0211      	lsls	r1, r2, #8
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	68d2      	ldr	r2, [r2, #12]
 80032de:	06d2      	lsls	r2, r2, #27
 80032e0:	430a      	orrs	r2, r1
 80032e2:	492a      	ldr	r1, [pc, #168]	@ (800338c <RCCEx_PLLSAI1_Config+0x1e0>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	610b      	str	r3, [r1, #16]
 80032e8:	e027      	b.n	800333a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d112      	bne.n	8003316 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032f0:	4b26      	ldr	r3, [pc, #152]	@ (800338c <RCCEx_PLLSAI1_Config+0x1e0>)
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80032f8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6892      	ldr	r2, [r2, #8]
 8003300:	0211      	lsls	r1, r2, #8
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6912      	ldr	r2, [r2, #16]
 8003306:	0852      	lsrs	r2, r2, #1
 8003308:	3a01      	subs	r2, #1
 800330a:	0552      	lsls	r2, r2, #21
 800330c:	430a      	orrs	r2, r1
 800330e:	491f      	ldr	r1, [pc, #124]	@ (800338c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003310:	4313      	orrs	r3, r2
 8003312:	610b      	str	r3, [r1, #16]
 8003314:	e011      	b.n	800333a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003316:	4b1d      	ldr	r3, [pc, #116]	@ (800338c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800331e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6892      	ldr	r2, [r2, #8]
 8003326:	0211      	lsls	r1, r2, #8
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6952      	ldr	r2, [r2, #20]
 800332c:	0852      	lsrs	r2, r2, #1
 800332e:	3a01      	subs	r2, #1
 8003330:	0652      	lsls	r2, r2, #25
 8003332:	430a      	orrs	r2, r1
 8003334:	4915      	ldr	r1, [pc, #84]	@ (800338c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003336:	4313      	orrs	r3, r2
 8003338:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800333a:	4b14      	ldr	r3, [pc, #80]	@ (800338c <RCCEx_PLLSAI1_Config+0x1e0>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a13      	ldr	r2, [pc, #76]	@ (800338c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003340:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003344:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003346:	f7fd fe21 	bl	8000f8c <HAL_GetTick>
 800334a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800334c:	e009      	b.n	8003362 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800334e:	f7fd fe1d 	bl	8000f8c <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d902      	bls.n	8003362 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	73fb      	strb	r3, [r7, #15]
          break;
 8003360:	e005      	b.n	800336e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003362:	4b0a      	ldr	r3, [pc, #40]	@ (800338c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0ef      	beq.n	800334e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800336e:	7bfb      	ldrb	r3, [r7, #15]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d106      	bne.n	8003382 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003374:	4b05      	ldr	r3, [pc, #20]	@ (800338c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	4903      	ldr	r1, [pc, #12]	@ (800338c <RCCEx_PLLSAI1_Config+0x1e0>)
 800337e:	4313      	orrs	r3, r2
 8003380:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003382:	7bfb      	ldrb	r3, [r7, #15]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40021000 	.word	0x40021000

08003390 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e049      	b.n	8003436 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d106      	bne.n	80033bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7fd fc64 	bl	8000c84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3304      	adds	r3, #4
 80033cc:	4619      	mov	r1, r3
 80033ce:	4610      	mov	r0, r2
 80033d0:	f000 fb52 	bl	8003a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e049      	b.n	80034e4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d106      	bne.n	800346a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f841 	bl	80034ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2202      	movs	r2, #2
 800346e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	3304      	adds	r3, #4
 800347a:	4619      	mov	r1, r3
 800347c:	4610      	mov	r0, r2
 800347e:	f000 fafb 	bl	8003a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d109      	bne.n	8003524 <HAL_TIM_PWM_Start+0x24>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b01      	cmp	r3, #1
 800351a:	bf14      	ite	ne
 800351c:	2301      	movne	r3, #1
 800351e:	2300      	moveq	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	e03c      	b.n	800359e <HAL_TIM_PWM_Start+0x9e>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2b04      	cmp	r3, #4
 8003528:	d109      	bne.n	800353e <HAL_TIM_PWM_Start+0x3e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b01      	cmp	r3, #1
 8003534:	bf14      	ite	ne
 8003536:	2301      	movne	r3, #1
 8003538:	2300      	moveq	r3, #0
 800353a:	b2db      	uxtb	r3, r3
 800353c:	e02f      	b.n	800359e <HAL_TIM_PWM_Start+0x9e>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b08      	cmp	r3, #8
 8003542:	d109      	bne.n	8003558 <HAL_TIM_PWM_Start+0x58>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b01      	cmp	r3, #1
 800354e:	bf14      	ite	ne
 8003550:	2301      	movne	r3, #1
 8003552:	2300      	moveq	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	e022      	b.n	800359e <HAL_TIM_PWM_Start+0x9e>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	2b0c      	cmp	r3, #12
 800355c:	d109      	bne.n	8003572 <HAL_TIM_PWM_Start+0x72>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b01      	cmp	r3, #1
 8003568:	bf14      	ite	ne
 800356a:	2301      	movne	r3, #1
 800356c:	2300      	moveq	r3, #0
 800356e:	b2db      	uxtb	r3, r3
 8003570:	e015      	b.n	800359e <HAL_TIM_PWM_Start+0x9e>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b10      	cmp	r3, #16
 8003576:	d109      	bne.n	800358c <HAL_TIM_PWM_Start+0x8c>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b01      	cmp	r3, #1
 8003582:	bf14      	ite	ne
 8003584:	2301      	movne	r3, #1
 8003586:	2300      	moveq	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	e008      	b.n	800359e <HAL_TIM_PWM_Start+0x9e>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b01      	cmp	r3, #1
 8003596:	bf14      	ite	ne
 8003598:	2301      	movne	r3, #1
 800359a:	2300      	moveq	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e07e      	b.n	80036a4 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d104      	bne.n	80035b6 <HAL_TIM_PWM_Start+0xb6>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035b4:	e023      	b.n	80035fe <HAL_TIM_PWM_Start+0xfe>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d104      	bne.n	80035c6 <HAL_TIM_PWM_Start+0xc6>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035c4:	e01b      	b.n	80035fe <HAL_TIM_PWM_Start+0xfe>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d104      	bne.n	80035d6 <HAL_TIM_PWM_Start+0xd6>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035d4:	e013      	b.n	80035fe <HAL_TIM_PWM_Start+0xfe>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2b0c      	cmp	r3, #12
 80035da:	d104      	bne.n	80035e6 <HAL_TIM_PWM_Start+0xe6>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035e4:	e00b      	b.n	80035fe <HAL_TIM_PWM_Start+0xfe>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b10      	cmp	r3, #16
 80035ea:	d104      	bne.n	80035f6 <HAL_TIM_PWM_Start+0xf6>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035f4:	e003      	b.n	80035fe <HAL_TIM_PWM_Start+0xfe>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2202      	movs	r2, #2
 80035fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2201      	movs	r2, #1
 8003604:	6839      	ldr	r1, [r7, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fdbe 	bl	8004188 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a26      	ldr	r2, [pc, #152]	@ (80036ac <HAL_TIM_PWM_Start+0x1ac>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d009      	beq.n	800362a <HAL_TIM_PWM_Start+0x12a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a25      	ldr	r2, [pc, #148]	@ (80036b0 <HAL_TIM_PWM_Start+0x1b0>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d004      	beq.n	800362a <HAL_TIM_PWM_Start+0x12a>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a23      	ldr	r2, [pc, #140]	@ (80036b4 <HAL_TIM_PWM_Start+0x1b4>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d101      	bne.n	800362e <HAL_TIM_PWM_Start+0x12e>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <HAL_TIM_PWM_Start+0x130>
 800362e:	2300      	movs	r3, #0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d007      	beq.n	8003644 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003642:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a18      	ldr	r2, [pc, #96]	@ (80036ac <HAL_TIM_PWM_Start+0x1ac>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d009      	beq.n	8003662 <HAL_TIM_PWM_Start+0x162>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003656:	d004      	beq.n	8003662 <HAL_TIM_PWM_Start+0x162>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a14      	ldr	r2, [pc, #80]	@ (80036b0 <HAL_TIM_PWM_Start+0x1b0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d115      	bne.n	800368e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	4b13      	ldr	r3, [pc, #76]	@ (80036b8 <HAL_TIM_PWM_Start+0x1b8>)
 800366a:	4013      	ands	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b06      	cmp	r3, #6
 8003672:	d015      	beq.n	80036a0 <HAL_TIM_PWM_Start+0x1a0>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800367a:	d011      	beq.n	80036a0 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368c:	e008      	b.n	80036a0 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f042 0201 	orr.w	r2, r2, #1
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	e000      	b.n	80036a2 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40012c00 	.word	0x40012c00
 80036b0:	40014000 	.word	0x40014000
 80036b4:	40014400 	.word	0x40014400
 80036b8:	00010007 	.word	0x00010007

080036bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e0ff      	b.n	80038da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b14      	cmp	r3, #20
 80036e6:	f200 80f0 	bhi.w	80038ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80036ea:	a201      	add	r2, pc, #4	@ (adr r2, 80036f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f0:	08003745 	.word	0x08003745
 80036f4:	080038cb 	.word	0x080038cb
 80036f8:	080038cb 	.word	0x080038cb
 80036fc:	080038cb 	.word	0x080038cb
 8003700:	08003785 	.word	0x08003785
 8003704:	080038cb 	.word	0x080038cb
 8003708:	080038cb 	.word	0x080038cb
 800370c:	080038cb 	.word	0x080038cb
 8003710:	080037c7 	.word	0x080037c7
 8003714:	080038cb 	.word	0x080038cb
 8003718:	080038cb 	.word	0x080038cb
 800371c:	080038cb 	.word	0x080038cb
 8003720:	08003807 	.word	0x08003807
 8003724:	080038cb 	.word	0x080038cb
 8003728:	080038cb 	.word	0x080038cb
 800372c:	080038cb 	.word	0x080038cb
 8003730:	08003849 	.word	0x08003849
 8003734:	080038cb 	.word	0x080038cb
 8003738:	080038cb 	.word	0x080038cb
 800373c:	080038cb 	.word	0x080038cb
 8003740:	08003889 	.word	0x08003889
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68b9      	ldr	r1, [r7, #8]
 800374a:	4618      	mov	r0, r3
 800374c:	f000 fa04 	bl	8003b58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699a      	ldr	r2, [r3, #24]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0208 	orr.w	r2, r2, #8
 800375e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699a      	ldr	r2, [r3, #24]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0204 	bic.w	r2, r2, #4
 800376e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6999      	ldr	r1, [r3, #24]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	691a      	ldr	r2, [r3, #16]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	619a      	str	r2, [r3, #24]
      break;
 8003782:	e0a5      	b.n	80038d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68b9      	ldr	r1, [r7, #8]
 800378a:	4618      	mov	r0, r3
 800378c:	f000 fa60 	bl	8003c50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699a      	ldr	r2, [r3, #24]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800379e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	699a      	ldr	r2, [r3, #24]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6999      	ldr	r1, [r3, #24]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	021a      	lsls	r2, r3, #8
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	619a      	str	r2, [r3, #24]
      break;
 80037c4:	e084      	b.n	80038d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68b9      	ldr	r1, [r7, #8]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fab9 	bl	8003d44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69da      	ldr	r2, [r3, #28]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f042 0208 	orr.w	r2, r2, #8
 80037e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	69da      	ldr	r2, [r3, #28]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0204 	bic.w	r2, r2, #4
 80037f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69d9      	ldr	r1, [r3, #28]
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	61da      	str	r2, [r3, #28]
      break;
 8003804:	e064      	b.n	80038d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68b9      	ldr	r1, [r7, #8]
 800380c:	4618      	mov	r0, r3
 800380e:	f000 fb11 	bl	8003e34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69da      	ldr	r2, [r3, #28]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69da      	ldr	r2, [r3, #28]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	69d9      	ldr	r1, [r3, #28]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	021a      	lsls	r2, r3, #8
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	61da      	str	r2, [r3, #28]
      break;
 8003846:	e043      	b.n	80038d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68b9      	ldr	r1, [r7, #8]
 800384e:	4618      	mov	r0, r3
 8003850:	f000 fb4e 	bl	8003ef0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0208 	orr.w	r2, r2, #8
 8003862:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0204 	bic.w	r2, r2, #4
 8003872:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	691a      	ldr	r2, [r3, #16]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003886:	e023      	b.n	80038d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68b9      	ldr	r1, [r7, #8]
 800388e:	4618      	mov	r0, r3
 8003890:	f000 fb86 	bl	8003fa0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	021a      	lsls	r2, r3, #8
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80038c8:	e002      	b.n	80038d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	75fb      	strb	r3, [r7, #23]
      break;
 80038ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop

080038e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_TIM_ConfigClockSource+0x1c>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e0b6      	b.n	8003a6e <HAL_TIM_ConfigClockSource+0x18a>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800391e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800392a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800393c:	d03e      	beq.n	80039bc <HAL_TIM_ConfigClockSource+0xd8>
 800393e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003942:	f200 8087 	bhi.w	8003a54 <HAL_TIM_ConfigClockSource+0x170>
 8003946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800394a:	f000 8086 	beq.w	8003a5a <HAL_TIM_ConfigClockSource+0x176>
 800394e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003952:	d87f      	bhi.n	8003a54 <HAL_TIM_ConfigClockSource+0x170>
 8003954:	2b70      	cmp	r3, #112	@ 0x70
 8003956:	d01a      	beq.n	800398e <HAL_TIM_ConfigClockSource+0xaa>
 8003958:	2b70      	cmp	r3, #112	@ 0x70
 800395a:	d87b      	bhi.n	8003a54 <HAL_TIM_ConfigClockSource+0x170>
 800395c:	2b60      	cmp	r3, #96	@ 0x60
 800395e:	d050      	beq.n	8003a02 <HAL_TIM_ConfigClockSource+0x11e>
 8003960:	2b60      	cmp	r3, #96	@ 0x60
 8003962:	d877      	bhi.n	8003a54 <HAL_TIM_ConfigClockSource+0x170>
 8003964:	2b50      	cmp	r3, #80	@ 0x50
 8003966:	d03c      	beq.n	80039e2 <HAL_TIM_ConfigClockSource+0xfe>
 8003968:	2b50      	cmp	r3, #80	@ 0x50
 800396a:	d873      	bhi.n	8003a54 <HAL_TIM_ConfigClockSource+0x170>
 800396c:	2b40      	cmp	r3, #64	@ 0x40
 800396e:	d058      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x13e>
 8003970:	2b40      	cmp	r3, #64	@ 0x40
 8003972:	d86f      	bhi.n	8003a54 <HAL_TIM_ConfigClockSource+0x170>
 8003974:	2b30      	cmp	r3, #48	@ 0x30
 8003976:	d064      	beq.n	8003a42 <HAL_TIM_ConfigClockSource+0x15e>
 8003978:	2b30      	cmp	r3, #48	@ 0x30
 800397a:	d86b      	bhi.n	8003a54 <HAL_TIM_ConfigClockSource+0x170>
 800397c:	2b20      	cmp	r3, #32
 800397e:	d060      	beq.n	8003a42 <HAL_TIM_ConfigClockSource+0x15e>
 8003980:	2b20      	cmp	r3, #32
 8003982:	d867      	bhi.n	8003a54 <HAL_TIM_ConfigClockSource+0x170>
 8003984:	2b00      	cmp	r3, #0
 8003986:	d05c      	beq.n	8003a42 <HAL_TIM_ConfigClockSource+0x15e>
 8003988:	2b10      	cmp	r3, #16
 800398a:	d05a      	beq.n	8003a42 <HAL_TIM_ConfigClockSource+0x15e>
 800398c:	e062      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800399e:	f000 fbd3 	bl	8004148 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80039b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	609a      	str	r2, [r3, #8]
      break;
 80039ba:	e04f      	b.n	8003a5c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039cc:	f000 fbbc 	bl	8004148 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039de:	609a      	str	r2, [r3, #8]
      break;
 80039e0:	e03c      	b.n	8003a5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ee:	461a      	mov	r2, r3
 80039f0:	f000 fb30 	bl	8004054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2150      	movs	r1, #80	@ 0x50
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fb89 	bl	8004112 <TIM_ITRx_SetConfig>
      break;
 8003a00:	e02c      	b.n	8003a5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a0e:	461a      	mov	r2, r3
 8003a10:	f000 fb4f 	bl	80040b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2160      	movs	r1, #96	@ 0x60
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fb79 	bl	8004112 <TIM_ITRx_SetConfig>
      break;
 8003a20:	e01c      	b.n	8003a5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a2e:	461a      	mov	r2, r3
 8003a30:	f000 fb10 	bl	8004054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2140      	movs	r1, #64	@ 0x40
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 fb69 	bl	8004112 <TIM_ITRx_SetConfig>
      break;
 8003a40:	e00c      	b.n	8003a5c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	f000 fb60 	bl	8004112 <TIM_ITRx_SetConfig>
      break;
 8003a52:	e003      	b.n	8003a5c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
      break;
 8003a58:	e000      	b.n	8003a5c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003a5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a30      	ldr	r2, [pc, #192]	@ (8003b4c <TIM_Base_SetConfig+0xd4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d003      	beq.n	8003a98 <TIM_Base_SetConfig+0x20>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a96:	d108      	bne.n	8003aaa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a27      	ldr	r2, [pc, #156]	@ (8003b4c <TIM_Base_SetConfig+0xd4>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00b      	beq.n	8003aca <TIM_Base_SetConfig+0x52>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ab8:	d007      	beq.n	8003aca <TIM_Base_SetConfig+0x52>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a24      	ldr	r2, [pc, #144]	@ (8003b50 <TIM_Base_SetConfig+0xd8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d003      	beq.n	8003aca <TIM_Base_SetConfig+0x52>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a23      	ldr	r2, [pc, #140]	@ (8003b54 <TIM_Base_SetConfig+0xdc>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d108      	bne.n	8003adc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a12      	ldr	r2, [pc, #72]	@ (8003b4c <TIM_Base_SetConfig+0xd4>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d007      	beq.n	8003b18 <TIM_Base_SetConfig+0xa0>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a11      	ldr	r2, [pc, #68]	@ (8003b50 <TIM_Base_SetConfig+0xd8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d003      	beq.n	8003b18 <TIM_Base_SetConfig+0xa0>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a10      	ldr	r2, [pc, #64]	@ (8003b54 <TIM_Base_SetConfig+0xdc>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d103      	bne.n	8003b20 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d105      	bne.n	8003b3e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f023 0201 	bic.w	r2, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	611a      	str	r2, [r3, #16]
  }
}
 8003b3e:	bf00      	nop
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40012c00 	.word	0x40012c00
 8003b50:	40014000 	.word	0x40014000
 8003b54:	40014400 	.word	0x40014400

08003b58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	f023 0201 	bic.w	r2, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f023 0303 	bic.w	r3, r3, #3
 8003b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f023 0302 	bic.w	r3, r3, #2
 8003ba4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a24      	ldr	r2, [pc, #144]	@ (8003c44 <TIM_OC1_SetConfig+0xec>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d007      	beq.n	8003bc8 <TIM_OC1_SetConfig+0x70>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a23      	ldr	r2, [pc, #140]	@ (8003c48 <TIM_OC1_SetConfig+0xf0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d003      	beq.n	8003bc8 <TIM_OC1_SetConfig+0x70>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a22      	ldr	r2, [pc, #136]	@ (8003c4c <TIM_OC1_SetConfig+0xf4>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d10c      	bne.n	8003be2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f023 0308 	bic.w	r3, r3, #8
 8003bce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f023 0304 	bic.w	r3, r3, #4
 8003be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a17      	ldr	r2, [pc, #92]	@ (8003c44 <TIM_OC1_SetConfig+0xec>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d007      	beq.n	8003bfa <TIM_OC1_SetConfig+0xa2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a16      	ldr	r2, [pc, #88]	@ (8003c48 <TIM_OC1_SetConfig+0xf0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d003      	beq.n	8003bfa <TIM_OC1_SetConfig+0xa2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a15      	ldr	r2, [pc, #84]	@ (8003c4c <TIM_OC1_SetConfig+0xf4>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d111      	bne.n	8003c1e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	621a      	str	r2, [r3, #32]
}
 8003c38:	bf00      	nop
 8003c3a:	371c      	adds	r7, #28
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	40012c00 	.word	0x40012c00
 8003c48:	40014000 	.word	0x40014000
 8003c4c:	40014400 	.word	0x40014400

08003c50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	f023 0210 	bic.w	r2, r3, #16
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	021b      	lsls	r3, r3, #8
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f023 0320 	bic.w	r3, r3, #32
 8003c9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a22      	ldr	r2, [pc, #136]	@ (8003d38 <TIM_OC2_SetConfig+0xe8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d10d      	bne.n	8003cd0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a19      	ldr	r2, [pc, #100]	@ (8003d38 <TIM_OC2_SetConfig+0xe8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d007      	beq.n	8003ce8 <TIM_OC2_SetConfig+0x98>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a18      	ldr	r2, [pc, #96]	@ (8003d3c <TIM_OC2_SetConfig+0xec>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d003      	beq.n	8003ce8 <TIM_OC2_SetConfig+0x98>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a17      	ldr	r2, [pc, #92]	@ (8003d40 <TIM_OC2_SetConfig+0xf0>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d113      	bne.n	8003d10 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	621a      	str	r2, [r3, #32]
}
 8003d2a:	bf00      	nop
 8003d2c:	371c      	adds	r7, #28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40012c00 	.word	0x40012c00
 8003d3c:	40014000 	.word	0x40014000
 8003d40:	40014400 	.word	0x40014400

08003d44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f023 0303 	bic.w	r3, r3, #3
 8003d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	021b      	lsls	r3, r3, #8
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a21      	ldr	r2, [pc, #132]	@ (8003e28 <TIM_OC3_SetConfig+0xe4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d10d      	bne.n	8003dc2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003dac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	021b      	lsls	r3, r3, #8
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a18      	ldr	r2, [pc, #96]	@ (8003e28 <TIM_OC3_SetConfig+0xe4>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d007      	beq.n	8003dda <TIM_OC3_SetConfig+0x96>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a17      	ldr	r2, [pc, #92]	@ (8003e2c <TIM_OC3_SetConfig+0xe8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d003      	beq.n	8003dda <TIM_OC3_SetConfig+0x96>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a16      	ldr	r2, [pc, #88]	@ (8003e30 <TIM_OC3_SetConfig+0xec>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d113      	bne.n	8003e02 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003de0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003de8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	011b      	lsls	r3, r3, #4
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	621a      	str	r2, [r3, #32]
}
 8003e1c:	bf00      	nop
 8003e1e:	371c      	adds	r7, #28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	40012c00 	.word	0x40012c00
 8003e2c:	40014000 	.word	0x40014000
 8003e30:	40014400 	.word	0x40014400

08003e34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	021b      	lsls	r3, r3, #8
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	031b      	lsls	r3, r3, #12
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a14      	ldr	r2, [pc, #80]	@ (8003ee4 <TIM_OC4_SetConfig+0xb0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d007      	beq.n	8003ea8 <TIM_OC4_SetConfig+0x74>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a13      	ldr	r2, [pc, #76]	@ (8003ee8 <TIM_OC4_SetConfig+0xb4>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d003      	beq.n	8003ea8 <TIM_OC4_SetConfig+0x74>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a12      	ldr	r2, [pc, #72]	@ (8003eec <TIM_OC4_SetConfig+0xb8>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d109      	bne.n	8003ebc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003eae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	019b      	lsls	r3, r3, #6
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	621a      	str	r2, [r3, #32]
}
 8003ed6:	bf00      	nop
 8003ed8:	371c      	adds	r7, #28
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40012c00 	.word	0x40012c00
 8003ee8:	40014000 	.word	0x40014000
 8003eec:	40014400 	.word	0x40014400

08003ef0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b087      	sub	sp, #28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003f34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	041b      	lsls	r3, r3, #16
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a13      	ldr	r2, [pc, #76]	@ (8003f94 <TIM_OC5_SetConfig+0xa4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d007      	beq.n	8003f5a <TIM_OC5_SetConfig+0x6a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a12      	ldr	r2, [pc, #72]	@ (8003f98 <TIM_OC5_SetConfig+0xa8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d003      	beq.n	8003f5a <TIM_OC5_SetConfig+0x6a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a11      	ldr	r2, [pc, #68]	@ (8003f9c <TIM_OC5_SetConfig+0xac>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d109      	bne.n	8003f6e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	021b      	lsls	r3, r3, #8
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	621a      	str	r2, [r3, #32]
}
 8003f88:	bf00      	nop
 8003f8a:	371c      	adds	r7, #28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	40012c00 	.word	0x40012c00
 8003f98:	40014000 	.word	0x40014000
 8003f9c:	40014400 	.word	0x40014400

08003fa0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	021b      	lsls	r3, r3, #8
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003fe6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	051b      	lsls	r3, r3, #20
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a14      	ldr	r2, [pc, #80]	@ (8004048 <TIM_OC6_SetConfig+0xa8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d007      	beq.n	800400c <TIM_OC6_SetConfig+0x6c>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a13      	ldr	r2, [pc, #76]	@ (800404c <TIM_OC6_SetConfig+0xac>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d003      	beq.n	800400c <TIM_OC6_SetConfig+0x6c>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a12      	ldr	r2, [pc, #72]	@ (8004050 <TIM_OC6_SetConfig+0xb0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d109      	bne.n	8004020 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004012:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	029b      	lsls	r3, r3, #10
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	621a      	str	r2, [r3, #32]
}
 800403a:	bf00      	nop
 800403c:	371c      	adds	r7, #28
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40012c00 	.word	0x40012c00
 800404c:	40014000 	.word	0x40014000
 8004050:	40014400 	.word	0x40014400

08004054 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	f023 0201 	bic.w	r2, r3, #1
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800407e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4313      	orrs	r3, r2
 8004088:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f023 030a 	bic.w	r3, r3, #10
 8004090:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4313      	orrs	r3, r2
 8004098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	621a      	str	r2, [r3, #32]
}
 80040a6:	bf00      	nop
 80040a8:	371c      	adds	r7, #28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b087      	sub	sp, #28
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	60f8      	str	r0, [r7, #12]
 80040ba:	60b9      	str	r1, [r7, #8]
 80040bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	f023 0210 	bic.w	r2, r3, #16
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80040dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	031b      	lsls	r3, r3, #12
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80040ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	011b      	lsls	r3, r3, #4
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	621a      	str	r2, [r3, #32]
}
 8004106:	bf00      	nop
 8004108:	371c      	adds	r7, #28
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004112:	b480      	push	{r7}
 8004114:	b085      	sub	sp, #20
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004128:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4313      	orrs	r3, r2
 8004130:	f043 0307 	orr.w	r3, r3, #7
 8004134:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	609a      	str	r2, [r3, #8]
}
 800413c:	bf00      	nop
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
 8004154:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004162:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	021a      	lsls	r2, r3, #8
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	431a      	orrs	r2, r3
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4313      	orrs	r3, r2
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	4313      	orrs	r3, r2
 8004174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	609a      	str	r2, [r3, #8]
}
 800417c:	bf00      	nop
 800417e:	371c      	adds	r7, #28
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f003 031f 	and.w	r3, r3, #31
 800419a:	2201      	movs	r2, #1
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a1a      	ldr	r2, [r3, #32]
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	43db      	mvns	r3, r3
 80041aa:	401a      	ands	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a1a      	ldr	r2, [r3, #32]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f003 031f 	and.w	r3, r3, #31
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	fa01 f303 	lsl.w	r3, r1, r3
 80041c0:	431a      	orrs	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	621a      	str	r2, [r3, #32]
}
 80041c6:	bf00      	nop
 80041c8:	371c      	adds	r7, #28
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
	...

080041d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d101      	bne.n	80041ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041e8:	2302      	movs	r3, #2
 80041ea:	e04f      	b.n	800428c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a21      	ldr	r2, [pc, #132]	@ (8004298 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d108      	bne.n	8004228 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800421c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	4313      	orrs	r3, r2
 8004226:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800422e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a14      	ldr	r2, [pc, #80]	@ (8004298 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d009      	beq.n	8004260 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004254:	d004      	beq.n	8004260 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a10      	ldr	r2, [pc, #64]	@ (800429c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d10c      	bne.n	800427a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004266:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	4313      	orrs	r3, r2
 8004270:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	40012c00 	.word	0x40012c00
 800429c:	40014000 	.word	0x40014000

080042a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e060      	b.n	800437e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	4313      	orrs	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	041b      	lsls	r3, r3, #16
 8004332:	4313      	orrs	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a14      	ldr	r2, [pc, #80]	@ (800438c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d115      	bne.n	800436c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434a:	051b      	lsls	r3, r3, #20
 800434c:	4313      	orrs	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	4313      	orrs	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40012c00 	.word	0x40012c00

08004390 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e040      	b.n	8004424 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d106      	bne.n	80043b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7fc fcee 	bl	8000d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2224      	movs	r2, #36	@ 0x24
 80043bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0201 	bic.w	r2, r2, #1
 80043cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fade 	bl	8004998 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f8af 	bl	8004540 <UART_SetConfig>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e01b      	b.n	8004424 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800440a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0201 	orr.w	r2, r2, #1
 800441a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 fb5d 	bl	8004adc <UART_CheckIdleState>
 8004422:	4603      	mov	r3, r0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08a      	sub	sp, #40	@ 0x28
 8004430:	af02      	add	r7, sp, #8
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	4613      	mov	r3, r2
 800443a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004440:	2b20      	cmp	r3, #32
 8004442:	d177      	bne.n	8004534 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <HAL_UART_Transmit+0x24>
 800444a:	88fb      	ldrh	r3, [r7, #6]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e070      	b.n	8004536 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2221      	movs	r2, #33	@ 0x21
 8004460:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004462:	f7fc fd93 	bl	8000f8c <HAL_GetTick>
 8004466:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	88fa      	ldrh	r2, [r7, #6]
 800446c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	88fa      	ldrh	r2, [r7, #6]
 8004474:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004480:	d108      	bne.n	8004494 <HAL_UART_Transmit+0x68>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d104      	bne.n	8004494 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800448a:	2300      	movs	r3, #0
 800448c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	61bb      	str	r3, [r7, #24]
 8004492:	e003      	b.n	800449c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004498:	2300      	movs	r3, #0
 800449a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800449c:	e02f      	b.n	80044fe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2200      	movs	r2, #0
 80044a6:	2180      	movs	r1, #128	@ 0x80
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 fbbf 	bl	8004c2c <UART_WaitOnFlagUntilTimeout>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d004      	beq.n	80044be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e03b      	b.n	8004536 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10b      	bne.n	80044dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	881a      	ldrh	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044d0:	b292      	uxth	r2, r2
 80044d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	3302      	adds	r3, #2
 80044d8:	61bb      	str	r3, [r7, #24]
 80044da:	e007      	b.n	80044ec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	781a      	ldrb	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	3301      	adds	r3, #1
 80044ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004504:	b29b      	uxth	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1c9      	bne.n	800449e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2200      	movs	r2, #0
 8004512:	2140      	movs	r1, #64	@ 0x40
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 fb89 	bl	8004c2c <UART_WaitOnFlagUntilTimeout>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d004      	beq.n	800452a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2220      	movs	r2, #32
 8004524:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e005      	b.n	8004536 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2220      	movs	r2, #32
 800452e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	e000      	b.n	8004536 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004534:	2302      	movs	r3, #2
  }
}
 8004536:	4618      	mov	r0, r3
 8004538:	3720      	adds	r7, #32
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004544:	b08a      	sub	sp, #40	@ 0x28
 8004546:	af00      	add	r7, sp, #0
 8004548:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	431a      	orrs	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	431a      	orrs	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	4313      	orrs	r3, r2
 8004566:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	4bb4      	ldr	r3, [pc, #720]	@ (8004840 <UART_SetConfig+0x300>)
 8004570:	4013      	ands	r3, r2
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	6812      	ldr	r2, [r2, #0]
 8004576:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004578:	430b      	orrs	r3, r1
 800457a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4aa9      	ldr	r2, [pc, #676]	@ (8004844 <UART_SetConfig+0x304>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d004      	beq.n	80045ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045a8:	4313      	orrs	r3, r2
 80045aa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045bc:	430a      	orrs	r2, r1
 80045be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4aa0      	ldr	r2, [pc, #640]	@ (8004848 <UART_SetConfig+0x308>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d126      	bne.n	8004618 <UART_SetConfig+0xd8>
 80045ca:	4ba0      	ldr	r3, [pc, #640]	@ (800484c <UART_SetConfig+0x30c>)
 80045cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d0:	f003 0303 	and.w	r3, r3, #3
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	d81b      	bhi.n	8004610 <UART_SetConfig+0xd0>
 80045d8:	a201      	add	r2, pc, #4	@ (adr r2, 80045e0 <UART_SetConfig+0xa0>)
 80045da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045de:	bf00      	nop
 80045e0:	080045f1 	.word	0x080045f1
 80045e4:	08004601 	.word	0x08004601
 80045e8:	080045f9 	.word	0x080045f9
 80045ec:	08004609 	.word	0x08004609
 80045f0:	2301      	movs	r3, #1
 80045f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045f6:	e080      	b.n	80046fa <UART_SetConfig+0x1ba>
 80045f8:	2302      	movs	r3, #2
 80045fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045fe:	e07c      	b.n	80046fa <UART_SetConfig+0x1ba>
 8004600:	2304      	movs	r3, #4
 8004602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004606:	e078      	b.n	80046fa <UART_SetConfig+0x1ba>
 8004608:	2308      	movs	r3, #8
 800460a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800460e:	e074      	b.n	80046fa <UART_SetConfig+0x1ba>
 8004610:	2310      	movs	r3, #16
 8004612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004616:	e070      	b.n	80046fa <UART_SetConfig+0x1ba>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a8c      	ldr	r2, [pc, #560]	@ (8004850 <UART_SetConfig+0x310>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d138      	bne.n	8004694 <UART_SetConfig+0x154>
 8004622:	4b8a      	ldr	r3, [pc, #552]	@ (800484c <UART_SetConfig+0x30c>)
 8004624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004628:	f003 030c 	and.w	r3, r3, #12
 800462c:	2b0c      	cmp	r3, #12
 800462e:	d82d      	bhi.n	800468c <UART_SetConfig+0x14c>
 8004630:	a201      	add	r2, pc, #4	@ (adr r2, 8004638 <UART_SetConfig+0xf8>)
 8004632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004636:	bf00      	nop
 8004638:	0800466d 	.word	0x0800466d
 800463c:	0800468d 	.word	0x0800468d
 8004640:	0800468d 	.word	0x0800468d
 8004644:	0800468d 	.word	0x0800468d
 8004648:	0800467d 	.word	0x0800467d
 800464c:	0800468d 	.word	0x0800468d
 8004650:	0800468d 	.word	0x0800468d
 8004654:	0800468d 	.word	0x0800468d
 8004658:	08004675 	.word	0x08004675
 800465c:	0800468d 	.word	0x0800468d
 8004660:	0800468d 	.word	0x0800468d
 8004664:	0800468d 	.word	0x0800468d
 8004668:	08004685 	.word	0x08004685
 800466c:	2300      	movs	r3, #0
 800466e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004672:	e042      	b.n	80046fa <UART_SetConfig+0x1ba>
 8004674:	2302      	movs	r3, #2
 8004676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800467a:	e03e      	b.n	80046fa <UART_SetConfig+0x1ba>
 800467c:	2304      	movs	r3, #4
 800467e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004682:	e03a      	b.n	80046fa <UART_SetConfig+0x1ba>
 8004684:	2308      	movs	r3, #8
 8004686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800468a:	e036      	b.n	80046fa <UART_SetConfig+0x1ba>
 800468c:	2310      	movs	r3, #16
 800468e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004692:	e032      	b.n	80046fa <UART_SetConfig+0x1ba>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a6a      	ldr	r2, [pc, #424]	@ (8004844 <UART_SetConfig+0x304>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d12a      	bne.n	80046f4 <UART_SetConfig+0x1b4>
 800469e:	4b6b      	ldr	r3, [pc, #428]	@ (800484c <UART_SetConfig+0x30c>)
 80046a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80046a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046ac:	d01a      	beq.n	80046e4 <UART_SetConfig+0x1a4>
 80046ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046b2:	d81b      	bhi.n	80046ec <UART_SetConfig+0x1ac>
 80046b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046b8:	d00c      	beq.n	80046d4 <UART_SetConfig+0x194>
 80046ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046be:	d815      	bhi.n	80046ec <UART_SetConfig+0x1ac>
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <UART_SetConfig+0x18c>
 80046c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046c8:	d008      	beq.n	80046dc <UART_SetConfig+0x19c>
 80046ca:	e00f      	b.n	80046ec <UART_SetConfig+0x1ac>
 80046cc:	2300      	movs	r3, #0
 80046ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046d2:	e012      	b.n	80046fa <UART_SetConfig+0x1ba>
 80046d4:	2302      	movs	r3, #2
 80046d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046da:	e00e      	b.n	80046fa <UART_SetConfig+0x1ba>
 80046dc:	2304      	movs	r3, #4
 80046de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046e2:	e00a      	b.n	80046fa <UART_SetConfig+0x1ba>
 80046e4:	2308      	movs	r3, #8
 80046e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ea:	e006      	b.n	80046fa <UART_SetConfig+0x1ba>
 80046ec:	2310      	movs	r3, #16
 80046ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046f2:	e002      	b.n	80046fa <UART_SetConfig+0x1ba>
 80046f4:	2310      	movs	r3, #16
 80046f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a51      	ldr	r2, [pc, #324]	@ (8004844 <UART_SetConfig+0x304>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d17a      	bne.n	80047fa <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004704:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004708:	2b08      	cmp	r3, #8
 800470a:	d824      	bhi.n	8004756 <UART_SetConfig+0x216>
 800470c:	a201      	add	r2, pc, #4	@ (adr r2, 8004714 <UART_SetConfig+0x1d4>)
 800470e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004712:	bf00      	nop
 8004714:	08004739 	.word	0x08004739
 8004718:	08004757 	.word	0x08004757
 800471c:	08004741 	.word	0x08004741
 8004720:	08004757 	.word	0x08004757
 8004724:	08004747 	.word	0x08004747
 8004728:	08004757 	.word	0x08004757
 800472c:	08004757 	.word	0x08004757
 8004730:	08004757 	.word	0x08004757
 8004734:	0800474f 	.word	0x0800474f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004738:	f7fe faa6 	bl	8002c88 <HAL_RCC_GetPCLK1Freq>
 800473c:	61f8      	str	r0, [r7, #28]
        break;
 800473e:	e010      	b.n	8004762 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004740:	4b44      	ldr	r3, [pc, #272]	@ (8004854 <UART_SetConfig+0x314>)
 8004742:	61fb      	str	r3, [r7, #28]
        break;
 8004744:	e00d      	b.n	8004762 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004746:	f7fe fa07 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 800474a:	61f8      	str	r0, [r7, #28]
        break;
 800474c:	e009      	b.n	8004762 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800474e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004752:	61fb      	str	r3, [r7, #28]
        break;
 8004754:	e005      	b.n	8004762 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004756:	2300      	movs	r3, #0
 8004758:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004760:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 8107 	beq.w	8004978 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	4613      	mov	r3, r2
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	4413      	add	r3, r2
 8004774:	69fa      	ldr	r2, [r7, #28]
 8004776:	429a      	cmp	r2, r3
 8004778:	d305      	bcc.n	8004786 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004780:	69fa      	ldr	r2, [r7, #28]
 8004782:	429a      	cmp	r2, r3
 8004784:	d903      	bls.n	800478e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800478c:	e0f4      	b.n	8004978 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	2200      	movs	r2, #0
 8004792:	461c      	mov	r4, r3
 8004794:	4615      	mov	r5, r2
 8004796:	f04f 0200 	mov.w	r2, #0
 800479a:	f04f 0300 	mov.w	r3, #0
 800479e:	022b      	lsls	r3, r5, #8
 80047a0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80047a4:	0222      	lsls	r2, r4, #8
 80047a6:	68f9      	ldr	r1, [r7, #12]
 80047a8:	6849      	ldr	r1, [r1, #4]
 80047aa:	0849      	lsrs	r1, r1, #1
 80047ac:	2000      	movs	r0, #0
 80047ae:	4688      	mov	r8, r1
 80047b0:	4681      	mov	r9, r0
 80047b2:	eb12 0a08 	adds.w	sl, r2, r8
 80047b6:	eb43 0b09 	adc.w	fp, r3, r9
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	603b      	str	r3, [r7, #0]
 80047c2:	607a      	str	r2, [r7, #4]
 80047c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047c8:	4650      	mov	r0, sl
 80047ca:	4659      	mov	r1, fp
 80047cc:	f7fb fd58 	bl	8000280 <__aeabi_uldivmod>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4613      	mov	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047de:	d308      	bcc.n	80047f2 <UART_SetConfig+0x2b2>
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047e6:	d204      	bcs.n	80047f2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	60da      	str	r2, [r3, #12]
 80047f0:	e0c2      	b.n	8004978 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80047f8:	e0be      	b.n	8004978 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004802:	d16a      	bne.n	80048da <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004804:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004808:	2b08      	cmp	r3, #8
 800480a:	d834      	bhi.n	8004876 <UART_SetConfig+0x336>
 800480c:	a201      	add	r2, pc, #4	@ (adr r2, 8004814 <UART_SetConfig+0x2d4>)
 800480e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004812:	bf00      	nop
 8004814:	08004839 	.word	0x08004839
 8004818:	08004859 	.word	0x08004859
 800481c:	08004861 	.word	0x08004861
 8004820:	08004877 	.word	0x08004877
 8004824:	08004867 	.word	0x08004867
 8004828:	08004877 	.word	0x08004877
 800482c:	08004877 	.word	0x08004877
 8004830:	08004877 	.word	0x08004877
 8004834:	0800486f 	.word	0x0800486f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004838:	f7fe fa26 	bl	8002c88 <HAL_RCC_GetPCLK1Freq>
 800483c:	61f8      	str	r0, [r7, #28]
        break;
 800483e:	e020      	b.n	8004882 <UART_SetConfig+0x342>
 8004840:	efff69f3 	.word	0xefff69f3
 8004844:	40008000 	.word	0x40008000
 8004848:	40013800 	.word	0x40013800
 800484c:	40021000 	.word	0x40021000
 8004850:	40004400 	.word	0x40004400
 8004854:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004858:	f7fe fa2c 	bl	8002cb4 <HAL_RCC_GetPCLK2Freq>
 800485c:	61f8      	str	r0, [r7, #28]
        break;
 800485e:	e010      	b.n	8004882 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004860:	4b4c      	ldr	r3, [pc, #304]	@ (8004994 <UART_SetConfig+0x454>)
 8004862:	61fb      	str	r3, [r7, #28]
        break;
 8004864:	e00d      	b.n	8004882 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004866:	f7fe f977 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 800486a:	61f8      	str	r0, [r7, #28]
        break;
 800486c:	e009      	b.n	8004882 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800486e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004872:	61fb      	str	r3, [r7, #28]
        break;
 8004874:	e005      	b.n	8004882 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004880:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d077      	beq.n	8004978 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	005a      	lsls	r2, r3, #1
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	085b      	lsrs	r3, r3, #1
 8004892:	441a      	add	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	fbb2 f3f3 	udiv	r3, r2, r3
 800489c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	2b0f      	cmp	r3, #15
 80048a2:	d916      	bls.n	80048d2 <UART_SetConfig+0x392>
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048aa:	d212      	bcs.n	80048d2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	f023 030f 	bic.w	r3, r3, #15
 80048b4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	085b      	lsrs	r3, r3, #1
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	8afb      	ldrh	r3, [r7, #22]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	8afa      	ldrh	r2, [r7, #22]
 80048ce:	60da      	str	r2, [r3, #12]
 80048d0:	e052      	b.n	8004978 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80048d8:	e04e      	b.n	8004978 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d827      	bhi.n	8004932 <UART_SetConfig+0x3f2>
 80048e2:	a201      	add	r2, pc, #4	@ (adr r2, 80048e8 <UART_SetConfig+0x3a8>)
 80048e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e8:	0800490d 	.word	0x0800490d
 80048ec:	08004915 	.word	0x08004915
 80048f0:	0800491d 	.word	0x0800491d
 80048f4:	08004933 	.word	0x08004933
 80048f8:	08004923 	.word	0x08004923
 80048fc:	08004933 	.word	0x08004933
 8004900:	08004933 	.word	0x08004933
 8004904:	08004933 	.word	0x08004933
 8004908:	0800492b 	.word	0x0800492b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800490c:	f7fe f9bc 	bl	8002c88 <HAL_RCC_GetPCLK1Freq>
 8004910:	61f8      	str	r0, [r7, #28]
        break;
 8004912:	e014      	b.n	800493e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004914:	f7fe f9ce 	bl	8002cb4 <HAL_RCC_GetPCLK2Freq>
 8004918:	61f8      	str	r0, [r7, #28]
        break;
 800491a:	e010      	b.n	800493e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800491c:	4b1d      	ldr	r3, [pc, #116]	@ (8004994 <UART_SetConfig+0x454>)
 800491e:	61fb      	str	r3, [r7, #28]
        break;
 8004920:	e00d      	b.n	800493e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004922:	f7fe f919 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 8004926:	61f8      	str	r0, [r7, #28]
        break;
 8004928:	e009      	b.n	800493e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800492a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800492e:	61fb      	str	r3, [r7, #28]
        break;
 8004930:	e005      	b.n	800493e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800493c:	bf00      	nop
    }

    if (pclk != 0U)
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d019      	beq.n	8004978 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	085a      	lsrs	r2, r3, #1
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	441a      	add	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	fbb2 f3f3 	udiv	r3, r2, r3
 8004956:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	2b0f      	cmp	r3, #15
 800495c:	d909      	bls.n	8004972 <UART_SetConfig+0x432>
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004964:	d205      	bcs.n	8004972 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	b29a      	uxth	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	60da      	str	r2, [r3, #12]
 8004970:	e002      	b.n	8004978 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004984:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004988:	4618      	mov	r0, r3
 800498a:	3728      	adds	r7, #40	@ 0x28
 800498c:	46bd      	mov	sp, r7
 800498e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004992:	bf00      	nop
 8004994:	00f42400 	.word	0x00f42400

08004998 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2c:	f003 0310 	and.w	r3, r3, #16
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00a      	beq.n	8004a4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4e:	f003 0320 	and.w	r3, r3, #32
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d01a      	beq.n	8004aae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a96:	d10a      	bne.n	8004aae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	605a      	str	r2, [r3, #4]
  }
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b098      	sub	sp, #96	@ 0x60
 8004ae0:	af02      	add	r7, sp, #8
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004aec:	f7fc fa4e 	bl	8000f8c <HAL_GetTick>
 8004af0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0308 	and.w	r3, r3, #8
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d12e      	bne.n	8004b5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f88c 	bl	8004c2c <UART_WaitOnFlagUntilTimeout>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d021      	beq.n	8004b5e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b22:	e853 3f00 	ldrex	r3, [r3]
 8004b26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	461a      	mov	r2, r3
 8004b36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b38:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b3a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b40:	e841 2300 	strex	r3, r2, [r1]
 8004b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e6      	bne.n	8004b1a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e062      	b.n	8004c24 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d149      	bne.n	8004c00 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b74:	2200      	movs	r2, #0
 8004b76:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f856 	bl	8004c2c <UART_WaitOnFlagUntilTimeout>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d03c      	beq.n	8004c00 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8e:	e853 3f00 	ldrex	r3, [r3]
 8004b92:	623b      	str	r3, [r7, #32]
   return(result);
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ba4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ba6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004baa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bac:	e841 2300 	strex	r3, r2, [r1]
 8004bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1e6      	bne.n	8004b86 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3308      	adds	r3, #8
 8004bbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	e853 3f00 	ldrex	r3, [r3]
 8004bc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0301 	bic.w	r3, r3, #1
 8004bce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3308      	adds	r3, #8
 8004bd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bd8:	61fa      	str	r2, [r7, #28]
 8004bda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bdc:	69b9      	ldr	r1, [r7, #24]
 8004bde:	69fa      	ldr	r2, [r7, #28]
 8004be0:	e841 2300 	strex	r3, r2, [r1]
 8004be4:	617b      	str	r3, [r7, #20]
   return(result);
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1e5      	bne.n	8004bb8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e011      	b.n	8004c24 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2220      	movs	r2, #32
 8004c04:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3758      	adds	r7, #88	@ 0x58
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	603b      	str	r3, [r7, #0]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c3c:	e04f      	b.n	8004cde <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c44:	d04b      	beq.n	8004cde <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c46:	f7fc f9a1 	bl	8000f8c <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d302      	bcc.n	8004c5c <UART_WaitOnFlagUntilTimeout+0x30>
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e04e      	b.n	8004cfe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0304 	and.w	r3, r3, #4
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d037      	beq.n	8004cde <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b80      	cmp	r3, #128	@ 0x80
 8004c72:	d034      	beq.n	8004cde <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b40      	cmp	r3, #64	@ 0x40
 8004c78:	d031      	beq.n	8004cde <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d110      	bne.n	8004caa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2208      	movs	r2, #8
 8004c8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 f838 	bl	8004d06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2208      	movs	r2, #8
 8004c9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e029      	b.n	8004cfe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cb8:	d111      	bne.n	8004cde <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004cc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 f81e 	bl	8004d06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e00f      	b.n	8004cfe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69da      	ldr	r2, [r3, #28]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	bf0c      	ite	eq
 8004cee:	2301      	moveq	r3, #1
 8004cf0:	2300      	movne	r3, #0
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	79fb      	ldrb	r3, [r7, #7]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d0a0      	beq.n	8004c3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b095      	sub	sp, #84	@ 0x54
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d16:	e853 3f00 	ldrex	r3, [r3]
 8004d1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d2e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e6      	bne.n	8004d0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3308      	adds	r3, #8
 8004d46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	e853 3f00 	ldrex	r3, [r3]
 8004d4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	f023 0301 	bic.w	r3, r3, #1
 8004d56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3308      	adds	r3, #8
 8004d5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d68:	e841 2300 	strex	r3, r2, [r1]
 8004d6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1e5      	bne.n	8004d40 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d118      	bne.n	8004dae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	e853 3f00 	ldrex	r3, [r3]
 8004d88:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f023 0310 	bic.w	r3, r3, #16
 8004d90:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d9a:	61bb      	str	r3, [r7, #24]
 8004d9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9e:	6979      	ldr	r1, [r7, #20]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	e841 2300 	strex	r3, r2, [r1]
 8004da6:	613b      	str	r3, [r7, #16]
   return(result);
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1e6      	bne.n	8004d7c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004dc2:	bf00      	nop
 8004dc4:	3754      	adds	r7, #84	@ 0x54
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
	...

08004dd0 <siprintf>:
 8004dd0:	b40e      	push	{r1, r2, r3}
 8004dd2:	b500      	push	{lr}
 8004dd4:	b09c      	sub	sp, #112	@ 0x70
 8004dd6:	ab1d      	add	r3, sp, #116	@ 0x74
 8004dd8:	9002      	str	r0, [sp, #8]
 8004dda:	9006      	str	r0, [sp, #24]
 8004ddc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004de0:	4809      	ldr	r0, [pc, #36]	@ (8004e08 <siprintf+0x38>)
 8004de2:	9107      	str	r1, [sp, #28]
 8004de4:	9104      	str	r1, [sp, #16]
 8004de6:	4909      	ldr	r1, [pc, #36]	@ (8004e0c <siprintf+0x3c>)
 8004de8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dec:	9105      	str	r1, [sp, #20]
 8004dee:	6800      	ldr	r0, [r0, #0]
 8004df0:	9301      	str	r3, [sp, #4]
 8004df2:	a902      	add	r1, sp, #8
 8004df4:	f000 f994 	bl	8005120 <_svfiprintf_r>
 8004df8:	9b02      	ldr	r3, [sp, #8]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	701a      	strb	r2, [r3, #0]
 8004dfe:	b01c      	add	sp, #112	@ 0x70
 8004e00:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e04:	b003      	add	sp, #12
 8004e06:	4770      	bx	lr
 8004e08:	2000000c 	.word	0x2000000c
 8004e0c:	ffff0208 	.word	0xffff0208

08004e10 <memset>:
 8004e10:	4402      	add	r2, r0
 8004e12:	4603      	mov	r3, r0
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d100      	bne.n	8004e1a <memset+0xa>
 8004e18:	4770      	bx	lr
 8004e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e1e:	e7f9      	b.n	8004e14 <memset+0x4>

08004e20 <__errno>:
 8004e20:	4b01      	ldr	r3, [pc, #4]	@ (8004e28 <__errno+0x8>)
 8004e22:	6818      	ldr	r0, [r3, #0]
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	2000000c 	.word	0x2000000c

08004e2c <__libc_init_array>:
 8004e2c:	b570      	push	{r4, r5, r6, lr}
 8004e2e:	4d0d      	ldr	r5, [pc, #52]	@ (8004e64 <__libc_init_array+0x38>)
 8004e30:	4c0d      	ldr	r4, [pc, #52]	@ (8004e68 <__libc_init_array+0x3c>)
 8004e32:	1b64      	subs	r4, r4, r5
 8004e34:	10a4      	asrs	r4, r4, #2
 8004e36:	2600      	movs	r6, #0
 8004e38:	42a6      	cmp	r6, r4
 8004e3a:	d109      	bne.n	8004e50 <__libc_init_array+0x24>
 8004e3c:	4d0b      	ldr	r5, [pc, #44]	@ (8004e6c <__libc_init_array+0x40>)
 8004e3e:	4c0c      	ldr	r4, [pc, #48]	@ (8004e70 <__libc_init_array+0x44>)
 8004e40:	f000 fc66 	bl	8005710 <_init>
 8004e44:	1b64      	subs	r4, r4, r5
 8004e46:	10a4      	asrs	r4, r4, #2
 8004e48:	2600      	movs	r6, #0
 8004e4a:	42a6      	cmp	r6, r4
 8004e4c:	d105      	bne.n	8004e5a <__libc_init_array+0x2e>
 8004e4e:	bd70      	pop	{r4, r5, r6, pc}
 8004e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e54:	4798      	blx	r3
 8004e56:	3601      	adds	r6, #1
 8004e58:	e7ee      	b.n	8004e38 <__libc_init_array+0xc>
 8004e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5e:	4798      	blx	r3
 8004e60:	3601      	adds	r6, #1
 8004e62:	e7f2      	b.n	8004e4a <__libc_init_array+0x1e>
 8004e64:	080057e0 	.word	0x080057e0
 8004e68:	080057e0 	.word	0x080057e0
 8004e6c:	080057e0 	.word	0x080057e0
 8004e70:	080057e4 	.word	0x080057e4

08004e74 <__retarget_lock_acquire_recursive>:
 8004e74:	4770      	bx	lr

08004e76 <__retarget_lock_release_recursive>:
 8004e76:	4770      	bx	lr

08004e78 <_free_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	4605      	mov	r5, r0
 8004e7c:	2900      	cmp	r1, #0
 8004e7e:	d041      	beq.n	8004f04 <_free_r+0x8c>
 8004e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e84:	1f0c      	subs	r4, r1, #4
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	bfb8      	it	lt
 8004e8a:	18e4      	addlt	r4, r4, r3
 8004e8c:	f000 f8e0 	bl	8005050 <__malloc_lock>
 8004e90:	4a1d      	ldr	r2, [pc, #116]	@ (8004f08 <_free_r+0x90>)
 8004e92:	6813      	ldr	r3, [r2, #0]
 8004e94:	b933      	cbnz	r3, 8004ea4 <_free_r+0x2c>
 8004e96:	6063      	str	r3, [r4, #4]
 8004e98:	6014      	str	r4, [r2, #0]
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ea0:	f000 b8dc 	b.w	800505c <__malloc_unlock>
 8004ea4:	42a3      	cmp	r3, r4
 8004ea6:	d908      	bls.n	8004eba <_free_r+0x42>
 8004ea8:	6820      	ldr	r0, [r4, #0]
 8004eaa:	1821      	adds	r1, r4, r0
 8004eac:	428b      	cmp	r3, r1
 8004eae:	bf01      	itttt	eq
 8004eb0:	6819      	ldreq	r1, [r3, #0]
 8004eb2:	685b      	ldreq	r3, [r3, #4]
 8004eb4:	1809      	addeq	r1, r1, r0
 8004eb6:	6021      	streq	r1, [r4, #0]
 8004eb8:	e7ed      	b.n	8004e96 <_free_r+0x1e>
 8004eba:	461a      	mov	r2, r3
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	b10b      	cbz	r3, 8004ec4 <_free_r+0x4c>
 8004ec0:	42a3      	cmp	r3, r4
 8004ec2:	d9fa      	bls.n	8004eba <_free_r+0x42>
 8004ec4:	6811      	ldr	r1, [r2, #0]
 8004ec6:	1850      	adds	r0, r2, r1
 8004ec8:	42a0      	cmp	r0, r4
 8004eca:	d10b      	bne.n	8004ee4 <_free_r+0x6c>
 8004ecc:	6820      	ldr	r0, [r4, #0]
 8004ece:	4401      	add	r1, r0
 8004ed0:	1850      	adds	r0, r2, r1
 8004ed2:	4283      	cmp	r3, r0
 8004ed4:	6011      	str	r1, [r2, #0]
 8004ed6:	d1e0      	bne.n	8004e9a <_free_r+0x22>
 8004ed8:	6818      	ldr	r0, [r3, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	6053      	str	r3, [r2, #4]
 8004ede:	4408      	add	r0, r1
 8004ee0:	6010      	str	r0, [r2, #0]
 8004ee2:	e7da      	b.n	8004e9a <_free_r+0x22>
 8004ee4:	d902      	bls.n	8004eec <_free_r+0x74>
 8004ee6:	230c      	movs	r3, #12
 8004ee8:	602b      	str	r3, [r5, #0]
 8004eea:	e7d6      	b.n	8004e9a <_free_r+0x22>
 8004eec:	6820      	ldr	r0, [r4, #0]
 8004eee:	1821      	adds	r1, r4, r0
 8004ef0:	428b      	cmp	r3, r1
 8004ef2:	bf04      	itt	eq
 8004ef4:	6819      	ldreq	r1, [r3, #0]
 8004ef6:	685b      	ldreq	r3, [r3, #4]
 8004ef8:	6063      	str	r3, [r4, #4]
 8004efa:	bf04      	itt	eq
 8004efc:	1809      	addeq	r1, r1, r0
 8004efe:	6021      	streq	r1, [r4, #0]
 8004f00:	6054      	str	r4, [r2, #4]
 8004f02:	e7ca      	b.n	8004e9a <_free_r+0x22>
 8004f04:	bd38      	pop	{r3, r4, r5, pc}
 8004f06:	bf00      	nop
 8004f08:	20000368 	.word	0x20000368

08004f0c <sbrk_aligned>:
 8004f0c:	b570      	push	{r4, r5, r6, lr}
 8004f0e:	4e0f      	ldr	r6, [pc, #60]	@ (8004f4c <sbrk_aligned+0x40>)
 8004f10:	460c      	mov	r4, r1
 8004f12:	6831      	ldr	r1, [r6, #0]
 8004f14:	4605      	mov	r5, r0
 8004f16:	b911      	cbnz	r1, 8004f1e <sbrk_aligned+0x12>
 8004f18:	f000 fba6 	bl	8005668 <_sbrk_r>
 8004f1c:	6030      	str	r0, [r6, #0]
 8004f1e:	4621      	mov	r1, r4
 8004f20:	4628      	mov	r0, r5
 8004f22:	f000 fba1 	bl	8005668 <_sbrk_r>
 8004f26:	1c43      	adds	r3, r0, #1
 8004f28:	d103      	bne.n	8004f32 <sbrk_aligned+0x26>
 8004f2a:	f04f 34ff 	mov.w	r4, #4294967295
 8004f2e:	4620      	mov	r0, r4
 8004f30:	bd70      	pop	{r4, r5, r6, pc}
 8004f32:	1cc4      	adds	r4, r0, #3
 8004f34:	f024 0403 	bic.w	r4, r4, #3
 8004f38:	42a0      	cmp	r0, r4
 8004f3a:	d0f8      	beq.n	8004f2e <sbrk_aligned+0x22>
 8004f3c:	1a21      	subs	r1, r4, r0
 8004f3e:	4628      	mov	r0, r5
 8004f40:	f000 fb92 	bl	8005668 <_sbrk_r>
 8004f44:	3001      	adds	r0, #1
 8004f46:	d1f2      	bne.n	8004f2e <sbrk_aligned+0x22>
 8004f48:	e7ef      	b.n	8004f2a <sbrk_aligned+0x1e>
 8004f4a:	bf00      	nop
 8004f4c:	20000364 	.word	0x20000364

08004f50 <_malloc_r>:
 8004f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f54:	1ccd      	adds	r5, r1, #3
 8004f56:	f025 0503 	bic.w	r5, r5, #3
 8004f5a:	3508      	adds	r5, #8
 8004f5c:	2d0c      	cmp	r5, #12
 8004f5e:	bf38      	it	cc
 8004f60:	250c      	movcc	r5, #12
 8004f62:	2d00      	cmp	r5, #0
 8004f64:	4606      	mov	r6, r0
 8004f66:	db01      	blt.n	8004f6c <_malloc_r+0x1c>
 8004f68:	42a9      	cmp	r1, r5
 8004f6a:	d904      	bls.n	8004f76 <_malloc_r+0x26>
 8004f6c:	230c      	movs	r3, #12
 8004f6e:	6033      	str	r3, [r6, #0]
 8004f70:	2000      	movs	r0, #0
 8004f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800504c <_malloc_r+0xfc>
 8004f7a:	f000 f869 	bl	8005050 <__malloc_lock>
 8004f7e:	f8d8 3000 	ldr.w	r3, [r8]
 8004f82:	461c      	mov	r4, r3
 8004f84:	bb44      	cbnz	r4, 8004fd8 <_malloc_r+0x88>
 8004f86:	4629      	mov	r1, r5
 8004f88:	4630      	mov	r0, r6
 8004f8a:	f7ff ffbf 	bl	8004f0c <sbrk_aligned>
 8004f8e:	1c43      	adds	r3, r0, #1
 8004f90:	4604      	mov	r4, r0
 8004f92:	d158      	bne.n	8005046 <_malloc_r+0xf6>
 8004f94:	f8d8 4000 	ldr.w	r4, [r8]
 8004f98:	4627      	mov	r7, r4
 8004f9a:	2f00      	cmp	r7, #0
 8004f9c:	d143      	bne.n	8005026 <_malloc_r+0xd6>
 8004f9e:	2c00      	cmp	r4, #0
 8004fa0:	d04b      	beq.n	800503a <_malloc_r+0xea>
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	4639      	mov	r1, r7
 8004fa6:	4630      	mov	r0, r6
 8004fa8:	eb04 0903 	add.w	r9, r4, r3
 8004fac:	f000 fb5c 	bl	8005668 <_sbrk_r>
 8004fb0:	4581      	cmp	r9, r0
 8004fb2:	d142      	bne.n	800503a <_malloc_r+0xea>
 8004fb4:	6821      	ldr	r1, [r4, #0]
 8004fb6:	1a6d      	subs	r5, r5, r1
 8004fb8:	4629      	mov	r1, r5
 8004fba:	4630      	mov	r0, r6
 8004fbc:	f7ff ffa6 	bl	8004f0c <sbrk_aligned>
 8004fc0:	3001      	adds	r0, #1
 8004fc2:	d03a      	beq.n	800503a <_malloc_r+0xea>
 8004fc4:	6823      	ldr	r3, [r4, #0]
 8004fc6:	442b      	add	r3, r5
 8004fc8:	6023      	str	r3, [r4, #0]
 8004fca:	f8d8 3000 	ldr.w	r3, [r8]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	bb62      	cbnz	r2, 800502c <_malloc_r+0xdc>
 8004fd2:	f8c8 7000 	str.w	r7, [r8]
 8004fd6:	e00f      	b.n	8004ff8 <_malloc_r+0xa8>
 8004fd8:	6822      	ldr	r2, [r4, #0]
 8004fda:	1b52      	subs	r2, r2, r5
 8004fdc:	d420      	bmi.n	8005020 <_malloc_r+0xd0>
 8004fde:	2a0b      	cmp	r2, #11
 8004fe0:	d917      	bls.n	8005012 <_malloc_r+0xc2>
 8004fe2:	1961      	adds	r1, r4, r5
 8004fe4:	42a3      	cmp	r3, r4
 8004fe6:	6025      	str	r5, [r4, #0]
 8004fe8:	bf18      	it	ne
 8004fea:	6059      	strne	r1, [r3, #4]
 8004fec:	6863      	ldr	r3, [r4, #4]
 8004fee:	bf08      	it	eq
 8004ff0:	f8c8 1000 	streq.w	r1, [r8]
 8004ff4:	5162      	str	r2, [r4, r5]
 8004ff6:	604b      	str	r3, [r1, #4]
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	f000 f82f 	bl	800505c <__malloc_unlock>
 8004ffe:	f104 000b 	add.w	r0, r4, #11
 8005002:	1d23      	adds	r3, r4, #4
 8005004:	f020 0007 	bic.w	r0, r0, #7
 8005008:	1ac2      	subs	r2, r0, r3
 800500a:	bf1c      	itt	ne
 800500c:	1a1b      	subne	r3, r3, r0
 800500e:	50a3      	strne	r3, [r4, r2]
 8005010:	e7af      	b.n	8004f72 <_malloc_r+0x22>
 8005012:	6862      	ldr	r2, [r4, #4]
 8005014:	42a3      	cmp	r3, r4
 8005016:	bf0c      	ite	eq
 8005018:	f8c8 2000 	streq.w	r2, [r8]
 800501c:	605a      	strne	r2, [r3, #4]
 800501e:	e7eb      	b.n	8004ff8 <_malloc_r+0xa8>
 8005020:	4623      	mov	r3, r4
 8005022:	6864      	ldr	r4, [r4, #4]
 8005024:	e7ae      	b.n	8004f84 <_malloc_r+0x34>
 8005026:	463c      	mov	r4, r7
 8005028:	687f      	ldr	r7, [r7, #4]
 800502a:	e7b6      	b.n	8004f9a <_malloc_r+0x4a>
 800502c:	461a      	mov	r2, r3
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	42a3      	cmp	r3, r4
 8005032:	d1fb      	bne.n	800502c <_malloc_r+0xdc>
 8005034:	2300      	movs	r3, #0
 8005036:	6053      	str	r3, [r2, #4]
 8005038:	e7de      	b.n	8004ff8 <_malloc_r+0xa8>
 800503a:	230c      	movs	r3, #12
 800503c:	6033      	str	r3, [r6, #0]
 800503e:	4630      	mov	r0, r6
 8005040:	f000 f80c 	bl	800505c <__malloc_unlock>
 8005044:	e794      	b.n	8004f70 <_malloc_r+0x20>
 8005046:	6005      	str	r5, [r0, #0]
 8005048:	e7d6      	b.n	8004ff8 <_malloc_r+0xa8>
 800504a:	bf00      	nop
 800504c:	20000368 	.word	0x20000368

08005050 <__malloc_lock>:
 8005050:	4801      	ldr	r0, [pc, #4]	@ (8005058 <__malloc_lock+0x8>)
 8005052:	f7ff bf0f 	b.w	8004e74 <__retarget_lock_acquire_recursive>
 8005056:	bf00      	nop
 8005058:	20000360 	.word	0x20000360

0800505c <__malloc_unlock>:
 800505c:	4801      	ldr	r0, [pc, #4]	@ (8005064 <__malloc_unlock+0x8>)
 800505e:	f7ff bf0a 	b.w	8004e76 <__retarget_lock_release_recursive>
 8005062:	bf00      	nop
 8005064:	20000360 	.word	0x20000360

08005068 <__ssputs_r>:
 8005068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800506c:	688e      	ldr	r6, [r1, #8]
 800506e:	461f      	mov	r7, r3
 8005070:	42be      	cmp	r6, r7
 8005072:	680b      	ldr	r3, [r1, #0]
 8005074:	4682      	mov	sl, r0
 8005076:	460c      	mov	r4, r1
 8005078:	4690      	mov	r8, r2
 800507a:	d82d      	bhi.n	80050d8 <__ssputs_r+0x70>
 800507c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005080:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005084:	d026      	beq.n	80050d4 <__ssputs_r+0x6c>
 8005086:	6965      	ldr	r5, [r4, #20]
 8005088:	6909      	ldr	r1, [r1, #16]
 800508a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800508e:	eba3 0901 	sub.w	r9, r3, r1
 8005092:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005096:	1c7b      	adds	r3, r7, #1
 8005098:	444b      	add	r3, r9
 800509a:	106d      	asrs	r5, r5, #1
 800509c:	429d      	cmp	r5, r3
 800509e:	bf38      	it	cc
 80050a0:	461d      	movcc	r5, r3
 80050a2:	0553      	lsls	r3, r2, #21
 80050a4:	d527      	bpl.n	80050f6 <__ssputs_r+0x8e>
 80050a6:	4629      	mov	r1, r5
 80050a8:	f7ff ff52 	bl	8004f50 <_malloc_r>
 80050ac:	4606      	mov	r6, r0
 80050ae:	b360      	cbz	r0, 800510a <__ssputs_r+0xa2>
 80050b0:	6921      	ldr	r1, [r4, #16]
 80050b2:	464a      	mov	r2, r9
 80050b4:	f000 fae8 	bl	8005688 <memcpy>
 80050b8:	89a3      	ldrh	r3, [r4, #12]
 80050ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80050be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050c2:	81a3      	strh	r3, [r4, #12]
 80050c4:	6126      	str	r6, [r4, #16]
 80050c6:	6165      	str	r5, [r4, #20]
 80050c8:	444e      	add	r6, r9
 80050ca:	eba5 0509 	sub.w	r5, r5, r9
 80050ce:	6026      	str	r6, [r4, #0]
 80050d0:	60a5      	str	r5, [r4, #8]
 80050d2:	463e      	mov	r6, r7
 80050d4:	42be      	cmp	r6, r7
 80050d6:	d900      	bls.n	80050da <__ssputs_r+0x72>
 80050d8:	463e      	mov	r6, r7
 80050da:	6820      	ldr	r0, [r4, #0]
 80050dc:	4632      	mov	r2, r6
 80050de:	4641      	mov	r1, r8
 80050e0:	f000 faa8 	bl	8005634 <memmove>
 80050e4:	68a3      	ldr	r3, [r4, #8]
 80050e6:	1b9b      	subs	r3, r3, r6
 80050e8:	60a3      	str	r3, [r4, #8]
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	4433      	add	r3, r6
 80050ee:	6023      	str	r3, [r4, #0]
 80050f0:	2000      	movs	r0, #0
 80050f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f6:	462a      	mov	r2, r5
 80050f8:	f000 fad4 	bl	80056a4 <_realloc_r>
 80050fc:	4606      	mov	r6, r0
 80050fe:	2800      	cmp	r0, #0
 8005100:	d1e0      	bne.n	80050c4 <__ssputs_r+0x5c>
 8005102:	6921      	ldr	r1, [r4, #16]
 8005104:	4650      	mov	r0, sl
 8005106:	f7ff feb7 	bl	8004e78 <_free_r>
 800510a:	230c      	movs	r3, #12
 800510c:	f8ca 3000 	str.w	r3, [sl]
 8005110:	89a3      	ldrh	r3, [r4, #12]
 8005112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005116:	81a3      	strh	r3, [r4, #12]
 8005118:	f04f 30ff 	mov.w	r0, #4294967295
 800511c:	e7e9      	b.n	80050f2 <__ssputs_r+0x8a>
	...

08005120 <_svfiprintf_r>:
 8005120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005124:	4698      	mov	r8, r3
 8005126:	898b      	ldrh	r3, [r1, #12]
 8005128:	061b      	lsls	r3, r3, #24
 800512a:	b09d      	sub	sp, #116	@ 0x74
 800512c:	4607      	mov	r7, r0
 800512e:	460d      	mov	r5, r1
 8005130:	4614      	mov	r4, r2
 8005132:	d510      	bpl.n	8005156 <_svfiprintf_r+0x36>
 8005134:	690b      	ldr	r3, [r1, #16]
 8005136:	b973      	cbnz	r3, 8005156 <_svfiprintf_r+0x36>
 8005138:	2140      	movs	r1, #64	@ 0x40
 800513a:	f7ff ff09 	bl	8004f50 <_malloc_r>
 800513e:	6028      	str	r0, [r5, #0]
 8005140:	6128      	str	r0, [r5, #16]
 8005142:	b930      	cbnz	r0, 8005152 <_svfiprintf_r+0x32>
 8005144:	230c      	movs	r3, #12
 8005146:	603b      	str	r3, [r7, #0]
 8005148:	f04f 30ff 	mov.w	r0, #4294967295
 800514c:	b01d      	add	sp, #116	@ 0x74
 800514e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005152:	2340      	movs	r3, #64	@ 0x40
 8005154:	616b      	str	r3, [r5, #20]
 8005156:	2300      	movs	r3, #0
 8005158:	9309      	str	r3, [sp, #36]	@ 0x24
 800515a:	2320      	movs	r3, #32
 800515c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005160:	f8cd 800c 	str.w	r8, [sp, #12]
 8005164:	2330      	movs	r3, #48	@ 0x30
 8005166:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005304 <_svfiprintf_r+0x1e4>
 800516a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800516e:	f04f 0901 	mov.w	r9, #1
 8005172:	4623      	mov	r3, r4
 8005174:	469a      	mov	sl, r3
 8005176:	f813 2b01 	ldrb.w	r2, [r3], #1
 800517a:	b10a      	cbz	r2, 8005180 <_svfiprintf_r+0x60>
 800517c:	2a25      	cmp	r2, #37	@ 0x25
 800517e:	d1f9      	bne.n	8005174 <_svfiprintf_r+0x54>
 8005180:	ebba 0b04 	subs.w	fp, sl, r4
 8005184:	d00b      	beq.n	800519e <_svfiprintf_r+0x7e>
 8005186:	465b      	mov	r3, fp
 8005188:	4622      	mov	r2, r4
 800518a:	4629      	mov	r1, r5
 800518c:	4638      	mov	r0, r7
 800518e:	f7ff ff6b 	bl	8005068 <__ssputs_r>
 8005192:	3001      	adds	r0, #1
 8005194:	f000 80a7 	beq.w	80052e6 <_svfiprintf_r+0x1c6>
 8005198:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800519a:	445a      	add	r2, fp
 800519c:	9209      	str	r2, [sp, #36]	@ 0x24
 800519e:	f89a 3000 	ldrb.w	r3, [sl]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 809f 	beq.w	80052e6 <_svfiprintf_r+0x1c6>
 80051a8:	2300      	movs	r3, #0
 80051aa:	f04f 32ff 	mov.w	r2, #4294967295
 80051ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051b2:	f10a 0a01 	add.w	sl, sl, #1
 80051b6:	9304      	str	r3, [sp, #16]
 80051b8:	9307      	str	r3, [sp, #28]
 80051ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051be:	931a      	str	r3, [sp, #104]	@ 0x68
 80051c0:	4654      	mov	r4, sl
 80051c2:	2205      	movs	r2, #5
 80051c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051c8:	484e      	ldr	r0, [pc, #312]	@ (8005304 <_svfiprintf_r+0x1e4>)
 80051ca:	f7fb f809 	bl	80001e0 <memchr>
 80051ce:	9a04      	ldr	r2, [sp, #16]
 80051d0:	b9d8      	cbnz	r0, 800520a <_svfiprintf_r+0xea>
 80051d2:	06d0      	lsls	r0, r2, #27
 80051d4:	bf44      	itt	mi
 80051d6:	2320      	movmi	r3, #32
 80051d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051dc:	0711      	lsls	r1, r2, #28
 80051de:	bf44      	itt	mi
 80051e0:	232b      	movmi	r3, #43	@ 0x2b
 80051e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051e6:	f89a 3000 	ldrb.w	r3, [sl]
 80051ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80051ec:	d015      	beq.n	800521a <_svfiprintf_r+0xfa>
 80051ee:	9a07      	ldr	r2, [sp, #28]
 80051f0:	4654      	mov	r4, sl
 80051f2:	2000      	movs	r0, #0
 80051f4:	f04f 0c0a 	mov.w	ip, #10
 80051f8:	4621      	mov	r1, r4
 80051fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051fe:	3b30      	subs	r3, #48	@ 0x30
 8005200:	2b09      	cmp	r3, #9
 8005202:	d94b      	bls.n	800529c <_svfiprintf_r+0x17c>
 8005204:	b1b0      	cbz	r0, 8005234 <_svfiprintf_r+0x114>
 8005206:	9207      	str	r2, [sp, #28]
 8005208:	e014      	b.n	8005234 <_svfiprintf_r+0x114>
 800520a:	eba0 0308 	sub.w	r3, r0, r8
 800520e:	fa09 f303 	lsl.w	r3, r9, r3
 8005212:	4313      	orrs	r3, r2
 8005214:	9304      	str	r3, [sp, #16]
 8005216:	46a2      	mov	sl, r4
 8005218:	e7d2      	b.n	80051c0 <_svfiprintf_r+0xa0>
 800521a:	9b03      	ldr	r3, [sp, #12]
 800521c:	1d19      	adds	r1, r3, #4
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	9103      	str	r1, [sp, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	bfbb      	ittet	lt
 8005226:	425b      	neglt	r3, r3
 8005228:	f042 0202 	orrlt.w	r2, r2, #2
 800522c:	9307      	strge	r3, [sp, #28]
 800522e:	9307      	strlt	r3, [sp, #28]
 8005230:	bfb8      	it	lt
 8005232:	9204      	strlt	r2, [sp, #16]
 8005234:	7823      	ldrb	r3, [r4, #0]
 8005236:	2b2e      	cmp	r3, #46	@ 0x2e
 8005238:	d10a      	bne.n	8005250 <_svfiprintf_r+0x130>
 800523a:	7863      	ldrb	r3, [r4, #1]
 800523c:	2b2a      	cmp	r3, #42	@ 0x2a
 800523e:	d132      	bne.n	80052a6 <_svfiprintf_r+0x186>
 8005240:	9b03      	ldr	r3, [sp, #12]
 8005242:	1d1a      	adds	r2, r3, #4
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	9203      	str	r2, [sp, #12]
 8005248:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800524c:	3402      	adds	r4, #2
 800524e:	9305      	str	r3, [sp, #20]
 8005250:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005314 <_svfiprintf_r+0x1f4>
 8005254:	7821      	ldrb	r1, [r4, #0]
 8005256:	2203      	movs	r2, #3
 8005258:	4650      	mov	r0, sl
 800525a:	f7fa ffc1 	bl	80001e0 <memchr>
 800525e:	b138      	cbz	r0, 8005270 <_svfiprintf_r+0x150>
 8005260:	9b04      	ldr	r3, [sp, #16]
 8005262:	eba0 000a 	sub.w	r0, r0, sl
 8005266:	2240      	movs	r2, #64	@ 0x40
 8005268:	4082      	lsls	r2, r0
 800526a:	4313      	orrs	r3, r2
 800526c:	3401      	adds	r4, #1
 800526e:	9304      	str	r3, [sp, #16]
 8005270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005274:	4824      	ldr	r0, [pc, #144]	@ (8005308 <_svfiprintf_r+0x1e8>)
 8005276:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800527a:	2206      	movs	r2, #6
 800527c:	f7fa ffb0 	bl	80001e0 <memchr>
 8005280:	2800      	cmp	r0, #0
 8005282:	d036      	beq.n	80052f2 <_svfiprintf_r+0x1d2>
 8005284:	4b21      	ldr	r3, [pc, #132]	@ (800530c <_svfiprintf_r+0x1ec>)
 8005286:	bb1b      	cbnz	r3, 80052d0 <_svfiprintf_r+0x1b0>
 8005288:	9b03      	ldr	r3, [sp, #12]
 800528a:	3307      	adds	r3, #7
 800528c:	f023 0307 	bic.w	r3, r3, #7
 8005290:	3308      	adds	r3, #8
 8005292:	9303      	str	r3, [sp, #12]
 8005294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005296:	4433      	add	r3, r6
 8005298:	9309      	str	r3, [sp, #36]	@ 0x24
 800529a:	e76a      	b.n	8005172 <_svfiprintf_r+0x52>
 800529c:	fb0c 3202 	mla	r2, ip, r2, r3
 80052a0:	460c      	mov	r4, r1
 80052a2:	2001      	movs	r0, #1
 80052a4:	e7a8      	b.n	80051f8 <_svfiprintf_r+0xd8>
 80052a6:	2300      	movs	r3, #0
 80052a8:	3401      	adds	r4, #1
 80052aa:	9305      	str	r3, [sp, #20]
 80052ac:	4619      	mov	r1, r3
 80052ae:	f04f 0c0a 	mov.w	ip, #10
 80052b2:	4620      	mov	r0, r4
 80052b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052b8:	3a30      	subs	r2, #48	@ 0x30
 80052ba:	2a09      	cmp	r2, #9
 80052bc:	d903      	bls.n	80052c6 <_svfiprintf_r+0x1a6>
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d0c6      	beq.n	8005250 <_svfiprintf_r+0x130>
 80052c2:	9105      	str	r1, [sp, #20]
 80052c4:	e7c4      	b.n	8005250 <_svfiprintf_r+0x130>
 80052c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80052ca:	4604      	mov	r4, r0
 80052cc:	2301      	movs	r3, #1
 80052ce:	e7f0      	b.n	80052b2 <_svfiprintf_r+0x192>
 80052d0:	ab03      	add	r3, sp, #12
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	462a      	mov	r2, r5
 80052d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005310 <_svfiprintf_r+0x1f0>)
 80052d8:	a904      	add	r1, sp, #16
 80052da:	4638      	mov	r0, r7
 80052dc:	f3af 8000 	nop.w
 80052e0:	1c42      	adds	r2, r0, #1
 80052e2:	4606      	mov	r6, r0
 80052e4:	d1d6      	bne.n	8005294 <_svfiprintf_r+0x174>
 80052e6:	89ab      	ldrh	r3, [r5, #12]
 80052e8:	065b      	lsls	r3, r3, #25
 80052ea:	f53f af2d 	bmi.w	8005148 <_svfiprintf_r+0x28>
 80052ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052f0:	e72c      	b.n	800514c <_svfiprintf_r+0x2c>
 80052f2:	ab03      	add	r3, sp, #12
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	462a      	mov	r2, r5
 80052f8:	4b05      	ldr	r3, [pc, #20]	@ (8005310 <_svfiprintf_r+0x1f0>)
 80052fa:	a904      	add	r1, sp, #16
 80052fc:	4638      	mov	r0, r7
 80052fe:	f000 f879 	bl	80053f4 <_printf_i>
 8005302:	e7ed      	b.n	80052e0 <_svfiprintf_r+0x1c0>
 8005304:	080057a4 	.word	0x080057a4
 8005308:	080057ae 	.word	0x080057ae
 800530c:	00000000 	.word	0x00000000
 8005310:	08005069 	.word	0x08005069
 8005314:	080057aa 	.word	0x080057aa

08005318 <_printf_common>:
 8005318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800531c:	4616      	mov	r6, r2
 800531e:	4698      	mov	r8, r3
 8005320:	688a      	ldr	r2, [r1, #8]
 8005322:	690b      	ldr	r3, [r1, #16]
 8005324:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005328:	4293      	cmp	r3, r2
 800532a:	bfb8      	it	lt
 800532c:	4613      	movlt	r3, r2
 800532e:	6033      	str	r3, [r6, #0]
 8005330:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005334:	4607      	mov	r7, r0
 8005336:	460c      	mov	r4, r1
 8005338:	b10a      	cbz	r2, 800533e <_printf_common+0x26>
 800533a:	3301      	adds	r3, #1
 800533c:	6033      	str	r3, [r6, #0]
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	0699      	lsls	r1, r3, #26
 8005342:	bf42      	ittt	mi
 8005344:	6833      	ldrmi	r3, [r6, #0]
 8005346:	3302      	addmi	r3, #2
 8005348:	6033      	strmi	r3, [r6, #0]
 800534a:	6825      	ldr	r5, [r4, #0]
 800534c:	f015 0506 	ands.w	r5, r5, #6
 8005350:	d106      	bne.n	8005360 <_printf_common+0x48>
 8005352:	f104 0a19 	add.w	sl, r4, #25
 8005356:	68e3      	ldr	r3, [r4, #12]
 8005358:	6832      	ldr	r2, [r6, #0]
 800535a:	1a9b      	subs	r3, r3, r2
 800535c:	42ab      	cmp	r3, r5
 800535e:	dc26      	bgt.n	80053ae <_printf_common+0x96>
 8005360:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005364:	6822      	ldr	r2, [r4, #0]
 8005366:	3b00      	subs	r3, #0
 8005368:	bf18      	it	ne
 800536a:	2301      	movne	r3, #1
 800536c:	0692      	lsls	r2, r2, #26
 800536e:	d42b      	bmi.n	80053c8 <_printf_common+0xb0>
 8005370:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005374:	4641      	mov	r1, r8
 8005376:	4638      	mov	r0, r7
 8005378:	47c8      	blx	r9
 800537a:	3001      	adds	r0, #1
 800537c:	d01e      	beq.n	80053bc <_printf_common+0xa4>
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	6922      	ldr	r2, [r4, #16]
 8005382:	f003 0306 	and.w	r3, r3, #6
 8005386:	2b04      	cmp	r3, #4
 8005388:	bf02      	ittt	eq
 800538a:	68e5      	ldreq	r5, [r4, #12]
 800538c:	6833      	ldreq	r3, [r6, #0]
 800538e:	1aed      	subeq	r5, r5, r3
 8005390:	68a3      	ldr	r3, [r4, #8]
 8005392:	bf0c      	ite	eq
 8005394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005398:	2500      	movne	r5, #0
 800539a:	4293      	cmp	r3, r2
 800539c:	bfc4      	itt	gt
 800539e:	1a9b      	subgt	r3, r3, r2
 80053a0:	18ed      	addgt	r5, r5, r3
 80053a2:	2600      	movs	r6, #0
 80053a4:	341a      	adds	r4, #26
 80053a6:	42b5      	cmp	r5, r6
 80053a8:	d11a      	bne.n	80053e0 <_printf_common+0xc8>
 80053aa:	2000      	movs	r0, #0
 80053ac:	e008      	b.n	80053c0 <_printf_common+0xa8>
 80053ae:	2301      	movs	r3, #1
 80053b0:	4652      	mov	r2, sl
 80053b2:	4641      	mov	r1, r8
 80053b4:	4638      	mov	r0, r7
 80053b6:	47c8      	blx	r9
 80053b8:	3001      	adds	r0, #1
 80053ba:	d103      	bne.n	80053c4 <_printf_common+0xac>
 80053bc:	f04f 30ff 	mov.w	r0, #4294967295
 80053c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c4:	3501      	adds	r5, #1
 80053c6:	e7c6      	b.n	8005356 <_printf_common+0x3e>
 80053c8:	18e1      	adds	r1, r4, r3
 80053ca:	1c5a      	adds	r2, r3, #1
 80053cc:	2030      	movs	r0, #48	@ 0x30
 80053ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053d2:	4422      	add	r2, r4
 80053d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80053d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80053dc:	3302      	adds	r3, #2
 80053de:	e7c7      	b.n	8005370 <_printf_common+0x58>
 80053e0:	2301      	movs	r3, #1
 80053e2:	4622      	mov	r2, r4
 80053e4:	4641      	mov	r1, r8
 80053e6:	4638      	mov	r0, r7
 80053e8:	47c8      	blx	r9
 80053ea:	3001      	adds	r0, #1
 80053ec:	d0e6      	beq.n	80053bc <_printf_common+0xa4>
 80053ee:	3601      	adds	r6, #1
 80053f0:	e7d9      	b.n	80053a6 <_printf_common+0x8e>
	...

080053f4 <_printf_i>:
 80053f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053f8:	7e0f      	ldrb	r7, [r1, #24]
 80053fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80053fc:	2f78      	cmp	r7, #120	@ 0x78
 80053fe:	4691      	mov	r9, r2
 8005400:	4680      	mov	r8, r0
 8005402:	460c      	mov	r4, r1
 8005404:	469a      	mov	sl, r3
 8005406:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800540a:	d807      	bhi.n	800541c <_printf_i+0x28>
 800540c:	2f62      	cmp	r7, #98	@ 0x62
 800540e:	d80a      	bhi.n	8005426 <_printf_i+0x32>
 8005410:	2f00      	cmp	r7, #0
 8005412:	f000 80d2 	beq.w	80055ba <_printf_i+0x1c6>
 8005416:	2f58      	cmp	r7, #88	@ 0x58
 8005418:	f000 80b9 	beq.w	800558e <_printf_i+0x19a>
 800541c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005420:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005424:	e03a      	b.n	800549c <_printf_i+0xa8>
 8005426:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800542a:	2b15      	cmp	r3, #21
 800542c:	d8f6      	bhi.n	800541c <_printf_i+0x28>
 800542e:	a101      	add	r1, pc, #4	@ (adr r1, 8005434 <_printf_i+0x40>)
 8005430:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005434:	0800548d 	.word	0x0800548d
 8005438:	080054a1 	.word	0x080054a1
 800543c:	0800541d 	.word	0x0800541d
 8005440:	0800541d 	.word	0x0800541d
 8005444:	0800541d 	.word	0x0800541d
 8005448:	0800541d 	.word	0x0800541d
 800544c:	080054a1 	.word	0x080054a1
 8005450:	0800541d 	.word	0x0800541d
 8005454:	0800541d 	.word	0x0800541d
 8005458:	0800541d 	.word	0x0800541d
 800545c:	0800541d 	.word	0x0800541d
 8005460:	080055a1 	.word	0x080055a1
 8005464:	080054cb 	.word	0x080054cb
 8005468:	0800555b 	.word	0x0800555b
 800546c:	0800541d 	.word	0x0800541d
 8005470:	0800541d 	.word	0x0800541d
 8005474:	080055c3 	.word	0x080055c3
 8005478:	0800541d 	.word	0x0800541d
 800547c:	080054cb 	.word	0x080054cb
 8005480:	0800541d 	.word	0x0800541d
 8005484:	0800541d 	.word	0x0800541d
 8005488:	08005563 	.word	0x08005563
 800548c:	6833      	ldr	r3, [r6, #0]
 800548e:	1d1a      	adds	r2, r3, #4
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6032      	str	r2, [r6, #0]
 8005494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005498:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800549c:	2301      	movs	r3, #1
 800549e:	e09d      	b.n	80055dc <_printf_i+0x1e8>
 80054a0:	6833      	ldr	r3, [r6, #0]
 80054a2:	6820      	ldr	r0, [r4, #0]
 80054a4:	1d19      	adds	r1, r3, #4
 80054a6:	6031      	str	r1, [r6, #0]
 80054a8:	0606      	lsls	r6, r0, #24
 80054aa:	d501      	bpl.n	80054b0 <_printf_i+0xbc>
 80054ac:	681d      	ldr	r5, [r3, #0]
 80054ae:	e003      	b.n	80054b8 <_printf_i+0xc4>
 80054b0:	0645      	lsls	r5, r0, #25
 80054b2:	d5fb      	bpl.n	80054ac <_printf_i+0xb8>
 80054b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054b8:	2d00      	cmp	r5, #0
 80054ba:	da03      	bge.n	80054c4 <_printf_i+0xd0>
 80054bc:	232d      	movs	r3, #45	@ 0x2d
 80054be:	426d      	negs	r5, r5
 80054c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054c4:	4859      	ldr	r0, [pc, #356]	@ (800562c <_printf_i+0x238>)
 80054c6:	230a      	movs	r3, #10
 80054c8:	e011      	b.n	80054ee <_printf_i+0xfa>
 80054ca:	6821      	ldr	r1, [r4, #0]
 80054cc:	6833      	ldr	r3, [r6, #0]
 80054ce:	0608      	lsls	r0, r1, #24
 80054d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80054d4:	d402      	bmi.n	80054dc <_printf_i+0xe8>
 80054d6:	0649      	lsls	r1, r1, #25
 80054d8:	bf48      	it	mi
 80054da:	b2ad      	uxthmi	r5, r5
 80054dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80054de:	4853      	ldr	r0, [pc, #332]	@ (800562c <_printf_i+0x238>)
 80054e0:	6033      	str	r3, [r6, #0]
 80054e2:	bf14      	ite	ne
 80054e4:	230a      	movne	r3, #10
 80054e6:	2308      	moveq	r3, #8
 80054e8:	2100      	movs	r1, #0
 80054ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054ee:	6866      	ldr	r6, [r4, #4]
 80054f0:	60a6      	str	r6, [r4, #8]
 80054f2:	2e00      	cmp	r6, #0
 80054f4:	bfa2      	ittt	ge
 80054f6:	6821      	ldrge	r1, [r4, #0]
 80054f8:	f021 0104 	bicge.w	r1, r1, #4
 80054fc:	6021      	strge	r1, [r4, #0]
 80054fe:	b90d      	cbnz	r5, 8005504 <_printf_i+0x110>
 8005500:	2e00      	cmp	r6, #0
 8005502:	d04b      	beq.n	800559c <_printf_i+0x1a8>
 8005504:	4616      	mov	r6, r2
 8005506:	fbb5 f1f3 	udiv	r1, r5, r3
 800550a:	fb03 5711 	mls	r7, r3, r1, r5
 800550e:	5dc7      	ldrb	r7, [r0, r7]
 8005510:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005514:	462f      	mov	r7, r5
 8005516:	42bb      	cmp	r3, r7
 8005518:	460d      	mov	r5, r1
 800551a:	d9f4      	bls.n	8005506 <_printf_i+0x112>
 800551c:	2b08      	cmp	r3, #8
 800551e:	d10b      	bne.n	8005538 <_printf_i+0x144>
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	07df      	lsls	r7, r3, #31
 8005524:	d508      	bpl.n	8005538 <_printf_i+0x144>
 8005526:	6923      	ldr	r3, [r4, #16]
 8005528:	6861      	ldr	r1, [r4, #4]
 800552a:	4299      	cmp	r1, r3
 800552c:	bfde      	ittt	le
 800552e:	2330      	movle	r3, #48	@ 0x30
 8005530:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005534:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005538:	1b92      	subs	r2, r2, r6
 800553a:	6122      	str	r2, [r4, #16]
 800553c:	f8cd a000 	str.w	sl, [sp]
 8005540:	464b      	mov	r3, r9
 8005542:	aa03      	add	r2, sp, #12
 8005544:	4621      	mov	r1, r4
 8005546:	4640      	mov	r0, r8
 8005548:	f7ff fee6 	bl	8005318 <_printf_common>
 800554c:	3001      	adds	r0, #1
 800554e:	d14a      	bne.n	80055e6 <_printf_i+0x1f2>
 8005550:	f04f 30ff 	mov.w	r0, #4294967295
 8005554:	b004      	add	sp, #16
 8005556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	f043 0320 	orr.w	r3, r3, #32
 8005560:	6023      	str	r3, [r4, #0]
 8005562:	4833      	ldr	r0, [pc, #204]	@ (8005630 <_printf_i+0x23c>)
 8005564:	2778      	movs	r7, #120	@ 0x78
 8005566:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	6831      	ldr	r1, [r6, #0]
 800556e:	061f      	lsls	r7, r3, #24
 8005570:	f851 5b04 	ldr.w	r5, [r1], #4
 8005574:	d402      	bmi.n	800557c <_printf_i+0x188>
 8005576:	065f      	lsls	r7, r3, #25
 8005578:	bf48      	it	mi
 800557a:	b2ad      	uxthmi	r5, r5
 800557c:	6031      	str	r1, [r6, #0]
 800557e:	07d9      	lsls	r1, r3, #31
 8005580:	bf44      	itt	mi
 8005582:	f043 0320 	orrmi.w	r3, r3, #32
 8005586:	6023      	strmi	r3, [r4, #0]
 8005588:	b11d      	cbz	r5, 8005592 <_printf_i+0x19e>
 800558a:	2310      	movs	r3, #16
 800558c:	e7ac      	b.n	80054e8 <_printf_i+0xf4>
 800558e:	4827      	ldr	r0, [pc, #156]	@ (800562c <_printf_i+0x238>)
 8005590:	e7e9      	b.n	8005566 <_printf_i+0x172>
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	f023 0320 	bic.w	r3, r3, #32
 8005598:	6023      	str	r3, [r4, #0]
 800559a:	e7f6      	b.n	800558a <_printf_i+0x196>
 800559c:	4616      	mov	r6, r2
 800559e:	e7bd      	b.n	800551c <_printf_i+0x128>
 80055a0:	6833      	ldr	r3, [r6, #0]
 80055a2:	6825      	ldr	r5, [r4, #0]
 80055a4:	6961      	ldr	r1, [r4, #20]
 80055a6:	1d18      	adds	r0, r3, #4
 80055a8:	6030      	str	r0, [r6, #0]
 80055aa:	062e      	lsls	r6, r5, #24
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	d501      	bpl.n	80055b4 <_printf_i+0x1c0>
 80055b0:	6019      	str	r1, [r3, #0]
 80055b2:	e002      	b.n	80055ba <_printf_i+0x1c6>
 80055b4:	0668      	lsls	r0, r5, #25
 80055b6:	d5fb      	bpl.n	80055b0 <_printf_i+0x1bc>
 80055b8:	8019      	strh	r1, [r3, #0]
 80055ba:	2300      	movs	r3, #0
 80055bc:	6123      	str	r3, [r4, #16]
 80055be:	4616      	mov	r6, r2
 80055c0:	e7bc      	b.n	800553c <_printf_i+0x148>
 80055c2:	6833      	ldr	r3, [r6, #0]
 80055c4:	1d1a      	adds	r2, r3, #4
 80055c6:	6032      	str	r2, [r6, #0]
 80055c8:	681e      	ldr	r6, [r3, #0]
 80055ca:	6862      	ldr	r2, [r4, #4]
 80055cc:	2100      	movs	r1, #0
 80055ce:	4630      	mov	r0, r6
 80055d0:	f7fa fe06 	bl	80001e0 <memchr>
 80055d4:	b108      	cbz	r0, 80055da <_printf_i+0x1e6>
 80055d6:	1b80      	subs	r0, r0, r6
 80055d8:	6060      	str	r0, [r4, #4]
 80055da:	6863      	ldr	r3, [r4, #4]
 80055dc:	6123      	str	r3, [r4, #16]
 80055de:	2300      	movs	r3, #0
 80055e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055e4:	e7aa      	b.n	800553c <_printf_i+0x148>
 80055e6:	6923      	ldr	r3, [r4, #16]
 80055e8:	4632      	mov	r2, r6
 80055ea:	4649      	mov	r1, r9
 80055ec:	4640      	mov	r0, r8
 80055ee:	47d0      	blx	sl
 80055f0:	3001      	adds	r0, #1
 80055f2:	d0ad      	beq.n	8005550 <_printf_i+0x15c>
 80055f4:	6823      	ldr	r3, [r4, #0]
 80055f6:	079b      	lsls	r3, r3, #30
 80055f8:	d413      	bmi.n	8005622 <_printf_i+0x22e>
 80055fa:	68e0      	ldr	r0, [r4, #12]
 80055fc:	9b03      	ldr	r3, [sp, #12]
 80055fe:	4298      	cmp	r0, r3
 8005600:	bfb8      	it	lt
 8005602:	4618      	movlt	r0, r3
 8005604:	e7a6      	b.n	8005554 <_printf_i+0x160>
 8005606:	2301      	movs	r3, #1
 8005608:	4632      	mov	r2, r6
 800560a:	4649      	mov	r1, r9
 800560c:	4640      	mov	r0, r8
 800560e:	47d0      	blx	sl
 8005610:	3001      	adds	r0, #1
 8005612:	d09d      	beq.n	8005550 <_printf_i+0x15c>
 8005614:	3501      	adds	r5, #1
 8005616:	68e3      	ldr	r3, [r4, #12]
 8005618:	9903      	ldr	r1, [sp, #12]
 800561a:	1a5b      	subs	r3, r3, r1
 800561c:	42ab      	cmp	r3, r5
 800561e:	dcf2      	bgt.n	8005606 <_printf_i+0x212>
 8005620:	e7eb      	b.n	80055fa <_printf_i+0x206>
 8005622:	2500      	movs	r5, #0
 8005624:	f104 0619 	add.w	r6, r4, #25
 8005628:	e7f5      	b.n	8005616 <_printf_i+0x222>
 800562a:	bf00      	nop
 800562c:	080057b5 	.word	0x080057b5
 8005630:	080057c6 	.word	0x080057c6

08005634 <memmove>:
 8005634:	4288      	cmp	r0, r1
 8005636:	b510      	push	{r4, lr}
 8005638:	eb01 0402 	add.w	r4, r1, r2
 800563c:	d902      	bls.n	8005644 <memmove+0x10>
 800563e:	4284      	cmp	r4, r0
 8005640:	4623      	mov	r3, r4
 8005642:	d807      	bhi.n	8005654 <memmove+0x20>
 8005644:	1e43      	subs	r3, r0, #1
 8005646:	42a1      	cmp	r1, r4
 8005648:	d008      	beq.n	800565c <memmove+0x28>
 800564a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800564e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005652:	e7f8      	b.n	8005646 <memmove+0x12>
 8005654:	4402      	add	r2, r0
 8005656:	4601      	mov	r1, r0
 8005658:	428a      	cmp	r2, r1
 800565a:	d100      	bne.n	800565e <memmove+0x2a>
 800565c:	bd10      	pop	{r4, pc}
 800565e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005662:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005666:	e7f7      	b.n	8005658 <memmove+0x24>

08005668 <_sbrk_r>:
 8005668:	b538      	push	{r3, r4, r5, lr}
 800566a:	4d06      	ldr	r5, [pc, #24]	@ (8005684 <_sbrk_r+0x1c>)
 800566c:	2300      	movs	r3, #0
 800566e:	4604      	mov	r4, r0
 8005670:	4608      	mov	r0, r1
 8005672:	602b      	str	r3, [r5, #0]
 8005674:	f7fb fa12 	bl	8000a9c <_sbrk>
 8005678:	1c43      	adds	r3, r0, #1
 800567a:	d102      	bne.n	8005682 <_sbrk_r+0x1a>
 800567c:	682b      	ldr	r3, [r5, #0]
 800567e:	b103      	cbz	r3, 8005682 <_sbrk_r+0x1a>
 8005680:	6023      	str	r3, [r4, #0]
 8005682:	bd38      	pop	{r3, r4, r5, pc}
 8005684:	2000035c 	.word	0x2000035c

08005688 <memcpy>:
 8005688:	440a      	add	r2, r1
 800568a:	4291      	cmp	r1, r2
 800568c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005690:	d100      	bne.n	8005694 <memcpy+0xc>
 8005692:	4770      	bx	lr
 8005694:	b510      	push	{r4, lr}
 8005696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800569a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800569e:	4291      	cmp	r1, r2
 80056a0:	d1f9      	bne.n	8005696 <memcpy+0xe>
 80056a2:	bd10      	pop	{r4, pc}

080056a4 <_realloc_r>:
 80056a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056a8:	4680      	mov	r8, r0
 80056aa:	4615      	mov	r5, r2
 80056ac:	460c      	mov	r4, r1
 80056ae:	b921      	cbnz	r1, 80056ba <_realloc_r+0x16>
 80056b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056b4:	4611      	mov	r1, r2
 80056b6:	f7ff bc4b 	b.w	8004f50 <_malloc_r>
 80056ba:	b92a      	cbnz	r2, 80056c8 <_realloc_r+0x24>
 80056bc:	f7ff fbdc 	bl	8004e78 <_free_r>
 80056c0:	2400      	movs	r4, #0
 80056c2:	4620      	mov	r0, r4
 80056c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056c8:	f000 f81a 	bl	8005700 <_malloc_usable_size_r>
 80056cc:	4285      	cmp	r5, r0
 80056ce:	4606      	mov	r6, r0
 80056d0:	d802      	bhi.n	80056d8 <_realloc_r+0x34>
 80056d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80056d6:	d8f4      	bhi.n	80056c2 <_realloc_r+0x1e>
 80056d8:	4629      	mov	r1, r5
 80056da:	4640      	mov	r0, r8
 80056dc:	f7ff fc38 	bl	8004f50 <_malloc_r>
 80056e0:	4607      	mov	r7, r0
 80056e2:	2800      	cmp	r0, #0
 80056e4:	d0ec      	beq.n	80056c0 <_realloc_r+0x1c>
 80056e6:	42b5      	cmp	r5, r6
 80056e8:	462a      	mov	r2, r5
 80056ea:	4621      	mov	r1, r4
 80056ec:	bf28      	it	cs
 80056ee:	4632      	movcs	r2, r6
 80056f0:	f7ff ffca 	bl	8005688 <memcpy>
 80056f4:	4621      	mov	r1, r4
 80056f6:	4640      	mov	r0, r8
 80056f8:	f7ff fbbe 	bl	8004e78 <_free_r>
 80056fc:	463c      	mov	r4, r7
 80056fe:	e7e0      	b.n	80056c2 <_realloc_r+0x1e>

08005700 <_malloc_usable_size_r>:
 8005700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005704:	1f18      	subs	r0, r3, #4
 8005706:	2b00      	cmp	r3, #0
 8005708:	bfbc      	itt	lt
 800570a:	580b      	ldrlt	r3, [r1, r0]
 800570c:	18c0      	addlt	r0, r0, r3
 800570e:	4770      	bx	lr

08005710 <_init>:
 8005710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005712:	bf00      	nop
 8005714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005716:	bc08      	pop	{r3}
 8005718:	469e      	mov	lr, r3
 800571a:	4770      	bx	lr

0800571c <_fini>:
 800571c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571e:	bf00      	nop
 8005720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005722:	bc08      	pop	{r3}
 8005724:	469e      	mov	lr, r3
 8005726:	4770      	bx	lr
