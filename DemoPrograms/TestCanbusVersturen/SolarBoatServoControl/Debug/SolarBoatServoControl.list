
SolarBoatServoControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054d8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005668  08005668  00006668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005708  08005708  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005708  08005708  00006708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005710  08005710  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005710  08005710  00006710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005714  08005714  00006714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005718  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  2000005c  08005774  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08005774  000072f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d42  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bdc  00000000  00000000  00019dce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  0001c9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d46  00000000  00000000  0001dae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021f49  00000000  00000000  0001e826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001537b  00000000  00000000  0004076f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cca2b  00000000  00000000  00055aea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122515  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c20  00000000  00000000  00122558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000c5  00000000  00000000  00127178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005650 	.word	0x08005650

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005650 	.word	0x08005650

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	@ 0x28
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000576:	4b32      	ldr	r3, [pc, #200]	@ (8000640 <MX_CAN1_Init+0xd0>)
 8000578:	4a32      	ldr	r2, [pc, #200]	@ (8000644 <MX_CAN1_Init+0xd4>)
 800057a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 800057c:	4b30      	ldr	r3, [pc, #192]	@ (8000640 <MX_CAN1_Init+0xd0>)
 800057e:	2208      	movs	r2, #8
 8000580:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000582:	4b2f      	ldr	r3, [pc, #188]	@ (8000640 <MX_CAN1_Init+0xd0>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000588:	4b2d      	ldr	r3, [pc, #180]	@ (8000640 <MX_CAN1_Init+0xd0>)
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800058e:	4b2c      	ldr	r3, [pc, #176]	@ (8000640 <MX_CAN1_Init+0xd0>)
 8000590:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000594:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 8000596:	4b2a      	ldr	r3, [pc, #168]	@ (8000640 <MX_CAN1_Init+0xd0>)
 8000598:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 800059c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800059e:	4b28      	ldr	r3, [pc, #160]	@ (8000640 <MX_CAN1_Init+0xd0>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005a4:	4b26      	ldr	r3, [pc, #152]	@ (8000640 <MX_CAN1_Init+0xd0>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005aa:	4b25      	ldr	r3, [pc, #148]	@ (8000640 <MX_CAN1_Init+0xd0>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005b0:	4b23      	ldr	r3, [pc, #140]	@ (8000640 <MX_CAN1_Init+0xd0>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005b6:	4b22      	ldr	r3, [pc, #136]	@ (8000640 <MX_CAN1_Init+0xd0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005bc:	4b20      	ldr	r3, [pc, #128]	@ (8000640 <MX_CAN1_Init+0xd0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005c2:	481f      	ldr	r0, [pc, #124]	@ (8000640 <MX_CAN1_Init+0xd0>)
 80005c4:	f000 fd50 	bl	8001068 <HAL_CAN_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80005ce:	f000 f9e7 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2100      	movs	r1, #0
 80005d6:	2014      	movs	r0, #20
 80005d8:	f001 fb59 	bl	8001c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80005dc:	2014      	movs	r0, #20
 80005de:	f001 fb72 	bl	8001cc6 <HAL_NVIC_EnableIRQ>

    CAN_FilterTypeDef sFilterConfig;

    sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterIdHigh = 0x0<<5;
 80005e6:	2300      	movs	r3, #0
 80005e8:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x0<<5;
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0<<5;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0x0<<5;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005f6:	2301      	movs	r3, #1
 80005f8:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterActivation = ENABLE;
 80005fa:	2301      	movs	r3, #1
 80005fc:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterBank = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000602:	2300      	movs	r3, #0
 8000604:	61bb      	str	r3, [r7, #24]
    sFilterConfig.SlaveStartFilterBank = 14;
 8000606:	230e      	movs	r3, #14
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 800060a:	463b      	mov	r3, r7
 800060c:	4619      	mov	r1, r3
 800060e:	480c      	ldr	r0, [pc, #48]	@ (8000640 <MX_CAN1_Init+0xd0>)
 8000610:	f000 fe25 	bl	800125e <HAL_CAN_ConfigFilter>


  	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000614:	480a      	ldr	r0, [pc, #40]	@ (8000640 <MX_CAN1_Init+0xd0>)
 8000616:	f000 feec 	bl	80013f2 <HAL_CAN_Start>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_CAN1_Init+0xb4>
  		Error_Handler();
 8000620:	f000 f9be 	bl	80009a0 <Error_Handler>
  	}

  	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000624:	2102      	movs	r1, #2
 8000626:	4806      	ldr	r0, [pc, #24]	@ (8000640 <MX_CAN1_Init+0xd0>)
 8000628:	f000 fff7 	bl	800161a <HAL_CAN_ActivateNotification>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_CAN1_Init+0xc6>
  	{
  		Error_Handler();
 8000632:	f000 f9b5 	bl	80009a0 <Error_Handler>
  	}

  /* USER CODE END CAN1_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	3728      	adds	r7, #40	@ 0x28
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000078 	.word	0x20000078
 8000644:	40006400 	.word	0x40006400

08000648 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	@ 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a1c      	ldr	r2, [pc, #112]	@ (80006d8 <HAL_CAN_MspInit+0x90>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d131      	bne.n	80006ce <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800066a:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <HAL_CAN_MspInit+0x94>)
 800066c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800066e:	4a1b      	ldr	r2, [pc, #108]	@ (80006dc <HAL_CAN_MspInit+0x94>)
 8000670:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000674:	6593      	str	r3, [r2, #88]	@ 0x58
 8000676:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <HAL_CAN_MspInit+0x94>)
 8000678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800067a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b16      	ldr	r3, [pc, #88]	@ (80006dc <HAL_CAN_MspInit+0x94>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	4a15      	ldr	r2, [pc, #84]	@ (80006dc <HAL_CAN_MspInit+0x94>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068e:	4b13      	ldr	r3, [pc, #76]	@ (80006dc <HAL_CAN_MspInit+0x94>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800069a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800069e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a0:	2302      	movs	r3, #2
 80006a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a8:	2303      	movs	r3, #3
 80006aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006ac:	2309      	movs	r3, #9
 80006ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4619      	mov	r1, r3
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ba:	f001 fb1f 	bl	8001cfc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	2014      	movs	r0, #20
 80006c4:	f001 fae3 	bl	8001c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006c8:	2014      	movs	r0, #20
 80006ca:	f001 fafc 	bl	8001cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006ce:	bf00      	nop
 80006d0:	3728      	adds	r7, #40	@ 0x28
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40006400 	.word	0x40006400
 80006dc:	40021000 	.word	0x40021000

080006e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	4b1d      	ldr	r3, [pc, #116]	@ (800076c <MX_GPIO_Init+0x8c>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fa:	4a1c      	ldr	r2, [pc, #112]	@ (800076c <MX_GPIO_Init+0x8c>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000702:	4b1a      	ldr	r3, [pc, #104]	@ (800076c <MX_GPIO_Init+0x8c>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b17      	ldr	r3, [pc, #92]	@ (800076c <MX_GPIO_Init+0x8c>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000712:	4a16      	ldr	r2, [pc, #88]	@ (800076c <MX_GPIO_Init+0x8c>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <MX_GPIO_Init+0x8c>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_GPIO_Init+0x8c>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	4a10      	ldr	r2, [pc, #64]	@ (800076c <MX_GPIO_Init+0x8c>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_GPIO_Init+0x8c>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2108      	movs	r1, #8
 8000742:	480b      	ldr	r0, [pc, #44]	@ (8000770 <MX_GPIO_Init+0x90>)
 8000744:	f001 fc44 	bl	8001fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000748:	2308      	movs	r3, #8
 800074a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2300      	movs	r3, #0
 8000756:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	4619      	mov	r1, r3
 800075e:	4804      	ldr	r0, [pc, #16]	@ (8000770 <MX_GPIO_Init+0x90>)
 8000760:	f001 facc 	bl	8001cfc <HAL_GPIO_Init>

}
 8000764:	bf00      	nop
 8000766:	3720      	adds	r7, #32
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40021000 	.word	0x40021000
 8000770:	48000400 	.word	0x48000400

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b08f      	sub	sp, #60	@ 0x3c
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077a:	f000 fbdc 	bl	8000f36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077e:	f000 f8ad 	bl	80008dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000782:	f7ff ffad 	bl	80006e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000786:	f000 fb13 	bl	8000db0 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 800078a:	f7ff fef1 	bl	8000570 <MX_CAN1_Init>
  MX_TIM1_Init();
 800078e:	f000 fa0b 	bl	8000ba8 <MX_TIM1_Init>
  MX_RNG_Init();
 8000792:	f000 f90b 	bl	80009ac <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

    // CAN-transmissie configureren
    TxHeader.DLC = 8;                     				// Data Length: 1 byte
 8000796:	4b32      	ldr	r3, [pc, #200]	@ (8000860 <main+0xec>)
 8000798:	2208      	movs	r2, #8
 800079a:	611a      	str	r2, [r3, #16]
    TxHeader.IDE = CAN_ID_STD;            				// Standaard CAN-ID
 800079c:	4b30      	ldr	r3, [pc, #192]	@ (8000860 <main+0xec>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;          				// Data frame
 80007a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000860 <main+0xec>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
    TxHeader.StdId = get_random_4bit()<<7 | 0x1;        // Een andere CAN-ID
 80007a8:	f000 f87e 	bl	80008a8 <get_random_4bit>
 80007ac:	4603      	mov	r3, r0
 80007ae:	01db      	lsls	r3, r3, #7
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000860 <main+0xec>)
 80007b8:	601a      	str	r2, [r3, #0]
    TxHeader.TransmitGlobalTime = DISABLE;
 80007ba:	4b29      	ldr	r3, [pc, #164]	@ (8000860 <main+0xec>)
 80007bc:	2200      	movs	r2, #0
 80007be:	751a      	strb	r2, [r3, #20]
    uint32_t i = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	637b      	str	r3, [r7, #52]	@ 0x34
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
        // Genereer een willekeurig ASCII karakter
    	sprintf(TxData, "%7d", i);
 80007c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80007c6:	4927      	ldr	r1, [pc, #156]	@ (8000864 <main+0xf0>)
 80007c8:	4827      	ldr	r0, [pc, #156]	@ (8000868 <main+0xf4>)
 80007ca:	f004 faa1 	bl	8004d10 <siprintf>

    	if((i % 2) == 0)
 80007ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007d0:	f003 0301 	and.w	r3, r3, #1
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d10e      	bne.n	80007f6 <main+0x82>
    	{
    		TxHeader.StdId = get_random_4bit()<<7 | ((uint8_t)get_random_number()&0b01111111);
 80007d8:	f000 f866 	bl	80008a8 <get_random_4bit>
 80007dc:	4603      	mov	r3, r0
 80007de:	01dc      	lsls	r4, r3, #7
 80007e0:	f000 f84e 	bl	8000880 <get_random_number>
 80007e4:	4603      	mov	r3, r0
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80007ec:	4323      	orrs	r3, r4
 80007ee:	461a      	mov	r2, r3
 80007f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000860 <main+0xec>)
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	e008      	b.n	8000808 <main+0x94>
    	}
    	else
    	{
    		TxHeader.StdId = get_random_4bit()<<7 | 0x1;
 80007f6:	f000 f857 	bl	80008a8 <get_random_4bit>
 80007fa:	4603      	mov	r3, r0
 80007fc:	01db      	lsls	r3, r3, #7
 80007fe:	f043 0301 	orr.w	r3, r3, #1
 8000802:	461a      	mov	r2, r3
 8000804:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <main+0xec>)
 8000806:	601a      	str	r2, [r3, #0]
    	}
			// Verstuur het CAN-bericht
			if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000808:	4b18      	ldr	r3, [pc, #96]	@ (800086c <main+0xf8>)
 800080a:	4a17      	ldr	r2, [pc, #92]	@ (8000868 <main+0xf4>)
 800080c:	4914      	ldr	r1, [pc, #80]	@ (8000860 <main+0xec>)
 800080e:	4818      	ldr	r0, [pc, #96]	@ (8000870 <main+0xfc>)
 8000810:	f000 fe33 	bl	800147a <HAL_CAN_AddTxMessage>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <main+0xaa>
			{
				// Fout afhandelen bij CAN transmissie
				Error_Handler();
 800081a:	f000 f8c1 	bl	80009a0 <Error_Handler>
			}

        // Optioneel: zet de gegevens op UART voor debugging
        char uartBuffer[50];
        sprintf(uartBuffer, "Verzonden CAN Data: %c (0x%X)\r\n", TxData[0], TxData[0]);
 800081e:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <main+0xf4>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	461a      	mov	r2, r3
 8000824:	4b10      	ldr	r3, [pc, #64]	@ (8000868 <main+0xf4>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4638      	mov	r0, r7
 800082a:	4912      	ldr	r1, [pc, #72]	@ (8000874 <main+0x100>)
 800082c:	f004 fa70 	bl	8004d10 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8000830:	463b      	mov	r3, r7
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff fccc 	bl	80001d0 <strlen>
 8000838:	4603      	mov	r3, r0
 800083a:	b29a      	uxth	r2, r3
 800083c:	4639      	mov	r1, r7
 800083e:	f04f 33ff 	mov.w	r3, #4294967295
 8000842:	480d      	ldr	r0, [pc, #52]	@ (8000878 <main+0x104>)
 8000844:	f003 fd92 	bl	800436c <HAL_UART_Transmit>
        i++;
 8000848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800084a:	3301      	adds	r3, #1
 800084c:	637b      	str	r3, [r7, #52]	@ 0x34

        // Wacht 1 seconde voor het verzenden van het volgende bericht
        HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 800084e:	2108      	movs	r1, #8
 8000850:	480a      	ldr	r0, [pc, #40]	@ (800087c <main+0x108>)
 8000852:	f001 fbd5 	bl	8002000 <HAL_GPIO_TogglePin>
        HAL_Delay(250);
 8000856:	20fa      	movs	r0, #250	@ 0xfa
 8000858:	f000 fbe2 	bl	8001020 <HAL_Delay>
    {
 800085c:	e7b2      	b.n	80007c4 <main+0x50>
 800085e:	bf00      	nop
 8000860:	200000a0 	.word	0x200000a0
 8000864:	08005668 	.word	0x08005668
 8000868:	200000bc 	.word	0x200000bc
 800086c:	200000b8 	.word	0x200000b8
 8000870:	20000078 	.word	0x20000078
 8000874:	0800566c 	.word	0x0800566c
 8000878:	20000124 	.word	0x20000124
 800087c:	48000400 	.word	0x48000400

08000880 <get_random_number>:

  /* USER CODE END 3 */
}

//Create random number
uint32_t get_random_number(void) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
    uint32_t random_number;
    if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) != HAL_OK) {
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	4619      	mov	r1, r3
 800088a:	4806      	ldr	r0, [pc, #24]	@ (80008a4 <get_random_number+0x24>)
 800088c:	f002 fdcd 	bl	800342a <HAL_RNG_GenerateRandomNumber>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <get_random_number+0x1a>
        // RNG generation error
        Error_Handler();
 8000896:	f000 f883 	bl	80009a0 <Error_Handler>
    }
    return random_number;
 800089a:	687b      	ldr	r3, [r7, #4]
}
 800089c:	4618      	mov	r0, r3
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200000c4 	.word	0x200000c4

080008a8 <get_random_4bit>:

//Create random number but only 8 bits
uint8_t get_random_4bit(void) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
    uint32_t random_32bit;
    uint8_t random_8bit;
    uint8_t random_4bit;
    if (HAL_RNG_GenerateRandomNumber(&hrng, &random_32bit) != HAL_OK) {
 80008ae:	463b      	mov	r3, r7
 80008b0:	4619      	mov	r1, r3
 80008b2:	4809      	ldr	r0, [pc, #36]	@ (80008d8 <get_random_4bit+0x30>)
 80008b4:	f002 fdb9 	bl	800342a <HAL_RNG_GenerateRandomNumber>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <get_random_4bit+0x1a>
        // RNG generation error handling
        Error_Handler();
 80008be:	f000 f86f 	bl	80009a0 <Error_Handler>
    }

    random_8bit = ((uint8_t)(random_32bit & 0xFF));
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	71fb      	strb	r3, [r7, #7]

    random_4bit = (random_8bit<<4)>>4;
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	011b      	lsls	r3, r3, #4
 80008ca:	111b      	asrs	r3, r3, #4
 80008cc:	71bb      	strb	r3, [r7, #6]

    // Extract a single 8-bit value (lower 8 bits of the 32-bit number)
    return random_4bit;
 80008ce:	79bb      	ldrb	r3, [r7, #6]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200000c4 	.word	0x200000c4

080008dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b096      	sub	sp, #88	@ 0x58
 80008e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	2244      	movs	r2, #68	@ 0x44
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f004 fa30 	bl	8004d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f0:	463b      	mov	r3, r7
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000902:	f001 fbb5 	bl	8002070 <HAL_PWREx_ControlVoltageScaling>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800090c:	f000 f848 	bl	80009a0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000910:	f001 fb90 	bl	8002034 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000914:	4b21      	ldr	r3, [pc, #132]	@ (800099c <SystemClock_Config+0xc0>)
 8000916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800091a:	4a20      	ldr	r2, [pc, #128]	@ (800099c <SystemClock_Config+0xc0>)
 800091c:	f023 0318 	bic.w	r3, r3, #24
 8000920:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000924:	2314      	movs	r3, #20
 8000926:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000928:	2301      	movs	r3, #1
 800092a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800092c:	2301      	movs	r3, #1
 800092e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000934:	2360      	movs	r3, #96	@ 0x60
 8000936:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000938:	2302      	movs	r3, #2
 800093a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800093c:	2301      	movs	r3, #1
 800093e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000940:	2301      	movs	r3, #1
 8000942:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000944:	2310      	movs	r3, #16
 8000946:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000948:	2307      	movs	r3, #7
 800094a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800094c:	2302      	movs	r3, #2
 800094e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000950:	2302      	movs	r3, #2
 8000952:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4618      	mov	r0, r3
 800095a:	f001 fbdf 	bl	800211c <HAL_RCC_OscConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000964:	f000 f81c 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000968:	230f      	movs	r3, #15
 800096a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096c:	2303      	movs	r3, #3
 800096e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	2101      	movs	r1, #1
 8000980:	4618      	mov	r0, r3
 8000982:	f001 ffdf 	bl	8002944 <HAL_RCC_ClockConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800098c:	f000 f808 	bl	80009a0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000990:	f002 fbf2 	bl	8003178 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000994:	bf00      	nop
 8000996:	3758      	adds	r7, #88	@ 0x58
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40021000 	.word	0x40021000

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <Error_Handler+0x8>

080009ac <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <MX_RNG_Init+0x20>)
 80009b2:	4a07      	ldr	r2, [pc, #28]	@ (80009d0 <MX_RNG_Init+0x24>)
 80009b4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	@ (80009cc <MX_RNG_Init+0x20>)
 80009b8:	f002 fce0 	bl	800337c <HAL_RNG_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80009c2:	f7ff ffed 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200000c4 	.word	0x200000c4
 80009d0:	50060800 	.word	0x50060800

080009d4 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b098      	sub	sp, #96	@ 0x60
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	2254      	movs	r2, #84	@ 0x54
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f004 f9b3 	bl	8004d50 <memset>
  if(rngHandle->Instance==RNG)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a19      	ldr	r2, [pc, #100]	@ (8000a54 <HAL_RNG_MspInit+0x80>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d12a      	bne.n	8000a4a <HAL_RNG_MspInit+0x76>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80009f4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80009f8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 80009fa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80009fe:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000a00:	2301      	movs	r3, #1
 8000a02:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a04:	2301      	movs	r3, #1
 8000a06:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000a08:	2308      	movs	r3, #8
 8000a0a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000a0c:	2307      	movs	r3, #7
 8000a0e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a10:	2302      	movs	r3, #2
 8000a12:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a14:	2302      	movs	r3, #2
 8000a16:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000a18:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	4618      	mov	r0, r3
 8000a24:	f002 f9b2 	bl	8002d8c <HAL_RCCEx_PeriphCLKConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <HAL_RNG_MspInit+0x5e>
    {
      Error_Handler();
 8000a2e:	f7ff ffb7 	bl	80009a0 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000a32:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <HAL_RNG_MspInit+0x84>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a36:	4a08      	ldr	r2, [pc, #32]	@ (8000a58 <HAL_RNG_MspInit+0x84>)
 8000a38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <HAL_RNG_MspInit+0x84>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	3760      	adds	r7, #96	@ 0x60
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	50060800 	.word	0x50060800
 8000a58:	40021000 	.word	0x40021000

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <HAL_MspInit+0x44>)
 8000a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a66:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa0 <HAL_MspInit+0x44>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa0 <HAL_MspInit+0x44>)
 8000a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	4b09      	ldr	r3, [pc, #36]	@ (8000aa0 <HAL_MspInit+0x44>)
 8000a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a7e:	4a08      	ldr	r2, [pc, #32]	@ (8000aa0 <HAL_MspInit+0x44>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a84:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a86:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <HAL_MspInit+0x44>)
 8000a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <NMI_Handler+0x4>

08000aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <MemManage_Handler+0x4>

08000abc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000acc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afa:	f000 fa71 	bl	8000fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b08:	4802      	ldr	r0, [pc, #8]	@ (8000b14 <CAN1_RX0_IRQHandler+0x10>)
 8000b0a:	f000 fdac 	bl	8001666 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000078 	.word	0x20000078

08000b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b20:	4a14      	ldr	r2, [pc, #80]	@ (8000b74 <_sbrk+0x5c>)
 8000b22:	4b15      	ldr	r3, [pc, #84]	@ (8000b78 <_sbrk+0x60>)
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b2c:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d102      	bne.n	8000b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b34:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <_sbrk+0x64>)
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <_sbrk+0x68>)
 8000b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3a:	4b10      	ldr	r3, [pc, #64]	@ (8000b7c <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d207      	bcs.n	8000b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b48:	f004 f90a 	bl	8004d60 <__errno>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	220c      	movs	r2, #12
 8000b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
 8000b56:	e009      	b.n	8000b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b58:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <_sbrk+0x64>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b5e:	4b07      	ldr	r3, [pc, #28]	@ (8000b7c <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	4a05      	ldr	r2, [pc, #20]	@ (8000b7c <_sbrk+0x64>)
 8000b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20010000 	.word	0x20010000
 8000b78:	00000400 	.word	0x00000400
 8000b7c:	200000d4 	.word	0x200000d4
 8000b80:	200002f8 	.word	0x200002f8

08000b84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b88:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <SystemInit+0x20>)
 8000b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ba4 <SystemInit+0x20>)
 8000b90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b09a      	sub	sp, #104	@ 0x68
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bae:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bbc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bc8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
 8000bd8:	615a      	str	r2, [r3, #20]
 8000bda:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	222c      	movs	r2, #44	@ 0x2c
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f004 f8b4 	bl	8004d50 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000be8:	4b43      	ldr	r3, [pc, #268]	@ (8000cf8 <MX_TIM1_Init+0x150>)
 8000bea:	4a44      	ldr	r2, [pc, #272]	@ (8000cfc <MX_TIM1_Init+0x154>)
 8000bec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000bee:	4b42      	ldr	r3, [pc, #264]	@ (8000cf8 <MX_TIM1_Init+0x150>)
 8000bf0:	220f      	movs	r2, #15
 8000bf2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf4:	4b40      	ldr	r3, [pc, #256]	@ (8000cf8 <MX_TIM1_Init+0x150>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40000-1;
 8000bfa:	4b3f      	ldr	r3, [pc, #252]	@ (8000cf8 <MX_TIM1_Init+0x150>)
 8000bfc:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8000c00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c02:	4b3d      	ldr	r3, [pc, #244]	@ (8000cf8 <MX_TIM1_Init+0x150>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c08:	4b3b      	ldr	r3, [pc, #236]	@ (8000cf8 <MX_TIM1_Init+0x150>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0e:	4b3a      	ldr	r3, [pc, #232]	@ (8000cf8 <MX_TIM1_Init+0x150>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c14:	4838      	ldr	r0, [pc, #224]	@ (8000cf8 <MX_TIM1_Init+0x150>)
 8000c16:	f002 fc5e 	bl	80034d6 <HAL_TIM_Base_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000c20:	f7ff febe 	bl	80009a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c28:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c2a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4831      	ldr	r0, [pc, #196]	@ (8000cf8 <MX_TIM1_Init+0x150>)
 8000c32:	f002 fe1d 	bl	8003870 <HAL_TIM_ConfigClockSource>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000c3c:	f7ff feb0 	bl	80009a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c40:	482d      	ldr	r0, [pc, #180]	@ (8000cf8 <MX_TIM1_Init+0x150>)
 8000c42:	f002 fc9f 	bl	8003584 <HAL_TIM_PWM_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000c4c:	f7ff fea8 	bl	80009a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c50:	2300      	movs	r3, #0
 8000c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c54:	2300      	movs	r3, #0
 8000c56:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c5c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c60:	4619      	mov	r1, r3
 8000c62:	4825      	ldr	r0, [pc, #148]	@ (8000cf8 <MX_TIM1_Init+0x150>)
 8000c64:	f003 fa56 	bl	8004114 <HAL_TIMEx_MasterConfigSynchronization>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000c6e:	f7ff fe97 	bl	80009a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c72:	2360      	movs	r3, #96	@ 0x60
 8000c74:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c86:	2300      	movs	r3, #0
 8000c88:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c8e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c92:	2200      	movs	r2, #0
 8000c94:	4619      	mov	r1, r3
 8000c96:	4818      	ldr	r0, [pc, #96]	@ (8000cf8 <MX_TIM1_Init+0x150>)
 8000c98:	f002 fcd6 	bl	8003648 <HAL_TIM_PWM_ConfigChannel>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000ca2:	f7ff fe7d 	bl	80009a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000caa:	2300      	movs	r3, #0
 8000cac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cbe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000cc8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4807      	ldr	r0, [pc, #28]	@ (8000cf8 <MX_TIM1_Init+0x150>)
 8000cdc:	f003 fa80 	bl	80041e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000ce6:	f7ff fe5b 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cea:	4803      	ldr	r0, [pc, #12]	@ (8000cf8 <MX_TIM1_Init+0x150>)
 8000cec:	f000 f828 	bl	8000d40 <HAL_TIM_MspPostInit>

}
 8000cf0:	bf00      	nop
 8000cf2:	3768      	adds	r7, #104	@ 0x68
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	200000d8 	.word	0x200000d8
 8000cfc:	40012c00 	.word	0x40012c00

08000d00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d38 <HAL_TIM_Base_MspInit+0x38>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d10b      	bne.n	8000d2a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d12:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <HAL_TIM_Base_MspInit+0x3c>)
 8000d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d16:	4a09      	ldr	r2, [pc, #36]	@ (8000d3c <HAL_TIM_Base_MspInit+0x3c>)
 8000d18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d1e:	4b07      	ldr	r3, [pc, #28]	@ (8000d3c <HAL_TIM_Base_MspInit+0x3c>)
 8000d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	40012c00 	.word	0x40012c00
 8000d3c:	40021000 	.word	0x40021000

08000d40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a12      	ldr	r2, [pc, #72]	@ (8000da8 <HAL_TIM_MspPostInit+0x68>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d11d      	bne.n	8000d9e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <HAL_TIM_MspPostInit+0x6c>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d66:	4a11      	ldr	r2, [pc, #68]	@ (8000dac <HAL_TIM_MspPostInit+0x6c>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <HAL_TIM_MspPostInit+0x6c>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	4619      	mov	r1, r3
 8000d96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d9a:	f000 ffaf 	bl	8001cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d9e:	bf00      	nop
 8000da0:	3720      	adds	r7, #32
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40012c00 	.word	0x40012c00
 8000dac:	40021000 	.word	0x40021000

08000db0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000db4:	4b14      	ldr	r3, [pc, #80]	@ (8000e08 <MX_USART2_UART_Init+0x58>)
 8000db6:	4a15      	ldr	r2, [pc, #84]	@ (8000e0c <MX_USART2_UART_Init+0x5c>)
 8000db8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dba:	4b13      	ldr	r3, [pc, #76]	@ (8000e08 <MX_USART2_UART_Init+0x58>)
 8000dbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <MX_USART2_UART_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e08 <MX_USART2_UART_Init+0x58>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	@ (8000e08 <MX_USART2_UART_Init+0x58>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <MX_USART2_UART_Init+0x58>)
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	@ (8000e08 <MX_USART2_UART_Init+0x58>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de0:	4b09      	ldr	r3, [pc, #36]	@ (8000e08 <MX_USART2_UART_Init+0x58>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000de6:	4b08      	ldr	r3, [pc, #32]	@ (8000e08 <MX_USART2_UART_Init+0x58>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dec:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <MX_USART2_UART_Init+0x58>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000df2:	4805      	ldr	r0, [pc, #20]	@ (8000e08 <MX_USART2_UART_Init+0x58>)
 8000df4:	f003 fa6c 	bl	80042d0 <HAL_UART_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000dfe:	f7ff fdcf 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000124 	.word	0x20000124
 8000e0c:	40004400 	.word	0x40004400

08000e10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b09e      	sub	sp, #120	@ 0x78
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	2254      	movs	r2, #84	@ 0x54
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f003 ff8d 	bl	8004d50 <memset>
  if(uartHandle->Instance==USART2)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a28      	ldr	r2, [pc, #160]	@ (8000edc <HAL_UART_MspInit+0xcc>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d148      	bne.n	8000ed2 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e40:	2302      	movs	r3, #2
 8000e42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f001 ff9d 	bl	8002d8c <HAL_RCCEx_PeriphCLKConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e58:	f7ff fda2 	bl	80009a0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e5c:	4b20      	ldr	r3, [pc, #128]	@ (8000ee0 <HAL_UART_MspInit+0xd0>)
 8000e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e60:	4a1f      	ldr	r2, [pc, #124]	@ (8000ee0 <HAL_UART_MspInit+0xd0>)
 8000e62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e66:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e68:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee0 <HAL_UART_MspInit+0xd0>)
 8000e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee0 <HAL_UART_MspInit+0xd0>)
 8000e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e78:	4a19      	ldr	r2, [pc, #100]	@ (8000ee0 <HAL_UART_MspInit+0xd0>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e80:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <HAL_UART_MspInit+0xd0>)
 8000e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e9c:	2307      	movs	r3, #7
 8000e9e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eaa:	f000 ff27 	bl	8001cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000eae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000eb2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ece:	f000 ff15 	bl	8001cfc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	3778      	adds	r7, #120	@ 0x78
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40004400 	.word	0x40004400
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <Reset_Handler>:
 8000ee4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f1c <LoopForever+0x2>
 8000ee8:	f7ff fe4c 	bl	8000b84 <SystemInit>
 8000eec:	480c      	ldr	r0, [pc, #48]	@ (8000f20 <LoopForever+0x6>)
 8000eee:	490d      	ldr	r1, [pc, #52]	@ (8000f24 <LoopForever+0xa>)
 8000ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8000f28 <LoopForever+0xe>)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e002      	b.n	8000efc <LoopCopyDataInit>

08000ef6 <CopyDataInit>:
 8000ef6:	58d4      	ldr	r4, [r2, r3]
 8000ef8:	50c4      	str	r4, [r0, r3]
 8000efa:	3304      	adds	r3, #4

08000efc <LoopCopyDataInit>:
 8000efc:	18c4      	adds	r4, r0, r3
 8000efe:	428c      	cmp	r4, r1
 8000f00:	d3f9      	bcc.n	8000ef6 <CopyDataInit>
 8000f02:	4a0a      	ldr	r2, [pc, #40]	@ (8000f2c <LoopForever+0x12>)
 8000f04:	4c0a      	ldr	r4, [pc, #40]	@ (8000f30 <LoopForever+0x16>)
 8000f06:	2300      	movs	r3, #0
 8000f08:	e001      	b.n	8000f0e <LoopFillZerobss>

08000f0a <FillZerobss>:
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	3204      	adds	r2, #4

08000f0e <LoopFillZerobss>:
 8000f0e:	42a2      	cmp	r2, r4
 8000f10:	d3fb      	bcc.n	8000f0a <FillZerobss>
 8000f12:	f003 ff2b 	bl	8004d6c <__libc_init_array>
 8000f16:	f7ff fc2d 	bl	8000774 <main>

08000f1a <LoopForever>:
 8000f1a:	e7fe      	b.n	8000f1a <LoopForever>
 8000f1c:	20010000 	.word	0x20010000
 8000f20:	20000000 	.word	0x20000000
 8000f24:	2000005c 	.word	0x2000005c
 8000f28:	08005718 	.word	0x08005718
 8000f2c:	2000005c 	.word	0x2000005c
 8000f30:	200002f8 	.word	0x200002f8

08000f34 <ADC1_IRQHandler>:
 8000f34:	e7fe      	b.n	8000f34 <ADC1_IRQHandler>

08000f36 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f40:	2003      	movs	r0, #3
 8000f42:	f000 fe99 	bl	8001c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f46:	2000      	movs	r0, #0
 8000f48:	f000 f80e 	bl	8000f68 <HAL_InitTick>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d002      	beq.n	8000f58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	71fb      	strb	r3, [r7, #7]
 8000f56:	e001      	b.n	8000f5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f58:	f7ff fd80 	bl	8000a5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f70:	2300      	movs	r3, #0
 8000f72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f74:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <HAL_InitTick+0x6c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d023      	beq.n	8000fc4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f7c:	4b16      	ldr	r3, [pc, #88]	@ (8000fd8 <HAL_InitTick+0x70>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <HAL_InitTick+0x6c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 fea5 	bl	8001ce2 <HAL_SYSTICK_Config>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10f      	bne.n	8000fbe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d809      	bhi.n	8000fb8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 fe6f 	bl	8001c8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <HAL_InitTick+0x74>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	e007      	b.n	8000fc8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
 8000fbc:	e004      	b.n	8000fc8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	73fb      	strb	r3, [r7, #15]
 8000fc2:	e001      	b.n	8000fc8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	20000004 	.word	0x20000004

08000fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <HAL_IncTick+0x20>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <HAL_IncTick+0x24>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	4a04      	ldr	r2, [pc, #16]	@ (8001004 <HAL_IncTick+0x24>)
 8000ff2:	6013      	str	r3, [r2, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000008 	.word	0x20000008
 8001004:	200001ac 	.word	0x200001ac

08001008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return uwTick;
 800100c:	4b03      	ldr	r3, [pc, #12]	@ (800101c <HAL_GetTick+0x14>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	200001ac 	.word	0x200001ac

08001020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001028:	f7ff ffee 	bl	8001008 <HAL_GetTick>
 800102c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001038:	d005      	beq.n	8001046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800103a:	4b0a      	ldr	r3, [pc, #40]	@ (8001064 <HAL_Delay+0x44>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001046:	bf00      	nop
 8001048:	f7ff ffde 	bl	8001008 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	429a      	cmp	r2, r3
 8001056:	d8f7      	bhi.n	8001048 <HAL_Delay+0x28>
  {
  }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008

08001068 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e0ed      	b.n	8001256 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d102      	bne.n	800108c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff fade 	bl	8000648 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f042 0201 	orr.w	r2, r2, #1
 800109a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800109c:	f7ff ffb4 	bl	8001008 <HAL_GetTick>
 80010a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010a2:	e012      	b.n	80010ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010a4:	f7ff ffb0 	bl	8001008 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b0a      	cmp	r3, #10
 80010b0:	d90b      	bls.n	80010ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2205      	movs	r2, #5
 80010c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e0c5      	b.n	8001256 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0e5      	beq.n	80010a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0202 	bic.w	r2, r2, #2
 80010e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010e8:	f7ff ff8e 	bl	8001008 <HAL_GetTick>
 80010ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010ee:	e012      	b.n	8001116 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010f0:	f7ff ff8a 	bl	8001008 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b0a      	cmp	r3, #10
 80010fc:	d90b      	bls.n	8001116 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001102:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2205      	movs	r2, #5
 800110e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e09f      	b.n	8001256 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1e5      	bne.n	80010f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	7e1b      	ldrb	r3, [r3, #24]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d108      	bne.n	800113e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	e007      	b.n	800114e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800114c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	7e5b      	ldrb	r3, [r3, #25]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d108      	bne.n	8001168 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	e007      	b.n	8001178 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001176:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7e9b      	ldrb	r3, [r3, #26]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d108      	bne.n	8001192 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 0220 	orr.w	r2, r2, #32
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	e007      	b.n	80011a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f022 0220 	bic.w	r2, r2, #32
 80011a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	7edb      	ldrb	r3, [r3, #27]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d108      	bne.n	80011bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 0210 	bic.w	r2, r2, #16
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	e007      	b.n	80011cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0210 	orr.w	r2, r2, #16
 80011ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	7f1b      	ldrb	r3, [r3, #28]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d108      	bne.n	80011e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0208 	orr.w	r2, r2, #8
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	e007      	b.n	80011f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 0208 	bic.w	r2, r2, #8
 80011f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	7f5b      	ldrb	r3, [r3, #29]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d108      	bne.n	8001210 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f042 0204 	orr.w	r2, r2, #4
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	e007      	b.n	8001220 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 0204 	bic.w	r2, r2, #4
 800121e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	431a      	orrs	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	ea42 0103 	orr.w	r1, r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	1e5a      	subs	r2, r3, #1
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2201      	movs	r2, #1
 8001250:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800125e:	b480      	push	{r7}
 8001260:	b087      	sub	sp, #28
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001274:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001276:	7cfb      	ldrb	r3, [r7, #19]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d003      	beq.n	8001284 <HAL_CAN_ConfigFilter+0x26>
 800127c:	7cfb      	ldrb	r3, [r7, #19]
 800127e:	2b02      	cmp	r3, #2
 8001280:	f040 80aa 	bne.w	80013d8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800128a:	f043 0201 	orr.w	r2, r3, #1
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	f003 031f 	and.w	r3, r3, #31
 800129c:	2201      	movs	r2, #1
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	401a      	ands	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d123      	bne.n	8001306 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	401a      	ands	r2, r3
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3248      	adds	r2, #72	@ 0x48
 80012e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012fc:	6979      	ldr	r1, [r7, #20]
 80012fe:	3348      	adds	r3, #72	@ 0x48
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	440b      	add	r3, r1
 8001304:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d122      	bne.n	8001354 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	431a      	orrs	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800132e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	3248      	adds	r2, #72	@ 0x48
 8001334:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001348:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800134a:	6979      	ldr	r1, [r7, #20]
 800134c:	3348      	adds	r3, #72	@ 0x48
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	440b      	add	r3, r1
 8001352:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d109      	bne.n	8001370 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	43db      	mvns	r3, r3
 8001366:	401a      	ands	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800136e:	e007      	b.n	8001380 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	431a      	orrs	r2, r3
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d109      	bne.n	800139c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	43db      	mvns	r3, r3
 8001392:	401a      	ands	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800139a:	e007      	b.n	80013ac <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	431a      	orrs	r2, r3
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d107      	bne.n	80013c4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	431a      	orrs	r2, r3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80013ca:	f023 0201 	bic.w	r2, r3, #1
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	e006      	b.n	80013e6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013dc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
  }
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	371c      	adds	r7, #28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b084      	sub	sp, #16
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b01      	cmp	r3, #1
 8001404:	d12e      	bne.n	8001464 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2202      	movs	r2, #2
 800140a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f022 0201 	bic.w	r2, r2, #1
 800141c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800141e:	f7ff fdf3 	bl	8001008 <HAL_GetTick>
 8001422:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001424:	e012      	b.n	800144c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001426:	f7ff fdef 	bl	8001008 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b0a      	cmp	r3, #10
 8001432:	d90b      	bls.n	800144c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001438:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2205      	movs	r2, #5
 8001444:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e012      	b.n	8001472 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1e5      	bne.n	8001426 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001460:	2300      	movs	r3, #0
 8001462:	e006      	b.n	8001472 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001468:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
  }
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800147a:	b480      	push	{r7}
 800147c:	b089      	sub	sp, #36	@ 0x24
 800147e:	af00      	add	r7, sp, #0
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800148e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001498:	7ffb      	ldrb	r3, [r7, #31]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d003      	beq.n	80014a6 <HAL_CAN_AddTxMessage+0x2c>
 800149e:	7ffb      	ldrb	r3, [r7, #31]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	f040 80ad 	bne.w	8001600 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10a      	bne.n	80014c6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d105      	bne.n	80014c6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 8095 	beq.w	80015f0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	0e1b      	lsrs	r3, r3, #24
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80014d0:	2201      	movs	r2, #1
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	409a      	lsls	r2, r3
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10d      	bne.n	80014fe <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014ec:	68f9      	ldr	r1, [r7, #12]
 80014ee:	6809      	ldr	r1, [r1, #0]
 80014f0:	431a      	orrs	r2, r3
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3318      	adds	r3, #24
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	440b      	add	r3, r1
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	e00f      	b.n	800151e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001508:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800150e:	68f9      	ldr	r1, [r7, #12]
 8001510:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001512:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	3318      	adds	r3, #24
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	440b      	add	r3, r1
 800151c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6819      	ldr	r1, [r3, #0]
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	691a      	ldr	r2, [r3, #16]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	3318      	adds	r3, #24
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	440b      	add	r3, r1
 800152e:	3304      	adds	r3, #4
 8001530:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	7d1b      	ldrb	r3, [r3, #20]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d111      	bne.n	800155e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3318      	adds	r3, #24
 8001542:	011b      	lsls	r3, r3, #4
 8001544:	4413      	add	r3, r2
 8001546:	3304      	adds	r3, #4
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	6811      	ldr	r1, [r2, #0]
 800154e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	3318      	adds	r3, #24
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	440b      	add	r3, r1
 800155a:	3304      	adds	r3, #4
 800155c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3307      	adds	r3, #7
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	061a      	lsls	r2, r3, #24
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3306      	adds	r3, #6
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	041b      	lsls	r3, r3, #16
 800156e:	431a      	orrs	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3305      	adds	r3, #5
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	4313      	orrs	r3, r2
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	3204      	adds	r2, #4
 800157e:	7812      	ldrb	r2, [r2, #0]
 8001580:	4610      	mov	r0, r2
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	6811      	ldr	r1, [r2, #0]
 8001586:	ea43 0200 	orr.w	r2, r3, r0
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	011b      	lsls	r3, r3, #4
 800158e:	440b      	add	r3, r1
 8001590:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001594:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	3303      	adds	r3, #3
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	061a      	lsls	r2, r3, #24
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3302      	adds	r3, #2
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	041b      	lsls	r3, r3, #16
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3301      	adds	r3, #1
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	4313      	orrs	r3, r2
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	7812      	ldrb	r2, [r2, #0]
 80015b6:	4610      	mov	r0, r2
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	6811      	ldr	r1, [r2, #0]
 80015bc:	ea43 0200 	orr.w	r2, r3, r0
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	011b      	lsls	r3, r3, #4
 80015c4:	440b      	add	r3, r1
 80015c6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80015ca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	3318      	adds	r3, #24
 80015d4:	011b      	lsls	r3, r3, #4
 80015d6:	4413      	add	r3, r2
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	6811      	ldr	r1, [r2, #0]
 80015de:	f043 0201 	orr.w	r2, r3, #1
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	3318      	adds	r3, #24
 80015e6:	011b      	lsls	r3, r3, #4
 80015e8:	440b      	add	r3, r1
 80015ea:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	e00e      	b.n	800160e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e006      	b.n	800160e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001604:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
  }
}
 800160e:	4618      	mov	r0, r3
 8001610:	3724      	adds	r7, #36	@ 0x24
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800161a:	b480      	push	{r7}
 800161c:	b085      	sub	sp, #20
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 3020 	ldrb.w	r3, [r3, #32]
 800162a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d002      	beq.n	8001638 <HAL_CAN_ActivateNotification+0x1e>
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d109      	bne.n	800164c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6959      	ldr	r1, [r3, #20]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001648:	2300      	movs	r3, #0
 800164a:	e006      	b.n	800165a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001650:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
  }
}
 800165a:	4618      	mov	r0, r3
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b08a      	sub	sp, #40	@ 0x28
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800166e:	2300      	movs	r3, #0
 8001670:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80016a2:	6a3b      	ldr	r3, [r7, #32]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d07c      	beq.n	80017a6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d023      	beq.n	80016fe <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2201      	movs	r2, #1
 80016bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 f983 	bl	80019d4 <HAL_CAN_TxMailbox0CompleteCallback>
 80016ce:	e016      	b.n	80016fe <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d004      	beq.n	80016e4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80016da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80016e2:	e00c      	b.n	80016fe <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d004      	beq.n	80016f8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80016ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80016f6:	e002      	b.n	80016fe <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 f989 	bl	8001a10 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001704:	2b00      	cmp	r3, #0
 8001706:	d024      	beq.n	8001752 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001710:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 f963 	bl	80019e8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001722:	e016      	b.n	8001752 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800172a:	2b00      	cmp	r3, #0
 800172c:	d004      	beq.n	8001738 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800172e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001730:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001734:	627b      	str	r3, [r7, #36]	@ 0x24
 8001736:	e00c      	b.n	8001752 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800173e:	2b00      	cmp	r3, #0
 8001740:	d004      	beq.n	800174c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001744:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001748:	627b      	str	r3, [r7, #36]	@ 0x24
 800174a:	e002      	b.n	8001752 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 f969 	bl	8001a24 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d024      	beq.n	80017a6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001764:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 f943 	bl	80019fc <HAL_CAN_TxMailbox2CompleteCallback>
 8001776:	e016      	b.n	80017a6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d004      	beq.n	800178c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001784:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001788:	627b      	str	r3, [r7, #36]	@ 0x24
 800178a:	e00c      	b.n	80017a6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d004      	beq.n	80017a0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800179c:	627b      	str	r3, [r7, #36]	@ 0x24
 800179e:	e002      	b.n	80017a6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 f949 	bl	8001a38 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80017a6:	6a3b      	ldr	r3, [r7, #32]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00c      	beq.n	80017ca <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f003 0310 	and.w	r3, r3, #16
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d007      	beq.n	80017ca <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80017ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2210      	movs	r2, #16
 80017c8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d00b      	beq.n	80017ec <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d006      	beq.n	80017ec <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2208      	movs	r2, #8
 80017e4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f93a 	bl	8001a60 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80017ec:	6a3b      	ldr	r3, [r7, #32]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d009      	beq.n	800180a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	2b00      	cmp	r3, #0
 8001802:	d002      	beq.n	800180a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 f921 	bl	8001a4c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001810:	2b00      	cmp	r3, #0
 8001812:	d00c      	beq.n	800182e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	f003 0310 	and.w	r3, r3, #16
 800181a:	2b00      	cmp	r3, #0
 800181c:	d007      	beq.n	800182e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800181e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001820:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001824:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2210      	movs	r2, #16
 800182c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	f003 0320 	and.w	r3, r3, #32
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00b      	beq.n	8001850 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b00      	cmp	r3, #0
 8001840:	d006      	beq.n	8001850 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2208      	movs	r2, #8
 8001848:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f91c 	bl	8001a88 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001850:	6a3b      	ldr	r3, [r7, #32]
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	2b00      	cmp	r3, #0
 8001858:	d009      	beq.n	800186e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	2b00      	cmp	r3, #0
 8001866:	d002      	beq.n	800186e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 f903 	bl	8001a74 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800186e:	6a3b      	ldr	r3, [r7, #32]
 8001870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00b      	beq.n	8001890 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f003 0310 	and.w	r3, r3, #16
 800187e:	2b00      	cmp	r3, #0
 8001880:	d006      	beq.n	8001890 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2210      	movs	r2, #16
 8001888:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f906 	bl	8001a9c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00b      	beq.n	80018b2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	f003 0308 	and.w	r3, r3, #8
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d006      	beq.n	80018b2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2208      	movs	r2, #8
 80018aa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f8ff 	bl	8001ab0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d07b      	beq.n	80019b4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d072      	beq.n	80019ac <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d008      	beq.n	80018e2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80018da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80018f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f8:	f043 0302 	orr.w	r3, r3, #2
 80018fc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001904:	2b00      	cmp	r3, #0
 8001906:	d008      	beq.n	800191a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800191a:	6a3b      	ldr	r3, [r7, #32]
 800191c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001920:	2b00      	cmp	r3, #0
 8001922:	d043      	beq.n	80019ac <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800192a:	2b00      	cmp	r3, #0
 800192c:	d03e      	beq.n	80019ac <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001934:	2b60      	cmp	r3, #96	@ 0x60
 8001936:	d02b      	beq.n	8001990 <HAL_CAN_IRQHandler+0x32a>
 8001938:	2b60      	cmp	r3, #96	@ 0x60
 800193a:	d82e      	bhi.n	800199a <HAL_CAN_IRQHandler+0x334>
 800193c:	2b50      	cmp	r3, #80	@ 0x50
 800193e:	d022      	beq.n	8001986 <HAL_CAN_IRQHandler+0x320>
 8001940:	2b50      	cmp	r3, #80	@ 0x50
 8001942:	d82a      	bhi.n	800199a <HAL_CAN_IRQHandler+0x334>
 8001944:	2b40      	cmp	r3, #64	@ 0x40
 8001946:	d019      	beq.n	800197c <HAL_CAN_IRQHandler+0x316>
 8001948:	2b40      	cmp	r3, #64	@ 0x40
 800194a:	d826      	bhi.n	800199a <HAL_CAN_IRQHandler+0x334>
 800194c:	2b30      	cmp	r3, #48	@ 0x30
 800194e:	d010      	beq.n	8001972 <HAL_CAN_IRQHandler+0x30c>
 8001950:	2b30      	cmp	r3, #48	@ 0x30
 8001952:	d822      	bhi.n	800199a <HAL_CAN_IRQHandler+0x334>
 8001954:	2b10      	cmp	r3, #16
 8001956:	d002      	beq.n	800195e <HAL_CAN_IRQHandler+0x2f8>
 8001958:	2b20      	cmp	r3, #32
 800195a:	d005      	beq.n	8001968 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800195c:	e01d      	b.n	800199a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001960:	f043 0308 	orr.w	r3, r3, #8
 8001964:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001966:	e019      	b.n	800199c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196a:	f043 0310 	orr.w	r3, r3, #16
 800196e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001970:	e014      	b.n	800199c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001974:	f043 0320 	orr.w	r3, r3, #32
 8001978:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800197a:	e00f      	b.n	800199c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800197c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001982:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001984:	e00a      	b.n	800199c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800198c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800198e:	e005      	b.n	800199c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001992:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001996:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001998:	e000      	b.n	800199c <HAL_CAN_IRQHandler+0x336>
            break;
 800199a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	699a      	ldr	r2, [r3, #24]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80019aa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2204      	movs	r2, #4
 80019b2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80019b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d008      	beq.n	80019cc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c0:	431a      	orrs	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f87c 	bl	8001ac4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80019cc:	bf00      	nop
 80019ce:	3728      	adds	r7, #40	@ 0x28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001af4:	4013      	ands	r3, r2
 8001af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0a:	4a04      	ldr	r2, [pc, #16]	@ (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	60d3      	str	r3, [r2, #12]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b24:	4b04      	ldr	r3, [pc, #16]	@ (8001b38 <__NVIC_GetPriorityGrouping+0x18>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	f003 0307 	and.w	r3, r3, #7
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	db0b      	blt.n	8001b66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	f003 021f 	and.w	r2, r3, #31
 8001b54:	4907      	ldr	r1, [pc, #28]	@ (8001b74 <__NVIC_EnableIRQ+0x38>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000e100 	.word	0xe000e100

08001b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	6039      	str	r1, [r7, #0]
 8001b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	db0a      	blt.n	8001ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	490c      	ldr	r1, [pc, #48]	@ (8001bc4 <__NVIC_SetPriority+0x4c>)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	0112      	lsls	r2, r2, #4
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba0:	e00a      	b.n	8001bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	4908      	ldr	r1, [pc, #32]	@ (8001bc8 <__NVIC_SetPriority+0x50>)
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	3b04      	subs	r3, #4
 8001bb0:	0112      	lsls	r2, r2, #4
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	761a      	strb	r2, [r3, #24]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000e100 	.word	0xe000e100
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b089      	sub	sp, #36	@ 0x24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f1c3 0307 	rsb	r3, r3, #7
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	bf28      	it	cs
 8001bea:	2304      	movcs	r3, #4
 8001bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	2b06      	cmp	r3, #6
 8001bf4:	d902      	bls.n	8001bfc <NVIC_EncodePriority+0x30>
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3b03      	subs	r3, #3
 8001bfa:	e000      	b.n	8001bfe <NVIC_EncodePriority+0x32>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	f04f 32ff 	mov.w	r2, #4294967295
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43da      	mvns	r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	401a      	ands	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c14:	f04f 31ff 	mov.w	r1, #4294967295
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1e:	43d9      	mvns	r1, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	4313      	orrs	r3, r2
         );
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3724      	adds	r7, #36	@ 0x24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c44:	d301      	bcc.n	8001c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c46:	2301      	movs	r3, #1
 8001c48:	e00f      	b.n	8001c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c74 <SysTick_Config+0x40>)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c52:	210f      	movs	r1, #15
 8001c54:	f04f 30ff 	mov.w	r0, #4294967295
 8001c58:	f7ff ff8e 	bl	8001b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c5c:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <SysTick_Config+0x40>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c62:	4b04      	ldr	r3, [pc, #16]	@ (8001c74 <SysTick_Config+0x40>)
 8001c64:	2207      	movs	r2, #7
 8001c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	e000e010 	.word	0xe000e010

08001c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff ff29 	bl	8001ad8 <__NVIC_SetPriorityGrouping>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b086      	sub	sp, #24
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	4603      	mov	r3, r0
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca0:	f7ff ff3e 	bl	8001b20 <__NVIC_GetPriorityGrouping>
 8001ca4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	68b9      	ldr	r1, [r7, #8]
 8001caa:	6978      	ldr	r0, [r7, #20]
 8001cac:	f7ff ff8e 	bl	8001bcc <NVIC_EncodePriority>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff5d 	bl	8001b78 <__NVIC_SetPriority>
}
 8001cbe:	bf00      	nop
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff31 	bl	8001b3c <__NVIC_EnableIRQ>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff ffa2 	bl	8001c34 <SysTick_Config>
 8001cf0:	4603      	mov	r3, r0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b087      	sub	sp, #28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d0a:	e148      	b.n	8001f9e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	2101      	movs	r1, #1
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 813a 	beq.w	8001f98 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d005      	beq.n	8001d3c <HAL_GPIO_Init+0x40>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d130      	bne.n	8001d9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d72:	2201      	movs	r2, #1
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	091b      	lsrs	r3, r3, #4
 8001d88:	f003 0201 	and.w	r2, r3, #1
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d017      	beq.n	8001dda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	2203      	movs	r2, #3
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d123      	bne.n	8001e2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	08da      	lsrs	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3208      	adds	r2, #8
 8001dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	220f      	movs	r2, #15
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43db      	mvns	r3, r3
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	4013      	ands	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	691a      	ldr	r2, [r3, #16]
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	08da      	lsrs	r2, r3, #3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3208      	adds	r2, #8
 8001e28:	6939      	ldr	r1, [r7, #16]
 8001e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	2203      	movs	r2, #3
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 0203 	and.w	r2, r3, #3
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 8094 	beq.w	8001f98 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e70:	4b52      	ldr	r3, [pc, #328]	@ (8001fbc <HAL_GPIO_Init+0x2c0>)
 8001e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e74:	4a51      	ldr	r2, [pc, #324]	@ (8001fbc <HAL_GPIO_Init+0x2c0>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e7c:	4b4f      	ldr	r3, [pc, #316]	@ (8001fbc <HAL_GPIO_Init+0x2c0>)
 8001e7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e88:	4a4d      	ldr	r2, [pc, #308]	@ (8001fc0 <HAL_GPIO_Init+0x2c4>)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	089b      	lsrs	r3, r3, #2
 8001e8e:	3302      	adds	r3, #2
 8001e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	220f      	movs	r2, #15
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001eb2:	d00d      	beq.n	8001ed0 <HAL_GPIO_Init+0x1d4>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a43      	ldr	r2, [pc, #268]	@ (8001fc4 <HAL_GPIO_Init+0x2c8>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d007      	beq.n	8001ecc <HAL_GPIO_Init+0x1d0>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a42      	ldr	r2, [pc, #264]	@ (8001fc8 <HAL_GPIO_Init+0x2cc>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d101      	bne.n	8001ec8 <HAL_GPIO_Init+0x1cc>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e004      	b.n	8001ed2 <HAL_GPIO_Init+0x1d6>
 8001ec8:	2307      	movs	r3, #7
 8001eca:	e002      	b.n	8001ed2 <HAL_GPIO_Init+0x1d6>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <HAL_GPIO_Init+0x1d6>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	f002 0203 	and.w	r2, r2, #3
 8001ed8:	0092      	lsls	r2, r2, #2
 8001eda:	4093      	lsls	r3, r2
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ee2:	4937      	ldr	r1, [pc, #220]	@ (8001fc0 <HAL_GPIO_Init+0x2c4>)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	089b      	lsrs	r3, r3, #2
 8001ee8:	3302      	adds	r3, #2
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ef0:	4b36      	ldr	r3, [pc, #216]	@ (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f14:	4a2d      	ldr	r2, [pc, #180]	@ (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	43db      	mvns	r3, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f3e:	4a23      	ldr	r2, [pc, #140]	@ (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f44:	4b21      	ldr	r3, [pc, #132]	@ (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4013      	ands	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f68:	4a18      	ldr	r2, [pc, #96]	@ (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f6e:	4b17      	ldr	r3, [pc, #92]	@ (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	43db      	mvns	r3, r3
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f92:	4a0e      	ldr	r2, [pc, #56]	@ (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f47f aeaf 	bne.w	8001d0c <HAL_GPIO_Init+0x10>
  }
}
 8001fae:	bf00      	nop
 8001fb0:	bf00      	nop
 8001fb2:	371c      	adds	r7, #28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40010000 	.word	0x40010000
 8001fc4:	48000400 	.word	0x48000400
 8001fc8:	48000800 	.word	0x48000800
 8001fcc:	40010400 	.word	0x40010400

08001fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fe0:	787b      	ldrb	r3, [r7, #1]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fe6:	887a      	ldrh	r2, [r7, #2]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fec:	e002      	b.n	8001ff4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fee:	887a      	ldrh	r2, [r7, #2]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002012:	887a      	ldrh	r2, [r7, #2]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4013      	ands	r3, r2
 8002018:	041a      	lsls	r2, r3, #16
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	43d9      	mvns	r1, r3
 800201e:	887b      	ldrh	r3, [r7, #2]
 8002020:	400b      	ands	r3, r1
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	619a      	str	r2, [r3, #24]
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002038:	4b05      	ldr	r3, [pc, #20]	@ (8002050 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a04      	ldr	r2, [pc, #16]	@ (8002050 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800203e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002042:	6013      	str	r3, [r2, #0]
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40007000 	.word	0x40007000

08002054 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002058:	4b04      	ldr	r3, [pc, #16]	@ (800206c <HAL_PWREx_GetVoltageRange+0x18>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002060:	4618      	mov	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40007000 	.word	0x40007000

08002070 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800207e:	d130      	bne.n	80020e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002080:	4b23      	ldr	r3, [pc, #140]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800208c:	d038      	beq.n	8002100 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800208e:	4b20      	ldr	r3, [pc, #128]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002096:	4a1e      	ldr	r2, [pc, #120]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002098:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800209c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800209e:	4b1d      	ldr	r3, [pc, #116]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2232      	movs	r2, #50	@ 0x32
 80020a4:	fb02 f303 	mul.w	r3, r2, r3
 80020a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002118 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80020aa:	fba2 2303 	umull	r2, r3, r2, r3
 80020ae:	0c9b      	lsrs	r3, r3, #18
 80020b0:	3301      	adds	r3, #1
 80020b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020b4:	e002      	b.n	80020bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	3b01      	subs	r3, #1
 80020ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020bc:	4b14      	ldr	r3, [pc, #80]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020c8:	d102      	bne.n	80020d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f2      	bne.n	80020b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020dc:	d110      	bne.n	8002100 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e00f      	b.n	8002102 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ee:	d007      	beq.n	8002100 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020f0:	4b07      	ldr	r3, [pc, #28]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020f8:	4a05      	ldr	r2, [pc, #20]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40007000 	.word	0x40007000
 8002114:	20000000 	.word	0x20000000
 8002118:	431bde83 	.word	0x431bde83

0800211c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d102      	bne.n	8002130 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	f000 bc02 	b.w	8002934 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002130:	4b96      	ldr	r3, [pc, #600]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 030c 	and.w	r3, r3, #12
 8002138:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800213a:	4b94      	ldr	r3, [pc, #592]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0310 	and.w	r3, r3, #16
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 80e4 	beq.w	800231a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d007      	beq.n	8002168 <HAL_RCC_OscConfig+0x4c>
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	2b0c      	cmp	r3, #12
 800215c:	f040 808b 	bne.w	8002276 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	2b01      	cmp	r3, #1
 8002164:	f040 8087 	bne.w	8002276 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002168:	4b88      	ldr	r3, [pc, #544]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <HAL_RCC_OscConfig+0x64>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e3d9      	b.n	8002934 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a1a      	ldr	r2, [r3, #32]
 8002184:	4b81      	ldr	r3, [pc, #516]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	2b00      	cmp	r3, #0
 800218e:	d004      	beq.n	800219a <HAL_RCC_OscConfig+0x7e>
 8002190:	4b7e      	ldr	r3, [pc, #504]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002198:	e005      	b.n	80021a6 <HAL_RCC_OscConfig+0x8a>
 800219a:	4b7c      	ldr	r3, [pc, #496]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 800219c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021a0:	091b      	lsrs	r3, r3, #4
 80021a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d223      	bcs.n	80021f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 fd8c 	bl	8002ccc <RCC_SetFlashLatencyFromMSIRange>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e3ba      	b.n	8002934 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021be:	4b73      	ldr	r3, [pc, #460]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a72      	ldr	r2, [pc, #456]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 80021c4:	f043 0308 	orr.w	r3, r3, #8
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b70      	ldr	r3, [pc, #448]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	496d      	ldr	r1, [pc, #436]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021dc:	4b6b      	ldr	r3, [pc, #428]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	4968      	ldr	r1, [pc, #416]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
 80021f0:	e025      	b.n	800223e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021f2:	4b66      	ldr	r3, [pc, #408]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a65      	ldr	r2, [pc, #404]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 80021f8:	f043 0308 	orr.w	r3, r3, #8
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	4b63      	ldr	r3, [pc, #396]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	4960      	ldr	r1, [pc, #384]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 800220c:	4313      	orrs	r3, r2
 800220e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002210:	4b5e      	ldr	r3, [pc, #376]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	021b      	lsls	r3, r3, #8
 800221e:	495b      	ldr	r1, [pc, #364]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 8002220:	4313      	orrs	r3, r2
 8002222:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d109      	bne.n	800223e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	4618      	mov	r0, r3
 8002230:	f000 fd4c 	bl	8002ccc <RCC_SetFlashLatencyFromMSIRange>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e37a      	b.n	8002934 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800223e:	f000 fc81 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8002242:	4602      	mov	r2, r0
 8002244:	4b51      	ldr	r3, [pc, #324]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	091b      	lsrs	r3, r3, #4
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	4950      	ldr	r1, [pc, #320]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 8002250:	5ccb      	ldrb	r3, [r1, r3]
 8002252:	f003 031f 	and.w	r3, r3, #31
 8002256:	fa22 f303 	lsr.w	r3, r2, r3
 800225a:	4a4e      	ldr	r2, [pc, #312]	@ (8002394 <HAL_RCC_OscConfig+0x278>)
 800225c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800225e:	4b4e      	ldr	r3, [pc, #312]	@ (8002398 <HAL_RCC_OscConfig+0x27c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe fe80 	bl	8000f68 <HAL_InitTick>
 8002268:	4603      	mov	r3, r0
 800226a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d052      	beq.n	8002318 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	e35e      	b.n	8002934 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d032      	beq.n	80022e4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800227e:	4b43      	ldr	r3, [pc, #268]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a42      	ldr	r2, [pc, #264]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800228a:	f7fe febd 	bl	8001008 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002292:	f7fe feb9 	bl	8001008 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e347      	b.n	8002934 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022a4:	4b39      	ldr	r3, [pc, #228]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0f0      	beq.n	8002292 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022b0:	4b36      	ldr	r3, [pc, #216]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a35      	ldr	r2, [pc, #212]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 80022b6:	f043 0308 	orr.w	r3, r3, #8
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	4b33      	ldr	r3, [pc, #204]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	4930      	ldr	r1, [pc, #192]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ce:	4b2f      	ldr	r3, [pc, #188]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	021b      	lsls	r3, r3, #8
 80022dc:	492b      	ldr	r1, [pc, #172]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	604b      	str	r3, [r1, #4]
 80022e2:	e01a      	b.n	800231a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022e4:	4b29      	ldr	r3, [pc, #164]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a28      	ldr	r2, [pc, #160]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 80022ea:	f023 0301 	bic.w	r3, r3, #1
 80022ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022f0:	f7fe fe8a 	bl	8001008 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022f8:	f7fe fe86 	bl	8001008 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e314      	b.n	8002934 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800230a:	4b20      	ldr	r3, [pc, #128]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x1dc>
 8002316:	e000      	b.n	800231a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002318:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d073      	beq.n	800240e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	2b08      	cmp	r3, #8
 800232a:	d005      	beq.n	8002338 <HAL_RCC_OscConfig+0x21c>
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	2b0c      	cmp	r3, #12
 8002330:	d10e      	bne.n	8002350 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2b03      	cmp	r3, #3
 8002336:	d10b      	bne.n	8002350 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002338:	4b14      	ldr	r3, [pc, #80]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d063      	beq.n	800240c <HAL_RCC_OscConfig+0x2f0>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d15f      	bne.n	800240c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e2f1      	b.n	8002934 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002358:	d106      	bne.n	8002368 <HAL_RCC_OscConfig+0x24c>
 800235a:	4b0c      	ldr	r3, [pc, #48]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a0b      	ldr	r2, [pc, #44]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 8002360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	e025      	b.n	80023b4 <HAL_RCC_OscConfig+0x298>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002370:	d114      	bne.n	800239c <HAL_RCC_OscConfig+0x280>
 8002372:	4b06      	ldr	r3, [pc, #24]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a05      	ldr	r2, [pc, #20]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 8002378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	4b03      	ldr	r3, [pc, #12]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a02      	ldr	r2, [pc, #8]	@ (800238c <HAL_RCC_OscConfig+0x270>)
 8002384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	e013      	b.n	80023b4 <HAL_RCC_OscConfig+0x298>
 800238c:	40021000 	.word	0x40021000
 8002390:	0800568c 	.word	0x0800568c
 8002394:	20000000 	.word	0x20000000
 8002398:	20000004 	.word	0x20000004
 800239c:	4ba0      	ldr	r3, [pc, #640]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a9f      	ldr	r2, [pc, #636]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 80023a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	4b9d      	ldr	r3, [pc, #628]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a9c      	ldr	r2, [pc, #624]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 80023ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d013      	beq.n	80023e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023bc:	f7fe fe24 	bl	8001008 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c4:	f7fe fe20 	bl	8001008 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b64      	cmp	r3, #100	@ 0x64
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e2ae      	b.n	8002934 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023d6:	4b92      	ldr	r3, [pc, #584]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0f0      	beq.n	80023c4 <HAL_RCC_OscConfig+0x2a8>
 80023e2:	e014      	b.n	800240e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e4:	f7fe fe10 	bl	8001008 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ec:	f7fe fe0c 	bl	8001008 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b64      	cmp	r3, #100	@ 0x64
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e29a      	b.n	8002934 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023fe:	4b88      	ldr	r3, [pc, #544]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f0      	bne.n	80023ec <HAL_RCC_OscConfig+0x2d0>
 800240a:	e000      	b.n	800240e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800240c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d060      	beq.n	80024dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	2b04      	cmp	r3, #4
 800241e:	d005      	beq.n	800242c <HAL_RCC_OscConfig+0x310>
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	2b0c      	cmp	r3, #12
 8002424:	d119      	bne.n	800245a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d116      	bne.n	800245a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800242c:	4b7c      	ldr	r3, [pc, #496]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_RCC_OscConfig+0x328>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e277      	b.n	8002934 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002444:	4b76      	ldr	r3, [pc, #472]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	061b      	lsls	r3, r3, #24
 8002452:	4973      	ldr	r1, [pc, #460]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002458:	e040      	b.n	80024dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d023      	beq.n	80024aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002462:	4b6f      	ldr	r3, [pc, #444]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a6e      	ldr	r2, [pc, #440]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 8002468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800246c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246e:	f7fe fdcb 	bl	8001008 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002476:	f7fe fdc7 	bl	8001008 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e255      	b.n	8002934 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002488:	4b65      	ldr	r3, [pc, #404]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002494:	4b62      	ldr	r3, [pc, #392]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	061b      	lsls	r3, r3, #24
 80024a2:	495f      	ldr	r1, [pc, #380]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	604b      	str	r3, [r1, #4]
 80024a8:	e018      	b.n	80024dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a5c      	ldr	r2, [pc, #368]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 80024b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b6:	f7fe fda7 	bl	8001008 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024be:	f7fe fda3 	bl	8001008 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e231      	b.n	8002934 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024d0:	4b53      	ldr	r3, [pc, #332]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1f0      	bne.n	80024be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0308 	and.w	r3, r3, #8
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d03c      	beq.n	8002562 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d01c      	beq.n	800252a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024f0:	4b4b      	ldr	r3, [pc, #300]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 80024f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024f6:	4a4a      	ldr	r2, [pc, #296]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002500:	f7fe fd82 	bl	8001008 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002508:	f7fe fd7e 	bl	8001008 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e20c      	b.n	8002934 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800251a:	4b41      	ldr	r3, [pc, #260]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 800251c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0ef      	beq.n	8002508 <HAL_RCC_OscConfig+0x3ec>
 8002528:	e01b      	b.n	8002562 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800252a:	4b3d      	ldr	r3, [pc, #244]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 800252c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002530:	4a3b      	ldr	r2, [pc, #236]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 8002532:	f023 0301 	bic.w	r3, r3, #1
 8002536:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253a:	f7fe fd65 	bl	8001008 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002542:	f7fe fd61 	bl	8001008 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e1ef      	b.n	8002934 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002554:	4b32      	ldr	r3, [pc, #200]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 8002556:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1ef      	bne.n	8002542 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 80a6 	beq.w	80026bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002570:	2300      	movs	r3, #0
 8002572:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002574:	4b2a      	ldr	r3, [pc, #168]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 8002576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10d      	bne.n	800259c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002580:	4b27      	ldr	r3, [pc, #156]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 8002582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002584:	4a26      	ldr	r2, [pc, #152]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 8002586:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800258a:	6593      	str	r3, [r2, #88]	@ 0x58
 800258c:	4b24      	ldr	r3, [pc, #144]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 800258e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002598:	2301      	movs	r3, #1
 800259a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800259c:	4b21      	ldr	r3, [pc, #132]	@ (8002624 <HAL_RCC_OscConfig+0x508>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d118      	bne.n	80025da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002624 <HAL_RCC_OscConfig+0x508>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002624 <HAL_RCC_OscConfig+0x508>)
 80025ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025b4:	f7fe fd28 	bl	8001008 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025bc:	f7fe fd24 	bl	8001008 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e1b2      	b.n	8002934 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ce:	4b15      	ldr	r3, [pc, #84]	@ (8002624 <HAL_RCC_OscConfig+0x508>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0f0      	beq.n	80025bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d108      	bne.n	80025f4 <HAL_RCC_OscConfig+0x4d8>
 80025e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 80025e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025f2:	e029      	b.n	8002648 <HAL_RCC_OscConfig+0x52c>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	2b05      	cmp	r3, #5
 80025fa:	d115      	bne.n	8002628 <HAL_RCC_OscConfig+0x50c>
 80025fc:	4b08      	ldr	r3, [pc, #32]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 80025fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002602:	4a07      	ldr	r2, [pc, #28]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 8002604:	f043 0304 	orr.w	r3, r3, #4
 8002608:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800260c:	4b04      	ldr	r3, [pc, #16]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 800260e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002612:	4a03      	ldr	r2, [pc, #12]	@ (8002620 <HAL_RCC_OscConfig+0x504>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800261c:	e014      	b.n	8002648 <HAL_RCC_OscConfig+0x52c>
 800261e:	bf00      	nop
 8002620:	40021000 	.word	0x40021000
 8002624:	40007000 	.word	0x40007000
 8002628:	4b9a      	ldr	r3, [pc, #616]	@ (8002894 <HAL_RCC_OscConfig+0x778>)
 800262a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800262e:	4a99      	ldr	r2, [pc, #612]	@ (8002894 <HAL_RCC_OscConfig+0x778>)
 8002630:	f023 0301 	bic.w	r3, r3, #1
 8002634:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002638:	4b96      	ldr	r3, [pc, #600]	@ (8002894 <HAL_RCC_OscConfig+0x778>)
 800263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800263e:	4a95      	ldr	r2, [pc, #596]	@ (8002894 <HAL_RCC_OscConfig+0x778>)
 8002640:	f023 0304 	bic.w	r3, r3, #4
 8002644:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d016      	beq.n	800267e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002650:	f7fe fcda 	bl	8001008 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002656:	e00a      	b.n	800266e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002658:	f7fe fcd6 	bl	8001008 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e162      	b.n	8002934 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800266e:	4b89      	ldr	r3, [pc, #548]	@ (8002894 <HAL_RCC_OscConfig+0x778>)
 8002670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0ed      	beq.n	8002658 <HAL_RCC_OscConfig+0x53c>
 800267c:	e015      	b.n	80026aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267e:	f7fe fcc3 	bl	8001008 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002684:	e00a      	b.n	800269c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002686:	f7fe fcbf 	bl	8001008 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002694:	4293      	cmp	r3, r2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e14b      	b.n	8002934 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800269c:	4b7d      	ldr	r3, [pc, #500]	@ (8002894 <HAL_RCC_OscConfig+0x778>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1ed      	bne.n	8002686 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026aa:	7ffb      	ldrb	r3, [r7, #31]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d105      	bne.n	80026bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b0:	4b78      	ldr	r3, [pc, #480]	@ (8002894 <HAL_RCC_OscConfig+0x778>)
 80026b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b4:	4a77      	ldr	r2, [pc, #476]	@ (8002894 <HAL_RCC_OscConfig+0x778>)
 80026b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026ba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0320 	and.w	r3, r3, #32
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d03c      	beq.n	8002742 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d01c      	beq.n	800270a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026d0:	4b70      	ldr	r3, [pc, #448]	@ (8002894 <HAL_RCC_OscConfig+0x778>)
 80026d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026d6:	4a6f      	ldr	r2, [pc, #444]	@ (8002894 <HAL_RCC_OscConfig+0x778>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e0:	f7fe fc92 	bl	8001008 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026e8:	f7fe fc8e 	bl	8001008 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e11c      	b.n	8002934 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026fa:	4b66      	ldr	r3, [pc, #408]	@ (8002894 <HAL_RCC_OscConfig+0x778>)
 80026fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0ef      	beq.n	80026e8 <HAL_RCC_OscConfig+0x5cc>
 8002708:	e01b      	b.n	8002742 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800270a:	4b62      	ldr	r3, [pc, #392]	@ (8002894 <HAL_RCC_OscConfig+0x778>)
 800270c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002710:	4a60      	ldr	r2, [pc, #384]	@ (8002894 <HAL_RCC_OscConfig+0x778>)
 8002712:	f023 0301 	bic.w	r3, r3, #1
 8002716:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271a:	f7fe fc75 	bl	8001008 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002722:	f7fe fc71 	bl	8001008 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e0ff      	b.n	8002934 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002734:	4b57      	ldr	r3, [pc, #348]	@ (8002894 <HAL_RCC_OscConfig+0x778>)
 8002736:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1ef      	bne.n	8002722 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 80f3 	beq.w	8002932 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002750:	2b02      	cmp	r3, #2
 8002752:	f040 80c9 	bne.w	80028e8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002756:	4b4f      	ldr	r3, [pc, #316]	@ (8002894 <HAL_RCC_OscConfig+0x778>)
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f003 0203 	and.w	r2, r3, #3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002766:	429a      	cmp	r2, r3
 8002768:	d12c      	bne.n	80027c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002774:	3b01      	subs	r3, #1
 8002776:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002778:	429a      	cmp	r2, r3
 800277a:	d123      	bne.n	80027c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002786:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002788:	429a      	cmp	r2, r3
 800278a:	d11b      	bne.n	80027c4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002796:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002798:	429a      	cmp	r2, r3
 800279a:	d113      	bne.n	80027c4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a6:	085b      	lsrs	r3, r3, #1
 80027a8:	3b01      	subs	r3, #1
 80027aa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d109      	bne.n	80027c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	085b      	lsrs	r3, r3, #1
 80027bc:	3b01      	subs	r3, #1
 80027be:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d06b      	beq.n	800289c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	2b0c      	cmp	r3, #12
 80027c8:	d062      	beq.n	8002890 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027ca:	4b32      	ldr	r3, [pc, #200]	@ (8002894 <HAL_RCC_OscConfig+0x778>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e0ac      	b.n	8002934 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027da:	4b2e      	ldr	r3, [pc, #184]	@ (8002894 <HAL_RCC_OscConfig+0x778>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a2d      	ldr	r2, [pc, #180]	@ (8002894 <HAL_RCC_OscConfig+0x778>)
 80027e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027e4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027e6:	f7fe fc0f 	bl	8001008 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ee:	f7fe fc0b 	bl	8001008 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e099      	b.n	8002934 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002800:	4b24      	ldr	r3, [pc, #144]	@ (8002894 <HAL_RCC_OscConfig+0x778>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1f0      	bne.n	80027ee <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800280c:	4b21      	ldr	r3, [pc, #132]	@ (8002894 <HAL_RCC_OscConfig+0x778>)
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	4b21      	ldr	r3, [pc, #132]	@ (8002898 <HAL_RCC_OscConfig+0x77c>)
 8002812:	4013      	ands	r3, r2
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800281c:	3a01      	subs	r2, #1
 800281e:	0112      	lsls	r2, r2, #4
 8002820:	4311      	orrs	r1, r2
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002826:	0212      	lsls	r2, r2, #8
 8002828:	4311      	orrs	r1, r2
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800282e:	0852      	lsrs	r2, r2, #1
 8002830:	3a01      	subs	r2, #1
 8002832:	0552      	lsls	r2, r2, #21
 8002834:	4311      	orrs	r1, r2
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800283a:	0852      	lsrs	r2, r2, #1
 800283c:	3a01      	subs	r2, #1
 800283e:	0652      	lsls	r2, r2, #25
 8002840:	4311      	orrs	r1, r2
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002846:	06d2      	lsls	r2, r2, #27
 8002848:	430a      	orrs	r2, r1
 800284a:	4912      	ldr	r1, [pc, #72]	@ (8002894 <HAL_RCC_OscConfig+0x778>)
 800284c:	4313      	orrs	r3, r2
 800284e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002850:	4b10      	ldr	r3, [pc, #64]	@ (8002894 <HAL_RCC_OscConfig+0x778>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a0f      	ldr	r2, [pc, #60]	@ (8002894 <HAL_RCC_OscConfig+0x778>)
 8002856:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800285a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800285c:	4b0d      	ldr	r3, [pc, #52]	@ (8002894 <HAL_RCC_OscConfig+0x778>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	4a0c      	ldr	r2, [pc, #48]	@ (8002894 <HAL_RCC_OscConfig+0x778>)
 8002862:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002866:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002868:	f7fe fbce 	bl	8001008 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002870:	f7fe fbca 	bl	8001008 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e058      	b.n	8002934 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002882:	4b04      	ldr	r3, [pc, #16]	@ (8002894 <HAL_RCC_OscConfig+0x778>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800288e:	e050      	b.n	8002932 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e04f      	b.n	8002934 <HAL_RCC_OscConfig+0x818>
 8002894:	40021000 	.word	0x40021000
 8002898:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800289c:	4b27      	ldr	r3, [pc, #156]	@ (800293c <HAL_RCC_OscConfig+0x820>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d144      	bne.n	8002932 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028a8:	4b24      	ldr	r3, [pc, #144]	@ (800293c <HAL_RCC_OscConfig+0x820>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a23      	ldr	r2, [pc, #140]	@ (800293c <HAL_RCC_OscConfig+0x820>)
 80028ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028b4:	4b21      	ldr	r3, [pc, #132]	@ (800293c <HAL_RCC_OscConfig+0x820>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	4a20      	ldr	r2, [pc, #128]	@ (800293c <HAL_RCC_OscConfig+0x820>)
 80028ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028c0:	f7fe fba2 	bl	8001008 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c8:	f7fe fb9e 	bl	8001008 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e02c      	b.n	8002934 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028da:	4b18      	ldr	r3, [pc, #96]	@ (800293c <HAL_RCC_OscConfig+0x820>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x7ac>
 80028e6:	e024      	b.n	8002932 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	2b0c      	cmp	r3, #12
 80028ec:	d01f      	beq.n	800292e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ee:	4b13      	ldr	r3, [pc, #76]	@ (800293c <HAL_RCC_OscConfig+0x820>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a12      	ldr	r2, [pc, #72]	@ (800293c <HAL_RCC_OscConfig+0x820>)
 80028f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fa:	f7fe fb85 	bl	8001008 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002902:	f7fe fb81 	bl	8001008 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e00f      	b.n	8002934 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002914:	4b09      	ldr	r3, [pc, #36]	@ (800293c <HAL_RCC_OscConfig+0x820>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1f0      	bne.n	8002902 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002920:	4b06      	ldr	r3, [pc, #24]	@ (800293c <HAL_RCC_OscConfig+0x820>)
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	4905      	ldr	r1, [pc, #20]	@ (800293c <HAL_RCC_OscConfig+0x820>)
 8002926:	4b06      	ldr	r3, [pc, #24]	@ (8002940 <HAL_RCC_OscConfig+0x824>)
 8002928:	4013      	ands	r3, r2
 800292a:	60cb      	str	r3, [r1, #12]
 800292c:	e001      	b.n	8002932 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3720      	adds	r7, #32
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40021000 	.word	0x40021000
 8002940:	feeefffc 	.word	0xfeeefffc

08002944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0e7      	b.n	8002b28 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002958:	4b75      	ldr	r3, [pc, #468]	@ (8002b30 <HAL_RCC_ClockConfig+0x1ec>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d910      	bls.n	8002988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002966:	4b72      	ldr	r3, [pc, #456]	@ (8002b30 <HAL_RCC_ClockConfig+0x1ec>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 0207 	bic.w	r2, r3, #7
 800296e:	4970      	ldr	r1, [pc, #448]	@ (8002b30 <HAL_RCC_ClockConfig+0x1ec>)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	4313      	orrs	r3, r2
 8002974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002976:	4b6e      	ldr	r3, [pc, #440]	@ (8002b30 <HAL_RCC_ClockConfig+0x1ec>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0cf      	b.n	8002b28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d010      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	4b66      	ldr	r3, [pc, #408]	@ (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d908      	bls.n	80029b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a4:	4b63      	ldr	r3, [pc, #396]	@ (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4960      	ldr	r1, [pc, #384]	@ (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d04c      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d107      	bne.n	80029da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ca:	4b5a      	ldr	r3, [pc, #360]	@ (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d121      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e0a6      	b.n	8002b28 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d107      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029e2:	4b54      	ldr	r3, [pc, #336]	@ (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d115      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e09a      	b.n	8002b28 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d107      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029fa:	4b4e      	ldr	r3, [pc, #312]	@ (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d109      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e08e      	b.n	8002b28 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a0a:	4b4a      	ldr	r3, [pc, #296]	@ (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e086      	b.n	8002b28 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a1a:	4b46      	ldr	r3, [pc, #280]	@ (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f023 0203 	bic.w	r2, r3, #3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	4943      	ldr	r1, [pc, #268]	@ (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a2c:	f7fe faec 	bl	8001008 <HAL_GetTick>
 8002a30:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a32:	e00a      	b.n	8002a4a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a34:	f7fe fae8 	bl	8001008 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e06e      	b.n	8002b28 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4a:	4b3a      	ldr	r3, [pc, #232]	@ (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 020c 	and.w	r2, r3, #12
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d1eb      	bne.n	8002a34 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d010      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	4b31      	ldr	r3, [pc, #196]	@ (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d208      	bcs.n	8002a8a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a78:	4b2e      	ldr	r3, [pc, #184]	@ (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	492b      	ldr	r1, [pc, #172]	@ (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a8a:	4b29      	ldr	r3, [pc, #164]	@ (8002b30 <HAL_RCC_ClockConfig+0x1ec>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d210      	bcs.n	8002aba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a98:	4b25      	ldr	r3, [pc, #148]	@ (8002b30 <HAL_RCC_ClockConfig+0x1ec>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f023 0207 	bic.w	r2, r3, #7
 8002aa0:	4923      	ldr	r1, [pc, #140]	@ (8002b30 <HAL_RCC_ClockConfig+0x1ec>)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa8:	4b21      	ldr	r3, [pc, #132]	@ (8002b30 <HAL_RCC_ClockConfig+0x1ec>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d001      	beq.n	8002aba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e036      	b.n	8002b28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d008      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	4918      	ldr	r1, [pc, #96]	@ (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0308 	and.w	r3, r3, #8
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d009      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ae4:	4b13      	ldr	r3, [pc, #76]	@ (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4910      	ldr	r1, [pc, #64]	@ (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002af8:	f000 f824 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8002afc:	4602      	mov	r2, r0
 8002afe:	4b0d      	ldr	r3, [pc, #52]	@ (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	091b      	lsrs	r3, r3, #4
 8002b04:	f003 030f 	and.w	r3, r3, #15
 8002b08:	490b      	ldr	r1, [pc, #44]	@ (8002b38 <HAL_RCC_ClockConfig+0x1f4>)
 8002b0a:	5ccb      	ldrb	r3, [r1, r3]
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	fa22 f303 	lsr.w	r3, r2, r3
 8002b14:	4a09      	ldr	r2, [pc, #36]	@ (8002b3c <HAL_RCC_ClockConfig+0x1f8>)
 8002b16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b18:	4b09      	ldr	r3, [pc, #36]	@ (8002b40 <HAL_RCC_ClockConfig+0x1fc>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fe fa23 	bl	8000f68 <HAL_InitTick>
 8002b22:	4603      	mov	r3, r0
 8002b24:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b26:	7afb      	ldrb	r3, [r7, #11]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40022000 	.word	0x40022000
 8002b34:	40021000 	.word	0x40021000
 8002b38:	0800568c 	.word	0x0800568c
 8002b3c:	20000000 	.word	0x20000000
 8002b40:	20000004 	.word	0x20000004

08002b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b089      	sub	sp, #36	@ 0x24
 8002b48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b52:	4b3e      	ldr	r3, [pc, #248]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0303 	and.w	r3, r3, #3
 8002b64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_GetSysClockFreq+0x34>
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	2b0c      	cmp	r3, #12
 8002b70:	d121      	bne.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d11e      	bne.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b78:	4b34      	ldr	r3, [pc, #208]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d107      	bne.n	8002b94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b84:	4b31      	ldr	r3, [pc, #196]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b8a:	0a1b      	lsrs	r3, r3, #8
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	61fb      	str	r3, [r7, #28]
 8002b92:	e005      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b94:	4b2d      	ldr	r3, [pc, #180]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	091b      	lsrs	r3, r3, #4
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ba0:	4a2b      	ldr	r2, [pc, #172]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10d      	bne.n	8002bcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bb4:	e00a      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d102      	bne.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bbc:	4b25      	ldr	r3, [pc, #148]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bbe:	61bb      	str	r3, [r7, #24]
 8002bc0:	e004      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bc8:	4b23      	ldr	r3, [pc, #140]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	2b0c      	cmp	r3, #12
 8002bd0:	d134      	bne.n	8002c3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d003      	beq.n	8002bea <HAL_RCC_GetSysClockFreq+0xa6>
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d003      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0xac>
 8002be8:	e005      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002bea:	4b1a      	ldr	r3, [pc, #104]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bec:	617b      	str	r3, [r7, #20]
      break;
 8002bee:	e005      	b.n	8002bfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002bf0:	4b19      	ldr	r3, [pc, #100]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bf2:	617b      	str	r3, [r7, #20]
      break;
 8002bf4:	e002      	b.n	8002bfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	617b      	str	r3, [r7, #20]
      break;
 8002bfa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bfc:	4b13      	ldr	r3, [pc, #76]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	3301      	adds	r3, #1
 8002c08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c0a:	4b10      	ldr	r3, [pc, #64]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	0a1b      	lsrs	r3, r3, #8
 8002c10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	fb03 f202 	mul.w	r2, r3, r2
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c22:	4b0a      	ldr	r3, [pc, #40]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	0e5b      	lsrs	r3, r3, #25
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c3c:	69bb      	ldr	r3, [r7, #24]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3724      	adds	r7, #36	@ 0x24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	080056a4 	.word	0x080056a4
 8002c54:	00f42400 	.word	0x00f42400
 8002c58:	007a1200 	.word	0x007a1200

08002c5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c60:	4b03      	ldr	r3, [pc, #12]	@ (8002c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c62:	681b      	ldr	r3, [r3, #0]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20000000 	.word	0x20000000

08002c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c78:	f7ff fff0 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	0a1b      	lsrs	r3, r3, #8
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	4904      	ldr	r1, [pc, #16]	@ (8002c9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c8a:	5ccb      	ldrb	r3, [r1, r3]
 8002c8c:	f003 031f 	and.w	r3, r3, #31
 8002c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	0800569c 	.word	0x0800569c

08002ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ca4:	f7ff ffda 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	4b06      	ldr	r3, [pc, #24]	@ (8002cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	0adb      	lsrs	r3, r3, #11
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	4904      	ldr	r1, [pc, #16]	@ (8002cc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cb6:	5ccb      	ldrb	r3, [r1, r3]
 8002cb8:	f003 031f 	and.w	r3, r3, #31
 8002cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	0800569c 	.word	0x0800569c

08002ccc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cd8:	4b2a      	ldr	r3, [pc, #168]	@ (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ce4:	f7ff f9b6 	bl	8002054 <HAL_PWREx_GetVoltageRange>
 8002ce8:	6178      	str	r0, [r7, #20]
 8002cea:	e014      	b.n	8002d16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cec:	4b25      	ldr	r3, [pc, #148]	@ (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf0:	4a24      	ldr	r2, [pc, #144]	@ (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cf8:	4b22      	ldr	r3, [pc, #136]	@ (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d04:	f7ff f9a6 	bl	8002054 <HAL_PWREx_GetVoltageRange>
 8002d08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d14:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d1c:	d10b      	bne.n	8002d36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b80      	cmp	r3, #128	@ 0x80
 8002d22:	d919      	bls.n	8002d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d28:	d902      	bls.n	8002d30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	e013      	b.n	8002d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d30:	2301      	movs	r3, #1
 8002d32:	613b      	str	r3, [r7, #16]
 8002d34:	e010      	b.n	8002d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b80      	cmp	r3, #128	@ 0x80
 8002d3a:	d902      	bls.n	8002d42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	e00a      	b.n	8002d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b80      	cmp	r3, #128	@ 0x80
 8002d46:	d102      	bne.n	8002d4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d48:	2302      	movs	r3, #2
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	e004      	b.n	8002d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b70      	cmp	r3, #112	@ 0x70
 8002d52:	d101      	bne.n	8002d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d54:	2301      	movs	r3, #1
 8002d56:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d58:	4b0b      	ldr	r3, [pc, #44]	@ (8002d88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f023 0207 	bic.w	r2, r3, #7
 8002d60:	4909      	ldr	r1, [pc, #36]	@ (8002d88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d68:	4b07      	ldr	r3, [pc, #28]	@ (8002d88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d001      	beq.n	8002d7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40022000 	.word	0x40022000

08002d8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d94:	2300      	movs	r3, #0
 8002d96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d98:	2300      	movs	r3, #0
 8002d9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d031      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dac:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002db0:	d01a      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002db2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002db6:	d814      	bhi.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d009      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002dbc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002dc0:	d10f      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002dc2:	4b5d      	ldr	r3, [pc, #372]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	4a5c      	ldr	r2, [pc, #368]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dcc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dce:	e00c      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f9de 	bl	8003198 <RCCEx_PLLSAI1_Config>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002de0:	e003      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	74fb      	strb	r3, [r7, #19]
      break;
 8002de6:	e000      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002de8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dea:	7cfb      	ldrb	r3, [r7, #19]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10b      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002df0:	4b51      	ldr	r3, [pc, #324]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dfe:	494e      	ldr	r1, [pc, #312]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002e06:	e001      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e08:	7cfb      	ldrb	r3, [r7, #19]
 8002e0a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 809e 	beq.w	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e1e:	4b46      	ldr	r3, [pc, #280]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002e2e:	2300      	movs	r3, #0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00d      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e34:	4b40      	ldr	r3, [pc, #256]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e38:	4a3f      	ldr	r2, [pc, #252]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e40:	4b3d      	ldr	r3, [pc, #244]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e50:	4b3a      	ldr	r3, [pc, #232]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a39      	ldr	r2, [pc, #228]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e5c:	f7fe f8d4 	bl	8001008 <HAL_GetTick>
 8002e60:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e62:	e009      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e64:	f7fe f8d0 	bl	8001008 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d902      	bls.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	74fb      	strb	r3, [r7, #19]
        break;
 8002e76:	e005      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e78:	4b30      	ldr	r3, [pc, #192]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0ef      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002e84:	7cfb      	ldrb	r3, [r7, #19]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d15a      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e8a:	4b2b      	ldr	r3, [pc, #172]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e94:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d01e      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d019      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ea6:	4b24      	ldr	r3, [pc, #144]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eb0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002eb2:	4b21      	ldr	r3, [pc, #132]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb8:	4a1f      	ldr	r2, [pc, #124]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002eba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ebe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec8:	4a1b      	ldr	r2, [pc, #108]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002eca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ece:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ed2:	4a19      	ldr	r2, [pc, #100]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d016      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee4:	f7fe f890 	bl	8001008 <HAL_GetTick>
 8002ee8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eea:	e00b      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eec:	f7fe f88c 	bl	8001008 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d902      	bls.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	74fb      	strb	r3, [r7, #19]
            break;
 8002f02:	e006      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f04:	4b0c      	ldr	r3, [pc, #48]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0ec      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002f12:	7cfb      	ldrb	r3, [r7, #19]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10b      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f18:	4b07      	ldr	r3, [pc, #28]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f1e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f26:	4904      	ldr	r1, [pc, #16]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f2e:	e009      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f30:	7cfb      	ldrb	r3, [r7, #19]
 8002f32:	74bb      	strb	r3, [r7, #18]
 8002f34:	e006      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f40:	7cfb      	ldrb	r3, [r7, #19]
 8002f42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f44:	7c7b      	ldrb	r3, [r7, #17]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d105      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f4a:	4b8a      	ldr	r3, [pc, #552]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4e:	4a89      	ldr	r2, [pc, #548]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f54:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f62:	4b84      	ldr	r3, [pc, #528]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f68:	f023 0203 	bic.w	r2, r3, #3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	4980      	ldr	r1, [pc, #512]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00a      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f84:	4b7b      	ldr	r3, [pc, #492]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f8a:	f023 020c 	bic.w	r2, r3, #12
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f92:	4978      	ldr	r1, [pc, #480]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0320 	and.w	r3, r3, #32
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fa6:	4b73      	ldr	r3, [pc, #460]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb4:	496f      	ldr	r1, [pc, #444]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00a      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fc8:	4b6a      	ldr	r3, [pc, #424]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fce:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd6:	4967      	ldr	r1, [pc, #412]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00a      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fea:	4b62      	ldr	r3, [pc, #392]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff8:	495e      	ldr	r1, [pc, #376]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00a      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800300c:	4b59      	ldr	r3, [pc, #356]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800300e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003012:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301a:	4956      	ldr	r1, [pc, #344]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800301c:	4313      	orrs	r3, r2
 800301e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800302e:	4b51      	ldr	r3, [pc, #324]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003034:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303c:	494d      	ldr	r1, [pc, #308]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800303e:	4313      	orrs	r3, r2
 8003040:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d028      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003050:	4b48      	ldr	r3, [pc, #288]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003056:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	4945      	ldr	r1, [pc, #276]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003060:	4313      	orrs	r3, r2
 8003062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800306e:	d106      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003070:	4b40      	ldr	r3, [pc, #256]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4a3f      	ldr	r2, [pc, #252]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003076:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800307a:	60d3      	str	r3, [r2, #12]
 800307c:	e011      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003082:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003086:	d10c      	bne.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3304      	adds	r3, #4
 800308c:	2101      	movs	r1, #1
 800308e:	4618      	mov	r0, r3
 8003090:	f000 f882 	bl	8003198 <RCCEx_PLLSAI1_Config>
 8003094:	4603      	mov	r3, r0
 8003096:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003098:	7cfb      	ldrb	r3, [r7, #19]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800309e:	7cfb      	ldrb	r3, [r7, #19]
 80030a0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d028      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030ae:	4b31      	ldr	r3, [pc, #196]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030bc:	492d      	ldr	r1, [pc, #180]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030cc:	d106      	bne.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030ce:	4b29      	ldr	r3, [pc, #164]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	4a28      	ldr	r2, [pc, #160]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030d8:	60d3      	str	r3, [r2, #12]
 80030da:	e011      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030e4:	d10c      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	3304      	adds	r3, #4
 80030ea:	2101      	movs	r1, #1
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 f853 	bl	8003198 <RCCEx_PLLSAI1_Config>
 80030f2:	4603      	mov	r3, r0
 80030f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030f6:	7cfb      	ldrb	r3, [r7, #19]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80030fc:	7cfb      	ldrb	r3, [r7, #19]
 80030fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d01c      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800310c:	4b19      	ldr	r3, [pc, #100]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003112:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800311a:	4916      	ldr	r1, [pc, #88]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003126:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800312a:	d10c      	bne.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3304      	adds	r3, #4
 8003130:	2102      	movs	r1, #2
 8003132:	4618      	mov	r0, r3
 8003134:	f000 f830 	bl	8003198 <RCCEx_PLLSAI1_Config>
 8003138:	4603      	mov	r3, r0
 800313a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800313c:	7cfb      	ldrb	r3, [r7, #19]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003142:	7cfb      	ldrb	r3, [r7, #19]
 8003144:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003152:	4b08      	ldr	r3, [pc, #32]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003158:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003160:	4904      	ldr	r1, [pc, #16]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003168:	7cbb      	ldrb	r3, [r7, #18]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40021000 	.word	0x40021000

08003178 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800317c:	4b05      	ldr	r3, [pc, #20]	@ (8003194 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a04      	ldr	r2, [pc, #16]	@ (8003194 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003182:	f043 0304 	orr.w	r3, r3, #4
 8003186:	6013      	str	r3, [r2, #0]
}
 8003188:	bf00      	nop
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	40021000 	.word	0x40021000

08003198 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031a6:	4b74      	ldr	r3, [pc, #464]	@ (8003378 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d018      	beq.n	80031e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80031b2:	4b71      	ldr	r3, [pc, #452]	@ (8003378 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f003 0203 	and.w	r2, r3, #3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d10d      	bne.n	80031de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
       ||
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d009      	beq.n	80031de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80031ca:	4b6b      	ldr	r3, [pc, #428]	@ (8003378 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	091b      	lsrs	r3, r3, #4
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
       ||
 80031da:	429a      	cmp	r2, r3
 80031dc:	d047      	beq.n	800326e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	73fb      	strb	r3, [r7, #15]
 80031e2:	e044      	b.n	800326e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b03      	cmp	r3, #3
 80031ea:	d018      	beq.n	800321e <RCCEx_PLLSAI1_Config+0x86>
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d825      	bhi.n	800323c <RCCEx_PLLSAI1_Config+0xa4>
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d002      	beq.n	80031fa <RCCEx_PLLSAI1_Config+0x62>
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d009      	beq.n	800320c <RCCEx_PLLSAI1_Config+0x74>
 80031f8:	e020      	b.n	800323c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031fa:	4b5f      	ldr	r3, [pc, #380]	@ (8003378 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d11d      	bne.n	8003242 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800320a:	e01a      	b.n	8003242 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800320c:	4b5a      	ldr	r3, [pc, #360]	@ (8003378 <RCCEx_PLLSAI1_Config+0x1e0>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003214:	2b00      	cmp	r3, #0
 8003216:	d116      	bne.n	8003246 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800321c:	e013      	b.n	8003246 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800321e:	4b56      	ldr	r3, [pc, #344]	@ (8003378 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10f      	bne.n	800324a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800322a:	4b53      	ldr	r3, [pc, #332]	@ (8003378 <RCCEx_PLLSAI1_Config+0x1e0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d109      	bne.n	800324a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800323a:	e006      	b.n	800324a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
      break;
 8003240:	e004      	b.n	800324c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003242:	bf00      	nop
 8003244:	e002      	b.n	800324c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003246:	bf00      	nop
 8003248:	e000      	b.n	800324c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800324a:	bf00      	nop
    }

    if(status == HAL_OK)
 800324c:	7bfb      	ldrb	r3, [r7, #15]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10d      	bne.n	800326e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003252:	4b49      	ldr	r3, [pc, #292]	@ (8003378 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6819      	ldr	r1, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	3b01      	subs	r3, #1
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	430b      	orrs	r3, r1
 8003268:	4943      	ldr	r1, [pc, #268]	@ (8003378 <RCCEx_PLLSAI1_Config+0x1e0>)
 800326a:	4313      	orrs	r3, r2
 800326c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800326e:	7bfb      	ldrb	r3, [r7, #15]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d17c      	bne.n	800336e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003274:	4b40      	ldr	r3, [pc, #256]	@ (8003378 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a3f      	ldr	r2, [pc, #252]	@ (8003378 <RCCEx_PLLSAI1_Config+0x1e0>)
 800327a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800327e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003280:	f7fd fec2 	bl	8001008 <HAL_GetTick>
 8003284:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003286:	e009      	b.n	800329c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003288:	f7fd febe 	bl	8001008 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d902      	bls.n	800329c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	73fb      	strb	r3, [r7, #15]
        break;
 800329a:	e005      	b.n	80032a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800329c:	4b36      	ldr	r3, [pc, #216]	@ (8003378 <RCCEx_PLLSAI1_Config+0x1e0>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1ef      	bne.n	8003288 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d15f      	bne.n	800336e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d110      	bne.n	80032d6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032b4:	4b30      	ldr	r3, [pc, #192]	@ (8003378 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80032bc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6892      	ldr	r2, [r2, #8]
 80032c4:	0211      	lsls	r1, r2, #8
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	68d2      	ldr	r2, [r2, #12]
 80032ca:	06d2      	lsls	r2, r2, #27
 80032cc:	430a      	orrs	r2, r1
 80032ce:	492a      	ldr	r1, [pc, #168]	@ (8003378 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	610b      	str	r3, [r1, #16]
 80032d4:	e027      	b.n	8003326 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d112      	bne.n	8003302 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032dc:	4b26      	ldr	r3, [pc, #152]	@ (8003378 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80032e4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6892      	ldr	r2, [r2, #8]
 80032ec:	0211      	lsls	r1, r2, #8
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6912      	ldr	r2, [r2, #16]
 80032f2:	0852      	lsrs	r2, r2, #1
 80032f4:	3a01      	subs	r2, #1
 80032f6:	0552      	lsls	r2, r2, #21
 80032f8:	430a      	orrs	r2, r1
 80032fa:	491f      	ldr	r1, [pc, #124]	@ (8003378 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	610b      	str	r3, [r1, #16]
 8003300:	e011      	b.n	8003326 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003302:	4b1d      	ldr	r3, [pc, #116]	@ (8003378 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800330a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6892      	ldr	r2, [r2, #8]
 8003312:	0211      	lsls	r1, r2, #8
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6952      	ldr	r2, [r2, #20]
 8003318:	0852      	lsrs	r2, r2, #1
 800331a:	3a01      	subs	r2, #1
 800331c:	0652      	lsls	r2, r2, #25
 800331e:	430a      	orrs	r2, r1
 8003320:	4915      	ldr	r1, [pc, #84]	@ (8003378 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003322:	4313      	orrs	r3, r2
 8003324:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003326:	4b14      	ldr	r3, [pc, #80]	@ (8003378 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a13      	ldr	r2, [pc, #76]	@ (8003378 <RCCEx_PLLSAI1_Config+0x1e0>)
 800332c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003330:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003332:	f7fd fe69 	bl	8001008 <HAL_GetTick>
 8003336:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003338:	e009      	b.n	800334e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800333a:	f7fd fe65 	bl	8001008 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d902      	bls.n	800334e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	73fb      	strb	r3, [r7, #15]
          break;
 800334c:	e005      	b.n	800335a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800334e:	4b0a      	ldr	r3, [pc, #40]	@ (8003378 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0ef      	beq.n	800333a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d106      	bne.n	800336e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003360:	4b05      	ldr	r3, [pc, #20]	@ (8003378 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003362:	691a      	ldr	r2, [r3, #16]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	4903      	ldr	r1, [pc, #12]	@ (8003378 <RCCEx_PLLSAI1_Config+0x1e0>)
 800336a:	4313      	orrs	r3, r2
 800336c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800336e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40021000 	.word	0x40021000

0800337c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e049      	b.n	8003422 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	795b      	ldrb	r3, [r3, #5]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d105      	bne.n	80033a4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fd fb18 	bl	80009d4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0204 	orr.w	r2, r2, #4
 80033b8:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c4:	2b40      	cmp	r3, #64	@ 0x40
 80033c6:	d104      	bne.n	80033d2 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2204      	movs	r2, #4
 80033cc:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e027      	b.n	8003422 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80033d2:	f7fd fe19 	bl	8001008 <HAL_GetTick>
 80033d6:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 80033d8:	e015      	b.n	8003406 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80033da:	f7fd fe15 	bl	8001008 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d90e      	bls.n	8003406 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d007      	beq.n	8003406 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2204      	movs	r2, #4
 80033fa:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e00d      	b.n	8003422 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b01      	cmp	r3, #1
 8003412:	d1e2      	bne.n	80033da <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	791b      	ldrb	r3, [r3, #4]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_RNG_GenerateRandomNumber+0x1a>
 8003440:	2302      	movs	r3, #2
 8003442:	e044      	b.n	80034ce <HAL_RNG_GenerateRandomNumber+0xa4>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	795b      	ldrb	r3, [r3, #5]
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b01      	cmp	r3, #1
 8003452:	d133      	bne.n	80034bc <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	715a      	strb	r2, [r3, #5]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800345a:	f7fd fdd5 	bl	8001008 <HAL_GetTick>
 800345e:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003460:	e018      	b.n	8003494 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003462:	f7fd fdd1 	bl	8001008 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d911      	bls.n	8003494 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b01      	cmp	r3, #1
 800347c:	d00a      	beq.n	8003494 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e01c      	b.n	80034ce <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d1df      	bne.n	8003462 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	60da      	str	r2, [r3, #12]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68da      	ldr	r2, [r3, #12]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	715a      	strb	r2, [r3, #5]
 80034ba:	e004      	b.n	80034c6 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2204      	movs	r2, #4
 80034c0:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	711a      	strb	r2, [r3, #4]

  return status;
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b082      	sub	sp, #8
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e049      	b.n	800357c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d106      	bne.n	8003502 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7fd fbff 	bl	8000d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2202      	movs	r2, #2
 8003506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3304      	adds	r3, #4
 8003512:	4619      	mov	r1, r3
 8003514:	4610      	mov	r0, r2
 8003516:	f000 fa75 	bl	8003a04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e049      	b.n	800362a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f841 	bl	8003632 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3304      	adds	r3, #4
 80035c0:	4619      	mov	r1, r3
 80035c2:	4610      	mov	r0, r2
 80035c4:	f000 fa1e 	bl	8003a04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
	...

08003648 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003662:	2302      	movs	r3, #2
 8003664:	e0ff      	b.n	8003866 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b14      	cmp	r3, #20
 8003672:	f200 80f0 	bhi.w	8003856 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003676:	a201      	add	r2, pc, #4	@ (adr r2, 800367c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367c:	080036d1 	.word	0x080036d1
 8003680:	08003857 	.word	0x08003857
 8003684:	08003857 	.word	0x08003857
 8003688:	08003857 	.word	0x08003857
 800368c:	08003711 	.word	0x08003711
 8003690:	08003857 	.word	0x08003857
 8003694:	08003857 	.word	0x08003857
 8003698:	08003857 	.word	0x08003857
 800369c:	08003753 	.word	0x08003753
 80036a0:	08003857 	.word	0x08003857
 80036a4:	08003857 	.word	0x08003857
 80036a8:	08003857 	.word	0x08003857
 80036ac:	08003793 	.word	0x08003793
 80036b0:	08003857 	.word	0x08003857
 80036b4:	08003857 	.word	0x08003857
 80036b8:	08003857 	.word	0x08003857
 80036bc:	080037d5 	.word	0x080037d5
 80036c0:	08003857 	.word	0x08003857
 80036c4:	08003857 	.word	0x08003857
 80036c8:	08003857 	.word	0x08003857
 80036cc:	08003815 	.word	0x08003815
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68b9      	ldr	r1, [r7, #8]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fa04 	bl	8003ae4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699a      	ldr	r2, [r3, #24]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0208 	orr.w	r2, r2, #8
 80036ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699a      	ldr	r2, [r3, #24]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0204 	bic.w	r2, r2, #4
 80036fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6999      	ldr	r1, [r3, #24]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	691a      	ldr	r2, [r3, #16]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	619a      	str	r2, [r3, #24]
      break;
 800370e:	e0a5      	b.n	800385c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68b9      	ldr	r1, [r7, #8]
 8003716:	4618      	mov	r0, r3
 8003718:	f000 fa60 	bl	8003bdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699a      	ldr	r2, [r3, #24]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800372a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699a      	ldr	r2, [r3, #24]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800373a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6999      	ldr	r1, [r3, #24]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	021a      	lsls	r2, r3, #8
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	619a      	str	r2, [r3, #24]
      break;
 8003750:	e084      	b.n	800385c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68b9      	ldr	r1, [r7, #8]
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fab9 	bl	8003cd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69da      	ldr	r2, [r3, #28]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 0208 	orr.w	r2, r2, #8
 800376c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69da      	ldr	r2, [r3, #28]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0204 	bic.w	r2, r2, #4
 800377c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69d9      	ldr	r1, [r3, #28]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	691a      	ldr	r2, [r3, #16]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	61da      	str	r2, [r3, #28]
      break;
 8003790:	e064      	b.n	800385c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68b9      	ldr	r1, [r7, #8]
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fb11 	bl	8003dc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69da      	ldr	r2, [r3, #28]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69da      	ldr	r2, [r3, #28]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69d9      	ldr	r1, [r3, #28]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	021a      	lsls	r2, r3, #8
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	61da      	str	r2, [r3, #28]
      break;
 80037d2:	e043      	b.n	800385c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68b9      	ldr	r1, [r7, #8]
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 fb4e 	bl	8003e7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0208 	orr.w	r2, r2, #8
 80037ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0204 	bic.w	r2, r2, #4
 80037fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	691a      	ldr	r2, [r3, #16]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003812:	e023      	b.n	800385c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68b9      	ldr	r1, [r7, #8]
 800381a:	4618      	mov	r0, r3
 800381c:	f000 fb86 	bl	8003f2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800382e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800383e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	021a      	lsls	r2, r3, #8
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003854:	e002      	b.n	800385c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	75fb      	strb	r3, [r7, #23]
      break;
 800385a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003864:	7dfb      	ldrb	r3, [r7, #23]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop

08003870 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_TIM_ConfigClockSource+0x1c>
 8003888:	2302      	movs	r3, #2
 800388a:	e0b6      	b.n	80039fa <HAL_TIM_ConfigClockSource+0x18a>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80038ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038c8:	d03e      	beq.n	8003948 <HAL_TIM_ConfigClockSource+0xd8>
 80038ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038ce:	f200 8087 	bhi.w	80039e0 <HAL_TIM_ConfigClockSource+0x170>
 80038d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038d6:	f000 8086 	beq.w	80039e6 <HAL_TIM_ConfigClockSource+0x176>
 80038da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038de:	d87f      	bhi.n	80039e0 <HAL_TIM_ConfigClockSource+0x170>
 80038e0:	2b70      	cmp	r3, #112	@ 0x70
 80038e2:	d01a      	beq.n	800391a <HAL_TIM_ConfigClockSource+0xaa>
 80038e4:	2b70      	cmp	r3, #112	@ 0x70
 80038e6:	d87b      	bhi.n	80039e0 <HAL_TIM_ConfigClockSource+0x170>
 80038e8:	2b60      	cmp	r3, #96	@ 0x60
 80038ea:	d050      	beq.n	800398e <HAL_TIM_ConfigClockSource+0x11e>
 80038ec:	2b60      	cmp	r3, #96	@ 0x60
 80038ee:	d877      	bhi.n	80039e0 <HAL_TIM_ConfigClockSource+0x170>
 80038f0:	2b50      	cmp	r3, #80	@ 0x50
 80038f2:	d03c      	beq.n	800396e <HAL_TIM_ConfigClockSource+0xfe>
 80038f4:	2b50      	cmp	r3, #80	@ 0x50
 80038f6:	d873      	bhi.n	80039e0 <HAL_TIM_ConfigClockSource+0x170>
 80038f8:	2b40      	cmp	r3, #64	@ 0x40
 80038fa:	d058      	beq.n	80039ae <HAL_TIM_ConfigClockSource+0x13e>
 80038fc:	2b40      	cmp	r3, #64	@ 0x40
 80038fe:	d86f      	bhi.n	80039e0 <HAL_TIM_ConfigClockSource+0x170>
 8003900:	2b30      	cmp	r3, #48	@ 0x30
 8003902:	d064      	beq.n	80039ce <HAL_TIM_ConfigClockSource+0x15e>
 8003904:	2b30      	cmp	r3, #48	@ 0x30
 8003906:	d86b      	bhi.n	80039e0 <HAL_TIM_ConfigClockSource+0x170>
 8003908:	2b20      	cmp	r3, #32
 800390a:	d060      	beq.n	80039ce <HAL_TIM_ConfigClockSource+0x15e>
 800390c:	2b20      	cmp	r3, #32
 800390e:	d867      	bhi.n	80039e0 <HAL_TIM_ConfigClockSource+0x170>
 8003910:	2b00      	cmp	r3, #0
 8003912:	d05c      	beq.n	80039ce <HAL_TIM_ConfigClockSource+0x15e>
 8003914:	2b10      	cmp	r3, #16
 8003916:	d05a      	beq.n	80039ce <HAL_TIM_ConfigClockSource+0x15e>
 8003918:	e062      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800392a:	f000 fbd3 	bl	80040d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800393c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	609a      	str	r2, [r3, #8]
      break;
 8003946:	e04f      	b.n	80039e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003958:	f000 fbbc 	bl	80040d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800396a:	609a      	str	r2, [r3, #8]
      break;
 800396c:	e03c      	b.n	80039e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800397a:	461a      	mov	r2, r3
 800397c:	f000 fb30 	bl	8003fe0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2150      	movs	r1, #80	@ 0x50
 8003986:	4618      	mov	r0, r3
 8003988:	f000 fb89 	bl	800409e <TIM_ITRx_SetConfig>
      break;
 800398c:	e02c      	b.n	80039e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800399a:	461a      	mov	r2, r3
 800399c:	f000 fb4f 	bl	800403e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2160      	movs	r1, #96	@ 0x60
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fb79 	bl	800409e <TIM_ITRx_SetConfig>
      break;
 80039ac:	e01c      	b.n	80039e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ba:	461a      	mov	r2, r3
 80039bc:	f000 fb10 	bl	8003fe0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2140      	movs	r1, #64	@ 0x40
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fb69 	bl	800409e <TIM_ITRx_SetConfig>
      break;
 80039cc:	e00c      	b.n	80039e8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4619      	mov	r1, r3
 80039d8:	4610      	mov	r0, r2
 80039da:	f000 fb60 	bl	800409e <TIM_ITRx_SetConfig>
      break;
 80039de:	e003      	b.n	80039e8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	73fb      	strb	r3, [r7, #15]
      break;
 80039e4:	e000      	b.n	80039e8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80039e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a30      	ldr	r2, [pc, #192]	@ (8003ad8 <TIM_Base_SetConfig+0xd4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d003      	beq.n	8003a24 <TIM_Base_SetConfig+0x20>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a22:	d108      	bne.n	8003a36 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a27      	ldr	r2, [pc, #156]	@ (8003ad8 <TIM_Base_SetConfig+0xd4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00b      	beq.n	8003a56 <TIM_Base_SetConfig+0x52>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a44:	d007      	beq.n	8003a56 <TIM_Base_SetConfig+0x52>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a24      	ldr	r2, [pc, #144]	@ (8003adc <TIM_Base_SetConfig+0xd8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d003      	beq.n	8003a56 <TIM_Base_SetConfig+0x52>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a23      	ldr	r2, [pc, #140]	@ (8003ae0 <TIM_Base_SetConfig+0xdc>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d108      	bne.n	8003a68 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a12      	ldr	r2, [pc, #72]	@ (8003ad8 <TIM_Base_SetConfig+0xd4>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d007      	beq.n	8003aa4 <TIM_Base_SetConfig+0xa0>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a11      	ldr	r2, [pc, #68]	@ (8003adc <TIM_Base_SetConfig+0xd8>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d003      	beq.n	8003aa4 <TIM_Base_SetConfig+0xa0>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a10      	ldr	r2, [pc, #64]	@ (8003ae0 <TIM_Base_SetConfig+0xdc>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d103      	bne.n	8003aac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d105      	bne.n	8003aca <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f023 0201 	bic.w	r2, r3, #1
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	611a      	str	r2, [r3, #16]
  }
}
 8003aca:	bf00      	nop
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40012c00 	.word	0x40012c00
 8003adc:	40014000 	.word	0x40014000
 8003ae0:	40014400 	.word	0x40014400

08003ae4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	f023 0201 	bic.w	r2, r3, #1
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f023 0303 	bic.w	r3, r3, #3
 8003b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f023 0302 	bic.w	r3, r3, #2
 8003b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a24      	ldr	r2, [pc, #144]	@ (8003bd0 <TIM_OC1_SetConfig+0xec>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d007      	beq.n	8003b54 <TIM_OC1_SetConfig+0x70>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a23      	ldr	r2, [pc, #140]	@ (8003bd4 <TIM_OC1_SetConfig+0xf0>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d003      	beq.n	8003b54 <TIM_OC1_SetConfig+0x70>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a22      	ldr	r2, [pc, #136]	@ (8003bd8 <TIM_OC1_SetConfig+0xf4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d10c      	bne.n	8003b6e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f023 0308 	bic.w	r3, r3, #8
 8003b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f023 0304 	bic.w	r3, r3, #4
 8003b6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a17      	ldr	r2, [pc, #92]	@ (8003bd0 <TIM_OC1_SetConfig+0xec>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d007      	beq.n	8003b86 <TIM_OC1_SetConfig+0xa2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a16      	ldr	r2, [pc, #88]	@ (8003bd4 <TIM_OC1_SetConfig+0xf0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d003      	beq.n	8003b86 <TIM_OC1_SetConfig+0xa2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a15      	ldr	r2, [pc, #84]	@ (8003bd8 <TIM_OC1_SetConfig+0xf4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d111      	bne.n	8003baa <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	621a      	str	r2, [r3, #32]
}
 8003bc4:	bf00      	nop
 8003bc6:	371c      	adds	r7, #28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	40012c00 	.word	0x40012c00
 8003bd4:	40014000 	.word	0x40014000
 8003bd8:	40014400 	.word	0x40014400

08003bdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	f023 0210 	bic.w	r2, r3, #16
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	021b      	lsls	r3, r3, #8
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f023 0320 	bic.w	r3, r3, #32
 8003c2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a22      	ldr	r2, [pc, #136]	@ (8003cc4 <TIM_OC2_SetConfig+0xe8>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d10d      	bne.n	8003c5c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a19      	ldr	r2, [pc, #100]	@ (8003cc4 <TIM_OC2_SetConfig+0xe8>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d007      	beq.n	8003c74 <TIM_OC2_SetConfig+0x98>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a18      	ldr	r2, [pc, #96]	@ (8003cc8 <TIM_OC2_SetConfig+0xec>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d003      	beq.n	8003c74 <TIM_OC2_SetConfig+0x98>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a17      	ldr	r2, [pc, #92]	@ (8003ccc <TIM_OC2_SetConfig+0xf0>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d113      	bne.n	8003c9c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	621a      	str	r2, [r3, #32]
}
 8003cb6:	bf00      	nop
 8003cb8:	371c      	adds	r7, #28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40012c00 	.word	0x40012c00
 8003cc8:	40014000 	.word	0x40014000
 8003ccc:	40014400 	.word	0x40014400

08003cd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 0303 	bic.w	r3, r3, #3
 8003d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	021b      	lsls	r3, r3, #8
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a21      	ldr	r2, [pc, #132]	@ (8003db4 <TIM_OC3_SetConfig+0xe4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d10d      	bne.n	8003d4e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	021b      	lsls	r3, r3, #8
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a18      	ldr	r2, [pc, #96]	@ (8003db4 <TIM_OC3_SetConfig+0xe4>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d007      	beq.n	8003d66 <TIM_OC3_SetConfig+0x96>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a17      	ldr	r2, [pc, #92]	@ (8003db8 <TIM_OC3_SetConfig+0xe8>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d003      	beq.n	8003d66 <TIM_OC3_SetConfig+0x96>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a16      	ldr	r2, [pc, #88]	@ (8003dbc <TIM_OC3_SetConfig+0xec>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d113      	bne.n	8003d8e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	621a      	str	r2, [r3, #32]
}
 8003da8:	bf00      	nop
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	40012c00 	.word	0x40012c00
 8003db8:	40014000 	.word	0x40014000
 8003dbc:	40014400 	.word	0x40014400

08003dc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b087      	sub	sp, #28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	021b      	lsls	r3, r3, #8
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	031b      	lsls	r3, r3, #12
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a14      	ldr	r2, [pc, #80]	@ (8003e70 <TIM_OC4_SetConfig+0xb0>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d007      	beq.n	8003e34 <TIM_OC4_SetConfig+0x74>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a13      	ldr	r2, [pc, #76]	@ (8003e74 <TIM_OC4_SetConfig+0xb4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d003      	beq.n	8003e34 <TIM_OC4_SetConfig+0x74>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a12      	ldr	r2, [pc, #72]	@ (8003e78 <TIM_OC4_SetConfig+0xb8>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d109      	bne.n	8003e48 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	019b      	lsls	r3, r3, #6
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	621a      	str	r2, [r3, #32]
}
 8003e62:	bf00      	nop
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40012c00 	.word	0x40012c00
 8003e74:	40014000 	.word	0x40014000
 8003e78:	40014400 	.word	0x40014400

08003e7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003ec0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	041b      	lsls	r3, r3, #16
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a13      	ldr	r2, [pc, #76]	@ (8003f20 <TIM_OC5_SetConfig+0xa4>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d007      	beq.n	8003ee6 <TIM_OC5_SetConfig+0x6a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a12      	ldr	r2, [pc, #72]	@ (8003f24 <TIM_OC5_SetConfig+0xa8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d003      	beq.n	8003ee6 <TIM_OC5_SetConfig+0x6a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a11      	ldr	r2, [pc, #68]	@ (8003f28 <TIM_OC5_SetConfig+0xac>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d109      	bne.n	8003efa <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	021b      	lsls	r3, r3, #8
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	621a      	str	r2, [r3, #32]
}
 8003f14:	bf00      	nop
 8003f16:	371c      	adds	r7, #28
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	40012c00 	.word	0x40012c00
 8003f24:	40014000 	.word	0x40014000
 8003f28:	40014400 	.word	0x40014400

08003f2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	021b      	lsls	r3, r3, #8
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	051b      	lsls	r3, r3, #20
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a14      	ldr	r2, [pc, #80]	@ (8003fd4 <TIM_OC6_SetConfig+0xa8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d007      	beq.n	8003f98 <TIM_OC6_SetConfig+0x6c>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a13      	ldr	r2, [pc, #76]	@ (8003fd8 <TIM_OC6_SetConfig+0xac>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d003      	beq.n	8003f98 <TIM_OC6_SetConfig+0x6c>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a12      	ldr	r2, [pc, #72]	@ (8003fdc <TIM_OC6_SetConfig+0xb0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d109      	bne.n	8003fac <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	029b      	lsls	r3, r3, #10
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	621a      	str	r2, [r3, #32]
}
 8003fc6:	bf00      	nop
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40012c00 	.word	0x40012c00
 8003fd8:	40014000 	.word	0x40014000
 8003fdc:	40014400 	.word	0x40014400

08003fe0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	f023 0201 	bic.w	r2, r3, #1
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800400a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4313      	orrs	r3, r2
 8004014:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f023 030a 	bic.w	r3, r3, #10
 800401c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	621a      	str	r2, [r3, #32]
}
 8004032:	bf00      	nop
 8004034:	371c      	adds	r7, #28
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800403e:	b480      	push	{r7}
 8004040:	b087      	sub	sp, #28
 8004042:	af00      	add	r7, sp, #0
 8004044:	60f8      	str	r0, [r7, #12]
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	f023 0210 	bic.w	r2, r3, #16
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004068:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	031b      	lsls	r3, r3, #12
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800407a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	621a      	str	r2, [r3, #32]
}
 8004092:	bf00      	nop
 8004094:	371c      	adds	r7, #28
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800409e:	b480      	push	{r7}
 80040a0:	b085      	sub	sp, #20
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f043 0307 	orr.w	r3, r3, #7
 80040c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	609a      	str	r2, [r3, #8]
}
 80040c8:	bf00      	nop
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
 80040e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	021a      	lsls	r2, r3, #8
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	4313      	orrs	r3, r2
 8004100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	609a      	str	r2, [r3, #8]
}
 8004108:	bf00      	nop
 800410a:	371c      	adds	r7, #28
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004128:	2302      	movs	r3, #2
 800412a:	e04f      	b.n	80041cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a21      	ldr	r2, [pc, #132]	@ (80041d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d108      	bne.n	8004168 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800415c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4313      	orrs	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800416e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a14      	ldr	r2, [pc, #80]	@ (80041d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d009      	beq.n	80041a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004194:	d004      	beq.n	80041a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a10      	ldr	r2, [pc, #64]	@ (80041dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10c      	bne.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	40012c00 	.word	0x40012c00
 80041dc:	40014000 	.word	0x40014000

080041e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80041f8:	2302      	movs	r3, #2
 80041fa:	e060      	b.n	80042be <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	4313      	orrs	r3, r2
 800421e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	4313      	orrs	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4313      	orrs	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	041b      	lsls	r3, r3, #16
 8004272:	4313      	orrs	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a14      	ldr	r2, [pc, #80]	@ (80042cc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d115      	bne.n	80042ac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428a:	051b      	lsls	r3, r3, #20
 800428c:	4313      	orrs	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	40012c00 	.word	0x40012c00

080042d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e040      	b.n	8004364 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d106      	bne.n	80042f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7fc fd8c 	bl	8000e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2224      	movs	r2, #36	@ 0x24
 80042fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0201 	bic.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 fade 	bl	80048d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f8af 	bl	8004480 <UART_SetConfig>
 8004322:	4603      	mov	r3, r0
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e01b      	b.n	8004364 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800433a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689a      	ldr	r2, [r3, #8]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800434a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 fb5d 	bl	8004a1c <UART_CheckIdleState>
 8004362:	4603      	mov	r3, r0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b08a      	sub	sp, #40	@ 0x28
 8004370:	af02      	add	r7, sp, #8
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	603b      	str	r3, [r7, #0]
 8004378:	4613      	mov	r3, r2
 800437a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004380:	2b20      	cmp	r3, #32
 8004382:	d177      	bne.n	8004474 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <HAL_UART_Transmit+0x24>
 800438a:	88fb      	ldrh	r3, [r7, #6]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e070      	b.n	8004476 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2221      	movs	r2, #33	@ 0x21
 80043a0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043a2:	f7fc fe31 	bl	8001008 <HAL_GetTick>
 80043a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	88fa      	ldrh	r2, [r7, #6]
 80043ac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	88fa      	ldrh	r2, [r7, #6]
 80043b4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043c0:	d108      	bne.n	80043d4 <HAL_UART_Transmit+0x68>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d104      	bne.n	80043d4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	61bb      	str	r3, [r7, #24]
 80043d2:	e003      	b.n	80043dc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043d8:	2300      	movs	r3, #0
 80043da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043dc:	e02f      	b.n	800443e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2200      	movs	r2, #0
 80043e6:	2180      	movs	r1, #128	@ 0x80
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 fbbf 	bl	8004b6c <UART_WaitOnFlagUntilTimeout>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d004      	beq.n	80043fe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2220      	movs	r2, #32
 80043f8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e03b      	b.n	8004476 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10b      	bne.n	800441c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	881a      	ldrh	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004410:	b292      	uxth	r2, r2
 8004412:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	3302      	adds	r3, #2
 8004418:	61bb      	str	r3, [r7, #24]
 800441a:	e007      	b.n	800442c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	781a      	ldrb	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	3301      	adds	r3, #1
 800442a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1c9      	bne.n	80043de <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2200      	movs	r2, #0
 8004452:	2140      	movs	r1, #64	@ 0x40
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 fb89 	bl	8004b6c <UART_WaitOnFlagUntilTimeout>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d004      	beq.n	800446a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2220      	movs	r2, #32
 8004464:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e005      	b.n	8004476 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2220      	movs	r2, #32
 800446e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004470:	2300      	movs	r3, #0
 8004472:	e000      	b.n	8004476 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004474:	2302      	movs	r3, #2
  }
}
 8004476:	4618      	mov	r0, r3
 8004478:	3720      	adds	r7, #32
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004484:	b08a      	sub	sp, #40	@ 0x28
 8004486:	af00      	add	r7, sp, #0
 8004488:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800448a:	2300      	movs	r3, #0
 800448c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	431a      	orrs	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	431a      	orrs	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	4bb4      	ldr	r3, [pc, #720]	@ (8004780 <UART_SetConfig+0x300>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	6812      	ldr	r2, [r2, #0]
 80044b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044b8:	430b      	orrs	r3, r1
 80044ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4aa9      	ldr	r2, [pc, #676]	@ (8004784 <UART_SetConfig+0x304>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d004      	beq.n	80044ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044e8:	4313      	orrs	r3, r2
 80044ea:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044fc:	430a      	orrs	r2, r1
 80044fe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4aa0      	ldr	r2, [pc, #640]	@ (8004788 <UART_SetConfig+0x308>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d126      	bne.n	8004558 <UART_SetConfig+0xd8>
 800450a:	4ba0      	ldr	r3, [pc, #640]	@ (800478c <UART_SetConfig+0x30c>)
 800450c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004510:	f003 0303 	and.w	r3, r3, #3
 8004514:	2b03      	cmp	r3, #3
 8004516:	d81b      	bhi.n	8004550 <UART_SetConfig+0xd0>
 8004518:	a201      	add	r2, pc, #4	@ (adr r2, 8004520 <UART_SetConfig+0xa0>)
 800451a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451e:	bf00      	nop
 8004520:	08004531 	.word	0x08004531
 8004524:	08004541 	.word	0x08004541
 8004528:	08004539 	.word	0x08004539
 800452c:	08004549 	.word	0x08004549
 8004530:	2301      	movs	r3, #1
 8004532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004536:	e080      	b.n	800463a <UART_SetConfig+0x1ba>
 8004538:	2302      	movs	r3, #2
 800453a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800453e:	e07c      	b.n	800463a <UART_SetConfig+0x1ba>
 8004540:	2304      	movs	r3, #4
 8004542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004546:	e078      	b.n	800463a <UART_SetConfig+0x1ba>
 8004548:	2308      	movs	r3, #8
 800454a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800454e:	e074      	b.n	800463a <UART_SetConfig+0x1ba>
 8004550:	2310      	movs	r3, #16
 8004552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004556:	e070      	b.n	800463a <UART_SetConfig+0x1ba>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a8c      	ldr	r2, [pc, #560]	@ (8004790 <UART_SetConfig+0x310>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d138      	bne.n	80045d4 <UART_SetConfig+0x154>
 8004562:	4b8a      	ldr	r3, [pc, #552]	@ (800478c <UART_SetConfig+0x30c>)
 8004564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004568:	f003 030c 	and.w	r3, r3, #12
 800456c:	2b0c      	cmp	r3, #12
 800456e:	d82d      	bhi.n	80045cc <UART_SetConfig+0x14c>
 8004570:	a201      	add	r2, pc, #4	@ (adr r2, 8004578 <UART_SetConfig+0xf8>)
 8004572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004576:	bf00      	nop
 8004578:	080045ad 	.word	0x080045ad
 800457c:	080045cd 	.word	0x080045cd
 8004580:	080045cd 	.word	0x080045cd
 8004584:	080045cd 	.word	0x080045cd
 8004588:	080045bd 	.word	0x080045bd
 800458c:	080045cd 	.word	0x080045cd
 8004590:	080045cd 	.word	0x080045cd
 8004594:	080045cd 	.word	0x080045cd
 8004598:	080045b5 	.word	0x080045b5
 800459c:	080045cd 	.word	0x080045cd
 80045a0:	080045cd 	.word	0x080045cd
 80045a4:	080045cd 	.word	0x080045cd
 80045a8:	080045c5 	.word	0x080045c5
 80045ac:	2300      	movs	r3, #0
 80045ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045b2:	e042      	b.n	800463a <UART_SetConfig+0x1ba>
 80045b4:	2302      	movs	r3, #2
 80045b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ba:	e03e      	b.n	800463a <UART_SetConfig+0x1ba>
 80045bc:	2304      	movs	r3, #4
 80045be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045c2:	e03a      	b.n	800463a <UART_SetConfig+0x1ba>
 80045c4:	2308      	movs	r3, #8
 80045c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ca:	e036      	b.n	800463a <UART_SetConfig+0x1ba>
 80045cc:	2310      	movs	r3, #16
 80045ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045d2:	e032      	b.n	800463a <UART_SetConfig+0x1ba>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a6a      	ldr	r2, [pc, #424]	@ (8004784 <UART_SetConfig+0x304>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d12a      	bne.n	8004634 <UART_SetConfig+0x1b4>
 80045de:	4b6b      	ldr	r3, [pc, #428]	@ (800478c <UART_SetConfig+0x30c>)
 80045e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80045e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045ec:	d01a      	beq.n	8004624 <UART_SetConfig+0x1a4>
 80045ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045f2:	d81b      	bhi.n	800462c <UART_SetConfig+0x1ac>
 80045f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045f8:	d00c      	beq.n	8004614 <UART_SetConfig+0x194>
 80045fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045fe:	d815      	bhi.n	800462c <UART_SetConfig+0x1ac>
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <UART_SetConfig+0x18c>
 8004604:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004608:	d008      	beq.n	800461c <UART_SetConfig+0x19c>
 800460a:	e00f      	b.n	800462c <UART_SetConfig+0x1ac>
 800460c:	2300      	movs	r3, #0
 800460e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004612:	e012      	b.n	800463a <UART_SetConfig+0x1ba>
 8004614:	2302      	movs	r3, #2
 8004616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800461a:	e00e      	b.n	800463a <UART_SetConfig+0x1ba>
 800461c:	2304      	movs	r3, #4
 800461e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004622:	e00a      	b.n	800463a <UART_SetConfig+0x1ba>
 8004624:	2308      	movs	r3, #8
 8004626:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800462a:	e006      	b.n	800463a <UART_SetConfig+0x1ba>
 800462c:	2310      	movs	r3, #16
 800462e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004632:	e002      	b.n	800463a <UART_SetConfig+0x1ba>
 8004634:	2310      	movs	r3, #16
 8004636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a51      	ldr	r2, [pc, #324]	@ (8004784 <UART_SetConfig+0x304>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d17a      	bne.n	800473a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004644:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004648:	2b08      	cmp	r3, #8
 800464a:	d824      	bhi.n	8004696 <UART_SetConfig+0x216>
 800464c:	a201      	add	r2, pc, #4	@ (adr r2, 8004654 <UART_SetConfig+0x1d4>)
 800464e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004652:	bf00      	nop
 8004654:	08004679 	.word	0x08004679
 8004658:	08004697 	.word	0x08004697
 800465c:	08004681 	.word	0x08004681
 8004660:	08004697 	.word	0x08004697
 8004664:	08004687 	.word	0x08004687
 8004668:	08004697 	.word	0x08004697
 800466c:	08004697 	.word	0x08004697
 8004670:	08004697 	.word	0x08004697
 8004674:	0800468f 	.word	0x0800468f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004678:	f7fe fafc 	bl	8002c74 <HAL_RCC_GetPCLK1Freq>
 800467c:	61f8      	str	r0, [r7, #28]
        break;
 800467e:	e010      	b.n	80046a2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004680:	4b44      	ldr	r3, [pc, #272]	@ (8004794 <UART_SetConfig+0x314>)
 8004682:	61fb      	str	r3, [r7, #28]
        break;
 8004684:	e00d      	b.n	80046a2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004686:	f7fe fa5d 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 800468a:	61f8      	str	r0, [r7, #28]
        break;
 800468c:	e009      	b.n	80046a2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800468e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004692:	61fb      	str	r3, [r7, #28]
        break;
 8004694:	e005      	b.n	80046a2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80046a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 8107 	beq.w	80048b8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	4613      	mov	r3, r2
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	4413      	add	r3, r2
 80046b4:	69fa      	ldr	r2, [r7, #28]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d305      	bcc.n	80046c6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046c0:	69fa      	ldr	r2, [r7, #28]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d903      	bls.n	80046ce <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80046cc:	e0f4      	b.n	80048b8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	2200      	movs	r2, #0
 80046d2:	461c      	mov	r4, r3
 80046d4:	4615      	mov	r5, r2
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	022b      	lsls	r3, r5, #8
 80046e0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80046e4:	0222      	lsls	r2, r4, #8
 80046e6:	68f9      	ldr	r1, [r7, #12]
 80046e8:	6849      	ldr	r1, [r1, #4]
 80046ea:	0849      	lsrs	r1, r1, #1
 80046ec:	2000      	movs	r0, #0
 80046ee:	4688      	mov	r8, r1
 80046f0:	4681      	mov	r9, r0
 80046f2:	eb12 0a08 	adds.w	sl, r2, r8
 80046f6:	eb43 0b09 	adc.w	fp, r3, r9
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	603b      	str	r3, [r7, #0]
 8004702:	607a      	str	r2, [r7, #4]
 8004704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004708:	4650      	mov	r0, sl
 800470a:	4659      	mov	r1, fp
 800470c:	f7fb fdb8 	bl	8000280 <__aeabi_uldivmod>
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	4613      	mov	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800471e:	d308      	bcc.n	8004732 <UART_SetConfig+0x2b2>
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004726:	d204      	bcs.n	8004732 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	60da      	str	r2, [r3, #12]
 8004730:	e0c2      	b.n	80048b8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004738:	e0be      	b.n	80048b8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004742:	d16a      	bne.n	800481a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004744:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004748:	2b08      	cmp	r3, #8
 800474a:	d834      	bhi.n	80047b6 <UART_SetConfig+0x336>
 800474c:	a201      	add	r2, pc, #4	@ (adr r2, 8004754 <UART_SetConfig+0x2d4>)
 800474e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004752:	bf00      	nop
 8004754:	08004779 	.word	0x08004779
 8004758:	08004799 	.word	0x08004799
 800475c:	080047a1 	.word	0x080047a1
 8004760:	080047b7 	.word	0x080047b7
 8004764:	080047a7 	.word	0x080047a7
 8004768:	080047b7 	.word	0x080047b7
 800476c:	080047b7 	.word	0x080047b7
 8004770:	080047b7 	.word	0x080047b7
 8004774:	080047af 	.word	0x080047af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004778:	f7fe fa7c 	bl	8002c74 <HAL_RCC_GetPCLK1Freq>
 800477c:	61f8      	str	r0, [r7, #28]
        break;
 800477e:	e020      	b.n	80047c2 <UART_SetConfig+0x342>
 8004780:	efff69f3 	.word	0xefff69f3
 8004784:	40008000 	.word	0x40008000
 8004788:	40013800 	.word	0x40013800
 800478c:	40021000 	.word	0x40021000
 8004790:	40004400 	.word	0x40004400
 8004794:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004798:	f7fe fa82 	bl	8002ca0 <HAL_RCC_GetPCLK2Freq>
 800479c:	61f8      	str	r0, [r7, #28]
        break;
 800479e:	e010      	b.n	80047c2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047a0:	4b4c      	ldr	r3, [pc, #304]	@ (80048d4 <UART_SetConfig+0x454>)
 80047a2:	61fb      	str	r3, [r7, #28]
        break;
 80047a4:	e00d      	b.n	80047c2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047a6:	f7fe f9cd 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 80047aa:	61f8      	str	r0, [r7, #28]
        break;
 80047ac:	e009      	b.n	80047c2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047b2:	61fb      	str	r3, [r7, #28]
        break;
 80047b4:	e005      	b.n	80047c2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80047c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d077      	beq.n	80048b8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	005a      	lsls	r2, r3, #1
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	085b      	lsrs	r3, r3, #1
 80047d2:	441a      	add	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047dc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	2b0f      	cmp	r3, #15
 80047e2:	d916      	bls.n	8004812 <UART_SetConfig+0x392>
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047ea:	d212      	bcs.n	8004812 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	f023 030f 	bic.w	r3, r3, #15
 80047f4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	085b      	lsrs	r3, r3, #1
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	b29a      	uxth	r2, r3
 8004802:	8afb      	ldrh	r3, [r7, #22]
 8004804:	4313      	orrs	r3, r2
 8004806:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	8afa      	ldrh	r2, [r7, #22]
 800480e:	60da      	str	r2, [r3, #12]
 8004810:	e052      	b.n	80048b8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004818:	e04e      	b.n	80048b8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800481a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800481e:	2b08      	cmp	r3, #8
 8004820:	d827      	bhi.n	8004872 <UART_SetConfig+0x3f2>
 8004822:	a201      	add	r2, pc, #4	@ (adr r2, 8004828 <UART_SetConfig+0x3a8>)
 8004824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004828:	0800484d 	.word	0x0800484d
 800482c:	08004855 	.word	0x08004855
 8004830:	0800485d 	.word	0x0800485d
 8004834:	08004873 	.word	0x08004873
 8004838:	08004863 	.word	0x08004863
 800483c:	08004873 	.word	0x08004873
 8004840:	08004873 	.word	0x08004873
 8004844:	08004873 	.word	0x08004873
 8004848:	0800486b 	.word	0x0800486b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800484c:	f7fe fa12 	bl	8002c74 <HAL_RCC_GetPCLK1Freq>
 8004850:	61f8      	str	r0, [r7, #28]
        break;
 8004852:	e014      	b.n	800487e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004854:	f7fe fa24 	bl	8002ca0 <HAL_RCC_GetPCLK2Freq>
 8004858:	61f8      	str	r0, [r7, #28]
        break;
 800485a:	e010      	b.n	800487e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800485c:	4b1d      	ldr	r3, [pc, #116]	@ (80048d4 <UART_SetConfig+0x454>)
 800485e:	61fb      	str	r3, [r7, #28]
        break;
 8004860:	e00d      	b.n	800487e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004862:	f7fe f96f 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8004866:	61f8      	str	r0, [r7, #28]
        break;
 8004868:	e009      	b.n	800487e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800486a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800486e:	61fb      	str	r3, [r7, #28]
        break;
 8004870:	e005      	b.n	800487e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004872:	2300      	movs	r3, #0
 8004874:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800487c:	bf00      	nop
    }

    if (pclk != 0U)
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d019      	beq.n	80048b8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	085a      	lsrs	r2, r3, #1
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	441a      	add	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	fbb2 f3f3 	udiv	r3, r2, r3
 8004896:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	2b0f      	cmp	r3, #15
 800489c:	d909      	bls.n	80048b2 <UART_SetConfig+0x432>
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048a4:	d205      	bcs.n	80048b2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	60da      	str	r2, [r3, #12]
 80048b0:	e002      	b.n	80048b8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80048c4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3728      	adds	r7, #40	@ 0x28
 80048cc:	46bd      	mov	sp, r7
 80048ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048d2:	bf00      	nop
 80048d4:	00f42400 	.word	0x00f42400

080048d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e4:	f003 0308 	and.w	r3, r3, #8
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00a      	beq.n	8004902 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00a      	beq.n	8004946 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494a:	f003 0304 	and.w	r3, r3, #4
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496c:	f003 0310 	and.w	r3, r3, #16
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498e:	f003 0320 	and.w	r3, r3, #32
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d01a      	beq.n	80049ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049d6:	d10a      	bne.n	80049ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	605a      	str	r2, [r3, #4]
  }
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b098      	sub	sp, #96	@ 0x60
 8004a20:	af02      	add	r7, sp, #8
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a2c:	f7fc faec 	bl	8001008 <HAL_GetTick>
 8004a30:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0308 	and.w	r3, r3, #8
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d12e      	bne.n	8004a9e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f88c 	bl	8004b6c <UART_WaitOnFlagUntilTimeout>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d021      	beq.n	8004a9e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a62:	e853 3f00 	ldrex	r3, [r3]
 8004a66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	461a      	mov	r2, r3
 8004a76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a78:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a7a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a80:	e841 2300 	strex	r3, r2, [r1]
 8004a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1e6      	bne.n	8004a5a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e062      	b.n	8004b64 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d149      	bne.n	8004b40 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f856 	bl	8004b6c <UART_WaitOnFlagUntilTimeout>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d03c      	beq.n	8004b40 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ace:	e853 3f00 	ldrex	r3, [r3]
 8004ad2:	623b      	str	r3, [r7, #32]
   return(result);
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ae4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ae6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004aea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004aec:	e841 2300 	strex	r3, r2, [r1]
 8004af0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e6      	bne.n	8004ac6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3308      	adds	r3, #8
 8004afe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	e853 3f00 	ldrex	r3, [r3]
 8004b06:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0301 	bic.w	r3, r3, #1
 8004b0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3308      	adds	r3, #8
 8004b16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b18:	61fa      	str	r2, [r7, #28]
 8004b1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1c:	69b9      	ldr	r1, [r7, #24]
 8004b1e:	69fa      	ldr	r2, [r7, #28]
 8004b20:	e841 2300 	strex	r3, r2, [r1]
 8004b24:	617b      	str	r3, [r7, #20]
   return(result);
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1e5      	bne.n	8004af8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e011      	b.n	8004b64 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2220      	movs	r2, #32
 8004b44:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3758      	adds	r7, #88	@ 0x58
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	603b      	str	r3, [r7, #0]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b7c:	e04f      	b.n	8004c1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b84:	d04b      	beq.n	8004c1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b86:	f7fc fa3f 	bl	8001008 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d302      	bcc.n	8004b9c <UART_WaitOnFlagUntilTimeout+0x30>
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e04e      	b.n	8004c3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d037      	beq.n	8004c1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2b80      	cmp	r3, #128	@ 0x80
 8004bb2:	d034      	beq.n	8004c1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b40      	cmp	r3, #64	@ 0x40
 8004bb8:	d031      	beq.n	8004c1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69db      	ldr	r3, [r3, #28]
 8004bc0:	f003 0308 	and.w	r3, r3, #8
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d110      	bne.n	8004bea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2208      	movs	r2, #8
 8004bce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 f838 	bl	8004c46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2208      	movs	r2, #8
 8004bda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e029      	b.n	8004c3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bf8:	d111      	bne.n	8004c1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 f81e 	bl	8004c46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e00f      	b.n	8004c3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69da      	ldr	r2, [r3, #28]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	4013      	ands	r3, r2
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	bf0c      	ite	eq
 8004c2e:	2301      	moveq	r3, #1
 8004c30:	2300      	movne	r3, #0
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	461a      	mov	r2, r3
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d0a0      	beq.n	8004b7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b095      	sub	sp, #84	@ 0x54
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c56:	e853 3f00 	ldrex	r3, [r3]
 8004c5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c6e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c74:	e841 2300 	strex	r3, r2, [r1]
 8004c78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1e6      	bne.n	8004c4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3308      	adds	r3, #8
 8004c86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	e853 3f00 	ldrex	r3, [r3]
 8004c8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	f023 0301 	bic.w	r3, r3, #1
 8004c96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3308      	adds	r3, #8
 8004c9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ca0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ca6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ca8:	e841 2300 	strex	r3, r2, [r1]
 8004cac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1e5      	bne.n	8004c80 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d118      	bne.n	8004cee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	e853 3f00 	ldrex	r3, [r3]
 8004cc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f023 0310 	bic.w	r3, r3, #16
 8004cd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cda:	61bb      	str	r3, [r7, #24]
 8004cdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cde:	6979      	ldr	r1, [r7, #20]
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	e841 2300 	strex	r3, r2, [r1]
 8004ce6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1e6      	bne.n	8004cbc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d02:	bf00      	nop
 8004d04:	3754      	adds	r7, #84	@ 0x54
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
	...

08004d10 <siprintf>:
 8004d10:	b40e      	push	{r1, r2, r3}
 8004d12:	b500      	push	{lr}
 8004d14:	b09c      	sub	sp, #112	@ 0x70
 8004d16:	ab1d      	add	r3, sp, #116	@ 0x74
 8004d18:	9002      	str	r0, [sp, #8]
 8004d1a:	9006      	str	r0, [sp, #24]
 8004d1c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004d20:	4809      	ldr	r0, [pc, #36]	@ (8004d48 <siprintf+0x38>)
 8004d22:	9107      	str	r1, [sp, #28]
 8004d24:	9104      	str	r1, [sp, #16]
 8004d26:	4909      	ldr	r1, [pc, #36]	@ (8004d4c <siprintf+0x3c>)
 8004d28:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d2c:	9105      	str	r1, [sp, #20]
 8004d2e:	6800      	ldr	r0, [r0, #0]
 8004d30:	9301      	str	r3, [sp, #4]
 8004d32:	a902      	add	r1, sp, #8
 8004d34:	f000 f994 	bl	8005060 <_svfiprintf_r>
 8004d38:	9b02      	ldr	r3, [sp, #8]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	701a      	strb	r2, [r3, #0]
 8004d3e:	b01c      	add	sp, #112	@ 0x70
 8004d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d44:	b003      	add	sp, #12
 8004d46:	4770      	bx	lr
 8004d48:	2000000c 	.word	0x2000000c
 8004d4c:	ffff0208 	.word	0xffff0208

08004d50 <memset>:
 8004d50:	4402      	add	r2, r0
 8004d52:	4603      	mov	r3, r0
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d100      	bne.n	8004d5a <memset+0xa>
 8004d58:	4770      	bx	lr
 8004d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d5e:	e7f9      	b.n	8004d54 <memset+0x4>

08004d60 <__errno>:
 8004d60:	4b01      	ldr	r3, [pc, #4]	@ (8004d68 <__errno+0x8>)
 8004d62:	6818      	ldr	r0, [r3, #0]
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	2000000c 	.word	0x2000000c

08004d6c <__libc_init_array>:
 8004d6c:	b570      	push	{r4, r5, r6, lr}
 8004d6e:	4d0d      	ldr	r5, [pc, #52]	@ (8004da4 <__libc_init_array+0x38>)
 8004d70:	4c0d      	ldr	r4, [pc, #52]	@ (8004da8 <__libc_init_array+0x3c>)
 8004d72:	1b64      	subs	r4, r4, r5
 8004d74:	10a4      	asrs	r4, r4, #2
 8004d76:	2600      	movs	r6, #0
 8004d78:	42a6      	cmp	r6, r4
 8004d7a:	d109      	bne.n	8004d90 <__libc_init_array+0x24>
 8004d7c:	4d0b      	ldr	r5, [pc, #44]	@ (8004dac <__libc_init_array+0x40>)
 8004d7e:	4c0c      	ldr	r4, [pc, #48]	@ (8004db0 <__libc_init_array+0x44>)
 8004d80:	f000 fc66 	bl	8005650 <_init>
 8004d84:	1b64      	subs	r4, r4, r5
 8004d86:	10a4      	asrs	r4, r4, #2
 8004d88:	2600      	movs	r6, #0
 8004d8a:	42a6      	cmp	r6, r4
 8004d8c:	d105      	bne.n	8004d9a <__libc_init_array+0x2e>
 8004d8e:	bd70      	pop	{r4, r5, r6, pc}
 8004d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d94:	4798      	blx	r3
 8004d96:	3601      	adds	r6, #1
 8004d98:	e7ee      	b.n	8004d78 <__libc_init_array+0xc>
 8004d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d9e:	4798      	blx	r3
 8004da0:	3601      	adds	r6, #1
 8004da2:	e7f2      	b.n	8004d8a <__libc_init_array+0x1e>
 8004da4:	08005710 	.word	0x08005710
 8004da8:	08005710 	.word	0x08005710
 8004dac:	08005710 	.word	0x08005710
 8004db0:	08005714 	.word	0x08005714

08004db4 <__retarget_lock_acquire_recursive>:
 8004db4:	4770      	bx	lr

08004db6 <__retarget_lock_release_recursive>:
 8004db6:	4770      	bx	lr

08004db8 <_free_r>:
 8004db8:	b538      	push	{r3, r4, r5, lr}
 8004dba:	4605      	mov	r5, r0
 8004dbc:	2900      	cmp	r1, #0
 8004dbe:	d041      	beq.n	8004e44 <_free_r+0x8c>
 8004dc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dc4:	1f0c      	subs	r4, r1, #4
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	bfb8      	it	lt
 8004dca:	18e4      	addlt	r4, r4, r3
 8004dcc:	f000 f8e0 	bl	8004f90 <__malloc_lock>
 8004dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8004e48 <_free_r+0x90>)
 8004dd2:	6813      	ldr	r3, [r2, #0]
 8004dd4:	b933      	cbnz	r3, 8004de4 <_free_r+0x2c>
 8004dd6:	6063      	str	r3, [r4, #4]
 8004dd8:	6014      	str	r4, [r2, #0]
 8004dda:	4628      	mov	r0, r5
 8004ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004de0:	f000 b8dc 	b.w	8004f9c <__malloc_unlock>
 8004de4:	42a3      	cmp	r3, r4
 8004de6:	d908      	bls.n	8004dfa <_free_r+0x42>
 8004de8:	6820      	ldr	r0, [r4, #0]
 8004dea:	1821      	adds	r1, r4, r0
 8004dec:	428b      	cmp	r3, r1
 8004dee:	bf01      	itttt	eq
 8004df0:	6819      	ldreq	r1, [r3, #0]
 8004df2:	685b      	ldreq	r3, [r3, #4]
 8004df4:	1809      	addeq	r1, r1, r0
 8004df6:	6021      	streq	r1, [r4, #0]
 8004df8:	e7ed      	b.n	8004dd6 <_free_r+0x1e>
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	b10b      	cbz	r3, 8004e04 <_free_r+0x4c>
 8004e00:	42a3      	cmp	r3, r4
 8004e02:	d9fa      	bls.n	8004dfa <_free_r+0x42>
 8004e04:	6811      	ldr	r1, [r2, #0]
 8004e06:	1850      	adds	r0, r2, r1
 8004e08:	42a0      	cmp	r0, r4
 8004e0a:	d10b      	bne.n	8004e24 <_free_r+0x6c>
 8004e0c:	6820      	ldr	r0, [r4, #0]
 8004e0e:	4401      	add	r1, r0
 8004e10:	1850      	adds	r0, r2, r1
 8004e12:	4283      	cmp	r3, r0
 8004e14:	6011      	str	r1, [r2, #0]
 8004e16:	d1e0      	bne.n	8004dda <_free_r+0x22>
 8004e18:	6818      	ldr	r0, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	6053      	str	r3, [r2, #4]
 8004e1e:	4408      	add	r0, r1
 8004e20:	6010      	str	r0, [r2, #0]
 8004e22:	e7da      	b.n	8004dda <_free_r+0x22>
 8004e24:	d902      	bls.n	8004e2c <_free_r+0x74>
 8004e26:	230c      	movs	r3, #12
 8004e28:	602b      	str	r3, [r5, #0]
 8004e2a:	e7d6      	b.n	8004dda <_free_r+0x22>
 8004e2c:	6820      	ldr	r0, [r4, #0]
 8004e2e:	1821      	adds	r1, r4, r0
 8004e30:	428b      	cmp	r3, r1
 8004e32:	bf04      	itt	eq
 8004e34:	6819      	ldreq	r1, [r3, #0]
 8004e36:	685b      	ldreq	r3, [r3, #4]
 8004e38:	6063      	str	r3, [r4, #4]
 8004e3a:	bf04      	itt	eq
 8004e3c:	1809      	addeq	r1, r1, r0
 8004e3e:	6021      	streq	r1, [r4, #0]
 8004e40:	6054      	str	r4, [r2, #4]
 8004e42:	e7ca      	b.n	8004dda <_free_r+0x22>
 8004e44:	bd38      	pop	{r3, r4, r5, pc}
 8004e46:	bf00      	nop
 8004e48:	200002f4 	.word	0x200002f4

08004e4c <sbrk_aligned>:
 8004e4c:	b570      	push	{r4, r5, r6, lr}
 8004e4e:	4e0f      	ldr	r6, [pc, #60]	@ (8004e8c <sbrk_aligned+0x40>)
 8004e50:	460c      	mov	r4, r1
 8004e52:	6831      	ldr	r1, [r6, #0]
 8004e54:	4605      	mov	r5, r0
 8004e56:	b911      	cbnz	r1, 8004e5e <sbrk_aligned+0x12>
 8004e58:	f000 fba6 	bl	80055a8 <_sbrk_r>
 8004e5c:	6030      	str	r0, [r6, #0]
 8004e5e:	4621      	mov	r1, r4
 8004e60:	4628      	mov	r0, r5
 8004e62:	f000 fba1 	bl	80055a8 <_sbrk_r>
 8004e66:	1c43      	adds	r3, r0, #1
 8004e68:	d103      	bne.n	8004e72 <sbrk_aligned+0x26>
 8004e6a:	f04f 34ff 	mov.w	r4, #4294967295
 8004e6e:	4620      	mov	r0, r4
 8004e70:	bd70      	pop	{r4, r5, r6, pc}
 8004e72:	1cc4      	adds	r4, r0, #3
 8004e74:	f024 0403 	bic.w	r4, r4, #3
 8004e78:	42a0      	cmp	r0, r4
 8004e7a:	d0f8      	beq.n	8004e6e <sbrk_aligned+0x22>
 8004e7c:	1a21      	subs	r1, r4, r0
 8004e7e:	4628      	mov	r0, r5
 8004e80:	f000 fb92 	bl	80055a8 <_sbrk_r>
 8004e84:	3001      	adds	r0, #1
 8004e86:	d1f2      	bne.n	8004e6e <sbrk_aligned+0x22>
 8004e88:	e7ef      	b.n	8004e6a <sbrk_aligned+0x1e>
 8004e8a:	bf00      	nop
 8004e8c:	200002f0 	.word	0x200002f0

08004e90 <_malloc_r>:
 8004e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e94:	1ccd      	adds	r5, r1, #3
 8004e96:	f025 0503 	bic.w	r5, r5, #3
 8004e9a:	3508      	adds	r5, #8
 8004e9c:	2d0c      	cmp	r5, #12
 8004e9e:	bf38      	it	cc
 8004ea0:	250c      	movcc	r5, #12
 8004ea2:	2d00      	cmp	r5, #0
 8004ea4:	4606      	mov	r6, r0
 8004ea6:	db01      	blt.n	8004eac <_malloc_r+0x1c>
 8004ea8:	42a9      	cmp	r1, r5
 8004eaa:	d904      	bls.n	8004eb6 <_malloc_r+0x26>
 8004eac:	230c      	movs	r3, #12
 8004eae:	6033      	str	r3, [r6, #0]
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f8c <_malloc_r+0xfc>
 8004eba:	f000 f869 	bl	8004f90 <__malloc_lock>
 8004ebe:	f8d8 3000 	ldr.w	r3, [r8]
 8004ec2:	461c      	mov	r4, r3
 8004ec4:	bb44      	cbnz	r4, 8004f18 <_malloc_r+0x88>
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	4630      	mov	r0, r6
 8004eca:	f7ff ffbf 	bl	8004e4c <sbrk_aligned>
 8004ece:	1c43      	adds	r3, r0, #1
 8004ed0:	4604      	mov	r4, r0
 8004ed2:	d158      	bne.n	8004f86 <_malloc_r+0xf6>
 8004ed4:	f8d8 4000 	ldr.w	r4, [r8]
 8004ed8:	4627      	mov	r7, r4
 8004eda:	2f00      	cmp	r7, #0
 8004edc:	d143      	bne.n	8004f66 <_malloc_r+0xd6>
 8004ede:	2c00      	cmp	r4, #0
 8004ee0:	d04b      	beq.n	8004f7a <_malloc_r+0xea>
 8004ee2:	6823      	ldr	r3, [r4, #0]
 8004ee4:	4639      	mov	r1, r7
 8004ee6:	4630      	mov	r0, r6
 8004ee8:	eb04 0903 	add.w	r9, r4, r3
 8004eec:	f000 fb5c 	bl	80055a8 <_sbrk_r>
 8004ef0:	4581      	cmp	r9, r0
 8004ef2:	d142      	bne.n	8004f7a <_malloc_r+0xea>
 8004ef4:	6821      	ldr	r1, [r4, #0]
 8004ef6:	1a6d      	subs	r5, r5, r1
 8004ef8:	4629      	mov	r1, r5
 8004efa:	4630      	mov	r0, r6
 8004efc:	f7ff ffa6 	bl	8004e4c <sbrk_aligned>
 8004f00:	3001      	adds	r0, #1
 8004f02:	d03a      	beq.n	8004f7a <_malloc_r+0xea>
 8004f04:	6823      	ldr	r3, [r4, #0]
 8004f06:	442b      	add	r3, r5
 8004f08:	6023      	str	r3, [r4, #0]
 8004f0a:	f8d8 3000 	ldr.w	r3, [r8]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	bb62      	cbnz	r2, 8004f6c <_malloc_r+0xdc>
 8004f12:	f8c8 7000 	str.w	r7, [r8]
 8004f16:	e00f      	b.n	8004f38 <_malloc_r+0xa8>
 8004f18:	6822      	ldr	r2, [r4, #0]
 8004f1a:	1b52      	subs	r2, r2, r5
 8004f1c:	d420      	bmi.n	8004f60 <_malloc_r+0xd0>
 8004f1e:	2a0b      	cmp	r2, #11
 8004f20:	d917      	bls.n	8004f52 <_malloc_r+0xc2>
 8004f22:	1961      	adds	r1, r4, r5
 8004f24:	42a3      	cmp	r3, r4
 8004f26:	6025      	str	r5, [r4, #0]
 8004f28:	bf18      	it	ne
 8004f2a:	6059      	strne	r1, [r3, #4]
 8004f2c:	6863      	ldr	r3, [r4, #4]
 8004f2e:	bf08      	it	eq
 8004f30:	f8c8 1000 	streq.w	r1, [r8]
 8004f34:	5162      	str	r2, [r4, r5]
 8004f36:	604b      	str	r3, [r1, #4]
 8004f38:	4630      	mov	r0, r6
 8004f3a:	f000 f82f 	bl	8004f9c <__malloc_unlock>
 8004f3e:	f104 000b 	add.w	r0, r4, #11
 8004f42:	1d23      	adds	r3, r4, #4
 8004f44:	f020 0007 	bic.w	r0, r0, #7
 8004f48:	1ac2      	subs	r2, r0, r3
 8004f4a:	bf1c      	itt	ne
 8004f4c:	1a1b      	subne	r3, r3, r0
 8004f4e:	50a3      	strne	r3, [r4, r2]
 8004f50:	e7af      	b.n	8004eb2 <_malloc_r+0x22>
 8004f52:	6862      	ldr	r2, [r4, #4]
 8004f54:	42a3      	cmp	r3, r4
 8004f56:	bf0c      	ite	eq
 8004f58:	f8c8 2000 	streq.w	r2, [r8]
 8004f5c:	605a      	strne	r2, [r3, #4]
 8004f5e:	e7eb      	b.n	8004f38 <_malloc_r+0xa8>
 8004f60:	4623      	mov	r3, r4
 8004f62:	6864      	ldr	r4, [r4, #4]
 8004f64:	e7ae      	b.n	8004ec4 <_malloc_r+0x34>
 8004f66:	463c      	mov	r4, r7
 8004f68:	687f      	ldr	r7, [r7, #4]
 8004f6a:	e7b6      	b.n	8004eda <_malloc_r+0x4a>
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	42a3      	cmp	r3, r4
 8004f72:	d1fb      	bne.n	8004f6c <_malloc_r+0xdc>
 8004f74:	2300      	movs	r3, #0
 8004f76:	6053      	str	r3, [r2, #4]
 8004f78:	e7de      	b.n	8004f38 <_malloc_r+0xa8>
 8004f7a:	230c      	movs	r3, #12
 8004f7c:	6033      	str	r3, [r6, #0]
 8004f7e:	4630      	mov	r0, r6
 8004f80:	f000 f80c 	bl	8004f9c <__malloc_unlock>
 8004f84:	e794      	b.n	8004eb0 <_malloc_r+0x20>
 8004f86:	6005      	str	r5, [r0, #0]
 8004f88:	e7d6      	b.n	8004f38 <_malloc_r+0xa8>
 8004f8a:	bf00      	nop
 8004f8c:	200002f4 	.word	0x200002f4

08004f90 <__malloc_lock>:
 8004f90:	4801      	ldr	r0, [pc, #4]	@ (8004f98 <__malloc_lock+0x8>)
 8004f92:	f7ff bf0f 	b.w	8004db4 <__retarget_lock_acquire_recursive>
 8004f96:	bf00      	nop
 8004f98:	200002ec 	.word	0x200002ec

08004f9c <__malloc_unlock>:
 8004f9c:	4801      	ldr	r0, [pc, #4]	@ (8004fa4 <__malloc_unlock+0x8>)
 8004f9e:	f7ff bf0a 	b.w	8004db6 <__retarget_lock_release_recursive>
 8004fa2:	bf00      	nop
 8004fa4:	200002ec 	.word	0x200002ec

08004fa8 <__ssputs_r>:
 8004fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fac:	688e      	ldr	r6, [r1, #8]
 8004fae:	461f      	mov	r7, r3
 8004fb0:	42be      	cmp	r6, r7
 8004fb2:	680b      	ldr	r3, [r1, #0]
 8004fb4:	4682      	mov	sl, r0
 8004fb6:	460c      	mov	r4, r1
 8004fb8:	4690      	mov	r8, r2
 8004fba:	d82d      	bhi.n	8005018 <__ssputs_r+0x70>
 8004fbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004fc0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004fc4:	d026      	beq.n	8005014 <__ssputs_r+0x6c>
 8004fc6:	6965      	ldr	r5, [r4, #20]
 8004fc8:	6909      	ldr	r1, [r1, #16]
 8004fca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fce:	eba3 0901 	sub.w	r9, r3, r1
 8004fd2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004fd6:	1c7b      	adds	r3, r7, #1
 8004fd8:	444b      	add	r3, r9
 8004fda:	106d      	asrs	r5, r5, #1
 8004fdc:	429d      	cmp	r5, r3
 8004fde:	bf38      	it	cc
 8004fe0:	461d      	movcc	r5, r3
 8004fe2:	0553      	lsls	r3, r2, #21
 8004fe4:	d527      	bpl.n	8005036 <__ssputs_r+0x8e>
 8004fe6:	4629      	mov	r1, r5
 8004fe8:	f7ff ff52 	bl	8004e90 <_malloc_r>
 8004fec:	4606      	mov	r6, r0
 8004fee:	b360      	cbz	r0, 800504a <__ssputs_r+0xa2>
 8004ff0:	6921      	ldr	r1, [r4, #16]
 8004ff2:	464a      	mov	r2, r9
 8004ff4:	f000 fae8 	bl	80055c8 <memcpy>
 8004ff8:	89a3      	ldrh	r3, [r4, #12]
 8004ffa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004ffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005002:	81a3      	strh	r3, [r4, #12]
 8005004:	6126      	str	r6, [r4, #16]
 8005006:	6165      	str	r5, [r4, #20]
 8005008:	444e      	add	r6, r9
 800500a:	eba5 0509 	sub.w	r5, r5, r9
 800500e:	6026      	str	r6, [r4, #0]
 8005010:	60a5      	str	r5, [r4, #8]
 8005012:	463e      	mov	r6, r7
 8005014:	42be      	cmp	r6, r7
 8005016:	d900      	bls.n	800501a <__ssputs_r+0x72>
 8005018:	463e      	mov	r6, r7
 800501a:	6820      	ldr	r0, [r4, #0]
 800501c:	4632      	mov	r2, r6
 800501e:	4641      	mov	r1, r8
 8005020:	f000 faa8 	bl	8005574 <memmove>
 8005024:	68a3      	ldr	r3, [r4, #8]
 8005026:	1b9b      	subs	r3, r3, r6
 8005028:	60a3      	str	r3, [r4, #8]
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	4433      	add	r3, r6
 800502e:	6023      	str	r3, [r4, #0]
 8005030:	2000      	movs	r0, #0
 8005032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005036:	462a      	mov	r2, r5
 8005038:	f000 fad4 	bl	80055e4 <_realloc_r>
 800503c:	4606      	mov	r6, r0
 800503e:	2800      	cmp	r0, #0
 8005040:	d1e0      	bne.n	8005004 <__ssputs_r+0x5c>
 8005042:	6921      	ldr	r1, [r4, #16]
 8005044:	4650      	mov	r0, sl
 8005046:	f7ff feb7 	bl	8004db8 <_free_r>
 800504a:	230c      	movs	r3, #12
 800504c:	f8ca 3000 	str.w	r3, [sl]
 8005050:	89a3      	ldrh	r3, [r4, #12]
 8005052:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005056:	81a3      	strh	r3, [r4, #12]
 8005058:	f04f 30ff 	mov.w	r0, #4294967295
 800505c:	e7e9      	b.n	8005032 <__ssputs_r+0x8a>
	...

08005060 <_svfiprintf_r>:
 8005060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005064:	4698      	mov	r8, r3
 8005066:	898b      	ldrh	r3, [r1, #12]
 8005068:	061b      	lsls	r3, r3, #24
 800506a:	b09d      	sub	sp, #116	@ 0x74
 800506c:	4607      	mov	r7, r0
 800506e:	460d      	mov	r5, r1
 8005070:	4614      	mov	r4, r2
 8005072:	d510      	bpl.n	8005096 <_svfiprintf_r+0x36>
 8005074:	690b      	ldr	r3, [r1, #16]
 8005076:	b973      	cbnz	r3, 8005096 <_svfiprintf_r+0x36>
 8005078:	2140      	movs	r1, #64	@ 0x40
 800507a:	f7ff ff09 	bl	8004e90 <_malloc_r>
 800507e:	6028      	str	r0, [r5, #0]
 8005080:	6128      	str	r0, [r5, #16]
 8005082:	b930      	cbnz	r0, 8005092 <_svfiprintf_r+0x32>
 8005084:	230c      	movs	r3, #12
 8005086:	603b      	str	r3, [r7, #0]
 8005088:	f04f 30ff 	mov.w	r0, #4294967295
 800508c:	b01d      	add	sp, #116	@ 0x74
 800508e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005092:	2340      	movs	r3, #64	@ 0x40
 8005094:	616b      	str	r3, [r5, #20]
 8005096:	2300      	movs	r3, #0
 8005098:	9309      	str	r3, [sp, #36]	@ 0x24
 800509a:	2320      	movs	r3, #32
 800509c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80050a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80050a4:	2330      	movs	r3, #48	@ 0x30
 80050a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005244 <_svfiprintf_r+0x1e4>
 80050aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80050ae:	f04f 0901 	mov.w	r9, #1
 80050b2:	4623      	mov	r3, r4
 80050b4:	469a      	mov	sl, r3
 80050b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050ba:	b10a      	cbz	r2, 80050c0 <_svfiprintf_r+0x60>
 80050bc:	2a25      	cmp	r2, #37	@ 0x25
 80050be:	d1f9      	bne.n	80050b4 <_svfiprintf_r+0x54>
 80050c0:	ebba 0b04 	subs.w	fp, sl, r4
 80050c4:	d00b      	beq.n	80050de <_svfiprintf_r+0x7e>
 80050c6:	465b      	mov	r3, fp
 80050c8:	4622      	mov	r2, r4
 80050ca:	4629      	mov	r1, r5
 80050cc:	4638      	mov	r0, r7
 80050ce:	f7ff ff6b 	bl	8004fa8 <__ssputs_r>
 80050d2:	3001      	adds	r0, #1
 80050d4:	f000 80a7 	beq.w	8005226 <_svfiprintf_r+0x1c6>
 80050d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050da:	445a      	add	r2, fp
 80050dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80050de:	f89a 3000 	ldrb.w	r3, [sl]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f000 809f 	beq.w	8005226 <_svfiprintf_r+0x1c6>
 80050e8:	2300      	movs	r3, #0
 80050ea:	f04f 32ff 	mov.w	r2, #4294967295
 80050ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050f2:	f10a 0a01 	add.w	sl, sl, #1
 80050f6:	9304      	str	r3, [sp, #16]
 80050f8:	9307      	str	r3, [sp, #28]
 80050fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8005100:	4654      	mov	r4, sl
 8005102:	2205      	movs	r2, #5
 8005104:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005108:	484e      	ldr	r0, [pc, #312]	@ (8005244 <_svfiprintf_r+0x1e4>)
 800510a:	f7fb f869 	bl	80001e0 <memchr>
 800510e:	9a04      	ldr	r2, [sp, #16]
 8005110:	b9d8      	cbnz	r0, 800514a <_svfiprintf_r+0xea>
 8005112:	06d0      	lsls	r0, r2, #27
 8005114:	bf44      	itt	mi
 8005116:	2320      	movmi	r3, #32
 8005118:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800511c:	0711      	lsls	r1, r2, #28
 800511e:	bf44      	itt	mi
 8005120:	232b      	movmi	r3, #43	@ 0x2b
 8005122:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005126:	f89a 3000 	ldrb.w	r3, [sl]
 800512a:	2b2a      	cmp	r3, #42	@ 0x2a
 800512c:	d015      	beq.n	800515a <_svfiprintf_r+0xfa>
 800512e:	9a07      	ldr	r2, [sp, #28]
 8005130:	4654      	mov	r4, sl
 8005132:	2000      	movs	r0, #0
 8005134:	f04f 0c0a 	mov.w	ip, #10
 8005138:	4621      	mov	r1, r4
 800513a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800513e:	3b30      	subs	r3, #48	@ 0x30
 8005140:	2b09      	cmp	r3, #9
 8005142:	d94b      	bls.n	80051dc <_svfiprintf_r+0x17c>
 8005144:	b1b0      	cbz	r0, 8005174 <_svfiprintf_r+0x114>
 8005146:	9207      	str	r2, [sp, #28]
 8005148:	e014      	b.n	8005174 <_svfiprintf_r+0x114>
 800514a:	eba0 0308 	sub.w	r3, r0, r8
 800514e:	fa09 f303 	lsl.w	r3, r9, r3
 8005152:	4313      	orrs	r3, r2
 8005154:	9304      	str	r3, [sp, #16]
 8005156:	46a2      	mov	sl, r4
 8005158:	e7d2      	b.n	8005100 <_svfiprintf_r+0xa0>
 800515a:	9b03      	ldr	r3, [sp, #12]
 800515c:	1d19      	adds	r1, r3, #4
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	9103      	str	r1, [sp, #12]
 8005162:	2b00      	cmp	r3, #0
 8005164:	bfbb      	ittet	lt
 8005166:	425b      	neglt	r3, r3
 8005168:	f042 0202 	orrlt.w	r2, r2, #2
 800516c:	9307      	strge	r3, [sp, #28]
 800516e:	9307      	strlt	r3, [sp, #28]
 8005170:	bfb8      	it	lt
 8005172:	9204      	strlt	r2, [sp, #16]
 8005174:	7823      	ldrb	r3, [r4, #0]
 8005176:	2b2e      	cmp	r3, #46	@ 0x2e
 8005178:	d10a      	bne.n	8005190 <_svfiprintf_r+0x130>
 800517a:	7863      	ldrb	r3, [r4, #1]
 800517c:	2b2a      	cmp	r3, #42	@ 0x2a
 800517e:	d132      	bne.n	80051e6 <_svfiprintf_r+0x186>
 8005180:	9b03      	ldr	r3, [sp, #12]
 8005182:	1d1a      	adds	r2, r3, #4
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	9203      	str	r2, [sp, #12]
 8005188:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800518c:	3402      	adds	r4, #2
 800518e:	9305      	str	r3, [sp, #20]
 8005190:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005254 <_svfiprintf_r+0x1f4>
 8005194:	7821      	ldrb	r1, [r4, #0]
 8005196:	2203      	movs	r2, #3
 8005198:	4650      	mov	r0, sl
 800519a:	f7fb f821 	bl	80001e0 <memchr>
 800519e:	b138      	cbz	r0, 80051b0 <_svfiprintf_r+0x150>
 80051a0:	9b04      	ldr	r3, [sp, #16]
 80051a2:	eba0 000a 	sub.w	r0, r0, sl
 80051a6:	2240      	movs	r2, #64	@ 0x40
 80051a8:	4082      	lsls	r2, r0
 80051aa:	4313      	orrs	r3, r2
 80051ac:	3401      	adds	r4, #1
 80051ae:	9304      	str	r3, [sp, #16]
 80051b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051b4:	4824      	ldr	r0, [pc, #144]	@ (8005248 <_svfiprintf_r+0x1e8>)
 80051b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80051ba:	2206      	movs	r2, #6
 80051bc:	f7fb f810 	bl	80001e0 <memchr>
 80051c0:	2800      	cmp	r0, #0
 80051c2:	d036      	beq.n	8005232 <_svfiprintf_r+0x1d2>
 80051c4:	4b21      	ldr	r3, [pc, #132]	@ (800524c <_svfiprintf_r+0x1ec>)
 80051c6:	bb1b      	cbnz	r3, 8005210 <_svfiprintf_r+0x1b0>
 80051c8:	9b03      	ldr	r3, [sp, #12]
 80051ca:	3307      	adds	r3, #7
 80051cc:	f023 0307 	bic.w	r3, r3, #7
 80051d0:	3308      	adds	r3, #8
 80051d2:	9303      	str	r3, [sp, #12]
 80051d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051d6:	4433      	add	r3, r6
 80051d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80051da:	e76a      	b.n	80050b2 <_svfiprintf_r+0x52>
 80051dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80051e0:	460c      	mov	r4, r1
 80051e2:	2001      	movs	r0, #1
 80051e4:	e7a8      	b.n	8005138 <_svfiprintf_r+0xd8>
 80051e6:	2300      	movs	r3, #0
 80051e8:	3401      	adds	r4, #1
 80051ea:	9305      	str	r3, [sp, #20]
 80051ec:	4619      	mov	r1, r3
 80051ee:	f04f 0c0a 	mov.w	ip, #10
 80051f2:	4620      	mov	r0, r4
 80051f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051f8:	3a30      	subs	r2, #48	@ 0x30
 80051fa:	2a09      	cmp	r2, #9
 80051fc:	d903      	bls.n	8005206 <_svfiprintf_r+0x1a6>
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0c6      	beq.n	8005190 <_svfiprintf_r+0x130>
 8005202:	9105      	str	r1, [sp, #20]
 8005204:	e7c4      	b.n	8005190 <_svfiprintf_r+0x130>
 8005206:	fb0c 2101 	mla	r1, ip, r1, r2
 800520a:	4604      	mov	r4, r0
 800520c:	2301      	movs	r3, #1
 800520e:	e7f0      	b.n	80051f2 <_svfiprintf_r+0x192>
 8005210:	ab03      	add	r3, sp, #12
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	462a      	mov	r2, r5
 8005216:	4b0e      	ldr	r3, [pc, #56]	@ (8005250 <_svfiprintf_r+0x1f0>)
 8005218:	a904      	add	r1, sp, #16
 800521a:	4638      	mov	r0, r7
 800521c:	f3af 8000 	nop.w
 8005220:	1c42      	adds	r2, r0, #1
 8005222:	4606      	mov	r6, r0
 8005224:	d1d6      	bne.n	80051d4 <_svfiprintf_r+0x174>
 8005226:	89ab      	ldrh	r3, [r5, #12]
 8005228:	065b      	lsls	r3, r3, #25
 800522a:	f53f af2d 	bmi.w	8005088 <_svfiprintf_r+0x28>
 800522e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005230:	e72c      	b.n	800508c <_svfiprintf_r+0x2c>
 8005232:	ab03      	add	r3, sp, #12
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	462a      	mov	r2, r5
 8005238:	4b05      	ldr	r3, [pc, #20]	@ (8005250 <_svfiprintf_r+0x1f0>)
 800523a:	a904      	add	r1, sp, #16
 800523c:	4638      	mov	r0, r7
 800523e:	f000 f879 	bl	8005334 <_printf_i>
 8005242:	e7ed      	b.n	8005220 <_svfiprintf_r+0x1c0>
 8005244:	080056d4 	.word	0x080056d4
 8005248:	080056de 	.word	0x080056de
 800524c:	00000000 	.word	0x00000000
 8005250:	08004fa9 	.word	0x08004fa9
 8005254:	080056da 	.word	0x080056da

08005258 <_printf_common>:
 8005258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800525c:	4616      	mov	r6, r2
 800525e:	4698      	mov	r8, r3
 8005260:	688a      	ldr	r2, [r1, #8]
 8005262:	690b      	ldr	r3, [r1, #16]
 8005264:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005268:	4293      	cmp	r3, r2
 800526a:	bfb8      	it	lt
 800526c:	4613      	movlt	r3, r2
 800526e:	6033      	str	r3, [r6, #0]
 8005270:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005274:	4607      	mov	r7, r0
 8005276:	460c      	mov	r4, r1
 8005278:	b10a      	cbz	r2, 800527e <_printf_common+0x26>
 800527a:	3301      	adds	r3, #1
 800527c:	6033      	str	r3, [r6, #0]
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	0699      	lsls	r1, r3, #26
 8005282:	bf42      	ittt	mi
 8005284:	6833      	ldrmi	r3, [r6, #0]
 8005286:	3302      	addmi	r3, #2
 8005288:	6033      	strmi	r3, [r6, #0]
 800528a:	6825      	ldr	r5, [r4, #0]
 800528c:	f015 0506 	ands.w	r5, r5, #6
 8005290:	d106      	bne.n	80052a0 <_printf_common+0x48>
 8005292:	f104 0a19 	add.w	sl, r4, #25
 8005296:	68e3      	ldr	r3, [r4, #12]
 8005298:	6832      	ldr	r2, [r6, #0]
 800529a:	1a9b      	subs	r3, r3, r2
 800529c:	42ab      	cmp	r3, r5
 800529e:	dc26      	bgt.n	80052ee <_printf_common+0x96>
 80052a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80052a4:	6822      	ldr	r2, [r4, #0]
 80052a6:	3b00      	subs	r3, #0
 80052a8:	bf18      	it	ne
 80052aa:	2301      	movne	r3, #1
 80052ac:	0692      	lsls	r2, r2, #26
 80052ae:	d42b      	bmi.n	8005308 <_printf_common+0xb0>
 80052b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80052b4:	4641      	mov	r1, r8
 80052b6:	4638      	mov	r0, r7
 80052b8:	47c8      	blx	r9
 80052ba:	3001      	adds	r0, #1
 80052bc:	d01e      	beq.n	80052fc <_printf_common+0xa4>
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	6922      	ldr	r2, [r4, #16]
 80052c2:	f003 0306 	and.w	r3, r3, #6
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	bf02      	ittt	eq
 80052ca:	68e5      	ldreq	r5, [r4, #12]
 80052cc:	6833      	ldreq	r3, [r6, #0]
 80052ce:	1aed      	subeq	r5, r5, r3
 80052d0:	68a3      	ldr	r3, [r4, #8]
 80052d2:	bf0c      	ite	eq
 80052d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052d8:	2500      	movne	r5, #0
 80052da:	4293      	cmp	r3, r2
 80052dc:	bfc4      	itt	gt
 80052de:	1a9b      	subgt	r3, r3, r2
 80052e0:	18ed      	addgt	r5, r5, r3
 80052e2:	2600      	movs	r6, #0
 80052e4:	341a      	adds	r4, #26
 80052e6:	42b5      	cmp	r5, r6
 80052e8:	d11a      	bne.n	8005320 <_printf_common+0xc8>
 80052ea:	2000      	movs	r0, #0
 80052ec:	e008      	b.n	8005300 <_printf_common+0xa8>
 80052ee:	2301      	movs	r3, #1
 80052f0:	4652      	mov	r2, sl
 80052f2:	4641      	mov	r1, r8
 80052f4:	4638      	mov	r0, r7
 80052f6:	47c8      	blx	r9
 80052f8:	3001      	adds	r0, #1
 80052fa:	d103      	bne.n	8005304 <_printf_common+0xac>
 80052fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005304:	3501      	adds	r5, #1
 8005306:	e7c6      	b.n	8005296 <_printf_common+0x3e>
 8005308:	18e1      	adds	r1, r4, r3
 800530a:	1c5a      	adds	r2, r3, #1
 800530c:	2030      	movs	r0, #48	@ 0x30
 800530e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005312:	4422      	add	r2, r4
 8005314:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005318:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800531c:	3302      	adds	r3, #2
 800531e:	e7c7      	b.n	80052b0 <_printf_common+0x58>
 8005320:	2301      	movs	r3, #1
 8005322:	4622      	mov	r2, r4
 8005324:	4641      	mov	r1, r8
 8005326:	4638      	mov	r0, r7
 8005328:	47c8      	blx	r9
 800532a:	3001      	adds	r0, #1
 800532c:	d0e6      	beq.n	80052fc <_printf_common+0xa4>
 800532e:	3601      	adds	r6, #1
 8005330:	e7d9      	b.n	80052e6 <_printf_common+0x8e>
	...

08005334 <_printf_i>:
 8005334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005338:	7e0f      	ldrb	r7, [r1, #24]
 800533a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800533c:	2f78      	cmp	r7, #120	@ 0x78
 800533e:	4691      	mov	r9, r2
 8005340:	4680      	mov	r8, r0
 8005342:	460c      	mov	r4, r1
 8005344:	469a      	mov	sl, r3
 8005346:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800534a:	d807      	bhi.n	800535c <_printf_i+0x28>
 800534c:	2f62      	cmp	r7, #98	@ 0x62
 800534e:	d80a      	bhi.n	8005366 <_printf_i+0x32>
 8005350:	2f00      	cmp	r7, #0
 8005352:	f000 80d2 	beq.w	80054fa <_printf_i+0x1c6>
 8005356:	2f58      	cmp	r7, #88	@ 0x58
 8005358:	f000 80b9 	beq.w	80054ce <_printf_i+0x19a>
 800535c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005360:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005364:	e03a      	b.n	80053dc <_printf_i+0xa8>
 8005366:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800536a:	2b15      	cmp	r3, #21
 800536c:	d8f6      	bhi.n	800535c <_printf_i+0x28>
 800536e:	a101      	add	r1, pc, #4	@ (adr r1, 8005374 <_printf_i+0x40>)
 8005370:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005374:	080053cd 	.word	0x080053cd
 8005378:	080053e1 	.word	0x080053e1
 800537c:	0800535d 	.word	0x0800535d
 8005380:	0800535d 	.word	0x0800535d
 8005384:	0800535d 	.word	0x0800535d
 8005388:	0800535d 	.word	0x0800535d
 800538c:	080053e1 	.word	0x080053e1
 8005390:	0800535d 	.word	0x0800535d
 8005394:	0800535d 	.word	0x0800535d
 8005398:	0800535d 	.word	0x0800535d
 800539c:	0800535d 	.word	0x0800535d
 80053a0:	080054e1 	.word	0x080054e1
 80053a4:	0800540b 	.word	0x0800540b
 80053a8:	0800549b 	.word	0x0800549b
 80053ac:	0800535d 	.word	0x0800535d
 80053b0:	0800535d 	.word	0x0800535d
 80053b4:	08005503 	.word	0x08005503
 80053b8:	0800535d 	.word	0x0800535d
 80053bc:	0800540b 	.word	0x0800540b
 80053c0:	0800535d 	.word	0x0800535d
 80053c4:	0800535d 	.word	0x0800535d
 80053c8:	080054a3 	.word	0x080054a3
 80053cc:	6833      	ldr	r3, [r6, #0]
 80053ce:	1d1a      	adds	r2, r3, #4
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	6032      	str	r2, [r6, #0]
 80053d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80053dc:	2301      	movs	r3, #1
 80053de:	e09d      	b.n	800551c <_printf_i+0x1e8>
 80053e0:	6833      	ldr	r3, [r6, #0]
 80053e2:	6820      	ldr	r0, [r4, #0]
 80053e4:	1d19      	adds	r1, r3, #4
 80053e6:	6031      	str	r1, [r6, #0]
 80053e8:	0606      	lsls	r6, r0, #24
 80053ea:	d501      	bpl.n	80053f0 <_printf_i+0xbc>
 80053ec:	681d      	ldr	r5, [r3, #0]
 80053ee:	e003      	b.n	80053f8 <_printf_i+0xc4>
 80053f0:	0645      	lsls	r5, r0, #25
 80053f2:	d5fb      	bpl.n	80053ec <_printf_i+0xb8>
 80053f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053f8:	2d00      	cmp	r5, #0
 80053fa:	da03      	bge.n	8005404 <_printf_i+0xd0>
 80053fc:	232d      	movs	r3, #45	@ 0x2d
 80053fe:	426d      	negs	r5, r5
 8005400:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005404:	4859      	ldr	r0, [pc, #356]	@ (800556c <_printf_i+0x238>)
 8005406:	230a      	movs	r3, #10
 8005408:	e011      	b.n	800542e <_printf_i+0xfa>
 800540a:	6821      	ldr	r1, [r4, #0]
 800540c:	6833      	ldr	r3, [r6, #0]
 800540e:	0608      	lsls	r0, r1, #24
 8005410:	f853 5b04 	ldr.w	r5, [r3], #4
 8005414:	d402      	bmi.n	800541c <_printf_i+0xe8>
 8005416:	0649      	lsls	r1, r1, #25
 8005418:	bf48      	it	mi
 800541a:	b2ad      	uxthmi	r5, r5
 800541c:	2f6f      	cmp	r7, #111	@ 0x6f
 800541e:	4853      	ldr	r0, [pc, #332]	@ (800556c <_printf_i+0x238>)
 8005420:	6033      	str	r3, [r6, #0]
 8005422:	bf14      	ite	ne
 8005424:	230a      	movne	r3, #10
 8005426:	2308      	moveq	r3, #8
 8005428:	2100      	movs	r1, #0
 800542a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800542e:	6866      	ldr	r6, [r4, #4]
 8005430:	60a6      	str	r6, [r4, #8]
 8005432:	2e00      	cmp	r6, #0
 8005434:	bfa2      	ittt	ge
 8005436:	6821      	ldrge	r1, [r4, #0]
 8005438:	f021 0104 	bicge.w	r1, r1, #4
 800543c:	6021      	strge	r1, [r4, #0]
 800543e:	b90d      	cbnz	r5, 8005444 <_printf_i+0x110>
 8005440:	2e00      	cmp	r6, #0
 8005442:	d04b      	beq.n	80054dc <_printf_i+0x1a8>
 8005444:	4616      	mov	r6, r2
 8005446:	fbb5 f1f3 	udiv	r1, r5, r3
 800544a:	fb03 5711 	mls	r7, r3, r1, r5
 800544e:	5dc7      	ldrb	r7, [r0, r7]
 8005450:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005454:	462f      	mov	r7, r5
 8005456:	42bb      	cmp	r3, r7
 8005458:	460d      	mov	r5, r1
 800545a:	d9f4      	bls.n	8005446 <_printf_i+0x112>
 800545c:	2b08      	cmp	r3, #8
 800545e:	d10b      	bne.n	8005478 <_printf_i+0x144>
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	07df      	lsls	r7, r3, #31
 8005464:	d508      	bpl.n	8005478 <_printf_i+0x144>
 8005466:	6923      	ldr	r3, [r4, #16]
 8005468:	6861      	ldr	r1, [r4, #4]
 800546a:	4299      	cmp	r1, r3
 800546c:	bfde      	ittt	le
 800546e:	2330      	movle	r3, #48	@ 0x30
 8005470:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005474:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005478:	1b92      	subs	r2, r2, r6
 800547a:	6122      	str	r2, [r4, #16]
 800547c:	f8cd a000 	str.w	sl, [sp]
 8005480:	464b      	mov	r3, r9
 8005482:	aa03      	add	r2, sp, #12
 8005484:	4621      	mov	r1, r4
 8005486:	4640      	mov	r0, r8
 8005488:	f7ff fee6 	bl	8005258 <_printf_common>
 800548c:	3001      	adds	r0, #1
 800548e:	d14a      	bne.n	8005526 <_printf_i+0x1f2>
 8005490:	f04f 30ff 	mov.w	r0, #4294967295
 8005494:	b004      	add	sp, #16
 8005496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	f043 0320 	orr.w	r3, r3, #32
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	4833      	ldr	r0, [pc, #204]	@ (8005570 <_printf_i+0x23c>)
 80054a4:	2778      	movs	r7, #120	@ 0x78
 80054a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	6831      	ldr	r1, [r6, #0]
 80054ae:	061f      	lsls	r7, r3, #24
 80054b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80054b4:	d402      	bmi.n	80054bc <_printf_i+0x188>
 80054b6:	065f      	lsls	r7, r3, #25
 80054b8:	bf48      	it	mi
 80054ba:	b2ad      	uxthmi	r5, r5
 80054bc:	6031      	str	r1, [r6, #0]
 80054be:	07d9      	lsls	r1, r3, #31
 80054c0:	bf44      	itt	mi
 80054c2:	f043 0320 	orrmi.w	r3, r3, #32
 80054c6:	6023      	strmi	r3, [r4, #0]
 80054c8:	b11d      	cbz	r5, 80054d2 <_printf_i+0x19e>
 80054ca:	2310      	movs	r3, #16
 80054cc:	e7ac      	b.n	8005428 <_printf_i+0xf4>
 80054ce:	4827      	ldr	r0, [pc, #156]	@ (800556c <_printf_i+0x238>)
 80054d0:	e7e9      	b.n	80054a6 <_printf_i+0x172>
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	f023 0320 	bic.w	r3, r3, #32
 80054d8:	6023      	str	r3, [r4, #0]
 80054da:	e7f6      	b.n	80054ca <_printf_i+0x196>
 80054dc:	4616      	mov	r6, r2
 80054de:	e7bd      	b.n	800545c <_printf_i+0x128>
 80054e0:	6833      	ldr	r3, [r6, #0]
 80054e2:	6825      	ldr	r5, [r4, #0]
 80054e4:	6961      	ldr	r1, [r4, #20]
 80054e6:	1d18      	adds	r0, r3, #4
 80054e8:	6030      	str	r0, [r6, #0]
 80054ea:	062e      	lsls	r6, r5, #24
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	d501      	bpl.n	80054f4 <_printf_i+0x1c0>
 80054f0:	6019      	str	r1, [r3, #0]
 80054f2:	e002      	b.n	80054fa <_printf_i+0x1c6>
 80054f4:	0668      	lsls	r0, r5, #25
 80054f6:	d5fb      	bpl.n	80054f0 <_printf_i+0x1bc>
 80054f8:	8019      	strh	r1, [r3, #0]
 80054fa:	2300      	movs	r3, #0
 80054fc:	6123      	str	r3, [r4, #16]
 80054fe:	4616      	mov	r6, r2
 8005500:	e7bc      	b.n	800547c <_printf_i+0x148>
 8005502:	6833      	ldr	r3, [r6, #0]
 8005504:	1d1a      	adds	r2, r3, #4
 8005506:	6032      	str	r2, [r6, #0]
 8005508:	681e      	ldr	r6, [r3, #0]
 800550a:	6862      	ldr	r2, [r4, #4]
 800550c:	2100      	movs	r1, #0
 800550e:	4630      	mov	r0, r6
 8005510:	f7fa fe66 	bl	80001e0 <memchr>
 8005514:	b108      	cbz	r0, 800551a <_printf_i+0x1e6>
 8005516:	1b80      	subs	r0, r0, r6
 8005518:	6060      	str	r0, [r4, #4]
 800551a:	6863      	ldr	r3, [r4, #4]
 800551c:	6123      	str	r3, [r4, #16]
 800551e:	2300      	movs	r3, #0
 8005520:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005524:	e7aa      	b.n	800547c <_printf_i+0x148>
 8005526:	6923      	ldr	r3, [r4, #16]
 8005528:	4632      	mov	r2, r6
 800552a:	4649      	mov	r1, r9
 800552c:	4640      	mov	r0, r8
 800552e:	47d0      	blx	sl
 8005530:	3001      	adds	r0, #1
 8005532:	d0ad      	beq.n	8005490 <_printf_i+0x15c>
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	079b      	lsls	r3, r3, #30
 8005538:	d413      	bmi.n	8005562 <_printf_i+0x22e>
 800553a:	68e0      	ldr	r0, [r4, #12]
 800553c:	9b03      	ldr	r3, [sp, #12]
 800553e:	4298      	cmp	r0, r3
 8005540:	bfb8      	it	lt
 8005542:	4618      	movlt	r0, r3
 8005544:	e7a6      	b.n	8005494 <_printf_i+0x160>
 8005546:	2301      	movs	r3, #1
 8005548:	4632      	mov	r2, r6
 800554a:	4649      	mov	r1, r9
 800554c:	4640      	mov	r0, r8
 800554e:	47d0      	blx	sl
 8005550:	3001      	adds	r0, #1
 8005552:	d09d      	beq.n	8005490 <_printf_i+0x15c>
 8005554:	3501      	adds	r5, #1
 8005556:	68e3      	ldr	r3, [r4, #12]
 8005558:	9903      	ldr	r1, [sp, #12]
 800555a:	1a5b      	subs	r3, r3, r1
 800555c:	42ab      	cmp	r3, r5
 800555e:	dcf2      	bgt.n	8005546 <_printf_i+0x212>
 8005560:	e7eb      	b.n	800553a <_printf_i+0x206>
 8005562:	2500      	movs	r5, #0
 8005564:	f104 0619 	add.w	r6, r4, #25
 8005568:	e7f5      	b.n	8005556 <_printf_i+0x222>
 800556a:	bf00      	nop
 800556c:	080056e5 	.word	0x080056e5
 8005570:	080056f6 	.word	0x080056f6

08005574 <memmove>:
 8005574:	4288      	cmp	r0, r1
 8005576:	b510      	push	{r4, lr}
 8005578:	eb01 0402 	add.w	r4, r1, r2
 800557c:	d902      	bls.n	8005584 <memmove+0x10>
 800557e:	4284      	cmp	r4, r0
 8005580:	4623      	mov	r3, r4
 8005582:	d807      	bhi.n	8005594 <memmove+0x20>
 8005584:	1e43      	subs	r3, r0, #1
 8005586:	42a1      	cmp	r1, r4
 8005588:	d008      	beq.n	800559c <memmove+0x28>
 800558a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800558e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005592:	e7f8      	b.n	8005586 <memmove+0x12>
 8005594:	4402      	add	r2, r0
 8005596:	4601      	mov	r1, r0
 8005598:	428a      	cmp	r2, r1
 800559a:	d100      	bne.n	800559e <memmove+0x2a>
 800559c:	bd10      	pop	{r4, pc}
 800559e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055a6:	e7f7      	b.n	8005598 <memmove+0x24>

080055a8 <_sbrk_r>:
 80055a8:	b538      	push	{r3, r4, r5, lr}
 80055aa:	4d06      	ldr	r5, [pc, #24]	@ (80055c4 <_sbrk_r+0x1c>)
 80055ac:	2300      	movs	r3, #0
 80055ae:	4604      	mov	r4, r0
 80055b0:	4608      	mov	r0, r1
 80055b2:	602b      	str	r3, [r5, #0]
 80055b4:	f7fb fab0 	bl	8000b18 <_sbrk>
 80055b8:	1c43      	adds	r3, r0, #1
 80055ba:	d102      	bne.n	80055c2 <_sbrk_r+0x1a>
 80055bc:	682b      	ldr	r3, [r5, #0]
 80055be:	b103      	cbz	r3, 80055c2 <_sbrk_r+0x1a>
 80055c0:	6023      	str	r3, [r4, #0]
 80055c2:	bd38      	pop	{r3, r4, r5, pc}
 80055c4:	200002e8 	.word	0x200002e8

080055c8 <memcpy>:
 80055c8:	440a      	add	r2, r1
 80055ca:	4291      	cmp	r1, r2
 80055cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80055d0:	d100      	bne.n	80055d4 <memcpy+0xc>
 80055d2:	4770      	bx	lr
 80055d4:	b510      	push	{r4, lr}
 80055d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055de:	4291      	cmp	r1, r2
 80055e0:	d1f9      	bne.n	80055d6 <memcpy+0xe>
 80055e2:	bd10      	pop	{r4, pc}

080055e4 <_realloc_r>:
 80055e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055e8:	4680      	mov	r8, r0
 80055ea:	4615      	mov	r5, r2
 80055ec:	460c      	mov	r4, r1
 80055ee:	b921      	cbnz	r1, 80055fa <_realloc_r+0x16>
 80055f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055f4:	4611      	mov	r1, r2
 80055f6:	f7ff bc4b 	b.w	8004e90 <_malloc_r>
 80055fa:	b92a      	cbnz	r2, 8005608 <_realloc_r+0x24>
 80055fc:	f7ff fbdc 	bl	8004db8 <_free_r>
 8005600:	2400      	movs	r4, #0
 8005602:	4620      	mov	r0, r4
 8005604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005608:	f000 f81a 	bl	8005640 <_malloc_usable_size_r>
 800560c:	4285      	cmp	r5, r0
 800560e:	4606      	mov	r6, r0
 8005610:	d802      	bhi.n	8005618 <_realloc_r+0x34>
 8005612:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005616:	d8f4      	bhi.n	8005602 <_realloc_r+0x1e>
 8005618:	4629      	mov	r1, r5
 800561a:	4640      	mov	r0, r8
 800561c:	f7ff fc38 	bl	8004e90 <_malloc_r>
 8005620:	4607      	mov	r7, r0
 8005622:	2800      	cmp	r0, #0
 8005624:	d0ec      	beq.n	8005600 <_realloc_r+0x1c>
 8005626:	42b5      	cmp	r5, r6
 8005628:	462a      	mov	r2, r5
 800562a:	4621      	mov	r1, r4
 800562c:	bf28      	it	cs
 800562e:	4632      	movcs	r2, r6
 8005630:	f7ff ffca 	bl	80055c8 <memcpy>
 8005634:	4621      	mov	r1, r4
 8005636:	4640      	mov	r0, r8
 8005638:	f7ff fbbe 	bl	8004db8 <_free_r>
 800563c:	463c      	mov	r4, r7
 800563e:	e7e0      	b.n	8005602 <_realloc_r+0x1e>

08005640 <_malloc_usable_size_r>:
 8005640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005644:	1f18      	subs	r0, r3, #4
 8005646:	2b00      	cmp	r3, #0
 8005648:	bfbc      	itt	lt
 800564a:	580b      	ldrlt	r3, [r1, r0]
 800564c:	18c0      	addlt	r0, r0, r3
 800564e:	4770      	bx	lr

08005650 <_init>:
 8005650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005652:	bf00      	nop
 8005654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005656:	bc08      	pop	{r3}
 8005658:	469e      	mov	lr, r3
 800565a:	4770      	bx	lr

0800565c <_fini>:
 800565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565e:	bf00      	nop
 8005660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005662:	bc08      	pop	{r3}
 8005664:	469e      	mov	lr, r3
 8005666:	4770      	bx	lr
