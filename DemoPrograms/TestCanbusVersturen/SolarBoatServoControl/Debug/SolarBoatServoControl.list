
SolarBoatServoControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005488  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005618  08005618  00006618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056b8  080056b8  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  080056b8  080056b8  000066b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056c0  080056c0  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056c0  080056c0  000066c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056c4  080056c4  000066c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080056c8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  2000005c  08005724  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08005724  000072f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d41  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bdc  00000000  00000000  00019dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  0001c9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d46  00000000  00000000  0001dae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021f49  00000000  00000000  0001e826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015362  00000000  00000000  0004076f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc974  00000000  00000000  00055ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122445  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c20  00000000  00000000  00122488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  001270a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005600 	.word	0x08005600

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005600 	.word	0x08005600

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	@ 0x28
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000576:	4b32      	ldr	r3, [pc, #200]	@ (8000640 <MX_CAN1_Init+0xd0>)
 8000578:	4a32      	ldr	r2, [pc, #200]	@ (8000644 <MX_CAN1_Init+0xd4>)
 800057a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 800057c:	4b30      	ldr	r3, [pc, #192]	@ (8000640 <MX_CAN1_Init+0xd0>)
 800057e:	2208      	movs	r2, #8
 8000580:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000582:	4b2f      	ldr	r3, [pc, #188]	@ (8000640 <MX_CAN1_Init+0xd0>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000588:	4b2d      	ldr	r3, [pc, #180]	@ (8000640 <MX_CAN1_Init+0xd0>)
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800058e:	4b2c      	ldr	r3, [pc, #176]	@ (8000640 <MX_CAN1_Init+0xd0>)
 8000590:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000594:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 8000596:	4b2a      	ldr	r3, [pc, #168]	@ (8000640 <MX_CAN1_Init+0xd0>)
 8000598:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 800059c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800059e:	4b28      	ldr	r3, [pc, #160]	@ (8000640 <MX_CAN1_Init+0xd0>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005a4:	4b26      	ldr	r3, [pc, #152]	@ (8000640 <MX_CAN1_Init+0xd0>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005aa:	4b25      	ldr	r3, [pc, #148]	@ (8000640 <MX_CAN1_Init+0xd0>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80005b0:	4b23      	ldr	r3, [pc, #140]	@ (8000640 <MX_CAN1_Init+0xd0>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005b6:	4b22      	ldr	r3, [pc, #136]	@ (8000640 <MX_CAN1_Init+0xd0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005bc:	4b20      	ldr	r3, [pc, #128]	@ (8000640 <MX_CAN1_Init+0xd0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005c2:	481f      	ldr	r0, [pc, #124]	@ (8000640 <MX_CAN1_Init+0xd0>)
 80005c4:	f000 fd28 	bl	8001018 <HAL_CAN_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80005ce:	f000 f9bf 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2100      	movs	r1, #0
 80005d6:	2014      	movs	r0, #20
 80005d8:	f001 fb31 	bl	8001c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80005dc:	2014      	movs	r0, #20
 80005de:	f001 fb4a 	bl	8001c76 <HAL_NVIC_EnableIRQ>

    CAN_FilterTypeDef sFilterConfig;

    sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterIdHigh = 0x0<<5;
 80005e6:	2300      	movs	r3, #0
 80005e8:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x0<<5;
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0<<5;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0x0<<5;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005f6:	2301      	movs	r3, #1
 80005f8:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterActivation = ENABLE;
 80005fa:	2301      	movs	r3, #1
 80005fc:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterBank = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000602:	2300      	movs	r3, #0
 8000604:	61bb      	str	r3, [r7, #24]
    sFilterConfig.SlaveStartFilterBank = 14;
 8000606:	230e      	movs	r3, #14
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 800060a:	463b      	mov	r3, r7
 800060c:	4619      	mov	r1, r3
 800060e:	480c      	ldr	r0, [pc, #48]	@ (8000640 <MX_CAN1_Init+0xd0>)
 8000610:	f000 fdfd 	bl	800120e <HAL_CAN_ConfigFilter>


  	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000614:	480a      	ldr	r0, [pc, #40]	@ (8000640 <MX_CAN1_Init+0xd0>)
 8000616:	f000 fec4 	bl	80013a2 <HAL_CAN_Start>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_CAN1_Init+0xb4>
  		Error_Handler();
 8000620:	f000 f996 	bl	8000950 <Error_Handler>
  	}

  	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000624:	2102      	movs	r1, #2
 8000626:	4806      	ldr	r0, [pc, #24]	@ (8000640 <MX_CAN1_Init+0xd0>)
 8000628:	f000 ffcf 	bl	80015ca <HAL_CAN_ActivateNotification>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_CAN1_Init+0xc6>
  	{
  		Error_Handler();
 8000632:	f000 f98d 	bl	8000950 <Error_Handler>
  	}

  /* USER CODE END CAN1_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	3728      	adds	r7, #40	@ 0x28
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000078 	.word	0x20000078
 8000644:	40006400 	.word	0x40006400

08000648 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	@ 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a1c      	ldr	r2, [pc, #112]	@ (80006d8 <HAL_CAN_MspInit+0x90>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d131      	bne.n	80006ce <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800066a:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <HAL_CAN_MspInit+0x94>)
 800066c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800066e:	4a1b      	ldr	r2, [pc, #108]	@ (80006dc <HAL_CAN_MspInit+0x94>)
 8000670:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000674:	6593      	str	r3, [r2, #88]	@ 0x58
 8000676:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <HAL_CAN_MspInit+0x94>)
 8000678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800067a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b16      	ldr	r3, [pc, #88]	@ (80006dc <HAL_CAN_MspInit+0x94>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	4a15      	ldr	r2, [pc, #84]	@ (80006dc <HAL_CAN_MspInit+0x94>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068e:	4b13      	ldr	r3, [pc, #76]	@ (80006dc <HAL_CAN_MspInit+0x94>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800069a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800069e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a0:	2302      	movs	r3, #2
 80006a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a8:	2303      	movs	r3, #3
 80006aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006ac:	2309      	movs	r3, #9
 80006ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4619      	mov	r1, r3
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ba:	f001 faf7 	bl	8001cac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	2014      	movs	r0, #20
 80006c4:	f001 fabb 	bl	8001c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006c8:	2014      	movs	r0, #20
 80006ca:	f001 fad4 	bl	8001c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006ce:	bf00      	nop
 80006d0:	3728      	adds	r7, #40	@ 0x28
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40006400 	.word	0x40006400
 80006dc:	40021000 	.word	0x40021000

080006e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	4b1d      	ldr	r3, [pc, #116]	@ (800076c <MX_GPIO_Init+0x8c>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fa:	4a1c      	ldr	r2, [pc, #112]	@ (800076c <MX_GPIO_Init+0x8c>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000702:	4b1a      	ldr	r3, [pc, #104]	@ (800076c <MX_GPIO_Init+0x8c>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b17      	ldr	r3, [pc, #92]	@ (800076c <MX_GPIO_Init+0x8c>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000712:	4a16      	ldr	r2, [pc, #88]	@ (800076c <MX_GPIO_Init+0x8c>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <MX_GPIO_Init+0x8c>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_GPIO_Init+0x8c>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	4a10      	ldr	r2, [pc, #64]	@ (800076c <MX_GPIO_Init+0x8c>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_GPIO_Init+0x8c>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2108      	movs	r1, #8
 8000742:	480b      	ldr	r0, [pc, #44]	@ (8000770 <MX_GPIO_Init+0x90>)
 8000744:	f001 fc1c 	bl	8001f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000748:	2308      	movs	r3, #8
 800074a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2300      	movs	r3, #0
 8000756:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	4619      	mov	r1, r3
 800075e:	4804      	ldr	r0, [pc, #16]	@ (8000770 <MX_GPIO_Init+0x90>)
 8000760:	f001 faa4 	bl	8001cac <HAL_GPIO_Init>

}
 8000764:	bf00      	nop
 8000766:	3720      	adds	r7, #32
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40021000 	.word	0x40021000
 8000770:	48000400 	.word	0x48000400

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08e      	sub	sp, #56	@ 0x38
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077a:	f000 fbb4 	bl	8000ee6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077e:	f000 f885 	bl	800088c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000782:	f7ff ffad 	bl	80006e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000786:	f000 faeb 	bl	8000d60 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 800078a:	f7ff fef1 	bl	8000570 <MX_CAN1_Init>
  MX_TIM1_Init();
 800078e:	f000 f9e3 	bl	8000b58 <MX_TIM1_Init>
  MX_RNG_Init();
 8000792:	f000 f8e3 	bl	800095c <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

    // CAN-transmissie configureren
    TxHeader.DLC = 8;                     				// Data Length: 1 byte
 8000796:	4b28      	ldr	r3, [pc, #160]	@ (8000838 <main+0xc4>)
 8000798:	2208      	movs	r2, #8
 800079a:	611a      	str	r2, [r3, #16]
    TxHeader.IDE = CAN_ID_STD;            				// Standaard CAN-ID
 800079c:	4b26      	ldr	r3, [pc, #152]	@ (8000838 <main+0xc4>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;          				// Data frame
 80007a2:	4b25      	ldr	r3, [pc, #148]	@ (8000838 <main+0xc4>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
    TxHeader.StdId = get_random_4bit()<<7 | 0x1;        // Een andere CAN-ID
 80007a8:	f000 f856 	bl	8000858 <get_random_4bit>
 80007ac:	4603      	mov	r3, r0
 80007ae:	01db      	lsls	r3, r3, #7
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b20      	ldr	r3, [pc, #128]	@ (8000838 <main+0xc4>)
 80007b8:	601a      	str	r2, [r3, #0]
    TxHeader.TransmitGlobalTime = DISABLE;
 80007ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000838 <main+0xc4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	751a      	strb	r2, [r3, #20]
    uint32_t i = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	637b      	str	r3, [r7, #52]	@ 0x34
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
        // Genereer een willekeurig ASCII karakter
    	sprintf(TxData, "%7d", i);
 80007c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80007c6:	491d      	ldr	r1, [pc, #116]	@ (800083c <main+0xc8>)
 80007c8:	481d      	ldr	r0, [pc, #116]	@ (8000840 <main+0xcc>)
 80007ca:	f004 fa79 	bl	8004cc0 <siprintf>
//    	}
//    	else
//    	{
//    		TxHeader.StdId = get_random_4bit()<<7 | 0x1;
//    	}
    	TxHeader.StdId = get_random_4bit()<<7 | 0x1;
 80007ce:	f000 f843 	bl	8000858 <get_random_4bit>
 80007d2:	4603      	mov	r3, r0
 80007d4:	01db      	lsls	r3, r3, #7
 80007d6:	f043 0301 	orr.w	r3, r3, #1
 80007da:	461a      	mov	r2, r3
 80007dc:	4b16      	ldr	r3, [pc, #88]	@ (8000838 <main+0xc4>)
 80007de:	601a      	str	r2, [r3, #0]
			// Verstuur het CAN-bericht
			if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80007e0:	4b18      	ldr	r3, [pc, #96]	@ (8000844 <main+0xd0>)
 80007e2:	4a17      	ldr	r2, [pc, #92]	@ (8000840 <main+0xcc>)
 80007e4:	4914      	ldr	r1, [pc, #80]	@ (8000838 <main+0xc4>)
 80007e6:	4818      	ldr	r0, [pc, #96]	@ (8000848 <main+0xd4>)
 80007e8:	f000 fe1f 	bl	800142a <HAL_CAN_AddTxMessage>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <main+0x82>
			{
				// Fout afhandelen bij CAN transmissie
				Error_Handler();
 80007f2:	f000 f8ad 	bl	8000950 <Error_Handler>
			}

        // Optioneel: zet de gegevens op UART voor debugging
        char uartBuffer[50];
        sprintf(uartBuffer, "Verzonden CAN Data: %c (0x%X)\r\n", TxData[0], TxData[0]);
 80007f6:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <main+0xcc>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <main+0xcc>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4638      	mov	r0, r7
 8000802:	4912      	ldr	r1, [pc, #72]	@ (800084c <main+0xd8>)
 8000804:	f004 fa5c 	bl	8004cc0 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8000808:	463b      	mov	r3, r7
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff fce0 	bl	80001d0 <strlen>
 8000810:	4603      	mov	r3, r0
 8000812:	b29a      	uxth	r2, r3
 8000814:	4639      	mov	r1, r7
 8000816:	f04f 33ff 	mov.w	r3, #4294967295
 800081a:	480d      	ldr	r0, [pc, #52]	@ (8000850 <main+0xdc>)
 800081c:	f003 fd7e 	bl	800431c <HAL_UART_Transmit>
        i++;
 8000820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000822:	3301      	adds	r3, #1
 8000824:	637b      	str	r3, [r7, #52]	@ 0x34

        // Wacht 1 seconde voor het verzenden van het volgende bericht
        HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000826:	2108      	movs	r1, #8
 8000828:	480a      	ldr	r0, [pc, #40]	@ (8000854 <main+0xe0>)
 800082a:	f001 fbc1 	bl	8001fb0 <HAL_GPIO_TogglePin>
        HAL_Delay(250);
 800082e:	20fa      	movs	r0, #250	@ 0xfa
 8000830:	f000 fbce 	bl	8000fd0 <HAL_Delay>
    {
 8000834:	e7c6      	b.n	80007c4 <main+0x50>
 8000836:	bf00      	nop
 8000838:	200000a0 	.word	0x200000a0
 800083c:	08005618 	.word	0x08005618
 8000840:	200000bc 	.word	0x200000bc
 8000844:	200000b8 	.word	0x200000b8
 8000848:	20000078 	.word	0x20000078
 800084c:	0800561c 	.word	0x0800561c
 8000850:	20000124 	.word	0x20000124
 8000854:	48000400 	.word	0x48000400

08000858 <get_random_4bit>:
    }
    return random_number;
}

//Create random number but only 8 bits
uint8_t get_random_4bit(void) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
    uint32_t random_32bit;
    uint8_t random_8bit;
    uint8_t random_4bit;
    if (HAL_RNG_GenerateRandomNumber(&hrng, &random_32bit) != HAL_OK) {
 800085e:	463b      	mov	r3, r7
 8000860:	4619      	mov	r1, r3
 8000862:	4809      	ldr	r0, [pc, #36]	@ (8000888 <get_random_4bit+0x30>)
 8000864:	f002 fdb9 	bl	80033da <HAL_RNG_GenerateRandomNumber>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <get_random_4bit+0x1a>
        // RNG generation error handling
        Error_Handler();
 800086e:	f000 f86f 	bl	8000950 <Error_Handler>
    }

    random_8bit = ((uint8_t)(random_32bit & 0xFF));
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	71fb      	strb	r3, [r7, #7]

    random_4bit = (random_8bit<<4)>>4;
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	011b      	lsls	r3, r3, #4
 800087a:	111b      	asrs	r3, r3, #4
 800087c:	71bb      	strb	r3, [r7, #6]

    // Extract a single 8-bit value (lower 8 bits of the 32-bit number)
    return random_4bit;
 800087e:	79bb      	ldrb	r3, [r7, #6]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200000c4 	.word	0x200000c4

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b096      	sub	sp, #88	@ 0x58
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	2244      	movs	r2, #68	@ 0x44
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f004 fa30 	bl	8004d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	463b      	mov	r3, r7
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008ae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80008b2:	f001 fbb5 	bl	8002020 <HAL_PWREx_ControlVoltageScaling>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008bc:	f000 f848 	bl	8000950 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008c0:	f001 fb90 	bl	8001fe4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008c4:	4b21      	ldr	r3, [pc, #132]	@ (800094c <SystemClock_Config+0xc0>)
 80008c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80008ca:	4a20      	ldr	r2, [pc, #128]	@ (800094c <SystemClock_Config+0xc0>)
 80008cc:	f023 0318 	bic.w	r3, r3, #24
 80008d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80008d4:	2314      	movs	r3, #20
 80008d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008d8:	2301      	movs	r3, #1
 80008da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008dc:	2301      	movs	r3, #1
 80008de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008e4:	2360      	movs	r3, #96	@ 0x60
 80008e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e8:	2302      	movs	r3, #2
 80008ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008ec:	2301      	movs	r3, #1
 80008ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008f0:	2301      	movs	r3, #1
 80008f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80008f4:	2310      	movs	r3, #16
 80008f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008f8:	2307      	movs	r3, #7
 80008fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000900:	2302      	movs	r3, #2
 8000902:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4618      	mov	r0, r3
 800090a:	f001 fbdf 	bl	80020cc <HAL_RCC_OscConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000914:	f000 f81c 	bl	8000950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000918:	230f      	movs	r3, #15
 800091a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091c:	2303      	movs	r3, #3
 800091e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800092c:	463b      	mov	r3, r7
 800092e:	2101      	movs	r1, #1
 8000930:	4618      	mov	r0, r3
 8000932:	f001 ffdf 	bl	80028f4 <HAL_RCC_ClockConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800093c:	f000 f808 	bl	8000950 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000940:	f002 fbf2 	bl	8003128 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000944:	bf00      	nop
 8000946:	3758      	adds	r7, #88	@ 0x58
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40021000 	.word	0x40021000

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <Error_Handler+0x8>

0800095c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000960:	4b06      	ldr	r3, [pc, #24]	@ (800097c <MX_RNG_Init+0x20>)
 8000962:	4a07      	ldr	r2, [pc, #28]	@ (8000980 <MX_RNG_Init+0x24>)
 8000964:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	@ (800097c <MX_RNG_Init+0x20>)
 8000968:	f002 fce0 	bl	800332c <HAL_RNG_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000972:	f7ff ffed 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200000c4 	.word	0x200000c4
 8000980:	50060800 	.word	0x50060800

08000984 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b098      	sub	sp, #96	@ 0x60
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	2254      	movs	r2, #84	@ 0x54
 8000992:	2100      	movs	r1, #0
 8000994:	4618      	mov	r0, r3
 8000996:	f004 f9b3 	bl	8004d00 <memset>
  if(rngHandle->Instance==RNG)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a19      	ldr	r2, [pc, #100]	@ (8000a04 <HAL_RNG_MspInit+0x80>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d12a      	bne.n	80009fa <HAL_RNG_MspInit+0x76>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80009a4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80009a8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 80009aa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80009ae:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80009b0:	2301      	movs	r3, #1
 80009b2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80009b4:	2301      	movs	r3, #1
 80009b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80009b8:	2308      	movs	r3, #8
 80009ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80009bc:	2307      	movs	r3, #7
 80009be:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80009c8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80009cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	4618      	mov	r0, r3
 80009d4:	f002 f9b2 	bl	8002d3c <HAL_RCCEx_PeriphCLKConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_RNG_MspInit+0x5e>
    {
      Error_Handler();
 80009de:	f7ff ffb7 	bl	8000950 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80009e2:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <HAL_RNG_MspInit+0x84>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	4a08      	ldr	r2, [pc, #32]	@ (8000a08 <HAL_RNG_MspInit+0x84>)
 80009e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ee:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <HAL_RNG_MspInit+0x84>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80009fa:	bf00      	nop
 80009fc:	3760      	adds	r7, #96	@ 0x60
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	50060800 	.word	0x50060800
 8000a08:	40021000 	.word	0x40021000

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <HAL_MspInit+0x44>)
 8000a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a16:	4a0e      	ldr	r2, [pc, #56]	@ (8000a50 <HAL_MspInit+0x44>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <HAL_MspInit+0x44>)
 8000a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <HAL_MspInit+0x44>)
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a2e:	4a08      	ldr	r2, [pc, #32]	@ (8000a50 <HAL_MspInit+0x44>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a34:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <HAL_MspInit+0x44>)
 8000a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40021000 	.word	0x40021000

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <NMI_Handler+0x4>

08000a5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <BusFault_Handler+0x4>

08000a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <UsageFault_Handler+0x4>

08000a7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aaa:	f000 fa71 	bl	8000f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ab8:	4802      	ldr	r0, [pc, #8]	@ (8000ac4 <CAN1_RX0_IRQHandler+0x10>)
 8000aba:	f000 fdac 	bl	8001616 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000078 	.word	0x20000078

08000ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad0:	4a14      	ldr	r2, [pc, #80]	@ (8000b24 <_sbrk+0x5c>)
 8000ad2:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <_sbrk+0x60>)
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000adc:	4b13      	ldr	r3, [pc, #76]	@ (8000b2c <_sbrk+0x64>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d102      	bne.n	8000aea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <_sbrk+0x64>)
 8000ae6:	4a12      	ldr	r2, [pc, #72]	@ (8000b30 <_sbrk+0x68>)
 8000ae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aea:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <_sbrk+0x64>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d207      	bcs.n	8000b08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af8:	f004 f90a 	bl	8004d10 <__errno>
 8000afc:	4603      	mov	r3, r0
 8000afe:	220c      	movs	r2, #12
 8000b00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
 8000b06:	e009      	b.n	8000b1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b08:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <_sbrk+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	4a05      	ldr	r2, [pc, #20]	@ (8000b2c <_sbrk+0x64>)
 8000b18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20010000 	.word	0x20010000
 8000b28:	00000400 	.word	0x00000400
 8000b2c:	200000d4 	.word	0x200000d4
 8000b30:	200002f8 	.word	0x200002f8

08000b34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <SystemInit+0x20>)
 8000b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b3e:	4a05      	ldr	r2, [pc, #20]	@ (8000b54 <SystemInit+0x20>)
 8000b40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b09a      	sub	sp, #104	@ 0x68
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b5e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b6c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b78:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
 8000b88:	615a      	str	r2, [r3, #20]
 8000b8a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	222c      	movs	r2, #44	@ 0x2c
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f004 f8b4 	bl	8004d00 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b98:	4b43      	ldr	r3, [pc, #268]	@ (8000ca8 <MX_TIM1_Init+0x150>)
 8000b9a:	4a44      	ldr	r2, [pc, #272]	@ (8000cac <MX_TIM1_Init+0x154>)
 8000b9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000b9e:	4b42      	ldr	r3, [pc, #264]	@ (8000ca8 <MX_TIM1_Init+0x150>)
 8000ba0:	220f      	movs	r2, #15
 8000ba2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba4:	4b40      	ldr	r3, [pc, #256]	@ (8000ca8 <MX_TIM1_Init+0x150>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40000-1;
 8000baa:	4b3f      	ldr	r3, [pc, #252]	@ (8000ca8 <MX_TIM1_Init+0x150>)
 8000bac:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8000bb0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb2:	4b3d      	ldr	r3, [pc, #244]	@ (8000ca8 <MX_TIM1_Init+0x150>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bb8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ca8 <MX_TIM1_Init+0x150>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bbe:	4b3a      	ldr	r3, [pc, #232]	@ (8000ca8 <MX_TIM1_Init+0x150>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bc4:	4838      	ldr	r0, [pc, #224]	@ (8000ca8 <MX_TIM1_Init+0x150>)
 8000bc6:	f002 fc5e 	bl	8003486 <HAL_TIM_Base_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000bd0:	f7ff febe 	bl	8000950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bd8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bda:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000bde:	4619      	mov	r1, r3
 8000be0:	4831      	ldr	r0, [pc, #196]	@ (8000ca8 <MX_TIM1_Init+0x150>)
 8000be2:	f002 fe1d 	bl	8003820 <HAL_TIM_ConfigClockSource>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000bec:	f7ff feb0 	bl	8000950 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bf0:	482d      	ldr	r0, [pc, #180]	@ (8000ca8 <MX_TIM1_Init+0x150>)
 8000bf2:	f002 fc9f 	bl	8003534 <HAL_TIM_PWM_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000bfc:	f7ff fea8 	bl	8000950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c00:	2300      	movs	r3, #0
 8000c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c04:	2300      	movs	r3, #0
 8000c06:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c0c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c10:	4619      	mov	r1, r3
 8000c12:	4825      	ldr	r0, [pc, #148]	@ (8000ca8 <MX_TIM1_Init+0x150>)
 8000c14:	f003 fa56 	bl	80040c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000c1e:	f7ff fe97 	bl	8000950 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c22:	2360      	movs	r3, #96	@ 0x60
 8000c24:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c36:	2300      	movs	r3, #0
 8000c38:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c3e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c42:	2200      	movs	r2, #0
 8000c44:	4619      	mov	r1, r3
 8000c46:	4818      	ldr	r0, [pc, #96]	@ (8000ca8 <MX_TIM1_Init+0x150>)
 8000c48:	f002 fcd6 	bl	80035f8 <HAL_TIM_PWM_ConfigChannel>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000c52:	f7ff fe7d 	bl	8000950 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c6e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4807      	ldr	r0, [pc, #28]	@ (8000ca8 <MX_TIM1_Init+0x150>)
 8000c8c:	f003 fa80 	bl	8004190 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000c96:	f7ff fe5b 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c9a:	4803      	ldr	r0, [pc, #12]	@ (8000ca8 <MX_TIM1_Init+0x150>)
 8000c9c:	f000 f828 	bl	8000cf0 <HAL_TIM_MspPostInit>

}
 8000ca0:	bf00      	nop
 8000ca2:	3768      	adds	r7, #104	@ 0x68
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200000d8 	.word	0x200000d8
 8000cac:	40012c00 	.word	0x40012c00

08000cb0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce8 <HAL_TIM_Base_MspInit+0x38>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d10b      	bne.n	8000cda <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cec <HAL_TIM_Base_MspInit+0x3c>)
 8000cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cc6:	4a09      	ldr	r2, [pc, #36]	@ (8000cec <HAL_TIM_Base_MspInit+0x3c>)
 8000cc8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ccc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cce:	4b07      	ldr	r3, [pc, #28]	@ (8000cec <HAL_TIM_Base_MspInit+0x3c>)
 8000cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000cda:	bf00      	nop
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40012c00 	.word	0x40012c00
 8000cec:	40021000 	.word	0x40021000

08000cf0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a12      	ldr	r2, [pc, #72]	@ (8000d58 <HAL_TIM_MspPostInit+0x68>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d11d      	bne.n	8000d4e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <HAL_TIM_MspPostInit+0x6c>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d16:	4a11      	ldr	r2, [pc, #68]	@ (8000d5c <HAL_TIM_MspPostInit+0x6c>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <HAL_TIM_MspPostInit+0x6c>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	4619      	mov	r1, r3
 8000d46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d4a:	f000 ffaf 	bl	8001cac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d4e:	bf00      	nop
 8000d50:	3720      	adds	r7, #32
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40012c00 	.word	0x40012c00
 8000d5c:	40021000 	.word	0x40021000

08000d60 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d64:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d66:	4a15      	ldr	r2, [pc, #84]	@ (8000dbc <MX_USART2_UART_Init+0x5c>)
 8000d68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d6a:	4b13      	ldr	r3, [pc, #76]	@ (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d72:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d78:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d84:	4b0c      	ldr	r3, [pc, #48]	@ (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d86:	220c      	movs	r2, #12
 8000d88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d90:	4b09      	ldr	r3, [pc, #36]	@ (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d96:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000da2:	4805      	ldr	r0, [pc, #20]	@ (8000db8 <MX_USART2_UART_Init+0x58>)
 8000da4:	f003 fa6c 	bl	8004280 <HAL_UART_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000dae:	f7ff fdcf 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000124 	.word	0x20000124
 8000dbc:	40004400 	.word	0x40004400

08000dc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b09e      	sub	sp, #120	@ 0x78
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd8:	f107 0310 	add.w	r3, r7, #16
 8000ddc:	2254      	movs	r2, #84	@ 0x54
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f003 ff8d 	bl	8004d00 <memset>
  if(uartHandle->Instance==USART2)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a28      	ldr	r2, [pc, #160]	@ (8000e8c <HAL_UART_MspInit+0xcc>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d148      	bne.n	8000e82 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000df0:	2302      	movs	r3, #2
 8000df2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df8:	f107 0310 	add.w	r3, r7, #16
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f001 ff9d 	bl	8002d3c <HAL_RCCEx_PeriphCLKConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e08:	f7ff fda2 	bl	8000950 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e0c:	4b20      	ldr	r3, [pc, #128]	@ (8000e90 <HAL_UART_MspInit+0xd0>)
 8000e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e10:	4a1f      	ldr	r2, [pc, #124]	@ (8000e90 <HAL_UART_MspInit+0xd0>)
 8000e12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e16:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e18:	4b1d      	ldr	r3, [pc, #116]	@ (8000e90 <HAL_UART_MspInit+0xd0>)
 8000e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e24:	4b1a      	ldr	r3, [pc, #104]	@ (8000e90 <HAL_UART_MspInit+0xd0>)
 8000e26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e28:	4a19      	ldr	r2, [pc, #100]	@ (8000e90 <HAL_UART_MspInit+0xd0>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e30:	4b17      	ldr	r3, [pc, #92]	@ (8000e90 <HAL_UART_MspInit+0xd0>)
 8000e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000e50:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e54:	4619      	mov	r1, r3
 8000e56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e5a:	f000 ff27 	bl	8001cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000e5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e62:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000e70:	2303      	movs	r3, #3
 8000e72:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e7e:	f000 ff15 	bl	8001cac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e82:	bf00      	nop
 8000e84:	3778      	adds	r7, #120	@ 0x78
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40004400 	.word	0x40004400
 8000e90:	40021000 	.word	0x40021000

08000e94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ecc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e98:	f7ff fe4c 	bl	8000b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e9c:	480c      	ldr	r0, [pc, #48]	@ (8000ed0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e9e:	490d      	ldr	r1, [pc, #52]	@ (8000ed4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed8 <LoopForever+0xe>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea4:	e002      	b.n	8000eac <LoopCopyDataInit>

08000ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eaa:	3304      	adds	r3, #4

08000eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb0:	d3f9      	bcc.n	8000ea6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000edc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eb4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ee0 <LoopForever+0x16>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb8:	e001      	b.n	8000ebe <LoopFillZerobss>

08000eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ebc:	3204      	adds	r2, #4

08000ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec0:	d3fb      	bcc.n	8000eba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ec2:	f003 ff2b 	bl	8004d1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ec6:	f7ff fc55 	bl	8000774 <main>

08000eca <LoopForever>:

LoopForever:
    b LoopForever
 8000eca:	e7fe      	b.n	8000eca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ecc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ed8:	080056c8 	.word	0x080056c8
  ldr r2, =_sbss
 8000edc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ee0:	200002f8 	.word	0x200002f8

08000ee4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ee4:	e7fe      	b.n	8000ee4 <ADC1_IRQHandler>

08000ee6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eec:	2300      	movs	r3, #0
 8000eee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 fe99 	bl	8001c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f000 f80e 	bl	8000f18 <HAL_InitTick>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d002      	beq.n	8000f08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	71fb      	strb	r3, [r7, #7]
 8000f06:	e001      	b.n	8000f0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f08:	f7ff fd80 	bl	8000a0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f20:	2300      	movs	r3, #0
 8000f22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f24:	4b17      	ldr	r3, [pc, #92]	@ (8000f84 <HAL_InitTick+0x6c>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d023      	beq.n	8000f74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f2c:	4b16      	ldr	r3, [pc, #88]	@ (8000f88 <HAL_InitTick+0x70>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b14      	ldr	r3, [pc, #80]	@ (8000f84 <HAL_InitTick+0x6c>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 fea5 	bl	8001c92 <HAL_SYSTICK_Config>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d10f      	bne.n	8000f6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b0f      	cmp	r3, #15
 8000f52:	d809      	bhi.n	8000f68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f54:	2200      	movs	r2, #0
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f000 fe6f 	bl	8001c3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f60:	4a0a      	ldr	r2, [pc, #40]	@ (8000f8c <HAL_InitTick+0x74>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e007      	b.n	8000f78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	73fb      	strb	r3, [r7, #15]
 8000f6c:	e004      	b.n	8000f78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	73fb      	strb	r3, [r7, #15]
 8000f72:	e001      	b.n	8000f78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000008 	.word	0x20000008
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	20000004 	.word	0x20000004

08000f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f94:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <HAL_IncTick+0x20>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <HAL_IncTick+0x24>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a04      	ldr	r2, [pc, #16]	@ (8000fb4 <HAL_IncTick+0x24>)
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	200001ac 	.word	0x200001ac

08000fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return uwTick;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	@ (8000fcc <HAL_GetTick+0x14>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	200001ac 	.word	0x200001ac

08000fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd8:	f7ff ffee 	bl	8000fb8 <HAL_GetTick>
 8000fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe8:	d005      	beq.n	8000ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fea:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <HAL_Delay+0x44>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ff6:	bf00      	nop
 8000ff8:	f7ff ffde 	bl	8000fb8 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	429a      	cmp	r2, r3
 8001006:	d8f7      	bhi.n	8000ff8 <HAL_Delay+0x28>
  {
  }
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000008 	.word	0x20000008

08001018 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e0ed      	b.n	8001206 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d102      	bne.n	800103c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff fb06 	bl	8000648 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f042 0201 	orr.w	r2, r2, #1
 800104a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800104c:	f7ff ffb4 	bl	8000fb8 <HAL_GetTick>
 8001050:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001052:	e012      	b.n	800107a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001054:	f7ff ffb0 	bl	8000fb8 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b0a      	cmp	r3, #10
 8001060:	d90b      	bls.n	800107a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001066:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2205      	movs	r2, #5
 8001072:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e0c5      	b.n	8001206 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0e5      	beq.n	8001054 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 0202 	bic.w	r2, r2, #2
 8001096:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001098:	f7ff ff8e 	bl	8000fb8 <HAL_GetTick>
 800109c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800109e:	e012      	b.n	80010c6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010a0:	f7ff ff8a 	bl	8000fb8 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b0a      	cmp	r3, #10
 80010ac:	d90b      	bls.n	80010c6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2205      	movs	r2, #5
 80010be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e09f      	b.n	8001206 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1e5      	bne.n	80010a0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	7e1b      	ldrb	r3, [r3, #24]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d108      	bne.n	80010ee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	e007      	b.n	80010fe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	7e5b      	ldrb	r3, [r3, #25]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d108      	bne.n	8001118 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	e007      	b.n	8001128 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001126:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	7e9b      	ldrb	r3, [r3, #26]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d108      	bne.n	8001142 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f042 0220 	orr.w	r2, r2, #32
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	e007      	b.n	8001152 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f022 0220 	bic.w	r2, r2, #32
 8001150:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	7edb      	ldrb	r3, [r3, #27]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d108      	bne.n	800116c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 0210 	bic.w	r2, r2, #16
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	e007      	b.n	800117c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f042 0210 	orr.w	r2, r2, #16
 800117a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7f1b      	ldrb	r3, [r3, #28]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d108      	bne.n	8001196 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f042 0208 	orr.w	r2, r2, #8
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	e007      	b.n	80011a6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f022 0208 	bic.w	r2, r2, #8
 80011a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	7f5b      	ldrb	r3, [r3, #29]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d108      	bne.n	80011c0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f042 0204 	orr.w	r2, r2, #4
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	e007      	b.n	80011d0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f022 0204 	bic.w	r2, r2, #4
 80011ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	431a      	orrs	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	431a      	orrs	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	ea42 0103 	orr.w	r1, r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	1e5a      	subs	r2, r3, #1
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	430a      	orrs	r2, r1
 80011f4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800120e:	b480      	push	{r7}
 8001210:	b087      	sub	sp, #28
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001224:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001226:	7cfb      	ldrb	r3, [r7, #19]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d003      	beq.n	8001234 <HAL_CAN_ConfigFilter+0x26>
 800122c:	7cfb      	ldrb	r3, [r7, #19]
 800122e:	2b02      	cmp	r3, #2
 8001230:	f040 80aa 	bne.w	8001388 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800123a:	f043 0201 	orr.w	r2, r3, #1
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	f003 031f 	and.w	r3, r3, #31
 800124c:	2201      	movs	r2, #1
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	43db      	mvns	r3, r3
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d123      	bne.n	80012b6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	43db      	mvns	r3, r3
 8001278:	401a      	ands	r2, r3
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001290:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	3248      	adds	r2, #72	@ 0x48
 8001296:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012aa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012ac:	6979      	ldr	r1, [r7, #20]
 80012ae:	3348      	adds	r3, #72	@ 0x48
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	440b      	add	r3, r1
 80012b4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d122      	bne.n	8001304 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	431a      	orrs	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012de:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	3248      	adds	r2, #72	@ 0x48
 80012e4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012f8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012fa:	6979      	ldr	r1, [r7, #20]
 80012fc:	3348      	adds	r3, #72	@ 0x48
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	440b      	add	r3, r1
 8001302:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d109      	bne.n	8001320 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	43db      	mvns	r3, r3
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800131e:	e007      	b.n	8001330 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	431a      	orrs	r2, r3
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d109      	bne.n	800134c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	43db      	mvns	r3, r3
 8001342:	401a      	ands	r2, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800134a:	e007      	b.n	800135c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	431a      	orrs	r2, r3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d107      	bne.n	8001374 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	431a      	orrs	r2, r3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800137a:	f023 0201 	bic.w	r2, r3, #1
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	e006      	b.n	8001396 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
  }
}
 8001396:	4618      	mov	r0, r3
 8001398:	371c      	adds	r7, #28
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b084      	sub	sp, #16
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d12e      	bne.n	8001414 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2202      	movs	r2, #2
 80013ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0201 	bic.w	r2, r2, #1
 80013cc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013ce:	f7ff fdf3 	bl	8000fb8 <HAL_GetTick>
 80013d2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013d4:	e012      	b.n	80013fc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013d6:	f7ff fdef 	bl	8000fb8 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b0a      	cmp	r3, #10
 80013e2:	d90b      	bls.n	80013fc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2205      	movs	r2, #5
 80013f4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e012      	b.n	8001422 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1e5      	bne.n	80013d6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	e006      	b.n	8001422 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001418:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
  }
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800142a:	b480      	push	{r7}
 800142c:	b089      	sub	sp, #36	@ 0x24
 800142e:	af00      	add	r7, sp, #0
 8001430:	60f8      	str	r0, [r7, #12]
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
 8001436:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800143e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001448:	7ffb      	ldrb	r3, [r7, #31]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d003      	beq.n	8001456 <HAL_CAN_AddTxMessage+0x2c>
 800144e:	7ffb      	ldrb	r3, [r7, #31]
 8001450:	2b02      	cmp	r3, #2
 8001452:	f040 80ad 	bne.w	80015b0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d10a      	bne.n	8001476 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001466:	2b00      	cmp	r3, #0
 8001468:	d105      	bne.n	8001476 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 8095 	beq.w	80015a0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	0e1b      	lsrs	r3, r3, #24
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001480:	2201      	movs	r2, #1
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	409a      	lsls	r2, r3
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10d      	bne.n	80014ae <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800149c:	68f9      	ldr	r1, [r7, #12]
 800149e:	6809      	ldr	r1, [r1, #0]
 80014a0:	431a      	orrs	r2, r3
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	3318      	adds	r3, #24
 80014a6:	011b      	lsls	r3, r3, #4
 80014a8:	440b      	add	r3, r1
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	e00f      	b.n	80014ce <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014b8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014be:	68f9      	ldr	r1, [r7, #12]
 80014c0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80014c2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	3318      	adds	r3, #24
 80014c8:	011b      	lsls	r3, r3, #4
 80014ca:	440b      	add	r3, r1
 80014cc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6819      	ldr	r1, [r3, #0]
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	691a      	ldr	r2, [r3, #16]
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	3318      	adds	r3, #24
 80014da:	011b      	lsls	r3, r3, #4
 80014dc:	440b      	add	r3, r1
 80014de:	3304      	adds	r3, #4
 80014e0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	7d1b      	ldrb	r3, [r3, #20]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d111      	bne.n	800150e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	3318      	adds	r3, #24
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	4413      	add	r3, r2
 80014f6:	3304      	adds	r3, #4
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	6811      	ldr	r1, [r2, #0]
 80014fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3318      	adds	r3, #24
 8001506:	011b      	lsls	r3, r3, #4
 8001508:	440b      	add	r3, r1
 800150a:	3304      	adds	r3, #4
 800150c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3307      	adds	r3, #7
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	061a      	lsls	r2, r3, #24
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3306      	adds	r3, #6
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	041b      	lsls	r3, r3, #16
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3305      	adds	r3, #5
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	4313      	orrs	r3, r2
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	3204      	adds	r2, #4
 800152e:	7812      	ldrb	r2, [r2, #0]
 8001530:	4610      	mov	r0, r2
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	6811      	ldr	r1, [r2, #0]
 8001536:	ea43 0200 	orr.w	r2, r3, r0
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	011b      	lsls	r3, r3, #4
 800153e:	440b      	add	r3, r1
 8001540:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001544:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3303      	adds	r3, #3
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	061a      	lsls	r2, r3, #24
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3302      	adds	r3, #2
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	041b      	lsls	r3, r3, #16
 8001556:	431a      	orrs	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3301      	adds	r3, #1
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	4313      	orrs	r3, r2
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	7812      	ldrb	r2, [r2, #0]
 8001566:	4610      	mov	r0, r2
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	6811      	ldr	r1, [r2, #0]
 800156c:	ea43 0200 	orr.w	r2, r3, r0
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	011b      	lsls	r3, r3, #4
 8001574:	440b      	add	r3, r1
 8001576:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800157a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	3318      	adds	r3, #24
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	4413      	add	r3, r2
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	6811      	ldr	r1, [r2, #0]
 800158e:	f043 0201 	orr.w	r2, r3, #1
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	3318      	adds	r3, #24
 8001596:	011b      	lsls	r3, r3, #4
 8001598:	440b      	add	r3, r1
 800159a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	e00e      	b.n	80015be <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e006      	b.n	80015be <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
  }
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3724      	adds	r7, #36	@ 0x24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b085      	sub	sp, #20
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015da:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d002      	beq.n	80015e8 <HAL_CAN_ActivateNotification+0x1e>
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d109      	bne.n	80015fc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6959      	ldr	r1, [r3, #20]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	e006      	b.n	800160a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001600:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
  }
}
 800160a:	4618      	mov	r0, r3
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b08a      	sub	sp, #40	@ 0x28
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800161e:	2300      	movs	r3, #0
 8001620:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001652:	6a3b      	ldr	r3, [r7, #32]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b00      	cmp	r3, #0
 800165a:	d07c      	beq.n	8001756 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	d023      	beq.n	80016ae <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2201      	movs	r2, #1
 800166c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 f983 	bl	8001984 <HAL_CAN_TxMailbox0CompleteCallback>
 800167e:	e016      	b.n	80016ae <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	2b00      	cmp	r3, #0
 8001688:	d004      	beq.n	8001694 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001690:	627b      	str	r3, [r7, #36]	@ 0x24
 8001692:	e00c      	b.n	80016ae <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d004      	beq.n	80016a8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800169e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80016a6:	e002      	b.n	80016ae <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 f989 	bl	80019c0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d024      	beq.n	8001702 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 f963 	bl	8001998 <HAL_CAN_TxMailbox1CompleteCallback>
 80016d2:	e016      	b.n	8001702 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d004      	beq.n	80016e8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80016de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80016e6:	e00c      	b.n	8001702 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d004      	beq.n	80016fc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80016f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80016fa:	e002      	b.n	8001702 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 f969 	bl	80019d4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d024      	beq.n	8001756 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001714:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 f943 	bl	80019ac <HAL_CAN_TxMailbox2CompleteCallback>
 8001726:	e016      	b.n	8001756 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d004      	beq.n	800173c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001734:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
 800173a:	e00c      	b.n	8001756 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d004      	beq.n	8001750 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800174c:	627b      	str	r3, [r7, #36]	@ 0x24
 800174e:	e002      	b.n	8001756 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 f949 	bl	80019e8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001756:	6a3b      	ldr	r3, [r7, #32]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00c      	beq.n	800177a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	f003 0310 	and.w	r3, r3, #16
 8001766:	2b00      	cmp	r3, #0
 8001768:	d007      	beq.n	800177a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800176a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001770:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2210      	movs	r2, #16
 8001778:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800177a:	6a3b      	ldr	r3, [r7, #32]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00b      	beq.n	800179c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	2b00      	cmp	r3, #0
 800178c:	d006      	beq.n	800179c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2208      	movs	r2, #8
 8001794:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f93a 	bl	8001a10 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800179c:	6a3b      	ldr	r3, [r7, #32]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d009      	beq.n	80017ba <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d002      	beq.n	80017ba <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 f921 	bl	80019fc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00c      	beq.n	80017de <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	f003 0310 	and.w	r3, r3, #16
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d007      	beq.n	80017de <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80017ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017d4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2210      	movs	r2, #16
 80017dc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	f003 0320 	and.w	r3, r3, #32
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00b      	beq.n	8001800 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d006      	beq.n	8001800 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2208      	movs	r2, #8
 80017f8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f91c 	bl	8001a38 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	2b00      	cmp	r3, #0
 8001808:	d009      	beq.n	800181e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f903 	bl	8001a24 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00b      	beq.n	8001840 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	2b00      	cmp	r3, #0
 8001830:	d006      	beq.n	8001840 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2210      	movs	r2, #16
 8001838:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 f906 	bl	8001a4c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001840:	6a3b      	ldr	r3, [r7, #32]
 8001842:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00b      	beq.n	8001862 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	2b00      	cmp	r3, #0
 8001852:	d006      	beq.n	8001862 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2208      	movs	r2, #8
 800185a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 f8ff 	bl	8001a60 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001862:	6a3b      	ldr	r3, [r7, #32]
 8001864:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d07b      	beq.n	8001964 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f003 0304 	and.w	r3, r3, #4
 8001872:	2b00      	cmp	r3, #0
 8001874:	d072      	beq.n	800195c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001876:	6a3b      	ldr	r3, [r7, #32]
 8001878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800187c:	2b00      	cmp	r3, #0
 800187e:	d008      	beq.n	8001892 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800188a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001892:	6a3b      	ldr	r3, [r7, #32]
 8001894:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001898:	2b00      	cmp	r3, #0
 800189a:	d008      	beq.n	80018ae <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80018a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d008      	beq.n	80018ca <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80018c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c4:	f043 0304 	orr.w	r3, r3, #4
 80018c8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d043      	beq.n	800195c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d03e      	beq.n	800195c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80018e4:	2b60      	cmp	r3, #96	@ 0x60
 80018e6:	d02b      	beq.n	8001940 <HAL_CAN_IRQHandler+0x32a>
 80018e8:	2b60      	cmp	r3, #96	@ 0x60
 80018ea:	d82e      	bhi.n	800194a <HAL_CAN_IRQHandler+0x334>
 80018ec:	2b50      	cmp	r3, #80	@ 0x50
 80018ee:	d022      	beq.n	8001936 <HAL_CAN_IRQHandler+0x320>
 80018f0:	2b50      	cmp	r3, #80	@ 0x50
 80018f2:	d82a      	bhi.n	800194a <HAL_CAN_IRQHandler+0x334>
 80018f4:	2b40      	cmp	r3, #64	@ 0x40
 80018f6:	d019      	beq.n	800192c <HAL_CAN_IRQHandler+0x316>
 80018f8:	2b40      	cmp	r3, #64	@ 0x40
 80018fa:	d826      	bhi.n	800194a <HAL_CAN_IRQHandler+0x334>
 80018fc:	2b30      	cmp	r3, #48	@ 0x30
 80018fe:	d010      	beq.n	8001922 <HAL_CAN_IRQHandler+0x30c>
 8001900:	2b30      	cmp	r3, #48	@ 0x30
 8001902:	d822      	bhi.n	800194a <HAL_CAN_IRQHandler+0x334>
 8001904:	2b10      	cmp	r3, #16
 8001906:	d002      	beq.n	800190e <HAL_CAN_IRQHandler+0x2f8>
 8001908:	2b20      	cmp	r3, #32
 800190a:	d005      	beq.n	8001918 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800190c:	e01d      	b.n	800194a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800190e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001910:	f043 0308 	orr.w	r3, r3, #8
 8001914:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001916:	e019      	b.n	800194c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191a:	f043 0310 	orr.w	r3, r3, #16
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001920:	e014      	b.n	800194c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001924:	f043 0320 	orr.w	r3, r3, #32
 8001928:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800192a:	e00f      	b.n	800194c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800192c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001932:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001934:	e00a      	b.n	800194c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800193c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800193e:	e005      	b.n	800194c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001942:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001946:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001948:	e000      	b.n	800194c <HAL_CAN_IRQHandler+0x336>
            break;
 800194a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	699a      	ldr	r2, [r3, #24]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800195a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2204      	movs	r2, #4
 8001962:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001966:	2b00      	cmp	r3, #0
 8001968:	d008      	beq.n	800197c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001970:	431a      	orrs	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f87c 	bl	8001a74 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800197c:	bf00      	nop
 800197e:	3728      	adds	r7, #40	@ 0x28
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a98:	4b0c      	ldr	r3, [pc, #48]	@ (8001acc <__NVIC_SetPriorityGrouping+0x44>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ab4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aba:	4a04      	ldr	r2, [pc, #16]	@ (8001acc <__NVIC_SetPriorityGrouping+0x44>)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	60d3      	str	r3, [r2, #12]
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad4:	4b04      	ldr	r3, [pc, #16]	@ (8001ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	f003 0307 	and.w	r3, r3, #7
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	db0b      	blt.n	8001b16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	f003 021f 	and.w	r2, r3, #31
 8001b04:	4907      	ldr	r1, [pc, #28]	@ (8001b24 <__NVIC_EnableIRQ+0x38>)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	095b      	lsrs	r3, r3, #5
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000e100 	.word	0xe000e100

08001b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	6039      	str	r1, [r7, #0]
 8001b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	db0a      	blt.n	8001b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	490c      	ldr	r1, [pc, #48]	@ (8001b74 <__NVIC_SetPriority+0x4c>)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	0112      	lsls	r2, r2, #4
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b50:	e00a      	b.n	8001b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4908      	ldr	r1, [pc, #32]	@ (8001b78 <__NVIC_SetPriority+0x50>)
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	3b04      	subs	r3, #4
 8001b60:	0112      	lsls	r2, r2, #4
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	440b      	add	r3, r1
 8001b66:	761a      	strb	r2, [r3, #24]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000e100 	.word	0xe000e100
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b089      	sub	sp, #36	@ 0x24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f1c3 0307 	rsb	r3, r3, #7
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	bf28      	it	cs
 8001b9a:	2304      	movcs	r3, #4
 8001b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	2b06      	cmp	r3, #6
 8001ba4:	d902      	bls.n	8001bac <NVIC_EncodePriority+0x30>
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3b03      	subs	r3, #3
 8001baa:	e000      	b.n	8001bae <NVIC_EncodePriority+0x32>
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43da      	mvns	r2, r3
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	fa01 f303 	lsl.w	r3, r1, r3
 8001bce:	43d9      	mvns	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	4313      	orrs	r3, r2
         );
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3724      	adds	r7, #36	@ 0x24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bf4:	d301      	bcc.n	8001bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00f      	b.n	8001c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001c24 <SysTick_Config+0x40>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c02:	210f      	movs	r1, #15
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	f7ff ff8e 	bl	8001b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c0c:	4b05      	ldr	r3, [pc, #20]	@ (8001c24 <SysTick_Config+0x40>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c12:	4b04      	ldr	r3, [pc, #16]	@ (8001c24 <SysTick_Config+0x40>)
 8001c14:	2207      	movs	r2, #7
 8001c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	e000e010 	.word	0xe000e010

08001c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ff29 	bl	8001a88 <__NVIC_SetPriorityGrouping>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c50:	f7ff ff3e 	bl	8001ad0 <__NVIC_GetPriorityGrouping>
 8001c54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	6978      	ldr	r0, [r7, #20]
 8001c5c:	f7ff ff8e 	bl	8001b7c <NVIC_EncodePriority>
 8001c60:	4602      	mov	r2, r0
 8001c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff5d 	bl	8001b28 <__NVIC_SetPriority>
}
 8001c6e:	bf00      	nop
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff31 	bl	8001aec <__NVIC_EnableIRQ>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ffa2 	bl	8001be4 <SysTick_Config>
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cba:	e148      	b.n	8001f4e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 813a 	beq.w	8001f48 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d005      	beq.n	8001cec <HAL_GPIO_Init+0x40>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d130      	bne.n	8001d4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d22:	2201      	movs	r2, #1
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	091b      	lsrs	r3, r3, #4
 8001d38:	f003 0201 	and.w	r2, r3, #1
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	d017      	beq.n	8001d8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	2203      	movs	r2, #3
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d123      	bne.n	8001dde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	08da      	lsrs	r2, r3, #3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3208      	adds	r2, #8
 8001d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	220f      	movs	r2, #15
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	691a      	ldr	r2, [r3, #16]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	08da      	lsrs	r2, r3, #3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3208      	adds	r2, #8
 8001dd8:	6939      	ldr	r1, [r7, #16]
 8001dda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	2203      	movs	r2, #3
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4013      	ands	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 0203 	and.w	r2, r3, #3
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 8094 	beq.w	8001f48 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e20:	4b52      	ldr	r3, [pc, #328]	@ (8001f6c <HAL_GPIO_Init+0x2c0>)
 8001e22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e24:	4a51      	ldr	r2, [pc, #324]	@ (8001f6c <HAL_GPIO_Init+0x2c0>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e2c:	4b4f      	ldr	r3, [pc, #316]	@ (8001f6c <HAL_GPIO_Init+0x2c0>)
 8001e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e38:	4a4d      	ldr	r2, [pc, #308]	@ (8001f70 <HAL_GPIO_Init+0x2c4>)
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	089b      	lsrs	r3, r3, #2
 8001e3e:	3302      	adds	r3, #2
 8001e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	220f      	movs	r2, #15
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e62:	d00d      	beq.n	8001e80 <HAL_GPIO_Init+0x1d4>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a43      	ldr	r2, [pc, #268]	@ (8001f74 <HAL_GPIO_Init+0x2c8>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d007      	beq.n	8001e7c <HAL_GPIO_Init+0x1d0>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a42      	ldr	r2, [pc, #264]	@ (8001f78 <HAL_GPIO_Init+0x2cc>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d101      	bne.n	8001e78 <HAL_GPIO_Init+0x1cc>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e004      	b.n	8001e82 <HAL_GPIO_Init+0x1d6>
 8001e78:	2307      	movs	r3, #7
 8001e7a:	e002      	b.n	8001e82 <HAL_GPIO_Init+0x1d6>
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <HAL_GPIO_Init+0x1d6>
 8001e80:	2300      	movs	r3, #0
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	f002 0203 	and.w	r2, r2, #3
 8001e88:	0092      	lsls	r2, r2, #2
 8001e8a:	4093      	lsls	r3, r2
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e92:	4937      	ldr	r1, [pc, #220]	@ (8001f70 <HAL_GPIO_Init+0x2c4>)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	089b      	lsrs	r3, r3, #2
 8001e98:	3302      	adds	r3, #2
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ea0:	4b36      	ldr	r3, [pc, #216]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4013      	ands	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ec4:	4a2d      	ldr	r2, [pc, #180]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001eca:	4b2c      	ldr	r3, [pc, #176]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001eee:	4a23      	ldr	r2, [pc, #140]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ef4:	4b21      	ldr	r3, [pc, #132]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	43db      	mvns	r3, r3
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f18:	4a18      	ldr	r2, [pc, #96]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f1e:	4b17      	ldr	r3, [pc, #92]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f42:	4a0e      	ldr	r2, [pc, #56]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	fa22 f303 	lsr.w	r3, r2, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f47f aeaf 	bne.w	8001cbc <HAL_GPIO_Init+0x10>
  }
}
 8001f5e:	bf00      	nop
 8001f60:	bf00      	nop
 8001f62:	371c      	adds	r7, #28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40010000 	.word	0x40010000
 8001f74:	48000400 	.word	0x48000400
 8001f78:	48000800 	.word	0x48000800
 8001f7c:	40010400 	.word	0x40010400

08001f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	807b      	strh	r3, [r7, #2]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f90:	787b      	ldrb	r3, [r7, #1]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f96:	887a      	ldrh	r2, [r7, #2]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f9c:	e002      	b.n	8001fa4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f9e:	887a      	ldrh	r2, [r7, #2]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fc2:	887a      	ldrh	r2, [r7, #2]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	041a      	lsls	r2, r3, #16
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	43d9      	mvns	r1, r3
 8001fce:	887b      	ldrh	r3, [r7, #2]
 8001fd0:	400b      	ands	r3, r1
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	619a      	str	r2, [r3, #24]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fe8:	4b05      	ldr	r3, [pc, #20]	@ (8002000 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a04      	ldr	r2, [pc, #16]	@ (8002000 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff2:	6013      	str	r3, [r2, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40007000 	.word	0x40007000

08002004 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002008:	4b04      	ldr	r3, [pc, #16]	@ (800201c <HAL_PWREx_GetVoltageRange+0x18>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40007000 	.word	0x40007000

08002020 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800202e:	d130      	bne.n	8002092 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002030:	4b23      	ldr	r3, [pc, #140]	@ (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002038:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800203c:	d038      	beq.n	80020b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800203e:	4b20      	ldr	r3, [pc, #128]	@ (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002046:	4a1e      	ldr	r2, [pc, #120]	@ (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002048:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800204c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800204e:	4b1d      	ldr	r3, [pc, #116]	@ (80020c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2232      	movs	r2, #50	@ 0x32
 8002054:	fb02 f303 	mul.w	r3, r2, r3
 8002058:	4a1b      	ldr	r2, [pc, #108]	@ (80020c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	0c9b      	lsrs	r3, r3, #18
 8002060:	3301      	adds	r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002064:	e002      	b.n	800206c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	3b01      	subs	r3, #1
 800206a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800206c:	4b14      	ldr	r3, [pc, #80]	@ (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002074:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002078:	d102      	bne.n	8002080 <HAL_PWREx_ControlVoltageScaling+0x60>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f2      	bne.n	8002066 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002080:	4b0f      	ldr	r3, [pc, #60]	@ (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002088:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800208c:	d110      	bne.n	80020b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e00f      	b.n	80020b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002092:	4b0b      	ldr	r3, [pc, #44]	@ (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800209a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800209e:	d007      	beq.n	80020b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020a0:	4b07      	ldr	r3, [pc, #28]	@ (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020a8:	4a05      	ldr	r2, [pc, #20]	@ (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40007000 	.word	0x40007000
 80020c4:	20000000 	.word	0x20000000
 80020c8:	431bde83 	.word	0x431bde83

080020cc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d102      	bne.n	80020e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	f000 bc02 	b.w	80028e4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020e0:	4b96      	ldr	r3, [pc, #600]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020ea:	4b94      	ldr	r3, [pc, #592]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80e4 	beq.w	80022ca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d007      	beq.n	8002118 <HAL_RCC_OscConfig+0x4c>
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	2b0c      	cmp	r3, #12
 800210c:	f040 808b 	bne.w	8002226 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2b01      	cmp	r3, #1
 8002114:	f040 8087 	bne.w	8002226 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002118:	4b88      	ldr	r3, [pc, #544]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_RCC_OscConfig+0x64>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e3d9      	b.n	80028e4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a1a      	ldr	r2, [r3, #32]
 8002134:	4b81      	ldr	r3, [pc, #516]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	2b00      	cmp	r3, #0
 800213e:	d004      	beq.n	800214a <HAL_RCC_OscConfig+0x7e>
 8002140:	4b7e      	ldr	r3, [pc, #504]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002148:	e005      	b.n	8002156 <HAL_RCC_OscConfig+0x8a>
 800214a:	4b7c      	ldr	r3, [pc, #496]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 800214c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002156:	4293      	cmp	r3, r2
 8002158:	d223      	bcs.n	80021a2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	4618      	mov	r0, r3
 8002160:	f000 fd8c 	bl	8002c7c <RCC_SetFlashLatencyFromMSIRange>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e3ba      	b.n	80028e4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800216e:	4b73      	ldr	r3, [pc, #460]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a72      	ldr	r2, [pc, #456]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 8002174:	f043 0308 	orr.w	r3, r3, #8
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	4b70      	ldr	r3, [pc, #448]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	496d      	ldr	r1, [pc, #436]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 8002188:	4313      	orrs	r3, r2
 800218a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800218c:	4b6b      	ldr	r3, [pc, #428]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69db      	ldr	r3, [r3, #28]
 8002198:	021b      	lsls	r3, r3, #8
 800219a:	4968      	ldr	r1, [pc, #416]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 800219c:	4313      	orrs	r3, r2
 800219e:	604b      	str	r3, [r1, #4]
 80021a0:	e025      	b.n	80021ee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021a2:	4b66      	ldr	r3, [pc, #408]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a65      	ldr	r2, [pc, #404]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 80021a8:	f043 0308 	orr.w	r3, r3, #8
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	4b63      	ldr	r3, [pc, #396]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	4960      	ldr	r1, [pc, #384]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021c0:	4b5e      	ldr	r3, [pc, #376]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	495b      	ldr	r1, [pc, #364]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d109      	bne.n	80021ee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 fd4c 	bl	8002c7c <RCC_SetFlashLatencyFromMSIRange>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e37a      	b.n	80028e4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021ee:	f000 fc81 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 80021f2:	4602      	mov	r2, r0
 80021f4:	4b51      	ldr	r3, [pc, #324]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	4950      	ldr	r1, [pc, #320]	@ (8002340 <HAL_RCC_OscConfig+0x274>)
 8002200:	5ccb      	ldrb	r3, [r1, r3]
 8002202:	f003 031f 	and.w	r3, r3, #31
 8002206:	fa22 f303 	lsr.w	r3, r2, r3
 800220a:	4a4e      	ldr	r2, [pc, #312]	@ (8002344 <HAL_RCC_OscConfig+0x278>)
 800220c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800220e:	4b4e      	ldr	r3, [pc, #312]	@ (8002348 <HAL_RCC_OscConfig+0x27c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe fe80 	bl	8000f18 <HAL_InitTick>
 8002218:	4603      	mov	r3, r0
 800221a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d052      	beq.n	80022c8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	e35e      	b.n	80028e4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d032      	beq.n	8002294 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800222e:	4b43      	ldr	r3, [pc, #268]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a42      	ldr	r2, [pc, #264]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800223a:	f7fe febd 	bl	8000fb8 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002242:	f7fe feb9 	bl	8000fb8 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e347      	b.n	80028e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002254:	4b39      	ldr	r3, [pc, #228]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002260:	4b36      	ldr	r3, [pc, #216]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a35      	ldr	r2, [pc, #212]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 8002266:	f043 0308 	orr.w	r3, r3, #8
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	4b33      	ldr	r3, [pc, #204]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	4930      	ldr	r1, [pc, #192]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800227e:	4b2f      	ldr	r3, [pc, #188]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	492b      	ldr	r1, [pc, #172]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 800228e:	4313      	orrs	r3, r2
 8002290:	604b      	str	r3, [r1, #4]
 8002292:	e01a      	b.n	80022ca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002294:	4b29      	ldr	r3, [pc, #164]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a28      	ldr	r2, [pc, #160]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 800229a:	f023 0301 	bic.w	r3, r3, #1
 800229e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022a0:	f7fe fe8a 	bl	8000fb8 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022a8:	f7fe fe86 	bl	8000fb8 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e314      	b.n	80028e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022ba:	4b20      	ldr	r3, [pc, #128]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x1dc>
 80022c6:	e000      	b.n	80022ca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d073      	beq.n	80023be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d005      	beq.n	80022e8 <HAL_RCC_OscConfig+0x21c>
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	2b0c      	cmp	r3, #12
 80022e0:	d10e      	bne.n	8002300 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d10b      	bne.n	8002300 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e8:	4b14      	ldr	r3, [pc, #80]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d063      	beq.n	80023bc <HAL_RCC_OscConfig+0x2f0>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d15f      	bne.n	80023bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e2f1      	b.n	80028e4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002308:	d106      	bne.n	8002318 <HAL_RCC_OscConfig+0x24c>
 800230a:	4b0c      	ldr	r3, [pc, #48]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a0b      	ldr	r2, [pc, #44]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 8002310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	e025      	b.n	8002364 <HAL_RCC_OscConfig+0x298>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002320:	d114      	bne.n	800234c <HAL_RCC_OscConfig+0x280>
 8002322:	4b06      	ldr	r3, [pc, #24]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a05      	ldr	r2, [pc, #20]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 8002328:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	4b03      	ldr	r3, [pc, #12]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a02      	ldr	r2, [pc, #8]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 8002334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	e013      	b.n	8002364 <HAL_RCC_OscConfig+0x298>
 800233c:	40021000 	.word	0x40021000
 8002340:	0800563c 	.word	0x0800563c
 8002344:	20000000 	.word	0x20000000
 8002348:	20000004 	.word	0x20000004
 800234c:	4ba0      	ldr	r3, [pc, #640]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a9f      	ldr	r2, [pc, #636]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 8002352:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	4b9d      	ldr	r3, [pc, #628]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a9c      	ldr	r2, [pc, #624]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 800235e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002362:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d013      	beq.n	8002394 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236c:	f7fe fe24 	bl	8000fb8 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002374:	f7fe fe20 	bl	8000fb8 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b64      	cmp	r3, #100	@ 0x64
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e2ae      	b.n	80028e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002386:	4b92      	ldr	r3, [pc, #584]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f0      	beq.n	8002374 <HAL_RCC_OscConfig+0x2a8>
 8002392:	e014      	b.n	80023be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7fe fe10 	bl	8000fb8 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800239c:	f7fe fe0c 	bl	8000fb8 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b64      	cmp	r3, #100	@ 0x64
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e29a      	b.n	80028e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023ae:	4b88      	ldr	r3, [pc, #544]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x2d0>
 80023ba:	e000      	b.n	80023be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d060      	beq.n	800248c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_OscConfig+0x310>
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	2b0c      	cmp	r3, #12
 80023d4:	d119      	bne.n	800240a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d116      	bne.n	800240a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023dc:	4b7c      	ldr	r3, [pc, #496]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_RCC_OscConfig+0x328>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e277      	b.n	80028e4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f4:	4b76      	ldr	r3, [pc, #472]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	061b      	lsls	r3, r3, #24
 8002402:	4973      	ldr	r1, [pc, #460]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 8002404:	4313      	orrs	r3, r2
 8002406:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002408:	e040      	b.n	800248c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d023      	beq.n	800245a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002412:	4b6f      	ldr	r3, [pc, #444]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a6e      	ldr	r2, [pc, #440]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 8002418:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800241c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241e:	f7fe fdcb 	bl	8000fb8 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002426:	f7fe fdc7 	bl	8000fb8 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e255      	b.n	80028e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002438:	4b65      	ldr	r3, [pc, #404]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f0      	beq.n	8002426 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002444:	4b62      	ldr	r3, [pc, #392]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	061b      	lsls	r3, r3, #24
 8002452:	495f      	ldr	r1, [pc, #380]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]
 8002458:	e018      	b.n	800248c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800245a:	4b5d      	ldr	r3, [pc, #372]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a5c      	ldr	r2, [pc, #368]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 8002460:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002466:	f7fe fda7 	bl	8000fb8 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246e:	f7fe fda3 	bl	8000fb8 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e231      	b.n	80028e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002480:	4b53      	ldr	r3, [pc, #332]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f0      	bne.n	800246e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b00      	cmp	r3, #0
 8002496:	d03c      	beq.n	8002512 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d01c      	beq.n	80024da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024a0:	4b4b      	ldr	r3, [pc, #300]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 80024a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024a6:	4a4a      	ldr	r2, [pc, #296]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b0:	f7fe fd82 	bl	8000fb8 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b8:	f7fe fd7e 	bl	8000fb8 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e20c      	b.n	80028e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024ca:	4b41      	ldr	r3, [pc, #260]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 80024cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0ef      	beq.n	80024b8 <HAL_RCC_OscConfig+0x3ec>
 80024d8:	e01b      	b.n	8002512 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024da:	4b3d      	ldr	r3, [pc, #244]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 80024dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024e0:	4a3b      	ldr	r2, [pc, #236]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 80024e2:	f023 0301 	bic.w	r3, r3, #1
 80024e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ea:	f7fe fd65 	bl	8000fb8 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f2:	f7fe fd61 	bl	8000fb8 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e1ef      	b.n	80028e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002504:	4b32      	ldr	r3, [pc, #200]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 8002506:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1ef      	bne.n	80024f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 80a6 	beq.w	800266c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002520:	2300      	movs	r3, #0
 8002522:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002524:	4b2a      	ldr	r3, [pc, #168]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 8002526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10d      	bne.n	800254c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002530:	4b27      	ldr	r3, [pc, #156]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 8002532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002534:	4a26      	ldr	r2, [pc, #152]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 8002536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800253a:	6593      	str	r3, [r2, #88]	@ 0x58
 800253c:	4b24      	ldr	r3, [pc, #144]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 800253e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002548:	2301      	movs	r3, #1
 800254a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800254c:	4b21      	ldr	r3, [pc, #132]	@ (80025d4 <HAL_RCC_OscConfig+0x508>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002554:	2b00      	cmp	r3, #0
 8002556:	d118      	bne.n	800258a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002558:	4b1e      	ldr	r3, [pc, #120]	@ (80025d4 <HAL_RCC_OscConfig+0x508>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a1d      	ldr	r2, [pc, #116]	@ (80025d4 <HAL_RCC_OscConfig+0x508>)
 800255e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002562:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002564:	f7fe fd28 	bl	8000fb8 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800256c:	f7fe fd24 	bl	8000fb8 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e1b2      	b.n	80028e4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800257e:	4b15      	ldr	r3, [pc, #84]	@ (80025d4 <HAL_RCC_OscConfig+0x508>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d108      	bne.n	80025a4 <HAL_RCC_OscConfig+0x4d8>
 8002592:	4b0f      	ldr	r3, [pc, #60]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 8002594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002598:	4a0d      	ldr	r2, [pc, #52]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025a2:	e029      	b.n	80025f8 <HAL_RCC_OscConfig+0x52c>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2b05      	cmp	r3, #5
 80025aa:	d115      	bne.n	80025d8 <HAL_RCC_OscConfig+0x50c>
 80025ac:	4b08      	ldr	r3, [pc, #32]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b2:	4a07      	ldr	r2, [pc, #28]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 80025b4:	f043 0304 	orr.w	r3, r3, #4
 80025b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025bc:	4b04      	ldr	r3, [pc, #16]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 80025be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c2:	4a03      	ldr	r2, [pc, #12]	@ (80025d0 <HAL_RCC_OscConfig+0x504>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025cc:	e014      	b.n	80025f8 <HAL_RCC_OscConfig+0x52c>
 80025ce:	bf00      	nop
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40007000 	.word	0x40007000
 80025d8:	4b9a      	ldr	r3, [pc, #616]	@ (8002844 <HAL_RCC_OscConfig+0x778>)
 80025da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025de:	4a99      	ldr	r2, [pc, #612]	@ (8002844 <HAL_RCC_OscConfig+0x778>)
 80025e0:	f023 0301 	bic.w	r3, r3, #1
 80025e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025e8:	4b96      	ldr	r3, [pc, #600]	@ (8002844 <HAL_RCC_OscConfig+0x778>)
 80025ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ee:	4a95      	ldr	r2, [pc, #596]	@ (8002844 <HAL_RCC_OscConfig+0x778>)
 80025f0:	f023 0304 	bic.w	r3, r3, #4
 80025f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d016      	beq.n	800262e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7fe fcda 	bl	8000fb8 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002606:	e00a      	b.n	800261e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002608:	f7fe fcd6 	bl	8000fb8 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e162      	b.n	80028e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800261e:	4b89      	ldr	r3, [pc, #548]	@ (8002844 <HAL_RCC_OscConfig+0x778>)
 8002620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0ed      	beq.n	8002608 <HAL_RCC_OscConfig+0x53c>
 800262c:	e015      	b.n	800265a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262e:	f7fe fcc3 	bl	8000fb8 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002634:	e00a      	b.n	800264c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002636:	f7fe fcbf 	bl	8000fb8 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002644:	4293      	cmp	r3, r2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e14b      	b.n	80028e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800264c:	4b7d      	ldr	r3, [pc, #500]	@ (8002844 <HAL_RCC_OscConfig+0x778>)
 800264e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1ed      	bne.n	8002636 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800265a:	7ffb      	ldrb	r3, [r7, #31]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d105      	bne.n	800266c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002660:	4b78      	ldr	r3, [pc, #480]	@ (8002844 <HAL_RCC_OscConfig+0x778>)
 8002662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002664:	4a77      	ldr	r2, [pc, #476]	@ (8002844 <HAL_RCC_OscConfig+0x778>)
 8002666:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800266a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0320 	and.w	r3, r3, #32
 8002674:	2b00      	cmp	r3, #0
 8002676:	d03c      	beq.n	80026f2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	2b00      	cmp	r3, #0
 800267e:	d01c      	beq.n	80026ba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002680:	4b70      	ldr	r3, [pc, #448]	@ (8002844 <HAL_RCC_OscConfig+0x778>)
 8002682:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002686:	4a6f      	ldr	r2, [pc, #444]	@ (8002844 <HAL_RCC_OscConfig+0x778>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002690:	f7fe fc92 	bl	8000fb8 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002698:	f7fe fc8e 	bl	8000fb8 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e11c      	b.n	80028e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026aa:	4b66      	ldr	r3, [pc, #408]	@ (8002844 <HAL_RCC_OscConfig+0x778>)
 80026ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0ef      	beq.n	8002698 <HAL_RCC_OscConfig+0x5cc>
 80026b8:	e01b      	b.n	80026f2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026ba:	4b62      	ldr	r3, [pc, #392]	@ (8002844 <HAL_RCC_OscConfig+0x778>)
 80026bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026c0:	4a60      	ldr	r2, [pc, #384]	@ (8002844 <HAL_RCC_OscConfig+0x778>)
 80026c2:	f023 0301 	bic.w	r3, r3, #1
 80026c6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ca:	f7fe fc75 	bl	8000fb8 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026d2:	f7fe fc71 	bl	8000fb8 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e0ff      	b.n	80028e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026e4:	4b57      	ldr	r3, [pc, #348]	@ (8002844 <HAL_RCC_OscConfig+0x778>)
 80026e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1ef      	bne.n	80026d2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 80f3 	beq.w	80028e2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002700:	2b02      	cmp	r3, #2
 8002702:	f040 80c9 	bne.w	8002898 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002706:	4b4f      	ldr	r3, [pc, #316]	@ (8002844 <HAL_RCC_OscConfig+0x778>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f003 0203 	and.w	r2, r3, #3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002716:	429a      	cmp	r2, r3
 8002718:	d12c      	bne.n	8002774 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002724:	3b01      	subs	r3, #1
 8002726:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002728:	429a      	cmp	r2, r3
 800272a:	d123      	bne.n	8002774 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002736:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002738:	429a      	cmp	r2, r3
 800273a:	d11b      	bne.n	8002774 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002746:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002748:	429a      	cmp	r2, r3
 800274a:	d113      	bne.n	8002774 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002756:	085b      	lsrs	r3, r3, #1
 8002758:	3b01      	subs	r3, #1
 800275a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800275c:	429a      	cmp	r2, r3
 800275e:	d109      	bne.n	8002774 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	085b      	lsrs	r3, r3, #1
 800276c:	3b01      	subs	r3, #1
 800276e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002770:	429a      	cmp	r2, r3
 8002772:	d06b      	beq.n	800284c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	2b0c      	cmp	r3, #12
 8002778:	d062      	beq.n	8002840 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800277a:	4b32      	ldr	r3, [pc, #200]	@ (8002844 <HAL_RCC_OscConfig+0x778>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e0ac      	b.n	80028e4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800278a:	4b2e      	ldr	r3, [pc, #184]	@ (8002844 <HAL_RCC_OscConfig+0x778>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a2d      	ldr	r2, [pc, #180]	@ (8002844 <HAL_RCC_OscConfig+0x778>)
 8002790:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002794:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002796:	f7fe fc0f 	bl	8000fb8 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279e:	f7fe fc0b 	bl	8000fb8 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e099      	b.n	80028e4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b0:	4b24      	ldr	r3, [pc, #144]	@ (8002844 <HAL_RCC_OscConfig+0x778>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1f0      	bne.n	800279e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027bc:	4b21      	ldr	r3, [pc, #132]	@ (8002844 <HAL_RCC_OscConfig+0x778>)
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	4b21      	ldr	r3, [pc, #132]	@ (8002848 <HAL_RCC_OscConfig+0x77c>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80027cc:	3a01      	subs	r2, #1
 80027ce:	0112      	lsls	r2, r2, #4
 80027d0:	4311      	orrs	r1, r2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80027d6:	0212      	lsls	r2, r2, #8
 80027d8:	4311      	orrs	r1, r2
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80027de:	0852      	lsrs	r2, r2, #1
 80027e0:	3a01      	subs	r2, #1
 80027e2:	0552      	lsls	r2, r2, #21
 80027e4:	4311      	orrs	r1, r2
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80027ea:	0852      	lsrs	r2, r2, #1
 80027ec:	3a01      	subs	r2, #1
 80027ee:	0652      	lsls	r2, r2, #25
 80027f0:	4311      	orrs	r1, r2
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80027f6:	06d2      	lsls	r2, r2, #27
 80027f8:	430a      	orrs	r2, r1
 80027fa:	4912      	ldr	r1, [pc, #72]	@ (8002844 <HAL_RCC_OscConfig+0x778>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002800:	4b10      	ldr	r3, [pc, #64]	@ (8002844 <HAL_RCC_OscConfig+0x778>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a0f      	ldr	r2, [pc, #60]	@ (8002844 <HAL_RCC_OscConfig+0x778>)
 8002806:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800280a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800280c:	4b0d      	ldr	r3, [pc, #52]	@ (8002844 <HAL_RCC_OscConfig+0x778>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4a0c      	ldr	r2, [pc, #48]	@ (8002844 <HAL_RCC_OscConfig+0x778>)
 8002812:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002816:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002818:	f7fe fbce 	bl	8000fb8 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002820:	f7fe fbca 	bl	8000fb8 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e058      	b.n	80028e4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002832:	4b04      	ldr	r3, [pc, #16]	@ (8002844 <HAL_RCC_OscConfig+0x778>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800283e:	e050      	b.n	80028e2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e04f      	b.n	80028e4 <HAL_RCC_OscConfig+0x818>
 8002844:	40021000 	.word	0x40021000
 8002848:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800284c:	4b27      	ldr	r3, [pc, #156]	@ (80028ec <HAL_RCC_OscConfig+0x820>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d144      	bne.n	80028e2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002858:	4b24      	ldr	r3, [pc, #144]	@ (80028ec <HAL_RCC_OscConfig+0x820>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a23      	ldr	r2, [pc, #140]	@ (80028ec <HAL_RCC_OscConfig+0x820>)
 800285e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002862:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002864:	4b21      	ldr	r3, [pc, #132]	@ (80028ec <HAL_RCC_OscConfig+0x820>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4a20      	ldr	r2, [pc, #128]	@ (80028ec <HAL_RCC_OscConfig+0x820>)
 800286a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800286e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002870:	f7fe fba2 	bl	8000fb8 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002878:	f7fe fb9e 	bl	8000fb8 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e02c      	b.n	80028e4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800288a:	4b18      	ldr	r3, [pc, #96]	@ (80028ec <HAL_RCC_OscConfig+0x820>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0x7ac>
 8002896:	e024      	b.n	80028e2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	2b0c      	cmp	r3, #12
 800289c:	d01f      	beq.n	80028de <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289e:	4b13      	ldr	r3, [pc, #76]	@ (80028ec <HAL_RCC_OscConfig+0x820>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a12      	ldr	r2, [pc, #72]	@ (80028ec <HAL_RCC_OscConfig+0x820>)
 80028a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028aa:	f7fe fb85 	bl	8000fb8 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b2:	f7fe fb81 	bl	8000fb8 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e00f      	b.n	80028e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028c4:	4b09      	ldr	r3, [pc, #36]	@ (80028ec <HAL_RCC_OscConfig+0x820>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f0      	bne.n	80028b2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80028d0:	4b06      	ldr	r3, [pc, #24]	@ (80028ec <HAL_RCC_OscConfig+0x820>)
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	4905      	ldr	r1, [pc, #20]	@ (80028ec <HAL_RCC_OscConfig+0x820>)
 80028d6:	4b06      	ldr	r3, [pc, #24]	@ (80028f0 <HAL_RCC_OscConfig+0x824>)
 80028d8:	4013      	ands	r3, r2
 80028da:	60cb      	str	r3, [r1, #12]
 80028dc:	e001      	b.n	80028e2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3720      	adds	r7, #32
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40021000 	.word	0x40021000
 80028f0:	feeefffc 	.word	0xfeeefffc

080028f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0e7      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002908:	4b75      	ldr	r3, [pc, #468]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1ec>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d910      	bls.n	8002938 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4b72      	ldr	r3, [pc, #456]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 0207 	bic.w	r2, r3, #7
 800291e:	4970      	ldr	r1, [pc, #448]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	4313      	orrs	r3, r2
 8002924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002926:	4b6e      	ldr	r3, [pc, #440]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0cf      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d010      	beq.n	8002966 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	4b66      	ldr	r3, [pc, #408]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1f0>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002950:	429a      	cmp	r2, r3
 8002952:	d908      	bls.n	8002966 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002954:	4b63      	ldr	r3, [pc, #396]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	4960      	ldr	r1, [pc, #384]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d04c      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b03      	cmp	r3, #3
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800297a:	4b5a      	ldr	r3, [pc, #360]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1f0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d121      	bne.n	80029ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e0a6      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d107      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002992:	4b54      	ldr	r3, [pc, #336]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d115      	bne.n	80029ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e09a      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d107      	bne.n	80029ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029aa:	4b4e      	ldr	r3, [pc, #312]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1f0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d109      	bne.n	80029ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e08e      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029ba:	4b4a      	ldr	r3, [pc, #296]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1f0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e086      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029ca:	4b46      	ldr	r3, [pc, #280]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1f0>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f023 0203 	bic.w	r2, r3, #3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4943      	ldr	r1, [pc, #268]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1f0>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029dc:	f7fe faec 	bl	8000fb8 <HAL_GetTick>
 80029e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	e00a      	b.n	80029fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e4:	f7fe fae8 	bl	8000fb8 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e06e      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fa:	4b3a      	ldr	r3, [pc, #232]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1f0>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 020c 	and.w	r2, r3, #12
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d1eb      	bne.n	80029e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d010      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	4b31      	ldr	r3, [pc, #196]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d208      	bcs.n	8002a3a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a28:	4b2e      	ldr	r3, [pc, #184]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	492b      	ldr	r1, [pc, #172]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a3a:	4b29      	ldr	r3, [pc, #164]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d210      	bcs.n	8002a6a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a48:	4b25      	ldr	r3, [pc, #148]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f023 0207 	bic.w	r2, r3, #7
 8002a50:	4923      	ldr	r1, [pc, #140]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a58:	4b21      	ldr	r3, [pc, #132]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d001      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e036      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d008      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a76:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	4918      	ldr	r1, [pc, #96]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d009      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a94:	4b13      	ldr	r3, [pc, #76]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4910      	ldr	r1, [pc, #64]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aa8:	f000 f824 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 8002aac:	4602      	mov	r2, r0
 8002aae:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	f003 030f 	and.w	r3, r3, #15
 8002ab8:	490b      	ldr	r1, [pc, #44]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1f4>)
 8002aba:	5ccb      	ldrb	r3, [r1, r3]
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac4:	4a09      	ldr	r2, [pc, #36]	@ (8002aec <HAL_RCC_ClockConfig+0x1f8>)
 8002ac6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ac8:	4b09      	ldr	r3, [pc, #36]	@ (8002af0 <HAL_RCC_ClockConfig+0x1fc>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fe fa23 	bl	8000f18 <HAL_InitTick>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ad6:	7afb      	ldrb	r3, [r7, #11]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40022000 	.word	0x40022000
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	0800563c 	.word	0x0800563c
 8002aec:	20000000 	.word	0x20000000
 8002af0:	20000004 	.word	0x20000004

08002af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b089      	sub	sp, #36	@ 0x24
 8002af8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
 8002afe:	2300      	movs	r3, #0
 8002b00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b02:	4b3e      	ldr	r3, [pc, #248]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 030c 	and.w	r3, r3, #12
 8002b0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_RCC_GetSysClockFreq+0x34>
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2b0c      	cmp	r3, #12
 8002b20:	d121      	bne.n	8002b66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d11e      	bne.n	8002b66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b28:	4b34      	ldr	r3, [pc, #208]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d107      	bne.n	8002b44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b34:	4b31      	ldr	r3, [pc, #196]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b3a:	0a1b      	lsrs	r3, r3, #8
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	61fb      	str	r3, [r7, #28]
 8002b42:	e005      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b44:	4b2d      	ldr	r3, [pc, #180]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b50:	4a2b      	ldr	r2, [pc, #172]	@ (8002c00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10d      	bne.n	8002b7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b64:	e00a      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d102      	bne.n	8002b72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b6c:	4b25      	ldr	r3, [pc, #148]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b6e:	61bb      	str	r3, [r7, #24]
 8002b70:	e004      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d101      	bne.n	8002b7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b78:	4b23      	ldr	r3, [pc, #140]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	2b0c      	cmp	r3, #12
 8002b80:	d134      	bne.n	8002bec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b82:	4b1e      	ldr	r3, [pc, #120]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d003      	beq.n	8002b9a <HAL_RCC_GetSysClockFreq+0xa6>
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d003      	beq.n	8002ba0 <HAL_RCC_GetSysClockFreq+0xac>
 8002b98:	e005      	b.n	8002ba6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b9c:	617b      	str	r3, [r7, #20]
      break;
 8002b9e:	e005      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ba0:	4b19      	ldr	r3, [pc, #100]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ba2:	617b      	str	r3, [r7, #20]
      break;
 8002ba4:	e002      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	617b      	str	r3, [r7, #20]
      break;
 8002baa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bac:	4b13      	ldr	r3, [pc, #76]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002bba:	4b10      	ldr	r3, [pc, #64]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	0a1b      	lsrs	r3, r3, #8
 8002bc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	fb03 f202 	mul.w	r2, r3, r2
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	0e5b      	lsrs	r3, r3, #25
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	3301      	adds	r3, #1
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bec:	69bb      	ldr	r3, [r7, #24]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3724      	adds	r7, #36	@ 0x24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	08005654 	.word	0x08005654
 8002c04:	00f42400 	.word	0x00f42400
 8002c08:	007a1200 	.word	0x007a1200

08002c0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c10:	4b03      	ldr	r3, [pc, #12]	@ (8002c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c12:	681b      	ldr	r3, [r3, #0]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	20000000 	.word	0x20000000

08002c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c28:	f7ff fff0 	bl	8002c0c <HAL_RCC_GetHCLKFreq>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	4b06      	ldr	r3, [pc, #24]	@ (8002c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	0a1b      	lsrs	r3, r3, #8
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	4904      	ldr	r1, [pc, #16]	@ (8002c4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c3a:	5ccb      	ldrb	r3, [r1, r3]
 8002c3c:	f003 031f 	and.w	r3, r3, #31
 8002c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	0800564c 	.word	0x0800564c

08002c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c54:	f7ff ffda 	bl	8002c0c <HAL_RCC_GetHCLKFreq>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	4b06      	ldr	r3, [pc, #24]	@ (8002c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	0adb      	lsrs	r3, r3, #11
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	4904      	ldr	r1, [pc, #16]	@ (8002c78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c66:	5ccb      	ldrb	r3, [r1, r3]
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40021000 	.word	0x40021000
 8002c78:	0800564c 	.word	0x0800564c

08002c7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c84:	2300      	movs	r3, #0
 8002c86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c88:	4b2a      	ldr	r3, [pc, #168]	@ (8002d34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c94:	f7ff f9b6 	bl	8002004 <HAL_PWREx_GetVoltageRange>
 8002c98:	6178      	str	r0, [r7, #20]
 8002c9a:	e014      	b.n	8002cc6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c9c:	4b25      	ldr	r3, [pc, #148]	@ (8002d34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca0:	4a24      	ldr	r2, [pc, #144]	@ (8002d34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ca2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ca6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ca8:	4b22      	ldr	r3, [pc, #136]	@ (8002d34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002cb4:	f7ff f9a6 	bl	8002004 <HAL_PWREx_GetVoltageRange>
 8002cb8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002cba:	4b1e      	ldr	r3, [pc, #120]	@ (8002d34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cbe:	4a1d      	ldr	r2, [pc, #116]	@ (8002d34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cc4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ccc:	d10b      	bne.n	8002ce6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b80      	cmp	r3, #128	@ 0x80
 8002cd2:	d919      	bls.n	8002d08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2ba0      	cmp	r3, #160	@ 0xa0
 8002cd8:	d902      	bls.n	8002ce0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cda:	2302      	movs	r3, #2
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	e013      	b.n	8002d08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	613b      	str	r3, [r7, #16]
 8002ce4:	e010      	b.n	8002d08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b80      	cmp	r3, #128	@ 0x80
 8002cea:	d902      	bls.n	8002cf2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002cec:	2303      	movs	r3, #3
 8002cee:	613b      	str	r3, [r7, #16]
 8002cf0:	e00a      	b.n	8002d08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b80      	cmp	r3, #128	@ 0x80
 8002cf6:	d102      	bne.n	8002cfe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	e004      	b.n	8002d08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b70      	cmp	r3, #112	@ 0x70
 8002d02:	d101      	bne.n	8002d08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d04:	2301      	movs	r3, #1
 8002d06:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d08:	4b0b      	ldr	r3, [pc, #44]	@ (8002d38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f023 0207 	bic.w	r2, r3, #7
 8002d10:	4909      	ldr	r1, [pc, #36]	@ (8002d38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d18:	4b07      	ldr	r3, [pc, #28]	@ (8002d38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d001      	beq.n	8002d2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40021000 	.word	0x40021000
 8002d38:	40022000 	.word	0x40022000

08002d3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d44:	2300      	movs	r3, #0
 8002d46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d48:	2300      	movs	r3, #0
 8002d4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d031      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d5c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002d60:	d01a      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002d62:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002d66:	d814      	bhi.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d009      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d6c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d70:	d10f      	bne.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002d72:	4b5d      	ldr	r3, [pc, #372]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	4a5c      	ldr	r2, [pc, #368]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d7c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d7e:	e00c      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3304      	adds	r3, #4
 8002d84:	2100      	movs	r1, #0
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 f9de 	bl	8003148 <RCCEx_PLLSAI1_Config>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d90:	e003      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	74fb      	strb	r3, [r7, #19]
      break;
 8002d96:	e000      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002d98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d9a:	7cfb      	ldrb	r3, [r7, #19]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10b      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002da0:	4b51      	ldr	r3, [pc, #324]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dae:	494e      	ldr	r1, [pc, #312]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002db6:	e001      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db8:	7cfb      	ldrb	r3, [r7, #19]
 8002dba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 809e 	beq.w	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002dce:	4b46      	ldr	r3, [pc, #280]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002dde:	2300      	movs	r3, #0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00d      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de4:	4b40      	ldr	r3, [pc, #256]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de8:	4a3f      	ldr	r2, [pc, #252]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dee:	6593      	str	r3, [r2, #88]	@ 0x58
 8002df0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e00:	4b3a      	ldr	r3, [pc, #232]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a39      	ldr	r2, [pc, #228]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e0c:	f7fe f8d4 	bl	8000fb8 <HAL_GetTick>
 8002e10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e12:	e009      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e14:	f7fe f8d0 	bl	8000fb8 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d902      	bls.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	74fb      	strb	r3, [r7, #19]
        break;
 8002e26:	e005      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e28:	4b30      	ldr	r3, [pc, #192]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0ef      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002e34:	7cfb      	ldrb	r3, [r7, #19]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d15a      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e3a:	4b2b      	ldr	r3, [pc, #172]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d01e      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d019      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e56:	4b24      	ldr	r3, [pc, #144]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e60:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e62:	4b21      	ldr	r3, [pc, #132]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e68:	4a1f      	ldr	r2, [pc, #124]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e72:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e78:	4a1b      	ldr	r2, [pc, #108]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e82:	4a19      	ldr	r2, [pc, #100]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d016      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e94:	f7fe f890 	bl	8000fb8 <HAL_GetTick>
 8002e98:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e9a:	e00b      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9c:	f7fe f88c 	bl	8000fb8 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d902      	bls.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	74fb      	strb	r3, [r7, #19]
            break;
 8002eb2:	e006      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0ec      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002ec2:	7cfb      	ldrb	r3, [r7, #19]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10b      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ec8:	4b07      	ldr	r3, [pc, #28]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ece:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ed6:	4904      	ldr	r1, [pc, #16]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002ede:	e009      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ee0:	7cfb      	ldrb	r3, [r7, #19]
 8002ee2:	74bb      	strb	r3, [r7, #18]
 8002ee4:	e006      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002ee6:	bf00      	nop
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef0:	7cfb      	ldrb	r3, [r7, #19]
 8002ef2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ef4:	7c7b      	ldrb	r3, [r7, #17]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d105      	bne.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002efa:	4b8a      	ldr	r3, [pc, #552]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efe:	4a89      	ldr	r2, [pc, #548]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f04:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00a      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f12:	4b84      	ldr	r3, [pc, #528]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f18:	f023 0203 	bic.w	r2, r3, #3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	4980      	ldr	r1, [pc, #512]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00a      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f34:	4b7b      	ldr	r3, [pc, #492]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f3a:	f023 020c 	bic.w	r2, r3, #12
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f42:	4978      	ldr	r1, [pc, #480]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0320 	and.w	r3, r3, #32
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f56:	4b73      	ldr	r3, [pc, #460]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f5c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f64:	496f      	ldr	r1, [pc, #444]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00a      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f78:	4b6a      	ldr	r3, [pc, #424]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f86:	4967      	ldr	r1, [pc, #412]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00a      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f9a:	4b62      	ldr	r3, [pc, #392]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa8:	495e      	ldr	r1, [pc, #376]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00a      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fbc:	4b59      	ldr	r3, [pc, #356]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fca:	4956      	ldr	r1, [pc, #344]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fde:	4b51      	ldr	r3, [pc, #324]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fec:	494d      	ldr	r1, [pc, #308]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d028      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003000:	4b48      	ldr	r3, [pc, #288]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003006:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300e:	4945      	ldr	r1, [pc, #276]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003010:	4313      	orrs	r3, r2
 8003012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800301e:	d106      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003020:	4b40      	ldr	r3, [pc, #256]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	4a3f      	ldr	r2, [pc, #252]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003026:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800302a:	60d3      	str	r3, [r2, #12]
 800302c:	e011      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003032:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003036:	d10c      	bne.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3304      	adds	r3, #4
 800303c:	2101      	movs	r1, #1
 800303e:	4618      	mov	r0, r3
 8003040:	f000 f882 	bl	8003148 <RCCEx_PLLSAI1_Config>
 8003044:	4603      	mov	r3, r0
 8003046:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003048:	7cfb      	ldrb	r3, [r7, #19]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800304e:	7cfb      	ldrb	r3, [r7, #19]
 8003050:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d028      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800305e:	4b31      	ldr	r3, [pc, #196]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003064:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800306c:	492d      	ldr	r1, [pc, #180]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003078:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800307c:	d106      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800307e:	4b29      	ldr	r3, [pc, #164]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	4a28      	ldr	r2, [pc, #160]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003084:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003088:	60d3      	str	r3, [r2, #12]
 800308a:	e011      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003090:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003094:	d10c      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3304      	adds	r3, #4
 800309a:	2101      	movs	r1, #1
 800309c:	4618      	mov	r0, r3
 800309e:	f000 f853 	bl	8003148 <RCCEx_PLLSAI1_Config>
 80030a2:	4603      	mov	r3, r0
 80030a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030a6:	7cfb      	ldrb	r3, [r7, #19]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80030ac:	7cfb      	ldrb	r3, [r7, #19]
 80030ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d01c      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030bc:	4b19      	ldr	r3, [pc, #100]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ca:	4916      	ldr	r1, [pc, #88]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030da:	d10c      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3304      	adds	r3, #4
 80030e0:	2102      	movs	r1, #2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 f830 	bl	8003148 <RCCEx_PLLSAI1_Config>
 80030e8:	4603      	mov	r3, r0
 80030ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030ec:	7cfb      	ldrb	r3, [r7, #19]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80030f2:	7cfb      	ldrb	r3, [r7, #19]
 80030f4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003102:	4b08      	ldr	r3, [pc, #32]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003108:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003110:	4904      	ldr	r1, [pc, #16]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003118:	7cbb      	ldrb	r3, [r7, #18]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40021000 	.word	0x40021000

08003128 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800312c:	4b05      	ldr	r3, [pc, #20]	@ (8003144 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a04      	ldr	r2, [pc, #16]	@ (8003144 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003132:	f043 0304 	orr.w	r3, r3, #4
 8003136:	6013      	str	r3, [r2, #0]
}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40021000 	.word	0x40021000

08003148 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003156:	4b74      	ldr	r3, [pc, #464]	@ (8003328 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d018      	beq.n	8003194 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003162:	4b71      	ldr	r3, [pc, #452]	@ (8003328 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	f003 0203 	and.w	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d10d      	bne.n	800318e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
       ||
 8003176:	2b00      	cmp	r3, #0
 8003178:	d009      	beq.n	800318e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800317a:	4b6b      	ldr	r3, [pc, #428]	@ (8003328 <RCCEx_PLLSAI1_Config+0x1e0>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	091b      	lsrs	r3, r3, #4
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
       ||
 800318a:	429a      	cmp	r2, r3
 800318c:	d047      	beq.n	800321e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
 8003192:	e044      	b.n	800321e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2b03      	cmp	r3, #3
 800319a:	d018      	beq.n	80031ce <RCCEx_PLLSAI1_Config+0x86>
 800319c:	2b03      	cmp	r3, #3
 800319e:	d825      	bhi.n	80031ec <RCCEx_PLLSAI1_Config+0xa4>
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d002      	beq.n	80031aa <RCCEx_PLLSAI1_Config+0x62>
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d009      	beq.n	80031bc <RCCEx_PLLSAI1_Config+0x74>
 80031a8:	e020      	b.n	80031ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003328 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d11d      	bne.n	80031f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ba:	e01a      	b.n	80031f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031bc:	4b5a      	ldr	r3, [pc, #360]	@ (8003328 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d116      	bne.n	80031f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031cc:	e013      	b.n	80031f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031ce:	4b56      	ldr	r3, [pc, #344]	@ (8003328 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10f      	bne.n	80031fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031da:	4b53      	ldr	r3, [pc, #332]	@ (8003328 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d109      	bne.n	80031fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031ea:	e006      	b.n	80031fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	73fb      	strb	r3, [r7, #15]
      break;
 80031f0:	e004      	b.n	80031fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031f2:	bf00      	nop
 80031f4:	e002      	b.n	80031fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031f6:	bf00      	nop
 80031f8:	e000      	b.n	80031fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10d      	bne.n	800321e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003202:	4b49      	ldr	r3, [pc, #292]	@ (8003328 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6819      	ldr	r1, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	3b01      	subs	r3, #1
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	430b      	orrs	r3, r1
 8003218:	4943      	ldr	r1, [pc, #268]	@ (8003328 <RCCEx_PLLSAI1_Config+0x1e0>)
 800321a:	4313      	orrs	r3, r2
 800321c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800321e:	7bfb      	ldrb	r3, [r7, #15]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d17c      	bne.n	800331e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003224:	4b40      	ldr	r3, [pc, #256]	@ (8003328 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a3f      	ldr	r2, [pc, #252]	@ (8003328 <RCCEx_PLLSAI1_Config+0x1e0>)
 800322a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800322e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003230:	f7fd fec2 	bl	8000fb8 <HAL_GetTick>
 8003234:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003236:	e009      	b.n	800324c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003238:	f7fd febe 	bl	8000fb8 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d902      	bls.n	800324c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	73fb      	strb	r3, [r7, #15]
        break;
 800324a:	e005      	b.n	8003258 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800324c:	4b36      	ldr	r3, [pc, #216]	@ (8003328 <RCCEx_PLLSAI1_Config+0x1e0>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1ef      	bne.n	8003238 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d15f      	bne.n	800331e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d110      	bne.n	8003286 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003264:	4b30      	ldr	r3, [pc, #192]	@ (8003328 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800326c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6892      	ldr	r2, [r2, #8]
 8003274:	0211      	lsls	r1, r2, #8
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68d2      	ldr	r2, [r2, #12]
 800327a:	06d2      	lsls	r2, r2, #27
 800327c:	430a      	orrs	r2, r1
 800327e:	492a      	ldr	r1, [pc, #168]	@ (8003328 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003280:	4313      	orrs	r3, r2
 8003282:	610b      	str	r3, [r1, #16]
 8003284:	e027      	b.n	80032d6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d112      	bne.n	80032b2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800328c:	4b26      	ldr	r3, [pc, #152]	@ (8003328 <RCCEx_PLLSAI1_Config+0x1e0>)
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003294:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6892      	ldr	r2, [r2, #8]
 800329c:	0211      	lsls	r1, r2, #8
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6912      	ldr	r2, [r2, #16]
 80032a2:	0852      	lsrs	r2, r2, #1
 80032a4:	3a01      	subs	r2, #1
 80032a6:	0552      	lsls	r2, r2, #21
 80032a8:	430a      	orrs	r2, r1
 80032aa:	491f      	ldr	r1, [pc, #124]	@ (8003328 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	610b      	str	r3, [r1, #16]
 80032b0:	e011      	b.n	80032d6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003328 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80032ba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6892      	ldr	r2, [r2, #8]
 80032c2:	0211      	lsls	r1, r2, #8
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6952      	ldr	r2, [r2, #20]
 80032c8:	0852      	lsrs	r2, r2, #1
 80032ca:	3a01      	subs	r2, #1
 80032cc:	0652      	lsls	r2, r2, #25
 80032ce:	430a      	orrs	r2, r1
 80032d0:	4915      	ldr	r1, [pc, #84]	@ (8003328 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80032d6:	4b14      	ldr	r3, [pc, #80]	@ (8003328 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a13      	ldr	r2, [pc, #76]	@ (8003328 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80032e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e2:	f7fd fe69 	bl	8000fb8 <HAL_GetTick>
 80032e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032e8:	e009      	b.n	80032fe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032ea:	f7fd fe65 	bl	8000fb8 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d902      	bls.n	80032fe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	73fb      	strb	r3, [r7, #15]
          break;
 80032fc:	e005      	b.n	800330a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003328 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0ef      	beq.n	80032ea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d106      	bne.n	800331e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003310:	4b05      	ldr	r3, [pc, #20]	@ (8003328 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	4903      	ldr	r1, [pc, #12]	@ (8003328 <RCCEx_PLLSAI1_Config+0x1e0>)
 800331a:	4313      	orrs	r3, r2
 800331c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800331e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40021000 	.word	0x40021000

0800332c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e049      	b.n	80033d2 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	795b      	ldrb	r3, [r3, #5]
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d105      	bne.n	8003354 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7fd fb18 	bl	8000984 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0204 	orr.w	r2, r2, #4
 8003368:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003374:	2b40      	cmp	r3, #64	@ 0x40
 8003376:	d104      	bne.n	8003382 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2204      	movs	r2, #4
 800337c:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e027      	b.n	80033d2 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8003382:	f7fd fe19 	bl	8000fb8 <HAL_GetTick>
 8003386:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8003388:	e015      	b.n	80033b6 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800338a:	f7fd fe15 	bl	8000fb8 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d90e      	bls.n	80033b6 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d007      	beq.n	80033b6 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2204      	movs	r2, #4
 80033aa:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e00d      	b.n	80033d2 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d1e2      	bne.n	800338a <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	791b      	ldrb	r3, [r3, #4]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_RNG_GenerateRandomNumber+0x1a>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e044      	b.n	800347e <HAL_RNG_GenerateRandomNumber+0xa4>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	795b      	ldrb	r3, [r3, #5]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b01      	cmp	r3, #1
 8003402:	d133      	bne.n	800346c <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2202      	movs	r2, #2
 8003408:	715a      	strb	r2, [r3, #5]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800340a:	f7fd fdd5 	bl	8000fb8 <HAL_GetTick>
 800340e:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003410:	e018      	b.n	8003444 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003412:	f7fd fdd1 	bl	8000fb8 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d911      	bls.n	8003444 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b01      	cmp	r3, #1
 800342c:	d00a      	beq.n	8003444 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e01c      	b.n	800347e <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b01      	cmp	r3, #1
 8003450:	d1df      	bne.n	8003412 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	60da      	str	r2, [r3, #12]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	715a      	strb	r2, [r3, #5]
 800346a:	e004      	b.n	8003476 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2204      	movs	r2, #4
 8003470:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	711a      	strb	r2, [r3, #4]

  return status;
 800347c:	7bfb      	ldrb	r3, [r7, #15]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b082      	sub	sp, #8
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e049      	b.n	800352c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d106      	bne.n	80034b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7fd fbff 	bl	8000cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2202      	movs	r2, #2
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3304      	adds	r3, #4
 80034c2:	4619      	mov	r1, r3
 80034c4:	4610      	mov	r0, r2
 80034c6:	f000 fa75 	bl	80039b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e049      	b.n	80035da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f841 	bl	80035e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3304      	adds	r3, #4
 8003570:	4619      	mov	r1, r3
 8003572:	4610      	mov	r0, r2
 8003574:	f000 fa1e 	bl	80039b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
	...

080035f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003612:	2302      	movs	r3, #2
 8003614:	e0ff      	b.n	8003816 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b14      	cmp	r3, #20
 8003622:	f200 80f0 	bhi.w	8003806 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003626:	a201      	add	r2, pc, #4	@ (adr r2, 800362c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362c:	08003681 	.word	0x08003681
 8003630:	08003807 	.word	0x08003807
 8003634:	08003807 	.word	0x08003807
 8003638:	08003807 	.word	0x08003807
 800363c:	080036c1 	.word	0x080036c1
 8003640:	08003807 	.word	0x08003807
 8003644:	08003807 	.word	0x08003807
 8003648:	08003807 	.word	0x08003807
 800364c:	08003703 	.word	0x08003703
 8003650:	08003807 	.word	0x08003807
 8003654:	08003807 	.word	0x08003807
 8003658:	08003807 	.word	0x08003807
 800365c:	08003743 	.word	0x08003743
 8003660:	08003807 	.word	0x08003807
 8003664:	08003807 	.word	0x08003807
 8003668:	08003807 	.word	0x08003807
 800366c:	08003785 	.word	0x08003785
 8003670:	08003807 	.word	0x08003807
 8003674:	08003807 	.word	0x08003807
 8003678:	08003807 	.word	0x08003807
 800367c:	080037c5 	.word	0x080037c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68b9      	ldr	r1, [r7, #8]
 8003686:	4618      	mov	r0, r3
 8003688:	f000 fa04 	bl	8003a94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699a      	ldr	r2, [r3, #24]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0208 	orr.w	r2, r2, #8
 800369a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	699a      	ldr	r2, [r3, #24]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0204 	bic.w	r2, r2, #4
 80036aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6999      	ldr	r1, [r3, #24]
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	691a      	ldr	r2, [r3, #16]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	619a      	str	r2, [r3, #24]
      break;
 80036be:	e0a5      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68b9      	ldr	r1, [r7, #8]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 fa60 	bl	8003b8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699a      	ldr	r2, [r3, #24]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6999      	ldr	r1, [r3, #24]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	021a      	lsls	r2, r3, #8
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	619a      	str	r2, [r3, #24]
      break;
 8003700:	e084      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68b9      	ldr	r1, [r7, #8]
 8003708:	4618      	mov	r0, r3
 800370a:	f000 fab9 	bl	8003c80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69da      	ldr	r2, [r3, #28]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 0208 	orr.w	r2, r2, #8
 800371c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69da      	ldr	r2, [r3, #28]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0204 	bic.w	r2, r2, #4
 800372c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69d9      	ldr	r1, [r3, #28]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	61da      	str	r2, [r3, #28]
      break;
 8003740:	e064      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68b9      	ldr	r1, [r7, #8]
 8003748:	4618      	mov	r0, r3
 800374a:	f000 fb11 	bl	8003d70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800375c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69da      	ldr	r2, [r3, #28]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800376c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69d9      	ldr	r1, [r3, #28]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	021a      	lsls	r2, r3, #8
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	61da      	str	r2, [r3, #28]
      break;
 8003782:	e043      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68b9      	ldr	r1, [r7, #8]
 800378a:	4618      	mov	r0, r3
 800378c:	f000 fb4e 	bl	8003e2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0208 	orr.w	r2, r2, #8
 800379e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0204 	bic.w	r2, r2, #4
 80037ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	691a      	ldr	r2, [r3, #16]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80037c2:	e023      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 fb86 	bl	8003edc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037de:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037ee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	021a      	lsls	r2, r3, #8
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003804:	e002      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	75fb      	strb	r3, [r7, #23]
      break;
 800380a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003814:	7dfb      	ldrb	r3, [r7, #23]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop

08003820 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_TIM_ConfigClockSource+0x1c>
 8003838:	2302      	movs	r3, #2
 800383a:	e0b6      	b.n	80039aa <HAL_TIM_ConfigClockSource+0x18a>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800385a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800385e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003866:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003878:	d03e      	beq.n	80038f8 <HAL_TIM_ConfigClockSource+0xd8>
 800387a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800387e:	f200 8087 	bhi.w	8003990 <HAL_TIM_ConfigClockSource+0x170>
 8003882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003886:	f000 8086 	beq.w	8003996 <HAL_TIM_ConfigClockSource+0x176>
 800388a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800388e:	d87f      	bhi.n	8003990 <HAL_TIM_ConfigClockSource+0x170>
 8003890:	2b70      	cmp	r3, #112	@ 0x70
 8003892:	d01a      	beq.n	80038ca <HAL_TIM_ConfigClockSource+0xaa>
 8003894:	2b70      	cmp	r3, #112	@ 0x70
 8003896:	d87b      	bhi.n	8003990 <HAL_TIM_ConfigClockSource+0x170>
 8003898:	2b60      	cmp	r3, #96	@ 0x60
 800389a:	d050      	beq.n	800393e <HAL_TIM_ConfigClockSource+0x11e>
 800389c:	2b60      	cmp	r3, #96	@ 0x60
 800389e:	d877      	bhi.n	8003990 <HAL_TIM_ConfigClockSource+0x170>
 80038a0:	2b50      	cmp	r3, #80	@ 0x50
 80038a2:	d03c      	beq.n	800391e <HAL_TIM_ConfigClockSource+0xfe>
 80038a4:	2b50      	cmp	r3, #80	@ 0x50
 80038a6:	d873      	bhi.n	8003990 <HAL_TIM_ConfigClockSource+0x170>
 80038a8:	2b40      	cmp	r3, #64	@ 0x40
 80038aa:	d058      	beq.n	800395e <HAL_TIM_ConfigClockSource+0x13e>
 80038ac:	2b40      	cmp	r3, #64	@ 0x40
 80038ae:	d86f      	bhi.n	8003990 <HAL_TIM_ConfigClockSource+0x170>
 80038b0:	2b30      	cmp	r3, #48	@ 0x30
 80038b2:	d064      	beq.n	800397e <HAL_TIM_ConfigClockSource+0x15e>
 80038b4:	2b30      	cmp	r3, #48	@ 0x30
 80038b6:	d86b      	bhi.n	8003990 <HAL_TIM_ConfigClockSource+0x170>
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	d060      	beq.n	800397e <HAL_TIM_ConfigClockSource+0x15e>
 80038bc:	2b20      	cmp	r3, #32
 80038be:	d867      	bhi.n	8003990 <HAL_TIM_ConfigClockSource+0x170>
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d05c      	beq.n	800397e <HAL_TIM_ConfigClockSource+0x15e>
 80038c4:	2b10      	cmp	r3, #16
 80038c6:	d05a      	beq.n	800397e <HAL_TIM_ConfigClockSource+0x15e>
 80038c8:	e062      	b.n	8003990 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038da:	f000 fbd3 	bl	8004084 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80038ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	609a      	str	r2, [r3, #8]
      break;
 80038f6:	e04f      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003908:	f000 fbbc 	bl	8004084 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800391a:	609a      	str	r2, [r3, #8]
      break;
 800391c:	e03c      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800392a:	461a      	mov	r2, r3
 800392c:	f000 fb30 	bl	8003f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2150      	movs	r1, #80	@ 0x50
 8003936:	4618      	mov	r0, r3
 8003938:	f000 fb89 	bl	800404e <TIM_ITRx_SetConfig>
      break;
 800393c:	e02c      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800394a:	461a      	mov	r2, r3
 800394c:	f000 fb4f 	bl	8003fee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2160      	movs	r1, #96	@ 0x60
 8003956:	4618      	mov	r0, r3
 8003958:	f000 fb79 	bl	800404e <TIM_ITRx_SetConfig>
      break;
 800395c:	e01c      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800396a:	461a      	mov	r2, r3
 800396c:	f000 fb10 	bl	8003f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2140      	movs	r1, #64	@ 0x40
 8003976:	4618      	mov	r0, r3
 8003978:	f000 fb69 	bl	800404e <TIM_ITRx_SetConfig>
      break;
 800397c:	e00c      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4619      	mov	r1, r3
 8003988:	4610      	mov	r0, r2
 800398a:	f000 fb60 	bl	800404e <TIM_ITRx_SetConfig>
      break;
 800398e:	e003      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	73fb      	strb	r3, [r7, #15]
      break;
 8003994:	e000      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003996:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a30      	ldr	r2, [pc, #192]	@ (8003a88 <TIM_Base_SetConfig+0xd4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d003      	beq.n	80039d4 <TIM_Base_SetConfig+0x20>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039d2:	d108      	bne.n	80039e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a27      	ldr	r2, [pc, #156]	@ (8003a88 <TIM_Base_SetConfig+0xd4>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d00b      	beq.n	8003a06 <TIM_Base_SetConfig+0x52>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039f4:	d007      	beq.n	8003a06 <TIM_Base_SetConfig+0x52>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a24      	ldr	r2, [pc, #144]	@ (8003a8c <TIM_Base_SetConfig+0xd8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d003      	beq.n	8003a06 <TIM_Base_SetConfig+0x52>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a23      	ldr	r2, [pc, #140]	@ (8003a90 <TIM_Base_SetConfig+0xdc>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d108      	bne.n	8003a18 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a12      	ldr	r2, [pc, #72]	@ (8003a88 <TIM_Base_SetConfig+0xd4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d007      	beq.n	8003a54 <TIM_Base_SetConfig+0xa0>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a11      	ldr	r2, [pc, #68]	@ (8003a8c <TIM_Base_SetConfig+0xd8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d003      	beq.n	8003a54 <TIM_Base_SetConfig+0xa0>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a10      	ldr	r2, [pc, #64]	@ (8003a90 <TIM_Base_SetConfig+0xdc>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d103      	bne.n	8003a5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	691a      	ldr	r2, [r3, #16]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d105      	bne.n	8003a7a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f023 0201 	bic.w	r2, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	611a      	str	r2, [r3, #16]
  }
}
 8003a7a:	bf00      	nop
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40012c00 	.word	0x40012c00
 8003a8c:	40014000 	.word	0x40014000
 8003a90:	40014400 	.word	0x40014400

08003a94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	f023 0201 	bic.w	r2, r3, #1
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f023 0303 	bic.w	r3, r3, #3
 8003ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f023 0302 	bic.w	r3, r3, #2
 8003ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a24      	ldr	r2, [pc, #144]	@ (8003b80 <TIM_OC1_SetConfig+0xec>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d007      	beq.n	8003b04 <TIM_OC1_SetConfig+0x70>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a23      	ldr	r2, [pc, #140]	@ (8003b84 <TIM_OC1_SetConfig+0xf0>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d003      	beq.n	8003b04 <TIM_OC1_SetConfig+0x70>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a22      	ldr	r2, [pc, #136]	@ (8003b88 <TIM_OC1_SetConfig+0xf4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d10c      	bne.n	8003b1e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f023 0308 	bic.w	r3, r3, #8
 8003b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f023 0304 	bic.w	r3, r3, #4
 8003b1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a17      	ldr	r2, [pc, #92]	@ (8003b80 <TIM_OC1_SetConfig+0xec>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d007      	beq.n	8003b36 <TIM_OC1_SetConfig+0xa2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a16      	ldr	r2, [pc, #88]	@ (8003b84 <TIM_OC1_SetConfig+0xf0>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d003      	beq.n	8003b36 <TIM_OC1_SetConfig+0xa2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a15      	ldr	r2, [pc, #84]	@ (8003b88 <TIM_OC1_SetConfig+0xf4>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d111      	bne.n	8003b5a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	621a      	str	r2, [r3, #32]
}
 8003b74:	bf00      	nop
 8003b76:	371c      	adds	r7, #28
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	40012c00 	.word	0x40012c00
 8003b84:	40014000 	.word	0x40014000
 8003b88:	40014400 	.word	0x40014400

08003b8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	f023 0210 	bic.w	r2, r3, #16
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	021b      	lsls	r3, r3, #8
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f023 0320 	bic.w	r3, r3, #32
 8003bda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a22      	ldr	r2, [pc, #136]	@ (8003c74 <TIM_OC2_SetConfig+0xe8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d10d      	bne.n	8003c0c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a19      	ldr	r2, [pc, #100]	@ (8003c74 <TIM_OC2_SetConfig+0xe8>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d007      	beq.n	8003c24 <TIM_OC2_SetConfig+0x98>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a18      	ldr	r2, [pc, #96]	@ (8003c78 <TIM_OC2_SetConfig+0xec>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d003      	beq.n	8003c24 <TIM_OC2_SetConfig+0x98>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a17      	ldr	r2, [pc, #92]	@ (8003c7c <TIM_OC2_SetConfig+0xf0>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d113      	bne.n	8003c4c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	621a      	str	r2, [r3, #32]
}
 8003c66:	bf00      	nop
 8003c68:	371c      	adds	r7, #28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40012c00 	.word	0x40012c00
 8003c78:	40014000 	.word	0x40014000
 8003c7c:	40014400 	.word	0x40014400

08003c80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0303 	bic.w	r3, r3, #3
 8003cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	021b      	lsls	r3, r3, #8
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a21      	ldr	r2, [pc, #132]	@ (8003d64 <TIM_OC3_SetConfig+0xe4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d10d      	bne.n	8003cfe <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a18      	ldr	r2, [pc, #96]	@ (8003d64 <TIM_OC3_SetConfig+0xe4>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d007      	beq.n	8003d16 <TIM_OC3_SetConfig+0x96>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a17      	ldr	r2, [pc, #92]	@ (8003d68 <TIM_OC3_SetConfig+0xe8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d003      	beq.n	8003d16 <TIM_OC3_SetConfig+0x96>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a16      	ldr	r2, [pc, #88]	@ (8003d6c <TIM_OC3_SetConfig+0xec>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d113      	bne.n	8003d3e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	621a      	str	r2, [r3, #32]
}
 8003d58:	bf00      	nop
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	40012c00 	.word	0x40012c00
 8003d68:	40014000 	.word	0x40014000
 8003d6c:	40014400 	.word	0x40014400

08003d70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	021b      	lsls	r3, r3, #8
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003dbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	031b      	lsls	r3, r3, #12
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a14      	ldr	r2, [pc, #80]	@ (8003e20 <TIM_OC4_SetConfig+0xb0>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d007      	beq.n	8003de4 <TIM_OC4_SetConfig+0x74>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a13      	ldr	r2, [pc, #76]	@ (8003e24 <TIM_OC4_SetConfig+0xb4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d003      	beq.n	8003de4 <TIM_OC4_SetConfig+0x74>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a12      	ldr	r2, [pc, #72]	@ (8003e28 <TIM_OC4_SetConfig+0xb8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d109      	bne.n	8003df8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003dea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	019b      	lsls	r3, r3, #6
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	621a      	str	r2, [r3, #32]
}
 8003e12:	bf00      	nop
 8003e14:	371c      	adds	r7, #28
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	40012c00 	.word	0x40012c00
 8003e24:	40014000 	.word	0x40014000
 8003e28:	40014400 	.word	0x40014400

08003e2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003e70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	041b      	lsls	r3, r3, #16
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a13      	ldr	r2, [pc, #76]	@ (8003ed0 <TIM_OC5_SetConfig+0xa4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d007      	beq.n	8003e96 <TIM_OC5_SetConfig+0x6a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a12      	ldr	r2, [pc, #72]	@ (8003ed4 <TIM_OC5_SetConfig+0xa8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d003      	beq.n	8003e96 <TIM_OC5_SetConfig+0x6a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a11      	ldr	r2, [pc, #68]	@ (8003ed8 <TIM_OC5_SetConfig+0xac>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d109      	bne.n	8003eaa <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	021b      	lsls	r3, r3, #8
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	621a      	str	r2, [r3, #32]
}
 8003ec4:	bf00      	nop
 8003ec6:	371c      	adds	r7, #28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	40012c00 	.word	0x40012c00
 8003ed4:	40014000 	.word	0x40014000
 8003ed8:	40014400 	.word	0x40014400

08003edc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	021b      	lsls	r3, r3, #8
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	051b      	lsls	r3, r3, #20
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a14      	ldr	r2, [pc, #80]	@ (8003f84 <TIM_OC6_SetConfig+0xa8>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d007      	beq.n	8003f48 <TIM_OC6_SetConfig+0x6c>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a13      	ldr	r2, [pc, #76]	@ (8003f88 <TIM_OC6_SetConfig+0xac>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d003      	beq.n	8003f48 <TIM_OC6_SetConfig+0x6c>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a12      	ldr	r2, [pc, #72]	@ (8003f8c <TIM_OC6_SetConfig+0xb0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d109      	bne.n	8003f5c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	029b      	lsls	r3, r3, #10
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	621a      	str	r2, [r3, #32]
}
 8003f76:	bf00      	nop
 8003f78:	371c      	adds	r7, #28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40012c00 	.word	0x40012c00
 8003f88:	40014000 	.word	0x40014000
 8003f8c:	40014400 	.word	0x40014400

08003f90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	f023 0201 	bic.w	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	011b      	lsls	r3, r3, #4
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f023 030a 	bic.w	r3, r3, #10
 8003fcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	621a      	str	r2, [r3, #32]
}
 8003fe2:	bf00      	nop
 8003fe4:	371c      	adds	r7, #28
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b087      	sub	sp, #28
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	f023 0210 	bic.w	r2, r3, #16
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004018:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	031b      	lsls	r3, r3, #12
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800402a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	4313      	orrs	r3, r2
 8004034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	621a      	str	r2, [r3, #32]
}
 8004042:	bf00      	nop
 8004044:	371c      	adds	r7, #28
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800404e:	b480      	push	{r7}
 8004050:	b085      	sub	sp, #20
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004064:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4313      	orrs	r3, r2
 800406c:	f043 0307 	orr.w	r3, r3, #7
 8004070:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	609a      	str	r2, [r3, #8]
}
 8004078:	bf00      	nop
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
 8004090:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800409e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	021a      	lsls	r2, r3, #8
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	609a      	str	r2, [r3, #8]
}
 80040b8:	bf00      	nop
 80040ba:	371c      	adds	r7, #28
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d101      	bne.n	80040dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040d8:	2302      	movs	r3, #2
 80040da:	e04f      	b.n	800417c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a21      	ldr	r2, [pc, #132]	@ (8004188 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d108      	bne.n	8004118 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800410c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800411e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a14      	ldr	r2, [pc, #80]	@ (8004188 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d009      	beq.n	8004150 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004144:	d004      	beq.n	8004150 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a10      	ldr	r2, [pc, #64]	@ (800418c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d10c      	bne.n	800416a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004156:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	4313      	orrs	r3, r2
 8004160:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	40012c00 	.word	0x40012c00
 800418c:	40014000 	.word	0x40014000

08004190 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800419a:	2300      	movs	r3, #0
 800419c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e060      	b.n	800426e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	4313      	orrs	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	4313      	orrs	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	041b      	lsls	r3, r3, #16
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a14      	ldr	r2, [pc, #80]	@ (800427c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d115      	bne.n	800425c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423a:	051b      	lsls	r3, r3, #20
 800423c:	4313      	orrs	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	4313      	orrs	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	4313      	orrs	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40012c00 	.word	0x40012c00

08004280 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e040      	b.n	8004314 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004296:	2b00      	cmp	r3, #0
 8004298:	d106      	bne.n	80042a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7fc fd8c 	bl	8000dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2224      	movs	r2, #36	@ 0x24
 80042ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0201 	bic.w	r2, r2, #1
 80042bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fade 	bl	8004888 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f8af 	bl	8004430 <UART_SetConfig>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e01b      	b.n	8004314 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0201 	orr.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 fb5d 	bl	80049cc <UART_CheckIdleState>
 8004312:	4603      	mov	r3, r0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08a      	sub	sp, #40	@ 0x28
 8004320:	af02      	add	r7, sp, #8
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	4613      	mov	r3, r2
 800432a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004330:	2b20      	cmp	r3, #32
 8004332:	d177      	bne.n	8004424 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <HAL_UART_Transmit+0x24>
 800433a:	88fb      	ldrh	r3, [r7, #6]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e070      	b.n	8004426 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2221      	movs	r2, #33	@ 0x21
 8004350:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004352:	f7fc fe31 	bl	8000fb8 <HAL_GetTick>
 8004356:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	88fa      	ldrh	r2, [r7, #6]
 800435c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	88fa      	ldrh	r2, [r7, #6]
 8004364:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004370:	d108      	bne.n	8004384 <HAL_UART_Transmit+0x68>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d104      	bne.n	8004384 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	61bb      	str	r3, [r7, #24]
 8004382:	e003      	b.n	800438c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004388:	2300      	movs	r3, #0
 800438a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800438c:	e02f      	b.n	80043ee <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2200      	movs	r2, #0
 8004396:	2180      	movs	r1, #128	@ 0x80
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 fbbf 	bl	8004b1c <UART_WaitOnFlagUntilTimeout>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d004      	beq.n	80043ae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2220      	movs	r2, #32
 80043a8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e03b      	b.n	8004426 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10b      	bne.n	80043cc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	881a      	ldrh	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043c0:	b292      	uxth	r2, r2
 80043c2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	3302      	adds	r3, #2
 80043c8:	61bb      	str	r3, [r7, #24]
 80043ca:	e007      	b.n	80043dc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	781a      	ldrb	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	3301      	adds	r3, #1
 80043da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1c9      	bne.n	800438e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2200      	movs	r2, #0
 8004402:	2140      	movs	r1, #64	@ 0x40
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 fb89 	bl	8004b1c <UART_WaitOnFlagUntilTimeout>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d004      	beq.n	800441a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e005      	b.n	8004426 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2220      	movs	r2, #32
 800441e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	e000      	b.n	8004426 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004424:	2302      	movs	r3, #2
  }
}
 8004426:	4618      	mov	r0, r3
 8004428:	3720      	adds	r7, #32
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
	...

08004430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004434:	b08a      	sub	sp, #40	@ 0x28
 8004436:	af00      	add	r7, sp, #0
 8004438:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	431a      	orrs	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	431a      	orrs	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	4313      	orrs	r3, r2
 8004456:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	4bb4      	ldr	r3, [pc, #720]	@ (8004730 <UART_SetConfig+0x300>)
 8004460:	4013      	ands	r3, r2
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004468:	430b      	orrs	r3, r1
 800446a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4aa9      	ldr	r2, [pc, #676]	@ (8004734 <UART_SetConfig+0x304>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d004      	beq.n	800449c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004498:	4313      	orrs	r3, r2
 800449a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044ac:	430a      	orrs	r2, r1
 80044ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4aa0      	ldr	r2, [pc, #640]	@ (8004738 <UART_SetConfig+0x308>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d126      	bne.n	8004508 <UART_SetConfig+0xd8>
 80044ba:	4ba0      	ldr	r3, [pc, #640]	@ (800473c <UART_SetConfig+0x30c>)
 80044bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c0:	f003 0303 	and.w	r3, r3, #3
 80044c4:	2b03      	cmp	r3, #3
 80044c6:	d81b      	bhi.n	8004500 <UART_SetConfig+0xd0>
 80044c8:	a201      	add	r2, pc, #4	@ (adr r2, 80044d0 <UART_SetConfig+0xa0>)
 80044ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ce:	bf00      	nop
 80044d0:	080044e1 	.word	0x080044e1
 80044d4:	080044f1 	.word	0x080044f1
 80044d8:	080044e9 	.word	0x080044e9
 80044dc:	080044f9 	.word	0x080044f9
 80044e0:	2301      	movs	r3, #1
 80044e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044e6:	e080      	b.n	80045ea <UART_SetConfig+0x1ba>
 80044e8:	2302      	movs	r3, #2
 80044ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ee:	e07c      	b.n	80045ea <UART_SetConfig+0x1ba>
 80044f0:	2304      	movs	r3, #4
 80044f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044f6:	e078      	b.n	80045ea <UART_SetConfig+0x1ba>
 80044f8:	2308      	movs	r3, #8
 80044fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044fe:	e074      	b.n	80045ea <UART_SetConfig+0x1ba>
 8004500:	2310      	movs	r3, #16
 8004502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004506:	e070      	b.n	80045ea <UART_SetConfig+0x1ba>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a8c      	ldr	r2, [pc, #560]	@ (8004740 <UART_SetConfig+0x310>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d138      	bne.n	8004584 <UART_SetConfig+0x154>
 8004512:	4b8a      	ldr	r3, [pc, #552]	@ (800473c <UART_SetConfig+0x30c>)
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004518:	f003 030c 	and.w	r3, r3, #12
 800451c:	2b0c      	cmp	r3, #12
 800451e:	d82d      	bhi.n	800457c <UART_SetConfig+0x14c>
 8004520:	a201      	add	r2, pc, #4	@ (adr r2, 8004528 <UART_SetConfig+0xf8>)
 8004522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004526:	bf00      	nop
 8004528:	0800455d 	.word	0x0800455d
 800452c:	0800457d 	.word	0x0800457d
 8004530:	0800457d 	.word	0x0800457d
 8004534:	0800457d 	.word	0x0800457d
 8004538:	0800456d 	.word	0x0800456d
 800453c:	0800457d 	.word	0x0800457d
 8004540:	0800457d 	.word	0x0800457d
 8004544:	0800457d 	.word	0x0800457d
 8004548:	08004565 	.word	0x08004565
 800454c:	0800457d 	.word	0x0800457d
 8004550:	0800457d 	.word	0x0800457d
 8004554:	0800457d 	.word	0x0800457d
 8004558:	08004575 	.word	0x08004575
 800455c:	2300      	movs	r3, #0
 800455e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004562:	e042      	b.n	80045ea <UART_SetConfig+0x1ba>
 8004564:	2302      	movs	r3, #2
 8004566:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800456a:	e03e      	b.n	80045ea <UART_SetConfig+0x1ba>
 800456c:	2304      	movs	r3, #4
 800456e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004572:	e03a      	b.n	80045ea <UART_SetConfig+0x1ba>
 8004574:	2308      	movs	r3, #8
 8004576:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800457a:	e036      	b.n	80045ea <UART_SetConfig+0x1ba>
 800457c:	2310      	movs	r3, #16
 800457e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004582:	e032      	b.n	80045ea <UART_SetConfig+0x1ba>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a6a      	ldr	r2, [pc, #424]	@ (8004734 <UART_SetConfig+0x304>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d12a      	bne.n	80045e4 <UART_SetConfig+0x1b4>
 800458e:	4b6b      	ldr	r3, [pc, #428]	@ (800473c <UART_SetConfig+0x30c>)
 8004590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004594:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004598:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800459c:	d01a      	beq.n	80045d4 <UART_SetConfig+0x1a4>
 800459e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045a2:	d81b      	bhi.n	80045dc <UART_SetConfig+0x1ac>
 80045a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045a8:	d00c      	beq.n	80045c4 <UART_SetConfig+0x194>
 80045aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045ae:	d815      	bhi.n	80045dc <UART_SetConfig+0x1ac>
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <UART_SetConfig+0x18c>
 80045b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045b8:	d008      	beq.n	80045cc <UART_SetConfig+0x19c>
 80045ba:	e00f      	b.n	80045dc <UART_SetConfig+0x1ac>
 80045bc:	2300      	movs	r3, #0
 80045be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045c2:	e012      	b.n	80045ea <UART_SetConfig+0x1ba>
 80045c4:	2302      	movs	r3, #2
 80045c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ca:	e00e      	b.n	80045ea <UART_SetConfig+0x1ba>
 80045cc:	2304      	movs	r3, #4
 80045ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045d2:	e00a      	b.n	80045ea <UART_SetConfig+0x1ba>
 80045d4:	2308      	movs	r3, #8
 80045d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045da:	e006      	b.n	80045ea <UART_SetConfig+0x1ba>
 80045dc:	2310      	movs	r3, #16
 80045de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045e2:	e002      	b.n	80045ea <UART_SetConfig+0x1ba>
 80045e4:	2310      	movs	r3, #16
 80045e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a51      	ldr	r2, [pc, #324]	@ (8004734 <UART_SetConfig+0x304>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d17a      	bne.n	80046ea <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d824      	bhi.n	8004646 <UART_SetConfig+0x216>
 80045fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004604 <UART_SetConfig+0x1d4>)
 80045fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004602:	bf00      	nop
 8004604:	08004629 	.word	0x08004629
 8004608:	08004647 	.word	0x08004647
 800460c:	08004631 	.word	0x08004631
 8004610:	08004647 	.word	0x08004647
 8004614:	08004637 	.word	0x08004637
 8004618:	08004647 	.word	0x08004647
 800461c:	08004647 	.word	0x08004647
 8004620:	08004647 	.word	0x08004647
 8004624:	0800463f 	.word	0x0800463f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004628:	f7fe fafc 	bl	8002c24 <HAL_RCC_GetPCLK1Freq>
 800462c:	61f8      	str	r0, [r7, #28]
        break;
 800462e:	e010      	b.n	8004652 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004630:	4b44      	ldr	r3, [pc, #272]	@ (8004744 <UART_SetConfig+0x314>)
 8004632:	61fb      	str	r3, [r7, #28]
        break;
 8004634:	e00d      	b.n	8004652 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004636:	f7fe fa5d 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 800463a:	61f8      	str	r0, [r7, #28]
        break;
 800463c:	e009      	b.n	8004652 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800463e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004642:	61fb      	str	r3, [r7, #28]
        break;
 8004644:	e005      	b.n	8004652 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004646:	2300      	movs	r3, #0
 8004648:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004650:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 8107 	beq.w	8004868 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	4613      	mov	r3, r2
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	4413      	add	r3, r2
 8004664:	69fa      	ldr	r2, [r7, #28]
 8004666:	429a      	cmp	r2, r3
 8004668:	d305      	bcc.n	8004676 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004670:	69fa      	ldr	r2, [r7, #28]
 8004672:	429a      	cmp	r2, r3
 8004674:	d903      	bls.n	800467e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800467c:	e0f4      	b.n	8004868 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	2200      	movs	r2, #0
 8004682:	461c      	mov	r4, r3
 8004684:	4615      	mov	r5, r2
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	022b      	lsls	r3, r5, #8
 8004690:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004694:	0222      	lsls	r2, r4, #8
 8004696:	68f9      	ldr	r1, [r7, #12]
 8004698:	6849      	ldr	r1, [r1, #4]
 800469a:	0849      	lsrs	r1, r1, #1
 800469c:	2000      	movs	r0, #0
 800469e:	4688      	mov	r8, r1
 80046a0:	4681      	mov	r9, r0
 80046a2:	eb12 0a08 	adds.w	sl, r2, r8
 80046a6:	eb43 0b09 	adc.w	fp, r3, r9
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	603b      	str	r3, [r7, #0]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046b8:	4650      	mov	r0, sl
 80046ba:	4659      	mov	r1, fp
 80046bc:	f7fb fde0 	bl	8000280 <__aeabi_uldivmod>
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	4613      	mov	r3, r2
 80046c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046ce:	d308      	bcc.n	80046e2 <UART_SetConfig+0x2b2>
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046d6:	d204      	bcs.n	80046e2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	60da      	str	r2, [r3, #12]
 80046e0:	e0c2      	b.n	8004868 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80046e8:	e0be      	b.n	8004868 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046f2:	d16a      	bne.n	80047ca <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80046f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d834      	bhi.n	8004766 <UART_SetConfig+0x336>
 80046fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004704 <UART_SetConfig+0x2d4>)
 80046fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004702:	bf00      	nop
 8004704:	08004729 	.word	0x08004729
 8004708:	08004749 	.word	0x08004749
 800470c:	08004751 	.word	0x08004751
 8004710:	08004767 	.word	0x08004767
 8004714:	08004757 	.word	0x08004757
 8004718:	08004767 	.word	0x08004767
 800471c:	08004767 	.word	0x08004767
 8004720:	08004767 	.word	0x08004767
 8004724:	0800475f 	.word	0x0800475f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004728:	f7fe fa7c 	bl	8002c24 <HAL_RCC_GetPCLK1Freq>
 800472c:	61f8      	str	r0, [r7, #28]
        break;
 800472e:	e020      	b.n	8004772 <UART_SetConfig+0x342>
 8004730:	efff69f3 	.word	0xefff69f3
 8004734:	40008000 	.word	0x40008000
 8004738:	40013800 	.word	0x40013800
 800473c:	40021000 	.word	0x40021000
 8004740:	40004400 	.word	0x40004400
 8004744:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004748:	f7fe fa82 	bl	8002c50 <HAL_RCC_GetPCLK2Freq>
 800474c:	61f8      	str	r0, [r7, #28]
        break;
 800474e:	e010      	b.n	8004772 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004750:	4b4c      	ldr	r3, [pc, #304]	@ (8004884 <UART_SetConfig+0x454>)
 8004752:	61fb      	str	r3, [r7, #28]
        break;
 8004754:	e00d      	b.n	8004772 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004756:	f7fe f9cd 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 800475a:	61f8      	str	r0, [r7, #28]
        break;
 800475c:	e009      	b.n	8004772 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800475e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004762:	61fb      	str	r3, [r7, #28]
        break;
 8004764:	e005      	b.n	8004772 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004766:	2300      	movs	r3, #0
 8004768:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004770:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d077      	beq.n	8004868 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	005a      	lsls	r2, r3, #1
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	085b      	lsrs	r3, r3, #1
 8004782:	441a      	add	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	fbb2 f3f3 	udiv	r3, r2, r3
 800478c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	2b0f      	cmp	r3, #15
 8004792:	d916      	bls.n	80047c2 <UART_SetConfig+0x392>
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800479a:	d212      	bcs.n	80047c2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	f023 030f 	bic.w	r3, r3, #15
 80047a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	085b      	lsrs	r3, r3, #1
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	8afb      	ldrh	r3, [r7, #22]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	8afa      	ldrh	r2, [r7, #22]
 80047be:	60da      	str	r2, [r3, #12]
 80047c0:	e052      	b.n	8004868 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80047c8:	e04e      	b.n	8004868 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047ce:	2b08      	cmp	r3, #8
 80047d0:	d827      	bhi.n	8004822 <UART_SetConfig+0x3f2>
 80047d2:	a201      	add	r2, pc, #4	@ (adr r2, 80047d8 <UART_SetConfig+0x3a8>)
 80047d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d8:	080047fd 	.word	0x080047fd
 80047dc:	08004805 	.word	0x08004805
 80047e0:	0800480d 	.word	0x0800480d
 80047e4:	08004823 	.word	0x08004823
 80047e8:	08004813 	.word	0x08004813
 80047ec:	08004823 	.word	0x08004823
 80047f0:	08004823 	.word	0x08004823
 80047f4:	08004823 	.word	0x08004823
 80047f8:	0800481b 	.word	0x0800481b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047fc:	f7fe fa12 	bl	8002c24 <HAL_RCC_GetPCLK1Freq>
 8004800:	61f8      	str	r0, [r7, #28]
        break;
 8004802:	e014      	b.n	800482e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004804:	f7fe fa24 	bl	8002c50 <HAL_RCC_GetPCLK2Freq>
 8004808:	61f8      	str	r0, [r7, #28]
        break;
 800480a:	e010      	b.n	800482e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800480c:	4b1d      	ldr	r3, [pc, #116]	@ (8004884 <UART_SetConfig+0x454>)
 800480e:	61fb      	str	r3, [r7, #28]
        break;
 8004810:	e00d      	b.n	800482e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004812:	f7fe f96f 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 8004816:	61f8      	str	r0, [r7, #28]
        break;
 8004818:	e009      	b.n	800482e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800481a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800481e:	61fb      	str	r3, [r7, #28]
        break;
 8004820:	e005      	b.n	800482e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004822:	2300      	movs	r3, #0
 8004824:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800482c:	bf00      	nop
    }

    if (pclk != 0U)
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d019      	beq.n	8004868 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	085a      	lsrs	r2, r3, #1
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	441a      	add	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	fbb2 f3f3 	udiv	r3, r2, r3
 8004846:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	2b0f      	cmp	r3, #15
 800484c:	d909      	bls.n	8004862 <UART_SetConfig+0x432>
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004854:	d205      	bcs.n	8004862 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	b29a      	uxth	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	60da      	str	r2, [r3, #12]
 8004860:	e002      	b.n	8004868 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004874:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004878:	4618      	mov	r0, r3
 800487a:	3728      	adds	r7, #40	@ 0x28
 800487c:	46bd      	mov	sp, r7
 800487e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004882:	bf00      	nop
 8004884:	00f42400 	.word	0x00f42400

08004888 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00a      	beq.n	80048b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00a      	beq.n	80048f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491c:	f003 0310 	and.w	r3, r3, #16
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00a      	beq.n	800493a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493e:	f003 0320 	and.w	r3, r3, #32
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01a      	beq.n	800499e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004982:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004986:	d10a      	bne.n	800499e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	605a      	str	r2, [r3, #4]
  }
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b098      	sub	sp, #96	@ 0x60
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049dc:	f7fc faec 	bl	8000fb8 <HAL_GetTick>
 80049e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0308 	and.w	r3, r3, #8
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d12e      	bne.n	8004a4e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049f8:	2200      	movs	r2, #0
 80049fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f88c 	bl	8004b1c <UART_WaitOnFlagUntilTimeout>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d021      	beq.n	8004a4e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a12:	e853 3f00 	ldrex	r3, [r3]
 8004a16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	461a      	mov	r2, r3
 8004a26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a28:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a2a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a30:	e841 2300 	strex	r3, r2, [r1]
 8004a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e6      	bne.n	8004a0a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e062      	b.n	8004b14 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d149      	bne.n	8004af0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a64:	2200      	movs	r2, #0
 8004a66:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f856 	bl	8004b1c <UART_WaitOnFlagUntilTimeout>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d03c      	beq.n	8004af0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7e:	e853 3f00 	ldrex	r3, [r3]
 8004a82:	623b      	str	r3, [r7, #32]
   return(result);
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	461a      	mov	r2, r3
 8004a92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a94:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a96:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a9c:	e841 2300 	strex	r3, r2, [r1]
 8004aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1e6      	bne.n	8004a76 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3308      	adds	r3, #8
 8004aae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	e853 3f00 	ldrex	r3, [r3]
 8004ab6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0301 	bic.w	r3, r3, #1
 8004abe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3308      	adds	r3, #8
 8004ac6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ac8:	61fa      	str	r2, [r7, #28]
 8004aca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004acc:	69b9      	ldr	r1, [r7, #24]
 8004ace:	69fa      	ldr	r2, [r7, #28]
 8004ad0:	e841 2300 	strex	r3, r2, [r1]
 8004ad4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e5      	bne.n	8004aa8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e011      	b.n	8004b14 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2220      	movs	r2, #32
 8004af4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3758      	adds	r7, #88	@ 0x58
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	603b      	str	r3, [r7, #0]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b2c:	e04f      	b.n	8004bce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b34:	d04b      	beq.n	8004bce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b36:	f7fc fa3f 	bl	8000fb8 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d302      	bcc.n	8004b4c <UART_WaitOnFlagUntilTimeout+0x30>
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e04e      	b.n	8004bee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0304 	and.w	r3, r3, #4
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d037      	beq.n	8004bce <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b80      	cmp	r3, #128	@ 0x80
 8004b62:	d034      	beq.n	8004bce <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2b40      	cmp	r3, #64	@ 0x40
 8004b68:	d031      	beq.n	8004bce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d110      	bne.n	8004b9a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2208      	movs	r2, #8
 8004b7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 f838 	bl	8004bf6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2208      	movs	r2, #8
 8004b8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e029      	b.n	8004bee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ba4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ba8:	d111      	bne.n	8004bce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004bb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 f81e 	bl	8004bf6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e00f      	b.n	8004bee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69da      	ldr	r2, [r3, #28]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	bf0c      	ite	eq
 8004bde:	2301      	moveq	r3, #1
 8004be0:	2300      	movne	r3, #0
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	461a      	mov	r2, r3
 8004be6:	79fb      	ldrb	r3, [r7, #7]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d0a0      	beq.n	8004b2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b095      	sub	sp, #84	@ 0x54
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c06:	e853 3f00 	ldrex	r3, [r3]
 8004c0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	461a      	mov	r2, r3
 8004c1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c1e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c24:	e841 2300 	strex	r3, r2, [r1]
 8004c28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1e6      	bne.n	8004bfe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3308      	adds	r3, #8
 8004c36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	e853 3f00 	ldrex	r3, [r3]
 8004c3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	f023 0301 	bic.w	r3, r3, #1
 8004c46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	3308      	adds	r3, #8
 8004c4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c58:	e841 2300 	strex	r3, r2, [r1]
 8004c5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1e5      	bne.n	8004c30 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d118      	bne.n	8004c9e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	e853 3f00 	ldrex	r3, [r3]
 8004c78:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f023 0310 	bic.w	r3, r3, #16
 8004c80:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	461a      	mov	r2, r3
 8004c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c8a:	61bb      	str	r3, [r7, #24]
 8004c8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8e:	6979      	ldr	r1, [r7, #20]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	e841 2300 	strex	r3, r2, [r1]
 8004c96:	613b      	str	r3, [r7, #16]
   return(result);
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1e6      	bne.n	8004c6c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004cb2:	bf00      	nop
 8004cb4:	3754      	adds	r7, #84	@ 0x54
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
	...

08004cc0 <siprintf>:
 8004cc0:	b40e      	push	{r1, r2, r3}
 8004cc2:	b500      	push	{lr}
 8004cc4:	b09c      	sub	sp, #112	@ 0x70
 8004cc6:	ab1d      	add	r3, sp, #116	@ 0x74
 8004cc8:	9002      	str	r0, [sp, #8]
 8004cca:	9006      	str	r0, [sp, #24]
 8004ccc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004cd0:	4809      	ldr	r0, [pc, #36]	@ (8004cf8 <siprintf+0x38>)
 8004cd2:	9107      	str	r1, [sp, #28]
 8004cd4:	9104      	str	r1, [sp, #16]
 8004cd6:	4909      	ldr	r1, [pc, #36]	@ (8004cfc <siprintf+0x3c>)
 8004cd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cdc:	9105      	str	r1, [sp, #20]
 8004cde:	6800      	ldr	r0, [r0, #0]
 8004ce0:	9301      	str	r3, [sp, #4]
 8004ce2:	a902      	add	r1, sp, #8
 8004ce4:	f000 f994 	bl	8005010 <_svfiprintf_r>
 8004ce8:	9b02      	ldr	r3, [sp, #8]
 8004cea:	2200      	movs	r2, #0
 8004cec:	701a      	strb	r2, [r3, #0]
 8004cee:	b01c      	add	sp, #112	@ 0x70
 8004cf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cf4:	b003      	add	sp, #12
 8004cf6:	4770      	bx	lr
 8004cf8:	2000000c 	.word	0x2000000c
 8004cfc:	ffff0208 	.word	0xffff0208

08004d00 <memset>:
 8004d00:	4402      	add	r2, r0
 8004d02:	4603      	mov	r3, r0
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d100      	bne.n	8004d0a <memset+0xa>
 8004d08:	4770      	bx	lr
 8004d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d0e:	e7f9      	b.n	8004d04 <memset+0x4>

08004d10 <__errno>:
 8004d10:	4b01      	ldr	r3, [pc, #4]	@ (8004d18 <__errno+0x8>)
 8004d12:	6818      	ldr	r0, [r3, #0]
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	2000000c 	.word	0x2000000c

08004d1c <__libc_init_array>:
 8004d1c:	b570      	push	{r4, r5, r6, lr}
 8004d1e:	4d0d      	ldr	r5, [pc, #52]	@ (8004d54 <__libc_init_array+0x38>)
 8004d20:	4c0d      	ldr	r4, [pc, #52]	@ (8004d58 <__libc_init_array+0x3c>)
 8004d22:	1b64      	subs	r4, r4, r5
 8004d24:	10a4      	asrs	r4, r4, #2
 8004d26:	2600      	movs	r6, #0
 8004d28:	42a6      	cmp	r6, r4
 8004d2a:	d109      	bne.n	8004d40 <__libc_init_array+0x24>
 8004d2c:	4d0b      	ldr	r5, [pc, #44]	@ (8004d5c <__libc_init_array+0x40>)
 8004d2e:	4c0c      	ldr	r4, [pc, #48]	@ (8004d60 <__libc_init_array+0x44>)
 8004d30:	f000 fc66 	bl	8005600 <_init>
 8004d34:	1b64      	subs	r4, r4, r5
 8004d36:	10a4      	asrs	r4, r4, #2
 8004d38:	2600      	movs	r6, #0
 8004d3a:	42a6      	cmp	r6, r4
 8004d3c:	d105      	bne.n	8004d4a <__libc_init_array+0x2e>
 8004d3e:	bd70      	pop	{r4, r5, r6, pc}
 8004d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d44:	4798      	blx	r3
 8004d46:	3601      	adds	r6, #1
 8004d48:	e7ee      	b.n	8004d28 <__libc_init_array+0xc>
 8004d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d4e:	4798      	blx	r3
 8004d50:	3601      	adds	r6, #1
 8004d52:	e7f2      	b.n	8004d3a <__libc_init_array+0x1e>
 8004d54:	080056c0 	.word	0x080056c0
 8004d58:	080056c0 	.word	0x080056c0
 8004d5c:	080056c0 	.word	0x080056c0
 8004d60:	080056c4 	.word	0x080056c4

08004d64 <__retarget_lock_acquire_recursive>:
 8004d64:	4770      	bx	lr

08004d66 <__retarget_lock_release_recursive>:
 8004d66:	4770      	bx	lr

08004d68 <_free_r>:
 8004d68:	b538      	push	{r3, r4, r5, lr}
 8004d6a:	4605      	mov	r5, r0
 8004d6c:	2900      	cmp	r1, #0
 8004d6e:	d041      	beq.n	8004df4 <_free_r+0x8c>
 8004d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d74:	1f0c      	subs	r4, r1, #4
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	bfb8      	it	lt
 8004d7a:	18e4      	addlt	r4, r4, r3
 8004d7c:	f000 f8e0 	bl	8004f40 <__malloc_lock>
 8004d80:	4a1d      	ldr	r2, [pc, #116]	@ (8004df8 <_free_r+0x90>)
 8004d82:	6813      	ldr	r3, [r2, #0]
 8004d84:	b933      	cbnz	r3, 8004d94 <_free_r+0x2c>
 8004d86:	6063      	str	r3, [r4, #4]
 8004d88:	6014      	str	r4, [r2, #0]
 8004d8a:	4628      	mov	r0, r5
 8004d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d90:	f000 b8dc 	b.w	8004f4c <__malloc_unlock>
 8004d94:	42a3      	cmp	r3, r4
 8004d96:	d908      	bls.n	8004daa <_free_r+0x42>
 8004d98:	6820      	ldr	r0, [r4, #0]
 8004d9a:	1821      	adds	r1, r4, r0
 8004d9c:	428b      	cmp	r3, r1
 8004d9e:	bf01      	itttt	eq
 8004da0:	6819      	ldreq	r1, [r3, #0]
 8004da2:	685b      	ldreq	r3, [r3, #4]
 8004da4:	1809      	addeq	r1, r1, r0
 8004da6:	6021      	streq	r1, [r4, #0]
 8004da8:	e7ed      	b.n	8004d86 <_free_r+0x1e>
 8004daa:	461a      	mov	r2, r3
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	b10b      	cbz	r3, 8004db4 <_free_r+0x4c>
 8004db0:	42a3      	cmp	r3, r4
 8004db2:	d9fa      	bls.n	8004daa <_free_r+0x42>
 8004db4:	6811      	ldr	r1, [r2, #0]
 8004db6:	1850      	adds	r0, r2, r1
 8004db8:	42a0      	cmp	r0, r4
 8004dba:	d10b      	bne.n	8004dd4 <_free_r+0x6c>
 8004dbc:	6820      	ldr	r0, [r4, #0]
 8004dbe:	4401      	add	r1, r0
 8004dc0:	1850      	adds	r0, r2, r1
 8004dc2:	4283      	cmp	r3, r0
 8004dc4:	6011      	str	r1, [r2, #0]
 8004dc6:	d1e0      	bne.n	8004d8a <_free_r+0x22>
 8004dc8:	6818      	ldr	r0, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	6053      	str	r3, [r2, #4]
 8004dce:	4408      	add	r0, r1
 8004dd0:	6010      	str	r0, [r2, #0]
 8004dd2:	e7da      	b.n	8004d8a <_free_r+0x22>
 8004dd4:	d902      	bls.n	8004ddc <_free_r+0x74>
 8004dd6:	230c      	movs	r3, #12
 8004dd8:	602b      	str	r3, [r5, #0]
 8004dda:	e7d6      	b.n	8004d8a <_free_r+0x22>
 8004ddc:	6820      	ldr	r0, [r4, #0]
 8004dde:	1821      	adds	r1, r4, r0
 8004de0:	428b      	cmp	r3, r1
 8004de2:	bf04      	itt	eq
 8004de4:	6819      	ldreq	r1, [r3, #0]
 8004de6:	685b      	ldreq	r3, [r3, #4]
 8004de8:	6063      	str	r3, [r4, #4]
 8004dea:	bf04      	itt	eq
 8004dec:	1809      	addeq	r1, r1, r0
 8004dee:	6021      	streq	r1, [r4, #0]
 8004df0:	6054      	str	r4, [r2, #4]
 8004df2:	e7ca      	b.n	8004d8a <_free_r+0x22>
 8004df4:	bd38      	pop	{r3, r4, r5, pc}
 8004df6:	bf00      	nop
 8004df8:	200002f4 	.word	0x200002f4

08004dfc <sbrk_aligned>:
 8004dfc:	b570      	push	{r4, r5, r6, lr}
 8004dfe:	4e0f      	ldr	r6, [pc, #60]	@ (8004e3c <sbrk_aligned+0x40>)
 8004e00:	460c      	mov	r4, r1
 8004e02:	6831      	ldr	r1, [r6, #0]
 8004e04:	4605      	mov	r5, r0
 8004e06:	b911      	cbnz	r1, 8004e0e <sbrk_aligned+0x12>
 8004e08:	f000 fba6 	bl	8005558 <_sbrk_r>
 8004e0c:	6030      	str	r0, [r6, #0]
 8004e0e:	4621      	mov	r1, r4
 8004e10:	4628      	mov	r0, r5
 8004e12:	f000 fba1 	bl	8005558 <_sbrk_r>
 8004e16:	1c43      	adds	r3, r0, #1
 8004e18:	d103      	bne.n	8004e22 <sbrk_aligned+0x26>
 8004e1a:	f04f 34ff 	mov.w	r4, #4294967295
 8004e1e:	4620      	mov	r0, r4
 8004e20:	bd70      	pop	{r4, r5, r6, pc}
 8004e22:	1cc4      	adds	r4, r0, #3
 8004e24:	f024 0403 	bic.w	r4, r4, #3
 8004e28:	42a0      	cmp	r0, r4
 8004e2a:	d0f8      	beq.n	8004e1e <sbrk_aligned+0x22>
 8004e2c:	1a21      	subs	r1, r4, r0
 8004e2e:	4628      	mov	r0, r5
 8004e30:	f000 fb92 	bl	8005558 <_sbrk_r>
 8004e34:	3001      	adds	r0, #1
 8004e36:	d1f2      	bne.n	8004e1e <sbrk_aligned+0x22>
 8004e38:	e7ef      	b.n	8004e1a <sbrk_aligned+0x1e>
 8004e3a:	bf00      	nop
 8004e3c:	200002f0 	.word	0x200002f0

08004e40 <_malloc_r>:
 8004e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e44:	1ccd      	adds	r5, r1, #3
 8004e46:	f025 0503 	bic.w	r5, r5, #3
 8004e4a:	3508      	adds	r5, #8
 8004e4c:	2d0c      	cmp	r5, #12
 8004e4e:	bf38      	it	cc
 8004e50:	250c      	movcc	r5, #12
 8004e52:	2d00      	cmp	r5, #0
 8004e54:	4606      	mov	r6, r0
 8004e56:	db01      	blt.n	8004e5c <_malloc_r+0x1c>
 8004e58:	42a9      	cmp	r1, r5
 8004e5a:	d904      	bls.n	8004e66 <_malloc_r+0x26>
 8004e5c:	230c      	movs	r3, #12
 8004e5e:	6033      	str	r3, [r6, #0]
 8004e60:	2000      	movs	r0, #0
 8004e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f3c <_malloc_r+0xfc>
 8004e6a:	f000 f869 	bl	8004f40 <__malloc_lock>
 8004e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8004e72:	461c      	mov	r4, r3
 8004e74:	bb44      	cbnz	r4, 8004ec8 <_malloc_r+0x88>
 8004e76:	4629      	mov	r1, r5
 8004e78:	4630      	mov	r0, r6
 8004e7a:	f7ff ffbf 	bl	8004dfc <sbrk_aligned>
 8004e7e:	1c43      	adds	r3, r0, #1
 8004e80:	4604      	mov	r4, r0
 8004e82:	d158      	bne.n	8004f36 <_malloc_r+0xf6>
 8004e84:	f8d8 4000 	ldr.w	r4, [r8]
 8004e88:	4627      	mov	r7, r4
 8004e8a:	2f00      	cmp	r7, #0
 8004e8c:	d143      	bne.n	8004f16 <_malloc_r+0xd6>
 8004e8e:	2c00      	cmp	r4, #0
 8004e90:	d04b      	beq.n	8004f2a <_malloc_r+0xea>
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	4639      	mov	r1, r7
 8004e96:	4630      	mov	r0, r6
 8004e98:	eb04 0903 	add.w	r9, r4, r3
 8004e9c:	f000 fb5c 	bl	8005558 <_sbrk_r>
 8004ea0:	4581      	cmp	r9, r0
 8004ea2:	d142      	bne.n	8004f2a <_malloc_r+0xea>
 8004ea4:	6821      	ldr	r1, [r4, #0]
 8004ea6:	1a6d      	subs	r5, r5, r1
 8004ea8:	4629      	mov	r1, r5
 8004eaa:	4630      	mov	r0, r6
 8004eac:	f7ff ffa6 	bl	8004dfc <sbrk_aligned>
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	d03a      	beq.n	8004f2a <_malloc_r+0xea>
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	442b      	add	r3, r5
 8004eb8:	6023      	str	r3, [r4, #0]
 8004eba:	f8d8 3000 	ldr.w	r3, [r8]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	bb62      	cbnz	r2, 8004f1c <_malloc_r+0xdc>
 8004ec2:	f8c8 7000 	str.w	r7, [r8]
 8004ec6:	e00f      	b.n	8004ee8 <_malloc_r+0xa8>
 8004ec8:	6822      	ldr	r2, [r4, #0]
 8004eca:	1b52      	subs	r2, r2, r5
 8004ecc:	d420      	bmi.n	8004f10 <_malloc_r+0xd0>
 8004ece:	2a0b      	cmp	r2, #11
 8004ed0:	d917      	bls.n	8004f02 <_malloc_r+0xc2>
 8004ed2:	1961      	adds	r1, r4, r5
 8004ed4:	42a3      	cmp	r3, r4
 8004ed6:	6025      	str	r5, [r4, #0]
 8004ed8:	bf18      	it	ne
 8004eda:	6059      	strne	r1, [r3, #4]
 8004edc:	6863      	ldr	r3, [r4, #4]
 8004ede:	bf08      	it	eq
 8004ee0:	f8c8 1000 	streq.w	r1, [r8]
 8004ee4:	5162      	str	r2, [r4, r5]
 8004ee6:	604b      	str	r3, [r1, #4]
 8004ee8:	4630      	mov	r0, r6
 8004eea:	f000 f82f 	bl	8004f4c <__malloc_unlock>
 8004eee:	f104 000b 	add.w	r0, r4, #11
 8004ef2:	1d23      	adds	r3, r4, #4
 8004ef4:	f020 0007 	bic.w	r0, r0, #7
 8004ef8:	1ac2      	subs	r2, r0, r3
 8004efa:	bf1c      	itt	ne
 8004efc:	1a1b      	subne	r3, r3, r0
 8004efe:	50a3      	strne	r3, [r4, r2]
 8004f00:	e7af      	b.n	8004e62 <_malloc_r+0x22>
 8004f02:	6862      	ldr	r2, [r4, #4]
 8004f04:	42a3      	cmp	r3, r4
 8004f06:	bf0c      	ite	eq
 8004f08:	f8c8 2000 	streq.w	r2, [r8]
 8004f0c:	605a      	strne	r2, [r3, #4]
 8004f0e:	e7eb      	b.n	8004ee8 <_malloc_r+0xa8>
 8004f10:	4623      	mov	r3, r4
 8004f12:	6864      	ldr	r4, [r4, #4]
 8004f14:	e7ae      	b.n	8004e74 <_malloc_r+0x34>
 8004f16:	463c      	mov	r4, r7
 8004f18:	687f      	ldr	r7, [r7, #4]
 8004f1a:	e7b6      	b.n	8004e8a <_malloc_r+0x4a>
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	42a3      	cmp	r3, r4
 8004f22:	d1fb      	bne.n	8004f1c <_malloc_r+0xdc>
 8004f24:	2300      	movs	r3, #0
 8004f26:	6053      	str	r3, [r2, #4]
 8004f28:	e7de      	b.n	8004ee8 <_malloc_r+0xa8>
 8004f2a:	230c      	movs	r3, #12
 8004f2c:	6033      	str	r3, [r6, #0]
 8004f2e:	4630      	mov	r0, r6
 8004f30:	f000 f80c 	bl	8004f4c <__malloc_unlock>
 8004f34:	e794      	b.n	8004e60 <_malloc_r+0x20>
 8004f36:	6005      	str	r5, [r0, #0]
 8004f38:	e7d6      	b.n	8004ee8 <_malloc_r+0xa8>
 8004f3a:	bf00      	nop
 8004f3c:	200002f4 	.word	0x200002f4

08004f40 <__malloc_lock>:
 8004f40:	4801      	ldr	r0, [pc, #4]	@ (8004f48 <__malloc_lock+0x8>)
 8004f42:	f7ff bf0f 	b.w	8004d64 <__retarget_lock_acquire_recursive>
 8004f46:	bf00      	nop
 8004f48:	200002ec 	.word	0x200002ec

08004f4c <__malloc_unlock>:
 8004f4c:	4801      	ldr	r0, [pc, #4]	@ (8004f54 <__malloc_unlock+0x8>)
 8004f4e:	f7ff bf0a 	b.w	8004d66 <__retarget_lock_release_recursive>
 8004f52:	bf00      	nop
 8004f54:	200002ec 	.word	0x200002ec

08004f58 <__ssputs_r>:
 8004f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f5c:	688e      	ldr	r6, [r1, #8]
 8004f5e:	461f      	mov	r7, r3
 8004f60:	42be      	cmp	r6, r7
 8004f62:	680b      	ldr	r3, [r1, #0]
 8004f64:	4682      	mov	sl, r0
 8004f66:	460c      	mov	r4, r1
 8004f68:	4690      	mov	r8, r2
 8004f6a:	d82d      	bhi.n	8004fc8 <__ssputs_r+0x70>
 8004f6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004f74:	d026      	beq.n	8004fc4 <__ssputs_r+0x6c>
 8004f76:	6965      	ldr	r5, [r4, #20]
 8004f78:	6909      	ldr	r1, [r1, #16]
 8004f7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f7e:	eba3 0901 	sub.w	r9, r3, r1
 8004f82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f86:	1c7b      	adds	r3, r7, #1
 8004f88:	444b      	add	r3, r9
 8004f8a:	106d      	asrs	r5, r5, #1
 8004f8c:	429d      	cmp	r5, r3
 8004f8e:	bf38      	it	cc
 8004f90:	461d      	movcc	r5, r3
 8004f92:	0553      	lsls	r3, r2, #21
 8004f94:	d527      	bpl.n	8004fe6 <__ssputs_r+0x8e>
 8004f96:	4629      	mov	r1, r5
 8004f98:	f7ff ff52 	bl	8004e40 <_malloc_r>
 8004f9c:	4606      	mov	r6, r0
 8004f9e:	b360      	cbz	r0, 8004ffa <__ssputs_r+0xa2>
 8004fa0:	6921      	ldr	r1, [r4, #16]
 8004fa2:	464a      	mov	r2, r9
 8004fa4:	f000 fae8 	bl	8005578 <memcpy>
 8004fa8:	89a3      	ldrh	r3, [r4, #12]
 8004faa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fb2:	81a3      	strh	r3, [r4, #12]
 8004fb4:	6126      	str	r6, [r4, #16]
 8004fb6:	6165      	str	r5, [r4, #20]
 8004fb8:	444e      	add	r6, r9
 8004fba:	eba5 0509 	sub.w	r5, r5, r9
 8004fbe:	6026      	str	r6, [r4, #0]
 8004fc0:	60a5      	str	r5, [r4, #8]
 8004fc2:	463e      	mov	r6, r7
 8004fc4:	42be      	cmp	r6, r7
 8004fc6:	d900      	bls.n	8004fca <__ssputs_r+0x72>
 8004fc8:	463e      	mov	r6, r7
 8004fca:	6820      	ldr	r0, [r4, #0]
 8004fcc:	4632      	mov	r2, r6
 8004fce:	4641      	mov	r1, r8
 8004fd0:	f000 faa8 	bl	8005524 <memmove>
 8004fd4:	68a3      	ldr	r3, [r4, #8]
 8004fd6:	1b9b      	subs	r3, r3, r6
 8004fd8:	60a3      	str	r3, [r4, #8]
 8004fda:	6823      	ldr	r3, [r4, #0]
 8004fdc:	4433      	add	r3, r6
 8004fde:	6023      	str	r3, [r4, #0]
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fe6:	462a      	mov	r2, r5
 8004fe8:	f000 fad4 	bl	8005594 <_realloc_r>
 8004fec:	4606      	mov	r6, r0
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	d1e0      	bne.n	8004fb4 <__ssputs_r+0x5c>
 8004ff2:	6921      	ldr	r1, [r4, #16]
 8004ff4:	4650      	mov	r0, sl
 8004ff6:	f7ff feb7 	bl	8004d68 <_free_r>
 8004ffa:	230c      	movs	r3, #12
 8004ffc:	f8ca 3000 	str.w	r3, [sl]
 8005000:	89a3      	ldrh	r3, [r4, #12]
 8005002:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005006:	81a3      	strh	r3, [r4, #12]
 8005008:	f04f 30ff 	mov.w	r0, #4294967295
 800500c:	e7e9      	b.n	8004fe2 <__ssputs_r+0x8a>
	...

08005010 <_svfiprintf_r>:
 8005010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005014:	4698      	mov	r8, r3
 8005016:	898b      	ldrh	r3, [r1, #12]
 8005018:	061b      	lsls	r3, r3, #24
 800501a:	b09d      	sub	sp, #116	@ 0x74
 800501c:	4607      	mov	r7, r0
 800501e:	460d      	mov	r5, r1
 8005020:	4614      	mov	r4, r2
 8005022:	d510      	bpl.n	8005046 <_svfiprintf_r+0x36>
 8005024:	690b      	ldr	r3, [r1, #16]
 8005026:	b973      	cbnz	r3, 8005046 <_svfiprintf_r+0x36>
 8005028:	2140      	movs	r1, #64	@ 0x40
 800502a:	f7ff ff09 	bl	8004e40 <_malloc_r>
 800502e:	6028      	str	r0, [r5, #0]
 8005030:	6128      	str	r0, [r5, #16]
 8005032:	b930      	cbnz	r0, 8005042 <_svfiprintf_r+0x32>
 8005034:	230c      	movs	r3, #12
 8005036:	603b      	str	r3, [r7, #0]
 8005038:	f04f 30ff 	mov.w	r0, #4294967295
 800503c:	b01d      	add	sp, #116	@ 0x74
 800503e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005042:	2340      	movs	r3, #64	@ 0x40
 8005044:	616b      	str	r3, [r5, #20]
 8005046:	2300      	movs	r3, #0
 8005048:	9309      	str	r3, [sp, #36]	@ 0x24
 800504a:	2320      	movs	r3, #32
 800504c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005050:	f8cd 800c 	str.w	r8, [sp, #12]
 8005054:	2330      	movs	r3, #48	@ 0x30
 8005056:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80051f4 <_svfiprintf_r+0x1e4>
 800505a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800505e:	f04f 0901 	mov.w	r9, #1
 8005062:	4623      	mov	r3, r4
 8005064:	469a      	mov	sl, r3
 8005066:	f813 2b01 	ldrb.w	r2, [r3], #1
 800506a:	b10a      	cbz	r2, 8005070 <_svfiprintf_r+0x60>
 800506c:	2a25      	cmp	r2, #37	@ 0x25
 800506e:	d1f9      	bne.n	8005064 <_svfiprintf_r+0x54>
 8005070:	ebba 0b04 	subs.w	fp, sl, r4
 8005074:	d00b      	beq.n	800508e <_svfiprintf_r+0x7e>
 8005076:	465b      	mov	r3, fp
 8005078:	4622      	mov	r2, r4
 800507a:	4629      	mov	r1, r5
 800507c:	4638      	mov	r0, r7
 800507e:	f7ff ff6b 	bl	8004f58 <__ssputs_r>
 8005082:	3001      	adds	r0, #1
 8005084:	f000 80a7 	beq.w	80051d6 <_svfiprintf_r+0x1c6>
 8005088:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800508a:	445a      	add	r2, fp
 800508c:	9209      	str	r2, [sp, #36]	@ 0x24
 800508e:	f89a 3000 	ldrb.w	r3, [sl]
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 809f 	beq.w	80051d6 <_svfiprintf_r+0x1c6>
 8005098:	2300      	movs	r3, #0
 800509a:	f04f 32ff 	mov.w	r2, #4294967295
 800509e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050a2:	f10a 0a01 	add.w	sl, sl, #1
 80050a6:	9304      	str	r3, [sp, #16]
 80050a8:	9307      	str	r3, [sp, #28]
 80050aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80050b0:	4654      	mov	r4, sl
 80050b2:	2205      	movs	r2, #5
 80050b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050b8:	484e      	ldr	r0, [pc, #312]	@ (80051f4 <_svfiprintf_r+0x1e4>)
 80050ba:	f7fb f891 	bl	80001e0 <memchr>
 80050be:	9a04      	ldr	r2, [sp, #16]
 80050c0:	b9d8      	cbnz	r0, 80050fa <_svfiprintf_r+0xea>
 80050c2:	06d0      	lsls	r0, r2, #27
 80050c4:	bf44      	itt	mi
 80050c6:	2320      	movmi	r3, #32
 80050c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050cc:	0711      	lsls	r1, r2, #28
 80050ce:	bf44      	itt	mi
 80050d0:	232b      	movmi	r3, #43	@ 0x2b
 80050d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050d6:	f89a 3000 	ldrb.w	r3, [sl]
 80050da:	2b2a      	cmp	r3, #42	@ 0x2a
 80050dc:	d015      	beq.n	800510a <_svfiprintf_r+0xfa>
 80050de:	9a07      	ldr	r2, [sp, #28]
 80050e0:	4654      	mov	r4, sl
 80050e2:	2000      	movs	r0, #0
 80050e4:	f04f 0c0a 	mov.w	ip, #10
 80050e8:	4621      	mov	r1, r4
 80050ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050ee:	3b30      	subs	r3, #48	@ 0x30
 80050f0:	2b09      	cmp	r3, #9
 80050f2:	d94b      	bls.n	800518c <_svfiprintf_r+0x17c>
 80050f4:	b1b0      	cbz	r0, 8005124 <_svfiprintf_r+0x114>
 80050f6:	9207      	str	r2, [sp, #28]
 80050f8:	e014      	b.n	8005124 <_svfiprintf_r+0x114>
 80050fa:	eba0 0308 	sub.w	r3, r0, r8
 80050fe:	fa09 f303 	lsl.w	r3, r9, r3
 8005102:	4313      	orrs	r3, r2
 8005104:	9304      	str	r3, [sp, #16]
 8005106:	46a2      	mov	sl, r4
 8005108:	e7d2      	b.n	80050b0 <_svfiprintf_r+0xa0>
 800510a:	9b03      	ldr	r3, [sp, #12]
 800510c:	1d19      	adds	r1, r3, #4
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	9103      	str	r1, [sp, #12]
 8005112:	2b00      	cmp	r3, #0
 8005114:	bfbb      	ittet	lt
 8005116:	425b      	neglt	r3, r3
 8005118:	f042 0202 	orrlt.w	r2, r2, #2
 800511c:	9307      	strge	r3, [sp, #28]
 800511e:	9307      	strlt	r3, [sp, #28]
 8005120:	bfb8      	it	lt
 8005122:	9204      	strlt	r2, [sp, #16]
 8005124:	7823      	ldrb	r3, [r4, #0]
 8005126:	2b2e      	cmp	r3, #46	@ 0x2e
 8005128:	d10a      	bne.n	8005140 <_svfiprintf_r+0x130>
 800512a:	7863      	ldrb	r3, [r4, #1]
 800512c:	2b2a      	cmp	r3, #42	@ 0x2a
 800512e:	d132      	bne.n	8005196 <_svfiprintf_r+0x186>
 8005130:	9b03      	ldr	r3, [sp, #12]
 8005132:	1d1a      	adds	r2, r3, #4
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	9203      	str	r2, [sp, #12]
 8005138:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800513c:	3402      	adds	r4, #2
 800513e:	9305      	str	r3, [sp, #20]
 8005140:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005204 <_svfiprintf_r+0x1f4>
 8005144:	7821      	ldrb	r1, [r4, #0]
 8005146:	2203      	movs	r2, #3
 8005148:	4650      	mov	r0, sl
 800514a:	f7fb f849 	bl	80001e0 <memchr>
 800514e:	b138      	cbz	r0, 8005160 <_svfiprintf_r+0x150>
 8005150:	9b04      	ldr	r3, [sp, #16]
 8005152:	eba0 000a 	sub.w	r0, r0, sl
 8005156:	2240      	movs	r2, #64	@ 0x40
 8005158:	4082      	lsls	r2, r0
 800515a:	4313      	orrs	r3, r2
 800515c:	3401      	adds	r4, #1
 800515e:	9304      	str	r3, [sp, #16]
 8005160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005164:	4824      	ldr	r0, [pc, #144]	@ (80051f8 <_svfiprintf_r+0x1e8>)
 8005166:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800516a:	2206      	movs	r2, #6
 800516c:	f7fb f838 	bl	80001e0 <memchr>
 8005170:	2800      	cmp	r0, #0
 8005172:	d036      	beq.n	80051e2 <_svfiprintf_r+0x1d2>
 8005174:	4b21      	ldr	r3, [pc, #132]	@ (80051fc <_svfiprintf_r+0x1ec>)
 8005176:	bb1b      	cbnz	r3, 80051c0 <_svfiprintf_r+0x1b0>
 8005178:	9b03      	ldr	r3, [sp, #12]
 800517a:	3307      	adds	r3, #7
 800517c:	f023 0307 	bic.w	r3, r3, #7
 8005180:	3308      	adds	r3, #8
 8005182:	9303      	str	r3, [sp, #12]
 8005184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005186:	4433      	add	r3, r6
 8005188:	9309      	str	r3, [sp, #36]	@ 0x24
 800518a:	e76a      	b.n	8005062 <_svfiprintf_r+0x52>
 800518c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005190:	460c      	mov	r4, r1
 8005192:	2001      	movs	r0, #1
 8005194:	e7a8      	b.n	80050e8 <_svfiprintf_r+0xd8>
 8005196:	2300      	movs	r3, #0
 8005198:	3401      	adds	r4, #1
 800519a:	9305      	str	r3, [sp, #20]
 800519c:	4619      	mov	r1, r3
 800519e:	f04f 0c0a 	mov.w	ip, #10
 80051a2:	4620      	mov	r0, r4
 80051a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051a8:	3a30      	subs	r2, #48	@ 0x30
 80051aa:	2a09      	cmp	r2, #9
 80051ac:	d903      	bls.n	80051b6 <_svfiprintf_r+0x1a6>
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0c6      	beq.n	8005140 <_svfiprintf_r+0x130>
 80051b2:	9105      	str	r1, [sp, #20]
 80051b4:	e7c4      	b.n	8005140 <_svfiprintf_r+0x130>
 80051b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80051ba:	4604      	mov	r4, r0
 80051bc:	2301      	movs	r3, #1
 80051be:	e7f0      	b.n	80051a2 <_svfiprintf_r+0x192>
 80051c0:	ab03      	add	r3, sp, #12
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	462a      	mov	r2, r5
 80051c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005200 <_svfiprintf_r+0x1f0>)
 80051c8:	a904      	add	r1, sp, #16
 80051ca:	4638      	mov	r0, r7
 80051cc:	f3af 8000 	nop.w
 80051d0:	1c42      	adds	r2, r0, #1
 80051d2:	4606      	mov	r6, r0
 80051d4:	d1d6      	bne.n	8005184 <_svfiprintf_r+0x174>
 80051d6:	89ab      	ldrh	r3, [r5, #12]
 80051d8:	065b      	lsls	r3, r3, #25
 80051da:	f53f af2d 	bmi.w	8005038 <_svfiprintf_r+0x28>
 80051de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80051e0:	e72c      	b.n	800503c <_svfiprintf_r+0x2c>
 80051e2:	ab03      	add	r3, sp, #12
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	462a      	mov	r2, r5
 80051e8:	4b05      	ldr	r3, [pc, #20]	@ (8005200 <_svfiprintf_r+0x1f0>)
 80051ea:	a904      	add	r1, sp, #16
 80051ec:	4638      	mov	r0, r7
 80051ee:	f000 f879 	bl	80052e4 <_printf_i>
 80051f2:	e7ed      	b.n	80051d0 <_svfiprintf_r+0x1c0>
 80051f4:	08005684 	.word	0x08005684
 80051f8:	0800568e 	.word	0x0800568e
 80051fc:	00000000 	.word	0x00000000
 8005200:	08004f59 	.word	0x08004f59
 8005204:	0800568a 	.word	0x0800568a

08005208 <_printf_common>:
 8005208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800520c:	4616      	mov	r6, r2
 800520e:	4698      	mov	r8, r3
 8005210:	688a      	ldr	r2, [r1, #8]
 8005212:	690b      	ldr	r3, [r1, #16]
 8005214:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005218:	4293      	cmp	r3, r2
 800521a:	bfb8      	it	lt
 800521c:	4613      	movlt	r3, r2
 800521e:	6033      	str	r3, [r6, #0]
 8005220:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005224:	4607      	mov	r7, r0
 8005226:	460c      	mov	r4, r1
 8005228:	b10a      	cbz	r2, 800522e <_printf_common+0x26>
 800522a:	3301      	adds	r3, #1
 800522c:	6033      	str	r3, [r6, #0]
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	0699      	lsls	r1, r3, #26
 8005232:	bf42      	ittt	mi
 8005234:	6833      	ldrmi	r3, [r6, #0]
 8005236:	3302      	addmi	r3, #2
 8005238:	6033      	strmi	r3, [r6, #0]
 800523a:	6825      	ldr	r5, [r4, #0]
 800523c:	f015 0506 	ands.w	r5, r5, #6
 8005240:	d106      	bne.n	8005250 <_printf_common+0x48>
 8005242:	f104 0a19 	add.w	sl, r4, #25
 8005246:	68e3      	ldr	r3, [r4, #12]
 8005248:	6832      	ldr	r2, [r6, #0]
 800524a:	1a9b      	subs	r3, r3, r2
 800524c:	42ab      	cmp	r3, r5
 800524e:	dc26      	bgt.n	800529e <_printf_common+0x96>
 8005250:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005254:	6822      	ldr	r2, [r4, #0]
 8005256:	3b00      	subs	r3, #0
 8005258:	bf18      	it	ne
 800525a:	2301      	movne	r3, #1
 800525c:	0692      	lsls	r2, r2, #26
 800525e:	d42b      	bmi.n	80052b8 <_printf_common+0xb0>
 8005260:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005264:	4641      	mov	r1, r8
 8005266:	4638      	mov	r0, r7
 8005268:	47c8      	blx	r9
 800526a:	3001      	adds	r0, #1
 800526c:	d01e      	beq.n	80052ac <_printf_common+0xa4>
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	6922      	ldr	r2, [r4, #16]
 8005272:	f003 0306 	and.w	r3, r3, #6
 8005276:	2b04      	cmp	r3, #4
 8005278:	bf02      	ittt	eq
 800527a:	68e5      	ldreq	r5, [r4, #12]
 800527c:	6833      	ldreq	r3, [r6, #0]
 800527e:	1aed      	subeq	r5, r5, r3
 8005280:	68a3      	ldr	r3, [r4, #8]
 8005282:	bf0c      	ite	eq
 8005284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005288:	2500      	movne	r5, #0
 800528a:	4293      	cmp	r3, r2
 800528c:	bfc4      	itt	gt
 800528e:	1a9b      	subgt	r3, r3, r2
 8005290:	18ed      	addgt	r5, r5, r3
 8005292:	2600      	movs	r6, #0
 8005294:	341a      	adds	r4, #26
 8005296:	42b5      	cmp	r5, r6
 8005298:	d11a      	bne.n	80052d0 <_printf_common+0xc8>
 800529a:	2000      	movs	r0, #0
 800529c:	e008      	b.n	80052b0 <_printf_common+0xa8>
 800529e:	2301      	movs	r3, #1
 80052a0:	4652      	mov	r2, sl
 80052a2:	4641      	mov	r1, r8
 80052a4:	4638      	mov	r0, r7
 80052a6:	47c8      	blx	r9
 80052a8:	3001      	adds	r0, #1
 80052aa:	d103      	bne.n	80052b4 <_printf_common+0xac>
 80052ac:	f04f 30ff 	mov.w	r0, #4294967295
 80052b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b4:	3501      	adds	r5, #1
 80052b6:	e7c6      	b.n	8005246 <_printf_common+0x3e>
 80052b8:	18e1      	adds	r1, r4, r3
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	2030      	movs	r0, #48	@ 0x30
 80052be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052c2:	4422      	add	r2, r4
 80052c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80052c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80052cc:	3302      	adds	r3, #2
 80052ce:	e7c7      	b.n	8005260 <_printf_common+0x58>
 80052d0:	2301      	movs	r3, #1
 80052d2:	4622      	mov	r2, r4
 80052d4:	4641      	mov	r1, r8
 80052d6:	4638      	mov	r0, r7
 80052d8:	47c8      	blx	r9
 80052da:	3001      	adds	r0, #1
 80052dc:	d0e6      	beq.n	80052ac <_printf_common+0xa4>
 80052de:	3601      	adds	r6, #1
 80052e0:	e7d9      	b.n	8005296 <_printf_common+0x8e>
	...

080052e4 <_printf_i>:
 80052e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052e8:	7e0f      	ldrb	r7, [r1, #24]
 80052ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80052ec:	2f78      	cmp	r7, #120	@ 0x78
 80052ee:	4691      	mov	r9, r2
 80052f0:	4680      	mov	r8, r0
 80052f2:	460c      	mov	r4, r1
 80052f4:	469a      	mov	sl, r3
 80052f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80052fa:	d807      	bhi.n	800530c <_printf_i+0x28>
 80052fc:	2f62      	cmp	r7, #98	@ 0x62
 80052fe:	d80a      	bhi.n	8005316 <_printf_i+0x32>
 8005300:	2f00      	cmp	r7, #0
 8005302:	f000 80d2 	beq.w	80054aa <_printf_i+0x1c6>
 8005306:	2f58      	cmp	r7, #88	@ 0x58
 8005308:	f000 80b9 	beq.w	800547e <_printf_i+0x19a>
 800530c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005310:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005314:	e03a      	b.n	800538c <_printf_i+0xa8>
 8005316:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800531a:	2b15      	cmp	r3, #21
 800531c:	d8f6      	bhi.n	800530c <_printf_i+0x28>
 800531e:	a101      	add	r1, pc, #4	@ (adr r1, 8005324 <_printf_i+0x40>)
 8005320:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005324:	0800537d 	.word	0x0800537d
 8005328:	08005391 	.word	0x08005391
 800532c:	0800530d 	.word	0x0800530d
 8005330:	0800530d 	.word	0x0800530d
 8005334:	0800530d 	.word	0x0800530d
 8005338:	0800530d 	.word	0x0800530d
 800533c:	08005391 	.word	0x08005391
 8005340:	0800530d 	.word	0x0800530d
 8005344:	0800530d 	.word	0x0800530d
 8005348:	0800530d 	.word	0x0800530d
 800534c:	0800530d 	.word	0x0800530d
 8005350:	08005491 	.word	0x08005491
 8005354:	080053bb 	.word	0x080053bb
 8005358:	0800544b 	.word	0x0800544b
 800535c:	0800530d 	.word	0x0800530d
 8005360:	0800530d 	.word	0x0800530d
 8005364:	080054b3 	.word	0x080054b3
 8005368:	0800530d 	.word	0x0800530d
 800536c:	080053bb 	.word	0x080053bb
 8005370:	0800530d 	.word	0x0800530d
 8005374:	0800530d 	.word	0x0800530d
 8005378:	08005453 	.word	0x08005453
 800537c:	6833      	ldr	r3, [r6, #0]
 800537e:	1d1a      	adds	r2, r3, #4
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6032      	str	r2, [r6, #0]
 8005384:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005388:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800538c:	2301      	movs	r3, #1
 800538e:	e09d      	b.n	80054cc <_printf_i+0x1e8>
 8005390:	6833      	ldr	r3, [r6, #0]
 8005392:	6820      	ldr	r0, [r4, #0]
 8005394:	1d19      	adds	r1, r3, #4
 8005396:	6031      	str	r1, [r6, #0]
 8005398:	0606      	lsls	r6, r0, #24
 800539a:	d501      	bpl.n	80053a0 <_printf_i+0xbc>
 800539c:	681d      	ldr	r5, [r3, #0]
 800539e:	e003      	b.n	80053a8 <_printf_i+0xc4>
 80053a0:	0645      	lsls	r5, r0, #25
 80053a2:	d5fb      	bpl.n	800539c <_printf_i+0xb8>
 80053a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053a8:	2d00      	cmp	r5, #0
 80053aa:	da03      	bge.n	80053b4 <_printf_i+0xd0>
 80053ac:	232d      	movs	r3, #45	@ 0x2d
 80053ae:	426d      	negs	r5, r5
 80053b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053b4:	4859      	ldr	r0, [pc, #356]	@ (800551c <_printf_i+0x238>)
 80053b6:	230a      	movs	r3, #10
 80053b8:	e011      	b.n	80053de <_printf_i+0xfa>
 80053ba:	6821      	ldr	r1, [r4, #0]
 80053bc:	6833      	ldr	r3, [r6, #0]
 80053be:	0608      	lsls	r0, r1, #24
 80053c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80053c4:	d402      	bmi.n	80053cc <_printf_i+0xe8>
 80053c6:	0649      	lsls	r1, r1, #25
 80053c8:	bf48      	it	mi
 80053ca:	b2ad      	uxthmi	r5, r5
 80053cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80053ce:	4853      	ldr	r0, [pc, #332]	@ (800551c <_printf_i+0x238>)
 80053d0:	6033      	str	r3, [r6, #0]
 80053d2:	bf14      	ite	ne
 80053d4:	230a      	movne	r3, #10
 80053d6:	2308      	moveq	r3, #8
 80053d8:	2100      	movs	r1, #0
 80053da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80053de:	6866      	ldr	r6, [r4, #4]
 80053e0:	60a6      	str	r6, [r4, #8]
 80053e2:	2e00      	cmp	r6, #0
 80053e4:	bfa2      	ittt	ge
 80053e6:	6821      	ldrge	r1, [r4, #0]
 80053e8:	f021 0104 	bicge.w	r1, r1, #4
 80053ec:	6021      	strge	r1, [r4, #0]
 80053ee:	b90d      	cbnz	r5, 80053f4 <_printf_i+0x110>
 80053f0:	2e00      	cmp	r6, #0
 80053f2:	d04b      	beq.n	800548c <_printf_i+0x1a8>
 80053f4:	4616      	mov	r6, r2
 80053f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80053fa:	fb03 5711 	mls	r7, r3, r1, r5
 80053fe:	5dc7      	ldrb	r7, [r0, r7]
 8005400:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005404:	462f      	mov	r7, r5
 8005406:	42bb      	cmp	r3, r7
 8005408:	460d      	mov	r5, r1
 800540a:	d9f4      	bls.n	80053f6 <_printf_i+0x112>
 800540c:	2b08      	cmp	r3, #8
 800540e:	d10b      	bne.n	8005428 <_printf_i+0x144>
 8005410:	6823      	ldr	r3, [r4, #0]
 8005412:	07df      	lsls	r7, r3, #31
 8005414:	d508      	bpl.n	8005428 <_printf_i+0x144>
 8005416:	6923      	ldr	r3, [r4, #16]
 8005418:	6861      	ldr	r1, [r4, #4]
 800541a:	4299      	cmp	r1, r3
 800541c:	bfde      	ittt	le
 800541e:	2330      	movle	r3, #48	@ 0x30
 8005420:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005424:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005428:	1b92      	subs	r2, r2, r6
 800542a:	6122      	str	r2, [r4, #16]
 800542c:	f8cd a000 	str.w	sl, [sp]
 8005430:	464b      	mov	r3, r9
 8005432:	aa03      	add	r2, sp, #12
 8005434:	4621      	mov	r1, r4
 8005436:	4640      	mov	r0, r8
 8005438:	f7ff fee6 	bl	8005208 <_printf_common>
 800543c:	3001      	adds	r0, #1
 800543e:	d14a      	bne.n	80054d6 <_printf_i+0x1f2>
 8005440:	f04f 30ff 	mov.w	r0, #4294967295
 8005444:	b004      	add	sp, #16
 8005446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	f043 0320 	orr.w	r3, r3, #32
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	4833      	ldr	r0, [pc, #204]	@ (8005520 <_printf_i+0x23c>)
 8005454:	2778      	movs	r7, #120	@ 0x78
 8005456:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	6831      	ldr	r1, [r6, #0]
 800545e:	061f      	lsls	r7, r3, #24
 8005460:	f851 5b04 	ldr.w	r5, [r1], #4
 8005464:	d402      	bmi.n	800546c <_printf_i+0x188>
 8005466:	065f      	lsls	r7, r3, #25
 8005468:	bf48      	it	mi
 800546a:	b2ad      	uxthmi	r5, r5
 800546c:	6031      	str	r1, [r6, #0]
 800546e:	07d9      	lsls	r1, r3, #31
 8005470:	bf44      	itt	mi
 8005472:	f043 0320 	orrmi.w	r3, r3, #32
 8005476:	6023      	strmi	r3, [r4, #0]
 8005478:	b11d      	cbz	r5, 8005482 <_printf_i+0x19e>
 800547a:	2310      	movs	r3, #16
 800547c:	e7ac      	b.n	80053d8 <_printf_i+0xf4>
 800547e:	4827      	ldr	r0, [pc, #156]	@ (800551c <_printf_i+0x238>)
 8005480:	e7e9      	b.n	8005456 <_printf_i+0x172>
 8005482:	6823      	ldr	r3, [r4, #0]
 8005484:	f023 0320 	bic.w	r3, r3, #32
 8005488:	6023      	str	r3, [r4, #0]
 800548a:	e7f6      	b.n	800547a <_printf_i+0x196>
 800548c:	4616      	mov	r6, r2
 800548e:	e7bd      	b.n	800540c <_printf_i+0x128>
 8005490:	6833      	ldr	r3, [r6, #0]
 8005492:	6825      	ldr	r5, [r4, #0]
 8005494:	6961      	ldr	r1, [r4, #20]
 8005496:	1d18      	adds	r0, r3, #4
 8005498:	6030      	str	r0, [r6, #0]
 800549a:	062e      	lsls	r6, r5, #24
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	d501      	bpl.n	80054a4 <_printf_i+0x1c0>
 80054a0:	6019      	str	r1, [r3, #0]
 80054a2:	e002      	b.n	80054aa <_printf_i+0x1c6>
 80054a4:	0668      	lsls	r0, r5, #25
 80054a6:	d5fb      	bpl.n	80054a0 <_printf_i+0x1bc>
 80054a8:	8019      	strh	r1, [r3, #0]
 80054aa:	2300      	movs	r3, #0
 80054ac:	6123      	str	r3, [r4, #16]
 80054ae:	4616      	mov	r6, r2
 80054b0:	e7bc      	b.n	800542c <_printf_i+0x148>
 80054b2:	6833      	ldr	r3, [r6, #0]
 80054b4:	1d1a      	adds	r2, r3, #4
 80054b6:	6032      	str	r2, [r6, #0]
 80054b8:	681e      	ldr	r6, [r3, #0]
 80054ba:	6862      	ldr	r2, [r4, #4]
 80054bc:	2100      	movs	r1, #0
 80054be:	4630      	mov	r0, r6
 80054c0:	f7fa fe8e 	bl	80001e0 <memchr>
 80054c4:	b108      	cbz	r0, 80054ca <_printf_i+0x1e6>
 80054c6:	1b80      	subs	r0, r0, r6
 80054c8:	6060      	str	r0, [r4, #4]
 80054ca:	6863      	ldr	r3, [r4, #4]
 80054cc:	6123      	str	r3, [r4, #16]
 80054ce:	2300      	movs	r3, #0
 80054d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054d4:	e7aa      	b.n	800542c <_printf_i+0x148>
 80054d6:	6923      	ldr	r3, [r4, #16]
 80054d8:	4632      	mov	r2, r6
 80054da:	4649      	mov	r1, r9
 80054dc:	4640      	mov	r0, r8
 80054de:	47d0      	blx	sl
 80054e0:	3001      	adds	r0, #1
 80054e2:	d0ad      	beq.n	8005440 <_printf_i+0x15c>
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	079b      	lsls	r3, r3, #30
 80054e8:	d413      	bmi.n	8005512 <_printf_i+0x22e>
 80054ea:	68e0      	ldr	r0, [r4, #12]
 80054ec:	9b03      	ldr	r3, [sp, #12]
 80054ee:	4298      	cmp	r0, r3
 80054f0:	bfb8      	it	lt
 80054f2:	4618      	movlt	r0, r3
 80054f4:	e7a6      	b.n	8005444 <_printf_i+0x160>
 80054f6:	2301      	movs	r3, #1
 80054f8:	4632      	mov	r2, r6
 80054fa:	4649      	mov	r1, r9
 80054fc:	4640      	mov	r0, r8
 80054fe:	47d0      	blx	sl
 8005500:	3001      	adds	r0, #1
 8005502:	d09d      	beq.n	8005440 <_printf_i+0x15c>
 8005504:	3501      	adds	r5, #1
 8005506:	68e3      	ldr	r3, [r4, #12]
 8005508:	9903      	ldr	r1, [sp, #12]
 800550a:	1a5b      	subs	r3, r3, r1
 800550c:	42ab      	cmp	r3, r5
 800550e:	dcf2      	bgt.n	80054f6 <_printf_i+0x212>
 8005510:	e7eb      	b.n	80054ea <_printf_i+0x206>
 8005512:	2500      	movs	r5, #0
 8005514:	f104 0619 	add.w	r6, r4, #25
 8005518:	e7f5      	b.n	8005506 <_printf_i+0x222>
 800551a:	bf00      	nop
 800551c:	08005695 	.word	0x08005695
 8005520:	080056a6 	.word	0x080056a6

08005524 <memmove>:
 8005524:	4288      	cmp	r0, r1
 8005526:	b510      	push	{r4, lr}
 8005528:	eb01 0402 	add.w	r4, r1, r2
 800552c:	d902      	bls.n	8005534 <memmove+0x10>
 800552e:	4284      	cmp	r4, r0
 8005530:	4623      	mov	r3, r4
 8005532:	d807      	bhi.n	8005544 <memmove+0x20>
 8005534:	1e43      	subs	r3, r0, #1
 8005536:	42a1      	cmp	r1, r4
 8005538:	d008      	beq.n	800554c <memmove+0x28>
 800553a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800553e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005542:	e7f8      	b.n	8005536 <memmove+0x12>
 8005544:	4402      	add	r2, r0
 8005546:	4601      	mov	r1, r0
 8005548:	428a      	cmp	r2, r1
 800554a:	d100      	bne.n	800554e <memmove+0x2a>
 800554c:	bd10      	pop	{r4, pc}
 800554e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005552:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005556:	e7f7      	b.n	8005548 <memmove+0x24>

08005558 <_sbrk_r>:
 8005558:	b538      	push	{r3, r4, r5, lr}
 800555a:	4d06      	ldr	r5, [pc, #24]	@ (8005574 <_sbrk_r+0x1c>)
 800555c:	2300      	movs	r3, #0
 800555e:	4604      	mov	r4, r0
 8005560:	4608      	mov	r0, r1
 8005562:	602b      	str	r3, [r5, #0]
 8005564:	f7fb fab0 	bl	8000ac8 <_sbrk>
 8005568:	1c43      	adds	r3, r0, #1
 800556a:	d102      	bne.n	8005572 <_sbrk_r+0x1a>
 800556c:	682b      	ldr	r3, [r5, #0]
 800556e:	b103      	cbz	r3, 8005572 <_sbrk_r+0x1a>
 8005570:	6023      	str	r3, [r4, #0]
 8005572:	bd38      	pop	{r3, r4, r5, pc}
 8005574:	200002e8 	.word	0x200002e8

08005578 <memcpy>:
 8005578:	440a      	add	r2, r1
 800557a:	4291      	cmp	r1, r2
 800557c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005580:	d100      	bne.n	8005584 <memcpy+0xc>
 8005582:	4770      	bx	lr
 8005584:	b510      	push	{r4, lr}
 8005586:	f811 4b01 	ldrb.w	r4, [r1], #1
 800558a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800558e:	4291      	cmp	r1, r2
 8005590:	d1f9      	bne.n	8005586 <memcpy+0xe>
 8005592:	bd10      	pop	{r4, pc}

08005594 <_realloc_r>:
 8005594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005598:	4680      	mov	r8, r0
 800559a:	4615      	mov	r5, r2
 800559c:	460c      	mov	r4, r1
 800559e:	b921      	cbnz	r1, 80055aa <_realloc_r+0x16>
 80055a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055a4:	4611      	mov	r1, r2
 80055a6:	f7ff bc4b 	b.w	8004e40 <_malloc_r>
 80055aa:	b92a      	cbnz	r2, 80055b8 <_realloc_r+0x24>
 80055ac:	f7ff fbdc 	bl	8004d68 <_free_r>
 80055b0:	2400      	movs	r4, #0
 80055b2:	4620      	mov	r0, r4
 80055b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055b8:	f000 f81a 	bl	80055f0 <_malloc_usable_size_r>
 80055bc:	4285      	cmp	r5, r0
 80055be:	4606      	mov	r6, r0
 80055c0:	d802      	bhi.n	80055c8 <_realloc_r+0x34>
 80055c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80055c6:	d8f4      	bhi.n	80055b2 <_realloc_r+0x1e>
 80055c8:	4629      	mov	r1, r5
 80055ca:	4640      	mov	r0, r8
 80055cc:	f7ff fc38 	bl	8004e40 <_malloc_r>
 80055d0:	4607      	mov	r7, r0
 80055d2:	2800      	cmp	r0, #0
 80055d4:	d0ec      	beq.n	80055b0 <_realloc_r+0x1c>
 80055d6:	42b5      	cmp	r5, r6
 80055d8:	462a      	mov	r2, r5
 80055da:	4621      	mov	r1, r4
 80055dc:	bf28      	it	cs
 80055de:	4632      	movcs	r2, r6
 80055e0:	f7ff ffca 	bl	8005578 <memcpy>
 80055e4:	4621      	mov	r1, r4
 80055e6:	4640      	mov	r0, r8
 80055e8:	f7ff fbbe 	bl	8004d68 <_free_r>
 80055ec:	463c      	mov	r4, r7
 80055ee:	e7e0      	b.n	80055b2 <_realloc_r+0x1e>

080055f0 <_malloc_usable_size_r>:
 80055f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055f4:	1f18      	subs	r0, r3, #4
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	bfbc      	itt	lt
 80055fa:	580b      	ldrlt	r3, [r1, r0]
 80055fc:	18c0      	addlt	r0, r0, r3
 80055fe:	4770      	bx	lr

08005600 <_init>:
 8005600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005602:	bf00      	nop
 8005604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005606:	bc08      	pop	{r3}
 8005608:	469e      	mov	lr, r3
 800560a:	4770      	bx	lr

0800560c <_fini>:
 800560c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560e:	bf00      	nop
 8005610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005612:	bc08      	pop	{r3}
 8005614:	469e      	mov	lr, r3
 8005616:	4770      	bx	lr
